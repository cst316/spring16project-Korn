diff --git a/src/net/sf/memoranda/CurrentNote.java b/src/net/sf/memoranda/CurrentNote.java
index b62e4f1..ab07192 100755
--- a/src/net/sf/memoranda/CurrentNote.java
+++ b/src/net/sf/memoranda/CurrentNote.java
@@ -5,8 +5,8 @@ import java.util.Vector;
 
 public class CurrentNote {
 
-	private static Note currentNote = null;
-	
+    private static Note currentNote = null;
+
     private static Vector<NoteListener> noteListeners = new Vector<NoteListener>();
 
     public static Note get() {
@@ -19,7 +19,7 @@ public class CurrentNote {
     }
 
     public static void reset() {
-//    	 set toSave to true to mimic status quo behaviour only. the appropriate setting could be false
+        // set toSave to true to mimic status quo behaviour only. the appropriate setting could be false
         set(null, true);
     }
 
@@ -33,7 +33,7 @@ public class CurrentNote {
 
     private static void noteChanged(Note note, boolean toSaveCurrentNote) {
         for (int i = 0; i < noteListeners.size(); i++) {
-            ((NoteListener)noteListeners.get(i)).noteChange(note,toSaveCurrentNote);
-		}
+            ((NoteListener) noteListeners.get(i)).noteChange(note, toSaveCurrentNote);
+        }
     }
 }
diff --git a/src/net/sf/memoranda/CurrentProject.java b/src/net/sf/memoranda/CurrentProject.java
index e0221e7..0d0170f 100755
--- a/src/net/sf/memoranda/CurrentProject.java
+++ b/src/net/sf/memoranda/CurrentProject.java
@@ -1,18 +1,12 @@
 /**
-
  * CurrentProject.java
  * Created on 13.02.2003, 13:16:52 Alex
  * Package: net.sf.memoranda
  *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
- *
  */
 package net.sf.memoranda;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.Collection;
-import java.util.Vector;
 
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.ui.AppFrame;
@@ -20,6 +14,11 @@ import net.sf.memoranda.util.Context;
 import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Storage;
 
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Collection;
+import java.util.Vector;
+
 /**
  *
  */
@@ -32,58 +31,61 @@ public class CurrentProject {
     private static ResourcesList _resources = null;
     private static Vector projectListeners = new Vector();
 
-        
+
     static {
-        String prjId = (String)Context.get("LAST_OPENED_PROJECT_ID");
+        String prjId = (String) Context.get("LAST_OPENED_PROJECT_ID");
         if (prjId == null) {
             prjId = "__default";
             Context.put("LAST_OPENED_PROJECT_ID", prjId);
         }
         //ProjectManager.init();
         _project = ProjectManager.getProject(prjId);
-		
-		if (_project == null) {
-			// alexeya: Fixed bug with NullPointer when LAST_OPENED_PROJECT_ID
-			// references to missing project
-			_project = ProjectManager.getProject("__default");
-			if (_project == null) {
-				_project = (Project)ProjectManager.getActiveProjects().get(0);
-				if(_project == null)
-					ProjectManager.createProject("Default Project", CalendarDate.today(), null);
-			}
+
+        if (_project == null) {
+            // alexeya: Fixed bug with NullPointer when LAST_OPENED_PROJECT_ID
+            // references to missing project
+            _project = ProjectManager.getProject("__default");
+            if (_project == null) {
+                _project = (Project) ProjectManager.getActiveProjects().get(0);
+                if (_project == null) {
+                    ProjectManager.createProject("Default Project", CalendarDate.today(), null);
+                }
+            }
             Context.put("LAST_OPENED_PROJECT_ID", _project.getID());
-			
-		}		
-		
+
+        }
+
         _tasklist = CurrentStorage.get().openTaskList(_project);
         _notelist = CurrentStorage.get().openNoteList(_project);
         _resources = CurrentStorage.get().openResourcesList(_project);
         AppFrame.addExitListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                save();                                               
+                save();
             }
         });
     }
-        
+
 
     public static Project get() {
         return _project;
     }
 
     public static TaskList getTaskList() {
-            return _tasklist;
+        return _tasklist;
     }
 
     public static NoteList getNoteList() {
-            return _notelist;
+        return _notelist;
     }
-    
+
     public static ResourcesList getResourcesList() {
-            return _resources;
+        return _resources;
     }
 
     public static void set(Project project) {
-        if (project.getID().equals(_project.getID())) return;
+        if (project.getID().equals(_project.getID())) {
+            return;
+        }
         TaskList newtasklist = CurrentStorage.get().openTaskList(project);
         NoteList newnotelist = CurrentStorage.get().openNoteList(project);
         ResourcesList newresources = CurrentStorage.get().openResourcesList(project);
@@ -106,14 +108,14 @@ public class CurrentProject {
 
     private static void notifyListenersBefore(Project project, NoteList nl, TaskList tl, ResourcesList rl) {
         for (int i = 0; i < projectListeners.size(); i++) {
-            ((ProjectListener)projectListeners.get(i)).projectChange(project, nl, tl, rl);
+            ((ProjectListener) projectListeners.get(i)).projectChange(project, nl, tl, rl);
             /*DEBUGSystem.out.println(projectListeners.get(i));*/
         }
     }
-    
+
     private static void notifyListenersAfter() {
         for (int i = 0; i < projectListeners.size(); i++) {
-            ((ProjectListener)projectListeners.get(i)).projectWasChanged();            
+            ((ProjectListener) projectListeners.get(i)).projectWasChanged();
         }
     }
 
@@ -121,11 +123,11 @@ public class CurrentProject {
         Storage storage = CurrentStorage.get();
 
         storage.storeNoteList(_notelist, _project);
-        storage.storeTaskList(_tasklist, _project); 
+        storage.storeTaskList(_tasklist, _project);
         storage.storeResourcesList(_resources, _project);
         storage.storeProjectManager();
     }
-    
+
     public static void free() {
         _project = null;
         _tasklist = null;
diff --git a/src/net/sf/memoranda/DefaultEventNotifier.java b/src/net/sf/memoranda/DefaultEventNotifier.java
index e5abb10..7e51419 100755
--- a/src/net/sf/memoranda/DefaultEventNotifier.java
+++ b/src/net/sf/memoranda/DefaultEventNotifier.java
@@ -1,42 +1,43 @@
 /**
  * DefaultEventNotifier.java Created on 10.03.2003, 21:18:02 Alex Package:
  * net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net Copyright (c) 2003
- *         Memoranda Team. http://memoranda.sf.net
+ * Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
 import net.sf.memoranda.ui.EventNotificationDialog;
 
 /**
- *  
+ *
  */
 /*$Id: DefaultEventNotifier.java,v 1.4 2004/01/30 12:17:41 alexeya Exp $*/
 public class DefaultEventNotifier implements EventNotificationListener {
 
-	/**
-	 * Constructor for DefaultEventNotifier.
-	 */
-	public DefaultEventNotifier() {
-		super();
-	}
+    /**
+     * Constructor for DefaultEventNotifier.
+     */
+    public DefaultEventNotifier() {
+        super();
+    }
+
+    /**
+     * @see net.sf.memoranda.EventNotificationListener#eventIsOccured(net.sf.memoranda.Event)
+     */
+    public void eventIsOccured(Event ev) {
+        new EventNotificationDialog(
+                "Memoranda event",
+                ev.getTimeString(),
+                ev.getText());
+    }
+
+    /**
+     * @see net.sf.memoranda.EventNotificationListener#eventsChanged()
+     */
+    public void eventsChanged() {
+        //
+    }
 
-	/**
-	 * @see net.sf.memoranda.EventNotificationListener#eventIsOccured(net.sf.memoranda.Event)
-	 */
-	public void eventIsOccured(Event ev) {		
-		new EventNotificationDialog(
-			"Memoranda event",
-			ev.getTimeString(),
-			ev.getText());
-	}
-	/**
-	 * @see net.sf.memoranda.EventNotificationListener#eventsChanged()
-	 */
-	public void eventsChanged() {
-		//
-	}
 
-	
 }
diff --git a/src/net/sf/memoranda/Event.java b/src/net/sf/memoranda/Event.java
index a354d9f..9e02361 100755
--- a/src/net/sf/memoranda/Event.java
+++ b/src/net/sf/memoranda/Event.java
@@ -2,38 +2,39 @@
  * Event.java
  * Created on 08.03.2003, 12:21:40 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
- *-----------------------------------------------------
+ * -----------------------------------------------------
  */
 package net.sf.memoranda;
-import java.util.Date;
 
 import net.sf.memoranda.date.CalendarDate;
 
+import java.util.Date;
+
 /**
- * 
+ *
  */
 /*$Id: Event.java,v 1.4 2004/07/21 17:51:25 ivanrise Exp $*/
 public interface Event {
-    
+
     String getId();
-    
+
     //CalendarDate getDate();
-    
+
     int getHour();
-    
+
     int getMinute();
-    
+
     //Date getTime();
-    
+
     String getText();
-    
+
     nu.xom.Element getContent();
-    
+
     int getRepeat();
-    
+
     CalendarDate getStartDate();
 
     CalendarDate getEndDate();
@@ -41,11 +42,11 @@ public interface Event {
     int getPeriod();
 
     boolean isRepeatable();
-    
+
     Date getTime();
 
     String getTimeString();
-    
-	boolean getWorkingDays();
-    
+
+    boolean getWorkingDays();
+
 }
diff --git a/src/net/sf/memoranda/EventImpl.java b/src/net/sf/memoranda/EventImpl.java
index c511c01..69bdefd 100755
--- a/src/net/sf/memoranda/EventImpl.java
+++ b/src/net/sf/memoranda/EventImpl.java
@@ -2,26 +2,27 @@
  * EventImpl.java
  * Created on 08.03.2003, 13:20:13 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
-import java.util.Calendar;
-import java.util.Date;
-import java.util.GregorianCalendar;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.Local;
 import nu.xom.Attribute;
 import nu.xom.Element;
 
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+
 /**
- * 
+ *
  */
 /*$Id: EventImpl.java,v 1.9 2004/10/06 16:00:11 ivanrise Exp $*/
 public class EventImpl implements Event, Comparable {
-    
+
     private Element _elem = null;
 
     /**
@@ -31,7 +32,7 @@ public class EventImpl implements Event, Comparable {
         _elem = elem;
     }
 
-   
+
     /**
      * @see net.sf.memoranda.Event#getHour()
      */
@@ -45,12 +46,12 @@ public class EventImpl implements Event, Comparable {
     public int getMinute() {
         return new Integer(_elem.getAttribute("min").getValue()).intValue();
     }
-    
+
     public String getTimeString() {
         return Local.getTimeString(getHour(), getMinute());
     }
-        
-  
+
+
     /**
      * @see net.sf.memoranda.Event#getText()
      */
@@ -64,86 +65,105 @@ public class EventImpl implements Event, Comparable {
     public Element getContent() {
         return _elem;
     }
+
     /**
      * @see net.sf.memoranda.Event#isRepeatable()
      */
     public boolean isRepeatable() {
-    	Attribute a = _elem.getAttribute("repeat-type");
+        Attribute a = _elem.getAttribute("repeat-type");
         return a != null;
     }
+
     /**
      * @see net.sf.memoranda.Event#getStartDate()
      */
     public CalendarDate getStartDate() {
         Attribute a = _elem.getAttribute("startDate");
-        if (a != null) return new CalendarDate(a.getValue());
+        if (a != null) {
+            return new CalendarDate(a.getValue());
+        }
         return null;
     }
+
     /**
      * @see net.sf.memoranda.Event#getEndDate()
      */
     public CalendarDate getEndDate() {
         Attribute a = _elem.getAttribute("endDate");
-        if (a != null) return new CalendarDate(a.getValue());
+        if (a != null) {
+            return new CalendarDate(a.getValue());
+        }
         return null;
     }
+
     /**
      * @see net.sf.memoranda.Event#getPeriod()
      */
     public int getPeriod() {
         Attribute a = _elem.getAttribute("period");
-        if (a != null) return new Integer(a.getValue()).intValue();
+        if (a != null) {
+            return new Integer(a.getValue()).intValue();
+        }
         return 0;
     }
+
     /**
      * @see net.sf.memoranda.Event#getId()
      */
     public String getId() {
         Attribute a = _elem.getAttribute("id");
-        if (a != null) return a.getValue();
+        if (a != null) {
+            return a.getValue();
+        }
         return null;
     }
+
     /**
      * @see net.sf.memoranda.Event#getRepeat()
      */
     public int getRepeat() {
         Attribute a = _elem.getAttribute("repeat-type");
-        if (a != null) return new Integer(a.getValue()).intValue();
+        if (a != null) {
+            return new Integer(a.getValue()).intValue();
+        }
         return 0;
     }
+
     /**
      * @see net.sf.memoranda.Event#getTime()
      */
     public Date getTime() {
-    	//Deprecated methods
-		//Date d = new Date();
-		//d.setHours(getHour());
-		//d.setMinutes(getMinute());
-		//d.setSeconds(0);
-		//End deprecated methods
-
-		Date d = new Date(); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
-		Calendar calendar = new GregorianCalendar(Local.getCurrentLocale()); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
-		calendar.setTime(d); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
-		calendar.set(Calendar.HOUR_OF_DAY, getHour()); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
-		calendar.set(Calendar.MINUTE, getMinute()); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
-		calendar.set(Calendar.SECOND, 0); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
-		d = calendar.getTime(); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        //Deprecated methods
+        //Date d = new Date();
+        //d.setHours(getHour());
+        //d.setMinutes(getMinute());
+        //d.setSeconds(0);
+        //End deprecated methods
+
+        Date d = new Date(); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        Calendar calendar = new GregorianCalendar(Local.getCurrentLocale()); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        calendar.setTime(d); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        calendar.set(Calendar.HOUR_OF_DAY, getHour()); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        calendar.set(Calendar.MINUTE, getMinute()); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        calendar.set(Calendar.SECOND, 0); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
+        d = calendar.getTime(); //Revision to fix deprecated methods (jcscoobyrs) 12-NOV-2003 14:26:00
         return d;
     }
-	
-	/**
+
+    /**
      * @see net.sf.memoranda.Event#getWorkinDays()
      */
-	public boolean getWorkingDays() {
+    public boolean getWorkingDays() {
         Attribute a = _elem.getAttribute("workingDays");
-        if (a != null && a.getValue().equals("true")) return true;
+        if (a != null && a.getValue().equals("true")) {
+            return true;
+        }
         return false;
-	}
-	
-	public int compareTo(Object o) {
-		Event event = (Event) o;
-		return (getHour() * 60 + getMinute()) - (event.getHour() * 60 + event.getMinute());
-	}
+    }
+
+    public int compareTo(Object o) {
+        Event event = (Event) o;
+        return (getHour() * 60 + getMinute()) - (event.getHour() * 60 + event.getMinute());
+    }
 
 }
diff --git a/src/net/sf/memoranda/EventNotificationListener.java b/src/net/sf/memoranda/EventNotificationListener.java
index 7906319..849aafa 100755
--- a/src/net/sf/memoranda/EventNotificationListener.java
+++ b/src/net/sf/memoranda/EventNotificationListener.java
@@ -2,20 +2,20 @@
  * EventNotificationListener.java
  * Created on 10.03.2003, 20:43:16 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
 /**
- * 
+ *
  */
 /*$Id: EventNotificationListener.java,v 1.2 2004/01/30 12:17:41 alexeya Exp $*/
 public interface EventNotificationListener {
 
     void eventIsOccured(Event ev);
-    
+
     void eventsChanged();
 
 }
diff --git a/src/net/sf/memoranda/EventsManager.java b/src/net/sf/memoranda/EventsManager.java
index a7a0fd2..62b2a00 100755
--- a/src/net/sf/memoranda/EventsManager.java
+++ b/src/net/sf/memoranda/EventsManager.java
@@ -21,7 +21,7 @@ import java.util.*;
  */
 /*$Id: EventsManager.java,v 1.11 2004/10/06 16:00:11 ivanrise Exp $*/
 public class EventsManager {
-    /*	public static final String NS_JNEVENTS =
+    /*    public static final String NS_JNEVENTS =
             "http://www.openmechanics.org/2003/jnotes-events-file";
     */
     public static final int NO_REPEAT = 0;
@@ -40,12 +40,15 @@ public class EventsManager {
 
         if (_doc == null) {
             _root = new Element("eventslist");
-/*			_root.addNamespaceDeclaration("jnevents", NS_JNEVENTS);
+            /*
+            _root.addNamespaceDeclaration("jnevents", NS_JNEVENTS);
             _root.appendChild(
-				new Comment("This is JNotes 2 data file. Do not modify.")); */
+                new Comment("This is JNotes 2 data file. Do not modify."));
+            */
             _doc = new Document(_root);
-        } else
+        } else {
             _root = _doc.getRootElement();
+        }
     }
 
     public static void createSticker(String text, int prior) {
@@ -85,11 +88,13 @@ public class EventsManager {
     public static boolean isNREventsForDate(CalendarDate date) {
         Day day = getDay(date);
 
-        if (day == null)
+        if (day == null) {
             return false;
+        }
 
-        if (day.getElement().getChildElements("event").size() > 0)
+        if (day.getElement().getChildElements("event").size() > 0) {
             return true;
+        }
 
         return false;
     }
@@ -100,14 +105,16 @@ public class EventsManager {
 
         if (day != null) {
             Elements elements = day.getElement().getChildElements("event");
-            for (int i = 0; i < elements.size(); i++)
+            for (int i = 0; i < elements.size(); i++) {
                 vector.add(new EventImpl(elements.get(i)));
+            }
         }
 
         Collection r = getRepeatableEventsForDate(date);
 
-        if (r.size() > 0)
+        if (r.size() > 0) {
             vector.addAll(r);
+        }
 
         //EventsVectorSorter.sort(v);
         Collections.sort(vector);
@@ -123,8 +130,9 @@ public class EventsManager {
         event.appendChild(text);
         Day day = getDay(date);
 
-        if (day == null)
+        if (day == null) {
             day = createDay(date);
+        }
 
         day.getElement().appendChild(event);
 
@@ -154,8 +162,9 @@ public class EventsManager {
         event.addAttribute(new Attribute("min", String.valueOf(minute)));
         event.addAttribute(new Attribute("startDate", startDate.toString()));
 
-        if (endDate != null)
+        if (endDate != null) {
             event.addAttribute(new Attribute("endDate", endDate.toString()));
+        }
 
         event.addAttribute(new Attribute("period", String.valueOf(period)));
         // new attribute for wrkin days - ivanrise
@@ -170,13 +179,15 @@ public class EventsManager {
         Vector vector = new Vector();
         Element repeatable = _root.getFirstChildElement("repeatable");
 
-        if (repeatable == null)
+        if (repeatable == null) {
             return vector;
+        }
 
         Elements elements = repeatable.getChildElements("event");
 
-        for (int i = 0; i < elements.size(); i++)
+        for (int i = 0; i < elements.size(); i++) {
             vector.add(new EventImpl(elements.get(i)));
+        }
 
         return vector;
     }
@@ -192,84 +203,85 @@ public class EventsManager {
             // ignore this event if it's a 'only working days' event and today is weekend.
             if (event.getWorkingDays() && (
                     (date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY ||
-                            (date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY))))
+                            (date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)))) {
                 continue;
+            }
+            // ---
+            /*
+    public static Event createEvent(
+        CalendarDate date,
+        int hh,
+        int mm,
+        String text) {
+        Element el = new Element("event");
+        el.addAttribute(new Attribute("id", Util.generateId()));
+        el.addAttribute(new Attribute("hour", String.valueOf(hh)));
+        el.addAttribute(new Attribute("min", String.valueOf(mm)));
+        el.appendChild(text);
+        Day d = getDay(date);
+        if (d == null)
+            d = createDay(date);
+        d.getElement().appendChild(el);
+        return new EventImpl(el);
+    }
+
+    public static Event createRepeatableEvent(
+        int type,
+        CalendarDate startDate,
+        CalendarDate endDate,
+        int period,
+        int hh,
+        int mm,
+        String text,
+        boolean workDays) {
+        Element el = new Element("event");
+        Element rep = _root.getFirstChildElement("repeatableEvents");
+        if (rep == null) {
+            rep = new Element("repeatableEvents");
+            _root.appendChild(rep);
+        }
+        el.addAttribute(new Attribute("repeat-type", String.valueOf(type)));
+        el.addAttribute(new Attribute("id", Util.generateId()));
+        el.addAttribute(new Attribute("hour", String.valueOf(hh)));
+        el.addAttribute(new Attribute("min", String.valueOf(mm)));
+        el.addAttribute(new Attribute("startDate", startDate.toString()));
+        if (endDate != null)
+            el.addAttribute(new Attribute("endDate", endDate.toString()));
+        el.addAttribute(new Attribute("period", String.valueOf(period)));
+        // new attribute for wrkin days - ivanrise
+        el.addAttribute(new Attribute("workingDays",String.valueOf(workDays)));
+        el.appendChild(text);
+        rep.appendChild(el);
+        return new EventImpl(el);
+    }
+
+    public static Collection getRepeatableEvents() {
+        Vector v = new Vector();
+        Element rep = _root.getFirstChildElement("repeatableEvents");
+        if (rep == null)
+            return v;
+        Elements els = rep.getChildElements("event");
+        for (int i = 0; i < els.size(); i++)
+            v.add(new EventImpl(els.get(i)));
+        return v;
+    }
+
+    public static Collection getRepeatableEventsForDate(CalendarDate date) {
+        Vector reps = (Vector) getRepeatableEvents();
+        Vector v = new Vector();
+        for (int i = 0; i < reps.size(); i++) {
+            Event ev = (Event) reps.get(i);
+            
+            // --- ivanrise
+            // ignore this event if it's a 'only working days' event and today is weekend.
+            if(ev.getWorkingDays() && (date.getCalendar().get(Calendar.DAY_OF_WEEK) == 1 ||
+                date.getCalendar().get(Calendar.DAY_OF_WEEK) == 7)) continue;
             // ---
             /*
-	public static Event createEvent(
-		CalendarDate date,
-		int hh,
-		int mm,
-		String text) {
-		Element el = new Element("event");
-		el.addAttribute(new Attribute("id", Util.generateId()));
-		el.addAttribute(new Attribute("hour", String.valueOf(hh)));
-		el.addAttribute(new Attribute("min", String.valueOf(mm)));
-		el.appendChild(text);
-		Day d = getDay(date);
-		if (d == null)
-			d = createDay(date);
-		d.getElement().appendChild(el);
-		return new EventImpl(el);
-	}
-
-	public static Event createRepeatableEvent(
-		int type,
-		CalendarDate startDate,
-		CalendarDate endDate,
-		int period,
-		int hh,
-		int mm,
-		String text,
-		boolean workDays) {
-		Element el = new Element("event");
-		Element rep = _root.getFirstChildElement("repeatableEvents");
-		if (rep == null) {
-			rep = new Element("repeatableEvents");
-			_root.appendChild(rep);
-		}
-		el.addAttribute(new Attribute("repeat-type", String.valueOf(type)));
-		el.addAttribute(new Attribute("id", Util.generateId()));
-		el.addAttribute(new Attribute("hour", String.valueOf(hh)));
-		el.addAttribute(new Attribute("min", String.valueOf(mm)));
-		el.addAttribute(new Attribute("startDate", startDate.toString()));
-		if (endDate != null)
-			el.addAttribute(new Attribute("endDate", endDate.toString()));
-		el.addAttribute(new Attribute("period", String.valueOf(period)));
-		// new attribute for wrkin days - ivanrise
-		el.addAttribute(new Attribute("workingDays",String.valueOf(workDays)));
-		el.appendChild(text);
-		rep.appendChild(el);
-		return new EventImpl(el);
-	}
-
-	public static Collection getRepeatableEvents() {
-		Vector v = new Vector();
-		Element rep = _root.getFirstChildElement("repeatableEvents");
-		if (rep == null)
-			return v;
-		Elements els = rep.getChildElements("event");
-		for (int i = 0; i < els.size(); i++)
-			v.add(new EventImpl(els.get(i)));
-		return v;
-	}
-
-	public static Collection getRepeatableEventsForDate(CalendarDate date) {
-		Vector reps = (Vector) getRepeatableEvents();
-		Vector v = new Vector();
-		for (int i = 0; i < reps.size(); i++) {
-			Event ev = (Event) reps.get(i);
-			
-			// --- ivanrise
-			// ignore this event if it's a 'only working days' event and today is weekend.
-			if(ev.getWorkingDays() && (date.getCalendar().get(Calendar.DAY_OF_WEEK) == 1 ||
-				date.getCalendar().get(Calendar.DAY_OF_WEEK) == 7)) continue;
-			// ---
-			/*
-			 * /if ( ((date.after(ev.getStartDate())) &&
-			 * (date.before(ev.getEndDate()))) ||
-			 * (date.equals(ev.getStartDate()))
-			 */
+             * /if ( ((date.after(ev.getStartDate())) &&
+             * (date.before(ev.getEndDate()))) ||
+             * (date.equals(ev.getStartDate()))
+             */
             //System.out.println(date.inPeriod(ev.getStartDate(),
             // ev.getEndDate()));
 
@@ -277,33 +289,40 @@ public class EventsManager {
                 if (event.getRepeat() == REPEAT_MINUTELY) {
                     int n = date.getCalendar().get(Calendar.MINUTE);
                     int ns = event.getStartDate().getCalendar().get(Calendar.MINUTE);
-                    if ((n - ns) % event.getHour() == 0)
+                    if ((n - ns) % event.getHour() == 0) {
                         vector.add(event);
+                    }
                 } else if (event.getRepeat() == REPEAT_HOURLY) {
                     int n = date.getCalendar().get(Calendar.HOUR_OF_DAY);
                     int ns = event.getStartDate().getCalendar().get(Calendar.HOUR_OF_DAY);
-                    if ((n - ns) % event.getPeriod() == 0)
+                    if ((n - ns) % event.getPeriod() == 0) {
                         vector.add(event);
+                    }
                 } else if (event.getRepeat() == REPEAT_DAILY) {
                     int n = date.getCalendar().get(Calendar.DAY_OF_YEAR);
                     int ns = event.getStartDate().getCalendar().get(Calendar.DAY_OF_YEAR);
-                    if ((n - ns) % event.getPeriod() == 0)
+                    if ((n - ns) % event.getPeriod() == 0) {
                         vector.add(event);
+                    }
                 } else if (event.getRepeat() == REPEAT_WEEKLY) {
-                    if (date.getCalendar().get(Calendar.DAY_OF_WEEK) == event.getPeriod())
+                    if (date.getCalendar().get(Calendar.DAY_OF_WEEK) == event.getPeriod()) {
                         vector.add(event);
+                    }
                 } else if (event.getRepeat() == REPEAT_MONTHLY) {
-                    if (date.getCalendar().get(Calendar.DAY_OF_MONTH) == event.getPeriod())
+                    if (date.getCalendar().get(Calendar.DAY_OF_MONTH) == event.getPeriod()) {
                         vector.add(event);
+                    }
                 } else if (event.getRepeat() == REPEAT_YEARLY) {
                     int period = event.getPeriod();
 
                     if ((date.getYear() % 4) == 0
-                            && date.getCalendar().get(Calendar.DAY_OF_YEAR) > 60)
+                            && date.getCalendar().get(Calendar.DAY_OF_YEAR) > 60) {
                         period++;
+                    }
 
-                    if (date.getCalendar().get(Calendar.DAY_OF_YEAR) == period)
+                    if (date.getCalendar().get(Calendar.DAY_OF_YEAR) == period) {
                         vector.add(event);
+                    }
                 }
             }
         }
@@ -318,16 +337,18 @@ public class EventsManager {
     public static Event getEvent(CalendarDate date, int hour, int minute) {
         Day day = getDay(date);
 
-        if (day == null)
+        if (day == null) {
             return null;
+        }
 
         Elements elements = day.getElement().getChildElements("event");
 
         for (int i = 0; i < elements.size(); i++) {
             Element element = elements.get(i);
             if ((new Integer(element.getAttribute("hour").getValue()) == hour)
-                    && (new Integer(element.getAttribute("min").getValue()) == minute))
+                    && (new Integer(element.getAttribute("min").getValue()) == minute)) {
                 return new EventImpl(element);
+            }
         }
 
         return null;
@@ -336,8 +357,9 @@ public class EventsManager {
     public static void removeEvent(CalendarDate date, int hour, int minute) {
         Day day = getDay(date);
 
-        if (day != null)
+        if (day != null) {
             day.getElement().removeChild(getEvent(date, hour, minute).getContent());
+        }
     }
 
     public static void removeEvent(Event event) {
@@ -348,18 +370,21 @@ public class EventsManager {
     private static Day createDay(CalendarDate date) {
         Year year = getYear(date.getYear());
 
-        if (year == null)
+        if (year == null) {
             year = createYear(date.getYear());
+        }
 
         Month month = year.getMonth(date.getMonth());
 
-        if (month == null)
+        if (month == null) {
             month = year.createMonth(date.getMonth());
+        }
 
         Day day = month.getDay(date.getDay());
 
-        if (day == null)
+        if (day == null) {
             day = month.createDay(date.getDay());
+        }
 
         return day;
     }
@@ -375,9 +400,11 @@ public class EventsManager {
     private static Year getYear(int intYear) {
         Elements years = _root.getChildElements("year");
         String year = Integer.toString(intYear);
-        for (int i = 0; i < years.size(); i++)
-            if (years.get(i).getAttribute("year").getValue().equals(year))
+        for (int i = 0; i < years.size(); i++) {
+            if (years.get(i).getAttribute("year").getValue().equals(year)) {
                 return new Year(years.get(i));
+            }
+        }
         //return createYear(year);
 
         return null;
@@ -385,11 +412,13 @@ public class EventsManager {
 
     private static Day getDay(CalendarDate date) {
         Year y = getYear(date.getYear());
-        if (y == null)
+        if (y == null) {
             return null;
+        }
         Month m = y.getMonth(date.getMonth());
-        if (m == null)
+        if (m == null) {
             return null;
+        }
         return m.getDay(date.getDay());
     }
 
@@ -407,9 +436,11 @@ public class EventsManager {
         public Month getMonth(int m) {
             Elements ms = yearElement.getChildElements("month");
             String mm = new Integer(m).toString();
-            for (int i = 0; i < ms.size(); i++)
-                if (ms.get(i).getAttribute("month").getValue().equals(mm))
+            for (int i = 0; i < ms.size(); i++) {
+                if (ms.get(i).getAttribute("month").getValue().equals(mm)) {
                     return new Month(ms.get(i));
+                }
+            }
             //return createMonth(m);
             return null;
         }
@@ -426,8 +457,9 @@ public class EventsManager {
             Vector vector = new Vector();
             Elements months = yearElement.getChildElements("month");
 
-            for (int i = 0; i < months.size(); i++)
+            for (int i = 0; i < months.size(); i++) {
                 vector.add(new Month(months.get(i)));
+            }
 
             return vector;
         }
@@ -451,13 +483,16 @@ public class EventsManager {
         }
 
         public Day getDay(int d) {
-            if (mElement == null)
+            if (mElement == null) {
                 return null;
+            }
             Elements ds = mElement.getChildElements("day");
             String dd = new Integer(d).toString();
-            for (int i = 0; i < ds.size(); i++)
-                if (ds.get(i).getAttribute("day").getValue().equals(dd))
+            for (int i = 0; i < ds.size(); i++) {
+                if (ds.get(i).getAttribute("day").getValue().equals(dd)) {
                     return new Day(ds.get(i));
+                }
+            }
             //return createDay(d);
             return null;
         }
@@ -483,12 +518,14 @@ public class EventsManager {
         }
 
         public Vector getDays() {
-            if (mElement == null)
+            if (mElement == null) {
                 return null;
+            }
             Vector v = new Vector();
             Elements ds = mElement.getChildElements("day");
-            for (int i = 0; i < ds.size(); i++)
+            for (int i = 0; i < ds.size(); i++) {
                 v.add(new Day(ds.get(i)));
+            }
             return v;
         }
 
@@ -509,62 +546,9 @@ public class EventsManager {
             return new Integer(dEl.getAttribute("day").getValue()).intValue();
         }
 
-		/*
-		 * public Note getNote() { return new NoteImpl(dEl);
-		 */
-
         public Element getElement() {
             return dEl;
         }
     }
-/*
-	static class EventsVectorSorter {
-
-		private static Vector keys = null;
-
-		private static int toMinutes(Object obj) {
-			Event ev = (Event) obj;
-			return ev.getHour() * 60 + ev.getMinute();
-		}
-
-		private static void doSort(int L, int R) { // Hoar's QuickSort
-			int i = L;
-			int j = R;
-			int x = toMinutes(keys.get((L + R) / 2));
-			Object w = null;
-			do {
-				while (toMinutes(keys.get(i)) < x) {
-					i++;
-				}
-				while (x < toMinutes(keys.get(j))) {
-					j--;
-				}
-				if (i <= j) {
-					w = keys.get(i);
-					keys.set(i, keys.get(j));
-					keys.set(j, w);
-					i++;
-					j--;
-				}
-			}
-			while (i <= j);
-			if (L < j) {
-				doSort(L, j);
-			}
-			if (i < R) {
-				doSort(i, R);
-			}
-		}
-
-		public static void sort(Vector theKeys) {
-			if (theKeys == null)
-				return;
-			if (theKeys.size() <= 0)
-				return;
-			keys = theKeys;
-			doSort(0, keys.size() - 1);
-		}
-
-	}
-*/
+
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/EventsScheduler.java b/src/net/sf/memoranda/EventsScheduler.java
index 97231f5..8c79e28 100755
--- a/src/net/sf/memoranda/EventsScheduler.java
+++ b/src/net/sf/memoranda/EventsScheduler.java
@@ -10,10 +10,13 @@ package net.sf.memoranda;
 
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.Local;
-//import sun.util.resources.cldr.aa.CalendarData_aa_DJ;
 
 import java.util.*;
 
+//import sun.util.resources.cldr.aa.CalendarData_aa_DJ;
+
+//import sun.util.resources.cldr.aa.CalendarData_aa_DJ;
+
 /**
  *
  */
@@ -47,29 +50,23 @@ public class EventsScheduler {
             System.out.println((Calendar.getInstance()).getTime());
 
             if (eventTime.after((Calendar.getInstance().getTime()))) {
-/*
-            	Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
+                /*
+                Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
                 // replace with event.getStartDate() when includes minute & hour
                 CalendarDate date = CalendarDate.today();
                 int minutes, hours,day;
-               
-                
-*/           
-            	 EventTimer timer=null;
-            	if (event.getRepeat() == EventsManager.REPEAT_MINUTELY) {
-            		eventMinute(event);
-            	}
-            	
-            	else if (event.getRepeat() == EventsManager.REPEAT_HOURLY) {
-            		eventHour(event);
-            	}
-                else {
+                */
+                EventTimer timer = null;
+                if (event.getRepeat() == EventsManager.REPEAT_MINUTELY) {
+                    eventMinute(event);
+                } else if (event.getRepeat() == EventsManager.REPEAT_HOURLY) {
+                    eventHour(event);
+                } else {
                     timer = new EventTimer(event);
                     timer.schedule(new NotifyTask(timer), event.getTime());
                     _timers.add(timer);
                 }
-/*               
-
+                /*
                 if (event.getRepeat() == EventsManager.REPEAT_MINUTELY) {
                     // get remaining minutes from now until next cycle
                     timer = new EventTimer(event);
@@ -101,37 +98,34 @@ public class EventsScheduler {
                 
                 else if (event.getRepeat() == EventsManager.REPEAT_HOURLY) {
                     // get remaining minutes from now until next cycle
-                	timer= new EventTimer(event);
-                	int now=date.getCalendar().get(Calendar.HOUR);
-                	int difference =now% event.getPeriod()+1;
-                	
-                	hours = calendar.get(Calendar.HOUR)+difference;
-                	day= calendar.get(Calendar.DAY_OF_WEEK);
-                	calendar.set(Calendar.DAY_OF_WEEK, day);
-                	calendar.set(Calendar.MINUTE,0);
-                	timer.schedule(new NotifyTask(timer), calendar.getTime());
-                	_timers.add(timer);
+                    timer= new EventTimer(event);
+                    int now=date.getCalendar().get(Calendar.HOUR);
+                    int difference =now% event.getPeriod()+1;
+                    
+                    hours = calendar.get(Calendar.HOUR)+difference;
+                    day= calendar.get(Calendar.DAY_OF_WEEK);
+                    calendar.set(Calendar.DAY_OF_WEEK, day);
+                    calendar.set(Calendar.MINUTE,0);
+                    timer.schedule(new NotifyTask(timer), calendar.getTime());
+                    _timers.add(timer);
                     // then get hours from now until midnight
-                	while(calendar.getTime().getTime()<getMidnight().getTime()){
-                		timer= new EventTimer(event);
-                		hours += event.getPeriod();
-                		if(hours> 24){
-                			calendar.set(Calendar.DAY_OF_WEEK,++day);
-                			hours%=24;
-                		}
-                		calendar.set(Calendar.HOUR, hours);
-                		timer.schedule(new NotifyTask(timer), calendar.getTime());
-                	}
+                    while(calendar.getTime().getTime()<getMidnight().getTime()){
+                        timer= new EventTimer(event);
+                        hours += event.getPeriod();
+                        if(hours> 24){
+                            calendar.set(Calendar.DAY_OF_WEEK,++day);
+                            hours%=24;
+                        }
+                        calendar.set(Calendar.HOUR, hours);
+                        timer.schedule(new NotifyTask(timer), calendar.getTime());
+                    }
                 }
-*/
-
-
+                */
                 /*DEBUG*/
                 System.out.println(event.getTimeString());
             }
         }
 
-
         /*DEBUG*/
         System.out.println("----------");
 
@@ -144,14 +138,15 @@ public class EventsScheduler {
         }, midnight);
         notifyChanged();
     }
-    public static void eventMinute(Event event){
-    	Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
+
+    public static void eventMinute(Event event) {
+        Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
         // replace with event.getStartDate() when includes minute & hour
         CalendarDate date = CalendarDate.today();
         int minutes, hours;
         EventTimer timer;
-    	
-	
+
+
         // get remaining minutes from now until next cycle
         timer = new EventTimer(event);
         int now = date.getCalendar().get(Calendar.MINUTE);
@@ -163,9 +158,9 @@ public class EventsScheduler {
         calendar.set(Calendar.MINUTE, minutes);
         calendar.set(Calendar.SECOND, 0);
         timer.schedule(new NotifyTask(timer), calendar.getTime());
-//    	System.out.println(" DEBUG top: " +_timers.size());
-    	_timers.add(timer);
-//    	System.out.println(" DEBUG mid: " +_timers.size());
+        //        System.out.println(" DEBUG top: " +_timers.size());
+        _timers.add(timer);
+        //        System.out.println(" DEBUG mid: " +_timers.size());
 
         // then get the rest until midnight
         while (calendar.getTime().getTime() < getMidnight().getTime()) {
@@ -179,77 +174,83 @@ public class EventsScheduler {
             timer.schedule(new NotifyTask(timer), calendar.getTime());
             _timers.add(timer);
         }
-//    	System.out.println(" DEBUG end: " +_timers.size());
+        //        System.out.println(" DEBUG end: " +_timers.size());
     }
-    
-    public static void eventHour(Event event){
-    	Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
+
+    public static void eventHour(Event event) {
+        Calendar calendar = new GregorianCalendar(Local.getCurrentLocale());
         // replace with event.getStartDate() when includes minute & hour
         CalendarDate date = CalendarDate.today();
         int hours, day;
         EventTimer timer;
-    	
-    	
-            // get remaining minutes from now until next cycle
-        	timer= new EventTimer(event);
-        	int now=date.getCalendar().get(Calendar.HOUR);
-        	int difference =now% event.getPeriod()+1;
-        	
-        	hours = calendar.get(Calendar.HOUR)+difference;
-        	day= calendar.get(Calendar.DAY_OF_WEEK);
-        	calendar.set(Calendar.DAY_OF_WEEK, day);
-        	calendar.set(Calendar.MINUTE,0);
-        	timer.schedule(new NotifyTask(timer), calendar.getTime());
-//        	System.out.println(" DEBUG top: " +_timers.size());
-        	_timers.add(timer);
-//        	System.out.println(" DEBUG mid: " +_timers.size());
-            // then get hours from now until midnight
-        	while(calendar.getTime().getTime()<getMidnight().getTime()){
-        		timer= new EventTimer(event);
-        		hours += event.getPeriod();
-        		if(hours> 24){
-        			calendar.set(Calendar.DAY_OF_WEEK,++day);
-        			hours%=24;
-        		}
-        		calendar.set(Calendar.HOUR, hours);
-        		timer.schedule(new NotifyTask(timer), calendar.getTime());
-                _timers.add(timer);
-        	}
-//        	System.out.println(" DEBUG end: " +_timers.size());
+
+
+        // get remaining minutes from now until next cycle
+        timer = new EventTimer(event);
+        int now = date.getCalendar().get(Calendar.HOUR);
+        int difference = now % event.getPeriod() + 1;
+
+        hours = calendar.get(Calendar.HOUR) + difference;
+        day = calendar.get(Calendar.DAY_OF_WEEK);
+        calendar.set(Calendar.DAY_OF_WEEK, day);
+        calendar.set(Calendar.MINUTE, 0);
+        timer.schedule(new NotifyTask(timer), calendar.getTime());
+        //            System.out.println(" DEBUG top: " +_timers.size());
+        _timers.add(timer);
+        //            System.out.println(" DEBUG mid: " +_timers.size());
+        // then get hours from now until midnight
+        while (calendar.getTime().getTime() < getMidnight().getTime()) {
+            timer = new EventTimer(event);
+            hours += event.getPeriod();
+            if (hours > 24) {
+                calendar.set(Calendar.DAY_OF_WEEK, ++day);
+                hours %= 24;
+            }
+            calendar.set(Calendar.HOUR, hours);
+            timer.schedule(new NotifyTask(timer), calendar.getTime());
+            _timers.add(timer);
+        }
+        //            System.out.println(" DEBUG end: " +_timers.size());
     }
+
     public static void cancelAll() {
         for (int i = 0; i < _timers.size(); i++) {
             EventTimer timer = (EventTimer) _timers.get(i);
             timer.cancel();
         }
     }
-    
+
     public static Vector getScheduledEvents() {
         Vector vector = new Vector();
 
-        for (int i = 0; i < _timers.size(); i++)
+        for (int i = 0; i < _timers.size(); i++) {
             vector.add(((EventTimer) _timers.get(i)).getEvent());
+        }
 
         return vector;
     }
 
     public static Event getFirstScheduledEvent() {
-        if (!isEventScheduled())
+        if (!isEventScheduled()) {
             return null;
+        }
 
         Event firstEvent = ((EventTimer) _timers.get(0)).getEvent();
 
         for (int i = 1; i < _timers.size(); i++) {
             Event event = ((EventTimer) _timers.get(i)).getEvent();
-            if (event.getTime().before(firstEvent.getTime()))
+            if (event.getTime().before(firstEvent.getTime())) {
                 firstEvent = event;
+            }
         }
 
         return firstEvent;
     }
-    public static int counter(){
-    	return _timers.size();
+
+    public static int counter() {
+        return _timers.size();
     }
+
     public static void addListener(EventNotificationListener enl) {
         _listeners.add(enl);
     }
@@ -259,13 +260,15 @@ public class EventsScheduler {
     }
 
     private static void notifyListeners(Event ev) {
-        for (int i = 0; i < _listeners.size(); i++)
+        for (int i = 0; i < _listeners.size(); i++) {
             ((EventNotificationListener) _listeners.get(i)).eventIsOccured(ev);
+        }
     }
 
     private static void notifyChanged() {
-        for (int i = 0; i < _listeners.size(); i++)
+        for (int i = 0; i < _listeners.size(); i++) {
             ((EventNotificationListener) _listeners.get(i)).eventsChanged();
+        }
     }
 
     private static Date getMidnight() {
diff --git a/src/net/sf/memoranda/History.java b/src/net/sf/memoranda/History.java
index e70d470..6701784 100755
--- a/src/net/sf/memoranda/History.java
+++ b/src/net/sf/memoranda/History.java
@@ -2,93 +2,100 @@
  * History.java
  * Created on 23.02.2003, 0:27:33 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
+
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.KeyEvent;
-
-import java.util.Vector;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Vector;
 
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.ImageIcon;
-import javax.swing.KeyStroke;
-
-import net.sf.memoranda.util.Local;
 /**
- * 
+ *
  */
 /*$Id: History.java,v 1.7 2006/10/31 15:34:14 hglas Exp $*/
 public class History {
 
+    public static HistoryBackAction historyBackAction = new HistoryBackAction();
+    public static HistoryForwardAction historyForwardAction = new HistoryForwardAction();
     static Vector _list = new Vector();
     static int p = -1;
     static Vector historyListeners = new Vector();
     static Object next = null;
-    static Object prev = null;     
-    
+    static Object prev = null;
+
     public static void add(HistoryItem item) {
-        if (prev != null)   
-            if (item.equals(prev)) return;
-        if (p < _list.size() - 1)
+        if (prev != null) {
+            if (item.equals(prev)) {
+                return;
+            }
+        }
+        if (p < _list.size() - 1) {
             _list.setSize(p + 1);
+        }
         _list.add(item);
         p = _list.size() - 1;
-        if (p > 0)   
-            prev = _list.get(p-1);
-        else
+        if (p > 0) {
+            prev = _list.get(p - 1);
+        } else {
             prev = null;
+        }
         next = null;
         historyBackAction.update();
-        historyForwardAction.update();  
+        historyForwardAction.update();
         /*System.out.println();
         for (int i = 0; i < _list.size(); i++)
             System.out.println(((HistoryItem)_list.get(i)).getDate().toString());
         System.out.println(item.getDate().toShortString()+ " added");*/
-        if (_list.size() > 99)
-            _list.remove(0);     
+        if (_list.size() > 99) {
+            _list.remove(0);
+        }
     }
 
-    public static HistoryItem rollBack() {        
-        Object n = prev;        
-        if (p > 1) {                          
+    public static HistoryItem rollBack() {
+        Object n = prev;
+        if (p > 1) {
             p--;
-            prev = _list.get(p-1);
-        } 
-        else if (p > 0) {
+            prev = _list.get(p - 1);
+        } else if (p > 0) {
             p--;
             prev = null;
+        } else {
+            prev = null;
+        }
+        if (p < _list.size() - 1) {
+            next = _list.get(p + 1);
+        } else {
+            next = null;
         }
-        else 
-            prev = null;      
-        if (p < _list.size() - 1)
-            next = _list.get(p+1);
-        else
-            next = null;         
-        return (HistoryItem)n;
+        return (HistoryItem) n;
     }
 
     public static HistoryItem rollForward() {
-        Object n = next;        
+        Object n = next;
         if (p < _list.size() - 1) {
             p++;
-            if (p == 1) 
+            if (p == 1) {
                 p++;
-            next = _list.get(p);            
-        }        
-        else
+            }
+            next = _list.get(p);
+        } else {
             next = null;
-        if (p > 0)
-            prev = _list.get(p-1);
-        else 
+        }
+        if (p > 0) {
+            prev = _list.get(p - 1);
+        } else {
             prev = null;
-        return (HistoryItem)n;    
+        }
+        return (HistoryItem) n;
     }
 
     public static boolean canRollBack() {
@@ -102,19 +109,22 @@ public class History {
     public static void addHistoryListener(HistoryListener hl) {
         historyListeners.add(hl);
     }
-    
+
     public static void removeProjectHistory(Project prj) {
         Vector list = new Vector();
         String id;
-        
+
         for (int i = 0; i < _list.size(); i++) {
             id = (((HistoryItem) _list.elementAt(i)).getProject()).getID();
             if (id.equals(prj.getID())) {
                 list.add(_list.elementAt(i));
                 p--;
                 if (_list.elementAt(i).equals(prev)) {
-                    if (p > 0) prev = _list.get(p - 1);
-                    else prev = null;
+                    if (p > 0) {
+                        prev = _list.get(p - 1);
+                    } else {
+                        prev = null;
+                    }
                 }
             }
         }
@@ -131,23 +141,21 @@ public class History {
     }
 
     private static void notifyListeners(HistoryItem n) {
-        for (int i = 0; i < historyListeners.size(); i++)            
-                 ((HistoryListener) historyListeners.get(i)).historyWasRolledTo(n);
+        for (int i = 0; i < historyListeners.size(); i++) {
+            ((HistoryListener) historyListeners.get(i)).historyWasRolledTo(n);
+        }
     }
 
-    public static HistoryBackAction historyBackAction = new HistoryBackAction();
-    public static HistoryForwardAction historyForwardAction = new HistoryForwardAction();
-
     static class HistoryBackAction extends AbstractAction {
 
         public HistoryBackAction() {
-            super(Local.getString("History back"), 
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/hist_back.png")));
+            super(Local.getString("History back"),
+                    new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/hist_back.png")));
             putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, KeyEvent.ALT_MASK));
             setEnabled(false);
         }
 
-        public void actionPerformed(ActionEvent e) {            
+        public void actionPerformed(ActionEvent e) {
             notifyListeners(rollBack());
             update();
             historyForwardAction.update();
@@ -161,16 +169,15 @@ public class History {
             if (canRollBack()) {
                 setEnabled(true);
 
-		SimpleDateFormat sdf = new SimpleDateFormat();
-		sdf = (SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT);
-		Date date = ((HistoryItem) prev).getDate().getDate();
-		    putValue(
-                    Action.SHORT_DESCRIPTION,
-		   Local.getString("Back to") + " " + sdf.format(date));
+                SimpleDateFormat sdf = new SimpleDateFormat();
+                sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.SHORT);
+                Date date = ((HistoryItem) prev).getDate().getDate();
+                putValue(
+                        Action.SHORT_DESCRIPTION,
+                        Local.getString("Back to") + " " + sdf.format(date));
 
-//                putValue(Action.SHORT_DESCRIPTION, Local.getString("Back to") + " " + ((HistoryItem) prev).getDate().toString());
-            }
-            else {
+                //                putValue(Action.SHORT_DESCRIPTION, Local.getString("Back to") + " " + ((HistoryItem) prev).getDate().toString());
+            } else {
                 setEnabled(false);
                 putValue(Action.SHORT_DESCRIPTION, Local.getString("Back"));
             }
@@ -180,13 +187,13 @@ public class History {
     static class HistoryForwardAction extends AbstractAction {
 
         public HistoryForwardAction() {
-            super(Local.getString("History forward"), 
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/hist_forward.png")));
+            super(Local.getString("History forward"),
+                    new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/hist_forward.png")));
             putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, KeyEvent.ALT_MASK));
             setEnabled(false);
         }
 
-        public void actionPerformed(ActionEvent e) {            
+        public void actionPerformed(ActionEvent e) {
             notifyListeners(rollForward());
             update();
             historyBackAction.update();
@@ -200,16 +207,15 @@ public class History {
             if (canRollForward()) {
                 setEnabled(true);
 
-		SimpleDateFormat sdf = new SimpleDateFormat();
-		sdf = (SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT);
-		Date date = ((HistoryItem) next).getDate().getDate();
+                SimpleDateFormat sdf = new SimpleDateFormat();
+                sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.SHORT);
+                Date date = ((HistoryItem) next).getDate().getDate();
 
-		    putValue(
-                    Action.SHORT_DESCRIPTION,
-                   // Local.getString("Forward to") + " " + ((HistoryItem) next).getDate().toString());
-		   Local.getString("Forward to") + " " + sdf.format(date));
-            }
-            else {
+                putValue(
+                        Action.SHORT_DESCRIPTION,
+                        // Local.getString("Forward to") + " " + ((HistoryItem) next).getDate().toString());
+                        Local.getString("Forward to") + " " + sdf.format(date));
+            } else {
                 setEnabled(false);
                 putValue(Action.SHORT_DESCRIPTION, Local.getString("Forward"));
             }
diff --git a/src/net/sf/memoranda/HistoryItem.java b/src/net/sf/memoranda/HistoryItem.java
index fc5196d..13c4e14 100755
--- a/src/net/sf/memoranda/HistoryItem.java
+++ b/src/net/sf/memoranda/HistoryItem.java
@@ -2,7 +2,7 @@
  * HistoryItem.java
  * Created on 07.03.2003, 18:31:39 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
@@ -11,13 +11,14 @@ package net.sf.memoranda;
 import net.sf.memoranda.date.CalendarDate;
 
 /**
- * 
+ *
  */
 /*$Id: HistoryItem.java,v 1.4 2004/10/06 19:15:43 ivanrise Exp $*/
 public class HistoryItem {
-    
+
     private CalendarDate _date;
     private Project _project;
+
     /**
      * Constructor for HistoryItem.
      */
@@ -25,22 +26,22 @@ public class HistoryItem {
         _date = date;
         _project = project;
     }
-    
+
     public HistoryItem(Note note) {
         _date = note.getDate();
         _project = note.getProject();
     }
-    
+
     public CalendarDate getDate() {
-       return _date;
+        return _date;
     }
-    
+
     public Project getProject() {
-       return _project;
+        return _project;
     }
-    
+
     public boolean equals(HistoryItem i) {
-       return i.getDate().equals(_date) && i.getProject().getID().equals(_project.getID());
-    } 
+        return i.getDate().equals(_date) && i.getProject().getID().equals(_project.getID());
+    }
 
 }
diff --git a/src/net/sf/memoranda/HistoryListener.java b/src/net/sf/memoranda/HistoryListener.java
index 7d2e561..9190e93 100755
--- a/src/net/sf/memoranda/HistoryListener.java
+++ b/src/net/sf/memoranda/HistoryListener.java
@@ -2,14 +2,14 @@
  * HistoryListener.java
  * Created on 23.02.2003, 1:56:52 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
 /**
- * 
+ *
  */
 /*$Id: HistoryListener.java,v 1.2 2004/01/30 12:17:41 alexeya Exp $*/
 public interface HistoryListener {
@@ -17,7 +17,7 @@ public interface HistoryListener {
     /*void historyWasRolledBack();
     
     void historyWasRolledForward();*/
-    
+
     void historyWasRolledTo(HistoryItem item);
 
 }
diff --git a/src/net/sf/memoranda/Note.java b/src/net/sf/memoranda/Note.java
index 97dfc8e..105779b 100755
--- a/src/net/sf/memoranda/Note.java
+++ b/src/net/sf/memoranda/Note.java
@@ -2,29 +2,33 @@
  * Note.java
  * Created on 11.02.2003, 17:05:27 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
 import net.sf.memoranda.date.CalendarDate;
+
 /**
- * 
+ *
  */
 /*$Id: Note.java,v 1.4 2004/09/30 17:19:52 ivanrise Exp $*/
 public interface Note {
-    
+
     CalendarDate getDate();
-    
+
     String getTitle();
+
     void setTitle(String s);
-    
-	String getId();
-	void setId(String s);
-	
+
+    String getId();
+
+    void setId(String s);
+
     boolean isMarked();
+
     void setMark(boolean mark);
-        
+
     Project getProject();
 }
diff --git a/src/net/sf/memoranda/NoteImpl.java b/src/net/sf/memoranda/NoteImpl.java
index 1128066..951ac02 100755
--- a/src/net/sf/memoranda/NoteImpl.java
+++ b/src/net/sf/memoranda/NoteImpl.java
@@ -2,7 +2,7 @@
  * NoteImpl.java
  * Created on 13.02.2003, 15:36:55 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
@@ -13,14 +13,14 @@ import nu.xom.Attribute;
 import nu.xom.Element;
 
 /**
- * 
+ *
  */
 /*$Id: NoteImpl.java,v 1.6 2004/10/06 19:15:44 ivanrise Exp $*/
 public class NoteImpl implements Note, Comparable {
-    
-    private Element _el = null; 
+
+    private Element _el = null;
     private Project _project;
-    
+
     /**
      * Constructor for NoteImpl.
      */
@@ -33,88 +33,102 @@ public class NoteImpl implements Note, Comparable {
      * @see net.sf.memoranda.Note#getDate()
      */
     public CalendarDate getDate() {
-		Element day = (Element)_el.getParent();
-		Element month = (Element)day.getParent();
-		Element year = (Element)month.getParent();
+        Element day = (Element) _el.getParent();
+        Element month = (Element) day.getParent();
+        Element year = (Element) month.getParent();
 
-     //   return new CalendarDate(day.getAttribute("date").getValue());
-		
-		return new CalendarDate(new Integer(day.getAttribute("day").getValue()).intValue(), 
-								new Integer(month.getAttribute("month").getValue()).intValue(),
-								new Integer(year.getAttribute("year").getValue()).intValue());
+        //   return new CalendarDate(day.getAttribute("date").getValue());
+
+        return new CalendarDate(new Integer(day.getAttribute("day").getValue()).intValue(),
+                new Integer(month.getAttribute("month").getValue()).intValue(),
+                new Integer(year.getAttribute("year").getValue()).intValue());
 
     }
-    
+
     public Project getProject() {
         return _project;
     }
+
     /**
      * @see net.sf.memoranda.Note#getTitle()
      */
     public String getTitle() {
         Attribute ta = _el.getAttribute("title");
-        if (ta == null) return "";
+        if (ta == null) {
+            return "";
+        }
         return _el.getAttribute("title").getValue();
     }
+
     /**
      * @see net.sf.memoranda.Note#setTitle(java.lang.String)
      */
     public void setTitle(String s) {
         Attribute ta = _el.getAttribute("title");
-        if (ta == null) _el.addAttribute(new Attribute("title", s));
-        else 
+        if (ta == null) {
+            _el.addAttribute(new Attribute("title", s));
+        } else {
             ta.setValue(s);
+        }
     }
-	
-	/**
+
+    /**
      * @see net.sf.memoranda.Note#getId
      */
-	
-	public String getId() {
-		Attribute id = _el.getAttribute("refid");
-		if (id==null) return "";
-		return _el.getAttribute("refid").getValue();
-	}
-	
-	/**
+
+    public String getId() {
+        Attribute id = _el.getAttribute("refid");
+        if (id == null) {
+            return "";
+        }
+        return _el.getAttribute("refid").getValue();
+    }
+
+    /**
      * @see net.sf.memoranda.Note#setId(java.lang.String)
      */
-	 
-	public void setId(String s) {
-		Attribute id = _el.getAttribute("refid");
-		if(id==null) _el.addAttribute(new Attribute("refid", s));
-	}
+
+    public void setId(String s) {
+        Attribute id = _el.getAttribute("refid");
+        if (id == null) {
+            _el.addAttribute(new Attribute("refid", s));
+        }
+    }
+
     /**
      * @see net.sf.memoranda.Note#isMarked()
      */
     public boolean isMarked() {
-        return _el.getAttribute("bookmark") != null;        
+        return _el.getAttribute("bookmark") != null;
     }
+
     /**
      * @see net.sf.memoranda.Note#setMark(boolean)
      */
     public void setMark(boolean mark) {
-        Attribute ma = _el.getAttribute("bookmark");        
+        Attribute ma = _el.getAttribute("bookmark");
         if (ma == null) {
-            if (mark)
+            if (mark) {
                 _el.addAttribute(new Attribute("bookmark", "yes"));
+            }
             return;
-        }
-        else if (!mark)
+        } else if (!mark) {
             _el.removeAttribute(ma);
+        }
+    }
+
+    /*
+     * Comparable interface
+     */
+    public int compareTo(Object o) {
+        Note note = (Note) o;
+        if (getDate().getDate().getTime() > note.getDate().getDate().getTime()) {
+            return 1;
+        } else if (getDate().getDate().getTime() < note.getDate().getDate().getTime()) {
+            return -1;
+        } else {
+            return 0;
+        }
     }
-	
-	/*
-	 * Comparable interface
-	 */
-	public int compareTo(Object o) {
-		Note note = (Note) o;
-		if(getDate().getDate().getTime() > note.getDate().getDate().getTime())
-			return 1;
-		else if(getDate().getDate().getTime() < note.getDate().getDate().getTime())
-			return -1;
-		else 
-			return 0;
-	}
-    
+
 }
diff --git a/src/net/sf/memoranda/NoteList.java b/src/net/sf/memoranda/NoteList.java
index e7f43c7..93d887a 100755
--- a/src/net/sf/memoranda/NoteList.java
+++ b/src/net/sf/memoranda/NoteList.java
@@ -2,35 +2,37 @@
  * NoteList.java
  * Created on 21.02.2003, 15:40:46 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
-import java.util.Collection;
 
 import net.sf.memoranda.date.CalendarDate;
+
+import java.util.Collection;
+
 /**
- * 
+ *
  */
 /*$Id: NoteList.java,v 1.5 2004/10/07 21:33:36 ivanrise Exp $*/
 public interface NoteList {
-    
+
     Collection getAllNotes();
-    
+
     Collection getMarkedNotes();
 
     Collection getNotesForPeriod(CalendarDate startDate, CalendarDate endDate);
 
     Note getNoteForDate(CalendarDate date);
-    
+
     Note createNoteForDate(CalendarDate date);
-    
-//    void removeNoteForDate(CalendarDate date);
-	void removeNote(CalendarDate date, String id);
+
+    //    void removeNoteForDate(CalendarDate date);
+    void removeNote(CalendarDate date, String id);
 
     Note getActiveNote();
-    
+
     nu.xom.Document getXMLContent();
 
 }
diff --git a/src/net/sf/memoranda/NoteListImpl.java b/src/net/sf/memoranda/NoteListImpl.java
index 1e2ee5b..f8fea04 100755
--- a/src/net/sf/memoranda/NoteListImpl.java
+++ b/src/net/sf/memoranda/NoteListImpl.java
@@ -2,13 +2,11 @@
  * NoteListImpl.java
  * Created on 21.02.2003, 15:43:26 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
-import java.util.Collection;
-import java.util.Vector;
 
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
@@ -17,8 +15,12 @@ import nu.xom.Attribute;
 import nu.xom.Document;
 import nu.xom.Element;
 import nu.xom.Elements;
+
+import java.util.Collection;
+import java.util.Vector;
+
 /**
- * 
+ *
  */
 /*$Id: NoteListImpl.java,v 1.14 2004/10/28 11:30:15 alexeya Exp $*/
 public class NoteListImpl implements NoteList {
@@ -27,7 +29,7 @@ public class NoteListImpl implements NoteList {
     private Document _doc = null;
     private Element _root = null;
 
-//    public static final String NS_JNNL = "http://www.openmechanics.org/2003/jnotes-noteslist";
+    // public static final String NS_JNNL = "http://www.openmechanics.org/2003/jnotes-noteslist";
 
     /**
      * Constructor for NoteListImpl.
@@ -56,17 +58,17 @@ public class NoteListImpl implements NoteList {
                 Vector ds = m.getDays();
                 for (int di = 0; di < ds.size(); di++) {
                     Day d = (Day) ds.get(di);
-					Vector ns = d.getNotes();
-					for(int ni = 0; ni < ns.size(); ni++) {
-						NoteElement n = (NoteElement) ns.get(ni);
-						v.add(new NoteImpl(n.getElement(), _project));
-					}
+                    Vector ns = d.getNotes();
+                    for (int ni = 0; ni < ns.size(); ni++) {
+                        NoteElement n = (NoteElement) ns.get(ni);
+                        v.add(new NoteImpl(n.getElement(), _project));
+                    }
                 }
             }
         }
         return v;
     }
-    
+
     /**
      * @see net.sf.memoranda.NoteList#getMarkedNotes()
      */
@@ -81,17 +83,19 @@ public class NoteListImpl implements NoteList {
                 Vector ds = m.getDays();
                 for (int di = 0; di < ds.size(); di++) {
                     Day d = (Day) ds.get(di);
-					Vector ns = d.getNotes();
-					for(int ni = 0; ni < ns.size(); ni++) {
-						NoteElement ne = (NoteElement) ns.get(ni);
-						Note n = new NoteImpl(ne.getElement(), _project);
-						if (n.isMarked()) v.add(n);
+                    Vector ns = d.getNotes();
+                    for (int ni = 0; ni < ns.size(); ni++) {
+                        NoteElement ne = (NoteElement) ns.get(ni);
+                        Note n = new NoteImpl(ne.getElement(), _project);
+                        if (n.isMarked()) {
+                            v.add(n);
+                        }
+                    }
                 }
             }
         }
+        return v;
     }
-	        return v;
-	}
 
     public Collection getNotesForPeriod(CalendarDate startDate, CalendarDate endDate) {
         Vector v = new Vector();
@@ -103,18 +107,18 @@ public class NoteListImpl implements NoteList {
                 for (int mi = 0; mi < months.size(); mi++) {
                     Month m = (Month) months.get(mi);
                     if (!((y.getValue() == startDate.getYear()) && (m.getValue() < startDate.getMonth()))
-                        || !((y.getValue() == endDate.getYear()) && (m.getValue() > endDate.getMonth()))) {
+                            || !((y.getValue() == endDate.getYear()) && (m.getValue() > endDate.getMonth()))) {
                         Vector days = m.getDays();
                         for (int di = 0; di < days.size(); di++) {
                             Day d = (Day) days.get(di);
                             if (!((m.getValue() == startDate.getMonth()) && (d.getValue() < startDate.getDay()))
-							|| !((m.getValue() == endDate.getMonth()) && (d.getValue() > endDate.getDay()))) {
-								Vector ns = d.getNotes();
-								for(int ni = 0; ni < ns.size(); ni++) {
-									NoteElement n = (NoteElement) ns.get(ni);
-									v.add(new NoteImpl(n.getElement(), _project));
-								}
-							}
+                                    || !((m.getValue() == endDate.getMonth()) && (d.getValue() > endDate.getDay()))) {
+                                Vector ns = d.getNotes();
+                                for (int ni = 0; ni < ns.size(); ni++) {
+                                    NoteElement n = (NoteElement) ns.get(ni);
+                                    v.add(new NoteImpl(n.getElement(), _project));
+                                }
+                            }
                         }
                     }
                 }
@@ -123,73 +127,75 @@ public class NoteListImpl implements NoteList {
         return v;
     }
 
-	/**
-	 * returns the first note for a date.
-	 * @param CalendarDate
-	 * @return Note
-	 */
-	 
+    /**
+     * returns the first note for a date.
+     *
+     * @param CalendarDate
+     * @return Note
+     */
+
     public Note getNoteForDate(CalendarDate date) {
         Day d = getDay(date);
-        if (d == null)
+        if (d == null) {
             return null;
-		Vector ns = d.getNotes();
-		if(ns.size()>0) {
-			NoteElement n = (NoteElement) ns.get(0);
-			Note currentNote = new NoteImpl(n.getElement(), _project);
-			return currentNote; 
-		}
-		return null;
+        }
+        Vector ns = d.getNotes();
+        if (ns.size() > 0) {
+            NoteElement n = (NoteElement) ns.get(0);
+            Note currentNote = new NoteImpl(n.getElement(), _project);
+            return currentNote;
+        }
+        return null;
         //return new NoteImpl(d.getElement(), _project);
     }
 
     public Note createNoteForDate(CalendarDate date) {
         Year y = getYear(date.getYear());
-        if (y == null)
+        if (y == null) {
             y = createYear(date.getYear());
+        }
         Month m = y.getMonth(date.getMonth());
-        if (m == null)
+        if (m == null) {
             m = y.createMonth(date.getMonth());
+        }
         Day d = m.getDay(date.getDay());
-        if (d == null) 
+        if (d == null) {
             d = m.createDay(date.getDay());
-		NoteElement ne = d.createNote(Util.generateId());
+        }
+        NoteElement ne = d.createNote(Util.generateId());
         return new NoteImpl(ne.getElement(), _project);
     }
-    
-     /*
-     * @see net.sf.memoranda.NoteList#removeNoteForDate(net.sf.memoranda.date.CalendarDate)
-     */
-/*    public void removeNoteForDate(CalendarDate date) {
-        Day d = getDay(date);
-        if (d == null) return;
-        d.getElement().getParent().removeChild(d.getElement());             
-    }
-*/
-	 public void removeNote(CalendarDate date, String id) {
+
+    public void removeNote(CalendarDate date, String id) {
         Day d = getDay(date);
-        if (d == null) return;
-		Vector ns = d.getNotes();
-		for(int i=0;i<ns.size();i++) {
-			NoteElement n = (NoteElement) ns.get(i);
-			Element ne = n.getElement();
-			if(ne.getAttribute("refid").getValue().equals(id)) d.getElement().removeChild(n.getElement());
-		}
-//		CurrentNote.set(null);
+        if (d == null) {
+            return;
+        }
+        Vector ns = d.getNotes();
+        for (int i = 0; i < ns.size(); i++) {
+            NoteElement n = (NoteElement) ns.get(i);
+            Element ne = n.getElement();
+            if (ne.getAttribute("refid").getValue().equals(id)) {
+                d.getElement().removeChild(n.getElement());
+            }
+        }
+        // CurrentNote.set(null);
     }
-	
+
     public Note getActiveNote() {
-        //return CurrentNote.get(); 
-    	return getNoteForDate(CurrentDate.get());
-    	// FIXED: Must return the first note for today [alexeya]
+        // return CurrentNote.get();
+        return getNoteForDate(CurrentDate.get());
+        // FIXED: Must return the first note for today [alexeya]
     }
 
     private Year getYear(int y) {
         Elements yrs = _root.getChildElements("year");
         String yy = new Integer(y).toString();
-        for (int i = 0; i < yrs.size(); i++)
-            if (yrs.get(i).getAttribute("year").getValue().equals(yy))
+        for (int i = 0; i < yrs.size(); i++) {
+            if (yrs.get(i).getAttribute("year").getValue().equals(yy)) {
                 return new Year(yrs.get(i));
+            }
+        }
         //return createYear(y);
         return null;
     }
@@ -200,25 +206,35 @@ public class NoteListImpl implements NoteList {
         _root.appendChild(el);
         return new Year(el);
     }
-/*
-    private Vector getYears() {
-        Vector v = new Vector();
-        Elements yrs = _root.getChildElements("year");
-        for (int i = 0; i < yrs.size(); i++)
-            v.add(new Year(yrs.get(i)));
-        return v;
-    }
-*/
+
+    /*
+        private Vector getYears() {
+            Vector v = new Vector();
+            Elements yrs = _root.getChildElements("year");
+            for (int i = 0; i < yrs.size(); i++)
+                v.add(new Year(yrs.get(i)));
+            return v;
+        }
+    */
     private Day getDay(CalendarDate date) {
         Year y = getYear(date.getYear());
-        if (y == null)
+        if (y == null) {
             return null;
+        }
         Month m = y.getMonth(date.getMonth());
-        if (m == null)
+        if (m == null) {
             return null;
+        }
         return m.getDay(date.getDay());
     }
 
+    /**
+     * @see net.sf.memoranda.NoteList#getXMLContent()
+     */
+    public Document getXMLContent() {
+        return _doc;
+    }
+
     private class Year {
         Element yearElement = null;
 
@@ -233,9 +249,11 @@ public class NoteListImpl implements NoteList {
         public Month getMonth(int m) {
             Elements ms = yearElement.getChildElements("month");
             String mm = new Integer(m).toString();
-            for (int i = 0; i < ms.size(); i++)
-                if (ms.get(i).getAttribute("month").getValue().equals(mm))
+            for (int i = 0; i < ms.size(); i++) {
+                if (ms.get(i).getAttribute("month").getValue().equals(mm)) {
                     return new Month(ms.get(i));
+                }
+            }
             //return createMonth(m);
             return null;
         }
@@ -250,8 +268,9 @@ public class NoteListImpl implements NoteList {
         public Vector getMonths() {
             Vector v = new Vector();
             Elements ms = yearElement.getChildElements("month");
-            for (int i = 0; i < ms.size(); i++)
+            for (int i = 0; i < ms.size(); i++) {
                 v.add(new Month(ms.get(i)));
+            }
             return v;
         }
 
@@ -261,6 +280,11 @@ public class NoteListImpl implements NoteList {
 
     }
 
+    
+    /*
+     * private class Day
+     */
+
     private class Month {
         Element mElement = null;
 
@@ -273,13 +297,16 @@ public class NoteListImpl implements NoteList {
         }
 
         public Day getDay(int d) {
-            if (mElement == null)
+            if (mElement == null) {
                 return null;
+            }
             Elements ds = mElement.getChildElements("day");
             String dd = new Integer(d).toString();
-            for (int i = 0; i < ds.size(); i++)
-                if (ds.get(i).getAttribute("day").getValue().equals(dd))
+            for (int i = 0; i < ds.size(); i++) {
+                if (ds.get(i).getAttribute("day").getValue().equals(dd)) {
                     return new Day(ds.get(i));
+                }
+            }
             //return createDay(d);
             return null;
         }
@@ -287,7 +314,9 @@ public class NoteListImpl implements NoteList {
         private Day createDay(int d) {
             Element el = new Element("day");
             el.addAttribute(new Attribute("day", new Integer(d).toString()));
-/*            el.addAttribute(
+
+            /*
+            el.addAttribute(
                 new Attribute(
                     "date",
                     new CalendarDate(
@@ -295,18 +324,20 @@ public class NoteListImpl implements NoteList {
                         getValue(),
                         new Integer(((Element) mElement.getParent()).getAttribute("year").getValue()).intValue())
                         .toString()));
-*/
+            */
             mElement.appendChild(el);
             return new Day(el);
         }
 
         public Vector getDays() {
-            if (mElement == null)
+            if (mElement == null) {
                 return null;
+            }
             Vector v = new Vector();
             Elements ds = mElement.getChildElements("day");
-            for (int i = 0; i < ds.size(); i++)
+            for (int i = 0; i < ds.size(); i++) {
                 v.add(new Day(ds.get(i)));
+            }
             return v;
         }
 
@@ -316,28 +347,28 @@ public class NoteListImpl implements NoteList {
 
     }
 
-	
-	/*
-	 * private class Day
-	 */
-	 
+    
+    /*
+     * private class Day
+     */
+
     private class Day {
         Element dEl = null;
 
         public Day(Element el) {
             dEl = el;
-            // Added to fix old '.notes' XML format 
+            // Added to fix old '.notes' XML format
             // Old-style XML is converted on the fly [alexeya]
             if (dEl.getAttribute("date") != null) {
-            	Attribute dAttr = dEl.getAttribute("date");
-            	Attribute tAttr = dEl.getAttribute("title");
-				Element nEl = new Element("note");
-				String date = dAttr.getValue().replace('/', '-');
-				nEl.addAttribute(new Attribute("refid", date));
-				nEl.addAttribute(new Attribute("title", tAttr.getValue()));
-				dEl.appendChild(nEl);
-            	dEl.removeAttribute(dAttr);            	
-				dEl.removeAttribute(tAttr);
+                Attribute dAttr = dEl.getAttribute("date");
+                Attribute tAttr = dEl.getAttribute("title");
+                Element nEl = new Element("note");
+                String date = dAttr.getValue().replace('/', '-');
+                nEl.addAttribute(new Attribute("refid", date));
+                nEl.addAttribute(new Attribute("title", tAttr.getValue()));
+                dEl.appendChild(nEl);
+                dEl.removeAttribute(dAttr);
+                dEl.removeAttribute(tAttr);
             }
         }
 
@@ -348,23 +379,27 @@ public class NoteListImpl implements NoteList {
         /*public Note getNote() {
             return new NoteImpl(dEl);
         }*/
-		
-		public NoteElement getNote(String d) {
-            if (dEl == null) 
-				return null;
+
+        public NoteElement getNote(String d) {
+            if (dEl == null) {
+                return null;
+            }
             Elements ne = dEl.getChildElements("note");
-            
-            for (int i = 0; i < ne.size(); i++)
-                if (ne.get(i).getAttribute("refid").getValue().equals(d))
+
+            for (int i = 0; i < ne.size(); i++) {
+                if (ne.get(i).getAttribute("refid").getValue().equals(d)) {
                     return new NoteElement(ne.get(i));
+                }
+            }
             //return createDay(d);
             return null;
         }
 
         public NoteElement createNote(String d) {
             Element el = new Element("note");
-//			el.addAttribute(new Attribute("refid", d));
-/*            el.addAttribute(new Attribute("day", new Integer(d).toString()));
+            /*
+            el.addAttribute(new Attribute("refid", d));
+            el.addAttribute(new Attribute("day", new Integer(d).toString()));
                         el.addAttribute(
                 new Attribute(
                     "date",
@@ -372,18 +407,20 @@ public class NoteListImpl implements NoteList {
                         10,
                         10,
                         2004).toString()));
-*/						
+            */
             dEl.appendChild(el);
             return new NoteElement(el);
         }
 
         public Vector getNotes() {
-            if (dEl == null)
+            if (dEl == null) {
                 return null;
+            }
             Vector v = new Vector();
             Elements ds = dEl.getChildElements("note");
-            for (int i = 0; i < ds.size(); i++)
-                v.add(new NoteElement(ds.get(i)));                                    
+            for (int i = 0; i < ds.size(); i++) {
+                v.add(new NoteElement(ds.get(i)));
+            }
             return v;
         }
 
@@ -391,31 +428,18 @@ public class NoteListImpl implements NoteList {
             return dEl;
         }
     }
-	
-	
-	/*
-	 * private class Day
-	 */
-	 
-	private class NoteElement {
-		Element nEl;
-		
-		public NoteElement(Element el) {
-			nEl = el;
-		}
-		
-		public Element getElement() {
-			return nEl;
-		}
-	}
-	
-    /**
-     * @see net.sf.memoranda.NoteList#getXMLContent()
-     */
-    public Document getXMLContent() {
-        return _doc;
+
+    private class NoteElement {
+        Element nEl;
+
+        public NoteElement(Element el) {
+            nEl = el;
+        }
+
+        public Element getElement() {
+            return nEl;
+        }
     }
-   
-    
+
 
 }
diff --git a/src/net/sf/memoranda/NoteListener.java b/src/net/sf/memoranda/NoteListener.java
index a6a7fd2..168cd19 100755
--- a/src/net/sf/memoranda/NoteListener.java
+++ b/src/net/sf/memoranda/NoteListener.java
@@ -1,5 +1,5 @@
 package net.sf.memoranda;
 
 public interface NoteListener {
-  void noteChange(Note note, boolean toSaveCurrentNote);
+    void noteChange(Note note, boolean toSaveCurrentNote);
 }
diff --git a/src/net/sf/memoranda/Project.java b/src/net/sf/memoranda/Project.java
index 15d30b5..0276e29 100755
--- a/src/net/sf/memoranda/Project.java
+++ b/src/net/sf/memoranda/Project.java
@@ -2,7 +2,7 @@
  * Project.java
  * Created on 11.02.2003, 16:11:47 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
@@ -11,48 +11,54 @@ package net.sf.memoranda;
 import net.sf.memoranda.date.CalendarDate;
 
 /**
- * 
+ *
  */
 
 /*$Id: Project.java,v 1.5 2004/11/22 10:02:37 alexeya Exp $*/
 public interface Project {
-    
+
     public static final int SCHEDULED = 0;
-   
+
     public static final int ACTIVE = 1;
-    
+
     public static final int COMPLETED = 2;
-    
+
     public static final int FROZEN = 4;
-    
+
     public static final int FAILED = 5;
-    
+
     String getID();
-       
+
     CalendarDate getStartDate();
+
     void setStartDate(CalendarDate date);
-    
+
     CalendarDate getEndDate();
+
     void setEndDate(CalendarDate date);
-    
+
     String getTitle();
+
     void setTitle(String title);
-    
-    void setDescription(String description);
+
     String getDescription();
-    
+
+    void setDescription(String description);
+
     int getStatus();
-            
+
     //int getProgress();
-    
+
     //TaskList getTaskList();
-    
+
     //NoteList getNoteList();
-    
+
     //ResourcesList getResourcesList();
-    
+
     void freeze();
-    void unfreeze();  
+
+    void unfreeze();
+
     public boolean equals(Project prj);
-    
+
 }
diff --git a/src/net/sf/memoranda/ProjectImpl.java b/src/net/sf/memoranda/ProjectImpl.java
index 4696701..aa79c07 100755
--- a/src/net/sf/memoranda/ProjectImpl.java
+++ b/src/net/sf/memoranda/ProjectImpl.java
@@ -2,7 +2,7 @@
  * ProjectImpl.java
  * Created on 11.02.2003, 23:06:22 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
@@ -24,7 +24,7 @@ public class ProjectImpl implements Project {
     /**
      * Constructor for ProjectImpl.
      */
-    public ProjectImpl(Element root) {        
+    public ProjectImpl(Element root) {
         _root = root;
     }
 
@@ -40,16 +40,19 @@ public class ProjectImpl implements Project {
      */
     public CalendarDate getStartDate() {
         Attribute d = _root.getAttribute("startDate");
-        if (d == null) return null;
-        return new CalendarDate(d.getValue());        
+        if (d == null) {
+            return null;
+        }
+        return new CalendarDate(d.getValue());
     }
 
     /**
      * @see net.sf.memoranda.Project#setStartDate(net.sf.memoranda.util.CalendarDate)
      */
     public void setStartDate(CalendarDate date) {
-        if (date != null)
+        if (date != null) {
             setAttr("startDate", date.toString());
+        }
     }
 
     /**
@@ -57,7 +60,9 @@ public class ProjectImpl implements Project {
      */
     public CalendarDate getEndDate() {
         Attribute d = _root.getAttribute("endDate");
-        if (d == null) return null;
+        if (d == null) {
+            return null;
+        }
         return new CalendarDate(d.getValue());
     }
 
@@ -65,42 +70,46 @@ public class ProjectImpl implements Project {
      * @see net.sf.memoranda.Project#setEndDate(net.sf.memoranda.util.CalendarDate)
      */
     public void setEndDate(CalendarDate date) {
-    	CalendarDate start = (getStartDate() == null ? CalendarDate.tomorrow() : getStartDate());
-    	
-        if (date != null)
-        	if (date.before(start))
-            	setAttr("endDate", start.toString());
-        	else
-        		setAttr("endDate", date.toString());
-    	else if(_root.getAttribute("endDate") != null)
-    		setAttr("endDate", null);
+        CalendarDate start = (getStartDate() == null ? CalendarDate.tomorrow() : getStartDate());
+
+        if (date != null) {
+            if (date.before(start)) {
+                setAttr("endDate", start.toString());
+            } else {
+                setAttr("endDate", date.toString());
+            }
+        } else if (_root.getAttribute("endDate") != null) {
+            setAttr("endDate", null);
+        }
     }
 
     /**
      * @see net.sf.memoranda.Project#getStatus()
      */
     public int getStatus() {
-        if (isFrozen())
+        if (isFrozen()) {
             return Project.FROZEN;
+        }
         CalendarDate today = CurrentDate.get();
         CalendarDate prStart = getStartDate();
         CalendarDate prEnd = getEndDate();
         if (prEnd == null) {
-            if (today.before(prStart))
+            if (today.before(prStart)) {
                 return Project.SCHEDULED;
-            else
-                return Project.ACTIVE;                
-        }    
-        if (today.inPeriod(prStart, prEnd))
+            } else {
+                return Project.ACTIVE;
+            }
+        }
+        if (today.inPeriod(prStart, prEnd)) {
             return Project.ACTIVE;
-        else if (today.after(prEnd)) {
+        } else if (today.after(prEnd)) {
             //if (getProgress() == 100)
-                return Project.COMPLETED;
+            return Project.COMPLETED;
             /*else
                 return Project.FAILED;*/
-        }
-        else
+        } else {
             return Project.SCHEDULED;
+        }
     }
 
     private boolean isFrozen() {
@@ -118,8 +127,8 @@ public class ProjectImpl implements Project {
         }
         return (p*100)/(v.size()*100);
     }*/
-  
-    
+
+
     /**
      * @see net.sf.memoranda.Project#freeze()
      */
@@ -131,61 +140,63 @@ public class ProjectImpl implements Project {
      * @see net.sf.memoranda.Project#unfreeze()
      */
     public void unfreeze() {
-        if (this.isFrozen())
+        if (this.isFrozen()) {
             _root.removeAttribute(new Attribute("frozen", "yes"));
+        }
     }
-    
+
     /**
      * @see net.sf.memoranda.Project#getTitle()
      */
     public String getTitle() {
         Attribute ta = _root.getAttribute("title");
-        if (ta != null)
+        if (ta != null) {
             return ta.getValue();
+        }
         return "";
     }
+
     /**
      * @see net.sf.memoranda.Project#setTitle(java.lang.String)
      */
     public void setTitle(String title) {
         setAttr("title", title);
     }
-    
+
     private void setAttr(String name, String value) {
         Attribute a = _root.getAttribute(name);
         if (a == null) {
-            if (value != null)
-             _root.addAttribute(new Attribute(name, value));
-        }
-        else if (value != null)        
+            if (value != null) {
+                _root.addAttribute(new Attribute(name, value));
+            }
+        } else if (value != null) {
             a.setValue(value);
-        else 
+        } else {
             _root.removeAttribute(a);
+        }
     }
 
-	public String getDescription() {
-    	Element thisElement = _root.getFirstChildElement("description");
-    	if (thisElement == null) {
-    		return null;
-    	}
-    	else {
-       		return thisElement.getValue();
-    	}
+    public String getDescription() {
+        Element thisElement = _root.getFirstChildElement("description");
+        if (thisElement == null) {
+            return null;
+        } else {
+            return thisElement.getValue();
+        }
     }
 
     public void setDescription(String s) {
-    	Element desc = _root.getFirstChildElement("description");
-    	if (desc == null) {
-        	desc = new Element("description");
+        Element desc = _root.getFirstChildElement("description");
+        if (desc == null) {
+            desc = new Element("description");
             desc.appendChild(s);
-            _root.appendChild(desc);    	
-    	}
-    	else {
+            _root.appendChild(desc);
+        } else {
             desc.removeChildren();
-            desc.appendChild(s);    	
-    	}
+            desc.appendChild(s);
+        }
     }
-        
+
     /**
      * @see net.sf.memoranda.Project#getTaskList()
      */
@@ -198,14 +209,14 @@ public class ProjectImpl implements Project {
     /*public NoteList getNoteList() {
         return CurrentStorage.get().openNoteList(this);
     }*/
+
     /**
      * @see net.sf.memoranda.Project#getResourcesList()
      */
     /*public ResourcesList getResourcesList() {
         return CurrentStorage.get().openResourcesList(this);
     }*/
-    
     public boolean equals(Project prj) {
-    	return (this.getID().equals(prj.getID()));
+        return (this.getID().equals(prj.getID()));
     }
 }
diff --git a/src/net/sf/memoranda/ProjectListener.java b/src/net/sf/memoranda/ProjectListener.java
index 8800cf8..3fffe88 100755
--- a/src/net/sf/memoranda/ProjectListener.java
+++ b/src/net/sf/memoranda/ProjectListener.java
@@ -2,6 +2,7 @@ package net.sf.memoranda;
 
 /*$Id: ProjectListener.java,v 1.3 2004/01/30 12:17:41 alexeya Exp $*/
 public interface ProjectListener {
-  void projectChange(Project prj, NoteList nl, TaskList tl, ResourcesList rl);
-  void projectWasChanged();
+    void projectChange(Project prj, NoteList nl, TaskList tl, ResourcesList rl);
+
+    void projectWasChanged();
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ProjectManager.java b/src/net/sf/memoranda/ProjectManager.java
index 400cc9e..ac4ab7f 100755
--- a/src/net/sf/memoranda/ProjectManager.java
+++ b/src/net/sf/memoranda/ProjectManager.java
@@ -8,8 +8,6 @@
  */
 package net.sf.memoranda;
 
-import java.util.Vector;
-
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Local;
@@ -19,31 +17,33 @@ import nu.xom.Document;
 import nu.xom.Element;
 import nu.xom.Elements;
 
+import java.util.Vector;
+
 /**
  *
  */
 /*$Id: ProjectManager.java,v 1.9 2005/12/01 08:12:26 alexeya Exp $*/
 public class ProjectManager {
-//    public static final String NS_JNPROJECT = "http://www.openmechanics.org/2003/jnotes-projects-file";
+    //    public static final String NS_JNPROJECT = "http://www.openmechanics.org/2003/jnotes-projects-file";
 
     public static Document _doc = null;
     static Element _root = null;
-    
+
     static {
-    	init();
+        init();
     }
 
     public static void init() {
         CurrentStorage.get().openProjectManager();
         if (_doc == null) {
             _root = new Element("projects-list");
-//            _root.addNamespaceDeclaration("jnotes", NS_JNPROJECT);
-//            _root.appendChild(new Comment("This is JNotes 2 data file. Do not modify."));
+            //            _root.addNamespaceDeclaration("jnotes", NS_JNPROJECT);
+            //            _root.appendChild(new Comment("This is JNotes 2 data file. Do not modify."));
             _doc = new Document(_root);
             createProject("__default", Local.getString("Default project"), CalendarDate.today(), null);
-        }
-        else
+        } else {
             _root = _doc.getRootElement();
+        }
     }
 
     public static Project getProject(String id) {
@@ -60,20 +60,20 @@ public class ProjectManager {
     public static Vector getAllProjects() {
         Elements prjs = _root.getChildElements("project");
         Vector v = new Vector();
-        for (int i = 0; i < prjs.size(); i++)
+        for (int i = 0; i < prjs.size(); i++) {
             v.add(new ProjectImpl((Element) prjs.get(i)));
+        }
         return v;
     }
 
     public static int getAllProjectsNumber() {
-		int i;
+        int i;
         try {
-			i = ((Elements)_root.getChildElements("project")).size();
-		}
-		catch (NullPointerException e) {
-			i = 1;
-		}
-		return i;
+            i = ((Elements) _root.getChildElements("project")).size();
+        } catch (NullPointerException e) {
+            i = 1;
+        }
+        return i;
     }
 
     public static Vector getActiveProjects() {
@@ -81,19 +81,21 @@ public class ProjectManager {
         Vector v = new Vector();
         for (int i = 0; i < prjs.size(); i++) {
             Project prj = new ProjectImpl((Element) prjs.get(i));
-            if (prj.getStatus() == Project.ACTIVE)
+            if (prj.getStatus() == Project.ACTIVE) {
                 v.add(prj);
+            }
         }
         return v;
     }
-		
+
     public static int getActiveProjectsNumber() {
         Elements prjs = _root.getChildElements("project");
         int count = 0;
         for (int i = 0; i < prjs.size(); i++) {
             Project prj = new ProjectImpl((Element) prjs.get(i));
-            if (prj.getStatus() == Project.ACTIVE)
+            if (prj.getStatus() == Project.ACTIVE) {
                 count++;
+            }
         }
         return count;
     }
@@ -103,11 +105,10 @@ public class ProjectManager {
         el.addAttribute(new Attribute("id", id));
         _root.appendChild(el);
         Project prj = new ProjectImpl(el);
-        if(title.length() < 1 || title.equals(null)) {
-        	prj.setTitle("Unknown");
-        }
-        else {
-        	prj.setTitle(title);
+        if (title.length() < 1 || title.equals(null)) {
+            prj.setTitle("Unknown");
+        } else {
+            prj.setTitle(title);
         }
         prj.setStartDate(startDate);
         prj.setEndDate(endDate);
@@ -118,11 +119,12 @@ public class ProjectManager {
     public static Project createProject(String title, CalendarDate startDate, CalendarDate endDate) {
         return createProject(Util.generateId(), title, startDate, endDate);
     }
-    
+
     public static void removeProject(String id) {
         Project prj = getProject(id);
-        if (prj == null)
+        if (prj == null) {
             return;
+        }
         History.removeProjectHistory(prj);
         CurrentStorage.get().removeProjectStorage(prj);
         Elements prjs = _root.getChildElements("project");
diff --git a/src/net/sf/memoranda/Resource.java b/src/net/sf/memoranda/Resource.java
index 8ce69c7..aedb964 100755
--- a/src/net/sf/memoranda/Resource.java
+++ b/src/net/sf/memoranda/Resource.java
@@ -2,47 +2,49 @@
  * Resource.java
  * Created on 04.04.2003, 20:59:24 Alex
  * Package: net.sf.memoranda
- *  
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
 /**
- * 
+ *
  */
 /*$Id: Resource.java,v 1.4 2007/03/20 06:21:46 alexeya Exp $*/
 public class Resource {
-    
-    private String _path = null;	// the path to the file
+
+    private String _path = null;    // the path to the file
     private boolean _isInetShortcut = false; // true if Internet shortcut
-    private boolean _isProjectFile = false;	// true if file is in project directory 
+    private boolean _isProjectFile = false;    // true if file is in project directory
+
     /**
      * Constructor for Resource.
-     * @param path, the path to the file.
+     *
+     * @param path,           the path to the file.
      * @param isInetShortcut, if the resource is a internet shortcut.
-     * @param isProjectFile, if file is copied to project directory.
+     * @param isProjectFile,  if file is copied to project directory.
      */
     public Resource(String path, boolean isInetShortcut, boolean isProjectFile) {
         _path = path;
         _isInetShortcut = isInetShortcut;
         _isProjectFile = isProjectFile;
     }
-    
+
     public Resource(String path) {
-        _path = path;         
+        _path = path;
     }
-    
+
     public String getPath() {
         return _path;
     }
-    
+
     public boolean isInetShortcut() {
         return _isInetShortcut;
     }
-    
+
     public boolean isProjectFile() {
-    	return _isProjectFile;
+        return _isProjectFile;
     }
 
 }
diff --git a/src/net/sf/memoranda/ResourcesList.java b/src/net/sf/memoranda/ResourcesList.java
index 982c0fc..30d104f 100755
--- a/src/net/sf/memoranda/ResourcesList.java
+++ b/src/net/sf/memoranda/ResourcesList.java
@@ -2,37 +2,38 @@
  * ResourcesList.java
  * Created on 24.03.2003, 18:25:59 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda;
 
+import nu.xom.Document;
+
 import java.util.Vector;
 
-import nu.xom.Document;
 /**
- * 
+ *
  */
 /*$Id: ResourcesList.java,v 1.4 2007/03/20 06:21:46 alexeya Exp $*/
 public interface ResourcesList {
-    
+
     Vector getAllResources();
-    
+
     //Vector getResourcesForTask(String taskId);
-    
+
     Resource getResource(String path);
-    
+
     void addResource(String path, boolean isInternetShortcut, boolean isProjectFile);
-    
+
     void addResource(String path);
-    
+
     //void addResource(String path, String taskId);
-    
+
     void removeResource(String path);
-        
+
     int getAllResourcesCount();
-    
+
     Document getXMLContent();
 
 }
diff --git a/src/net/sf/memoranda/ResourcesListImpl.java b/src/net/sf/memoranda/ResourcesListImpl.java
index 19e111d..535f8cb 100755
--- a/src/net/sf/memoranda/ResourcesListImpl.java
+++ b/src/net/sf/memoranda/ResourcesListImpl.java
@@ -8,22 +8,22 @@
  */
 package net.sf.memoranda;
 
-import java.util.Vector;
-import java.io.File;
-
 import net.sf.memoranda.util.Util;
 import nu.xom.Attribute;
 import nu.xom.Document;
 import nu.xom.Element;
 import nu.xom.Elements;
 
+import java.io.File;
+import java.util.Vector;
+
 /**
  *
  */
 /*$Id: ResourcesListImpl.java,v 1.5 2007/03/20 06:21:46 alexeya Exp $*/
 public class ResourcesListImpl implements ResourcesList {
-    
-	private Project _project = null;
+
+    private Project _project = null;
     private Document _doc = null;
     private Element _root = null;
 
@@ -37,16 +37,17 @@ public class ResourcesListImpl implements ResourcesList {
     }
 
     public ResourcesListImpl(Project prj) {
-            _root = new Element("resources-list");
-            _doc = new Document(_root);
-            _project = prj;
+        _root = new Element("resources-list");
+        _doc = new Document(_root);
+        _project = prj;
     }
 
     public Vector getAllResources() {
         Vector v = new Vector();
         Elements rs = _root.getChildElements("resource");
-        for (int i = 0; i < rs.size(); i++)
+        for (int i = 0; i < rs.size(); i++) {
             v.add(new Resource(rs.get(i).getAttribute("path").getValue(), rs.get(i).getAttribute("isInetShortcut") != null, rs.get(i).getAttribute("isProjectFile") != null));
+        }
         return v;
     }
 
@@ -55,9 +56,11 @@ public class ResourcesListImpl implements ResourcesList {
      */
     public Resource getResource(String path) {
         Elements rs = _root.getChildElements("resource");
-        for (int i = 0; i < rs.size(); i++)
-            if (rs.get(i).getAttribute("path").getValue().equals(path))
+        for (int i = 0; i < rs.size(); i++) {
+            if (rs.get(i).getAttribute("path").getValue().equals(path)) {
                 return new Resource(rs.get(i).getAttribute("path").getValue(), rs.get(i).getAttribute("isInetShortcut") != null, rs.get(i).getAttribute("isProjectFile") != null);
+            }
+        }
         return null;
     }
 
@@ -71,18 +74,20 @@ public class ResourcesListImpl implements ResourcesList {
         if (taskId != null) el.addAttribute(new Attribute("taskId", taskId));
         _root.appendChild(el);
     }*/
-    
+
     /**
      * @see net.sf.memoranda.ResourcesList#addResource(java.lang.String, boolean)
      */
     public void addResource(String path, boolean isInternetShortcut, boolean isProjectFile) {
         Element el = new Element("resource");
         el.addAttribute(new Attribute("id", Util.generateId()));
-        el.addAttribute(new Attribute("path", path));  
-        if (isInternetShortcut)
+        el.addAttribute(new Attribute("path", path));
+        if (isInternetShortcut) {
             el.addAttribute(new Attribute("isInetShortcut", "true"));
-        if (isProjectFile)
+        }
+        if (isProjectFile) {
             el.addAttribute(new Attribute("isProjectFile", "true"));
+        }
         _root.appendChild(el);
     }
 
@@ -95,17 +100,18 @@ public class ResourcesListImpl implements ResourcesList {
      */
     public void removeResource(String path) {
         Elements rs = _root.getChildElements("resource");
-        for (int i = 0; i < rs.size(); i++)
+        for (int i = 0; i < rs.size(); i++) {
             if (rs.get(i).getAttribute("path").getValue().equals(path)) {
-            	if(getResource(path).isProjectFile()) {
-            		File f = new File(path);
-            		System.out.println("[DEBUG] Removing file "+path);
-                	f.delete();
-            	}
-            	_root.removeChild(rs.get(i));
+                if (getResource(path).isProjectFile()) {
+                    File f = new File(path);
+                    System.out.println("[DEBUG] Removing file " + path);
+                    f.delete();
+                }
+                _root.removeChild(rs.get(i));
             }
+        }
     }
-        
+
 
     /**
      * @see net.sf.memoranda.ResourcesList#getAllResourcesCount()
@@ -113,13 +119,14 @@ public class ResourcesListImpl implements ResourcesList {
     public int getAllResourcesCount() {
         return _root.getChildElements("resource").size();
     }
+
     /**
      * @see net.sf.memoranda.ResourcesList#getXMLContent()
      */
     public Document getXMLContent() {
         return _doc;
     }
-    
+
     /**
      * @see net.sf.memoranda.ResourcesList#getResourcesForTask(java.lang.String)
      */
@@ -131,6 +138,6 @@ public class ResourcesListImpl implements ResourcesList {
                 v.add(rs.get(i).getAttribute("path").getValue());
         return v;
     }*/
-   
+
 
 }
diff --git a/src/net/sf/memoranda/Start.java b/src/net/sf/memoranda/Start.java
index d0c06a1..dfd30a0 100755
--- a/src/net/sf/memoranda/Start.java
+++ b/src/net/sf/memoranda/Start.java
@@ -8,20 +8,21 @@
  */
 package net.sf.memoranda;
 
+import net.sf.memoranda.ui.App;
+import net.sf.memoranda.ui.ExceptionDialog;
+import net.sf.memoranda.util.Configuration;
+
 import java.net.ServerSocket;
 import java.net.Socket;
 
-import net.sf.memoranda.ui.*;
-import net.sf.memoranda.util.Configuration;
-
 /**
  * test
  */
 /*$Id: Start.java,v 1.7 2004/11/22 10:02:37 alexeya Exp $*/
 public class Start {
-    
+
     static App app = null;
-    
+
     static int DEFAULT_PORT = 19432;
     static boolean checkIfAlreadyStartet = true;
 
@@ -36,13 +37,13 @@ public class Start {
             }
             /*DEBUG*/ //System.out.println("Port " + DEFAULT_PORT + " used.");
         }
-        
+
         String check = Configuration.get("CHECK_IF_ALREADY_STARTED").toString().trim();
         if (check.length() > 0 && check.equalsIgnoreCase("no")) {
             checkIfAlreadyStartet = false;
         }
     }
-    
+
     public static void main(String[] args) {
         if (checkIfAlreadyStartet) {
             try {
@@ -50,25 +51,25 @@ public class Start {
                 Socket socket = new Socket("127.0.0.1", DEFAULT_PORT);
                 socket.close();
                 System.exit(0);
-                
+
             } catch (Exception e) {
                 // If socket is not opened (app is not started), continue
                 // e.printStackTrace();
             }
             new SLThread().start();
         }
-        
+
         //System.out.println(EventsScheduler.isEventScheduled());
         if ((args.length == 0) || (!args[0].equals("-m"))) {
             app = new App(true);
-        }
-        else
+        } else {
             app = new App(false);
+        }
     }
 }
 
 class SLThread extends Thread {
-    
+
     public void run() {
         ServerSocket serverSocket = null;
         try {
@@ -77,12 +78,12 @@ class SLThread extends Thread {
             Start.app.show();
             serverSocket.close();
             new SLThread().start();
-            
+
         } catch (Exception e) {
-            System.err.println("Port:"+Start.DEFAULT_PORT);
+            System.err.println("Port:" + Start.DEFAULT_PORT);
             e.printStackTrace();
-            new ExceptionDialog(e, "Cannot create a socket connection on localhost:"+Start.DEFAULT_PORT,
-            "Make sure that other software does not use the port "+Start.DEFAULT_PORT+" and examine your security settings.");
+            new ExceptionDialog(e, "Cannot create a socket connection on localhost:" + Start.DEFAULT_PORT,
+                    "Make sure that other software does not use the port " + Start.DEFAULT_PORT + " and examine your security settings.");
         }
     }
 }
diff --git a/src/net/sf/memoranda/Task.java b/src/net/sf/memoranda/Task.java
index 09c5c91..44528e5 100755
--- a/src/net/sf/memoranda/Task.java
+++ b/src/net/sf/memoranda/Task.java
@@ -2,119 +2,124 @@
  * Task.java
  * Created on 11.02.2003, 16:39:13 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 
 package net.sf.memoranda;
 
-import java.util.Collection;
 import net.sf.memoranda.date.CalendarDate;
 
+import java.util.Collection;
+
 
-/** Interface for tasks.
- * Implemented in IaskImpl 
+/**
+ * Interface for tasks.
+ * Implemented in IaskImpl
  */
 /*$Id: Task.java,v 1.9 2005/06/16 04:21:32 alexeya Exp $*/
 public interface Task {
-    
-  public static final int SCHEDULED = 0;
-  public static final int ACTIVE = 1;
-  public static final int COMPLETED = 2;
-  public static final int FROZEN = 4;
-  public static final int FAILED = 5;    
-  public static final int LOCKED = 6;    
-  public static final int DEADLINE = 7;    
-  public static final int PRIORITY_LOWEST = 0;    
-  public static final int PRIORITY_LOW = 1;    
-  public static final int PRIORITY_NORMAL = 2;    
-  public static final int PRIORITY_HIGH = 3;    
-  public static final int PRIORITY_HIGHEST = 4;
-  public static final int NO_REPEAT = 0;
-  public static final int REPEAT_DAILY = 1;
-  public static final int REPEAT_WEEKLY = 2;
-  public static final int REPEAT_MONTHLY = 3;
-  public static final int REPEAT_YEARLY = 4;
-  public static final int[] REPEAT_FREQUENCIES_INDEX = 
-  {NO_REPEAT, REPEAT_DAILY, REPEAT_WEEKLY, REPEAT_MONTHLY, REPEAT_YEARLY};
-  public static final String[] REPEAT_FREQUENCIES_LIST = 
-  {"Never Repeat","Daily", "Weekly", "Monthly", "Yearly"};
-    
-  CalendarDate getStartDate();
-  
-  void setStartDate(CalendarDate date);
 
-  CalendarDate getEndDate();
-  
-  void setEndDate(CalendarDate date);
-    
-  int getStatus(CalendarDate date);
-    
-  int getProgress();
-  
-  void setProgress(int p);
-    
-  int getPriority();
-  
-  void setPriority(int p);
-    
-  String getId();
-    
-  String getText();
+    public static final int SCHEDULED = 0;
+    public static final int ACTIVE = 1;
+    public static final int COMPLETED = 2;
+    public static final int FROZEN = 4;
+    public static final int FAILED = 5;
+    public static final int LOCKED = 6;
+    public static final int DEADLINE = 7;
+    public static final int PRIORITY_LOWEST = 0;
+    public static final int PRIORITY_LOW = 1;
+    public static final int PRIORITY_NORMAL = 2;
+    public static final int PRIORITY_HIGH = 3;
+    public static final int PRIORITY_HIGHEST = 4;
+    public static final int NO_REPEAT = 0;
+    public static final int REPEAT_DAILY = 1;
+    public static final int REPEAT_WEEKLY = 2;
+    public static final int REPEAT_MONTHLY = 3;
+    public static final int REPEAT_YEARLY = 4;
+    public static final int[] REPEAT_FREQUENCIES_INDEX = {
+            NO_REPEAT, REPEAT_DAILY, REPEAT_WEEKLY, REPEAT_MONTHLY, REPEAT_YEARLY
+    };
+    public static final String[] REPEAT_FREQUENCIES_LIST = {
+            "Never Repeat", "Daily", "Weekly", "Monthly", "Yearly"
+    };
 
-  void setText(String s);
-    
-  /*Collection getDependsFrom();
-   
-  void addDependsFrom(Task task);
-    
-  void removeDependsFrom(Task task);*/
-            
-  Collection getSubTasks();    
-  
-  Task getSubTask(String id);
-    
-  boolean hasSubTasks(String id);
-    
-  void setEffort(long effort);
-  
-  long getEffort();
-    
-  void setDescription(String description);
-  
-  String getDescription();
+    CalendarDate getStartDate();
 
-  Task getParentTask();
-  
-  String getParentId();
-    
-  void setParentTask(String parentTaskId, nu.xom.Element root);
-    
-  void freeze();
+    void setStartDate(CalendarDate date);
+
+    CalendarDate getEndDate();
+
+    void setEndDate(CalendarDate date);
+
+    int getStatus(CalendarDate date);
+
+    int getProgress();
+
+    void setProgress(int p);
 
-  void unfreeze();
+    int getPriority();
 
-  long getRate();
+    void setPriority(int p);
+
+    String getId();
+
+    String getText();
+
+    void setText(String s);
     
-  nu.xom.Element getContent();
+    /*
+    Collection getDependsFrom();
+
+    void addDependsFrom(Task task);
+
+    void removeDependsFrom(Task task);
+    */
+
+    Collection getSubTasks();
+
+    Task getSubTask(String id);
+
+    boolean hasSubTasks(String id);
+
+    long getEffort();
+
+    void setEffort(long effort);
+
+    String getDescription();
+
+    void setDescription(String description);
+
+    Task getParentTask();
+
+    String getParentId();
+
+    void setParentTask(String parentTaskId, nu.xom.Element root);
+
+    void freeze();
+
+    void unfreeze();
+
+    long getRate();
+
+    nu.xom.Element getContent();
+
+
+    int getPeriod();
+
+    boolean isRepeatable();
+
+    boolean getWorkingDaysOnly();
 
-  
-  int getPeriod();
-  
-  boolean isRepeatable();
-  
+    void setWorkingDaysOnly(boolean workDaysOnly);
 
-  void setWorkingDaysOnly(boolean workDaysOnly);
-  
-  boolean getWorkingDaysOnly();
+    int getRepeatType();
 
-  int getRepeatType();
-  
-  void setRepeatType(int repeatType);
+    void setRepeatType(int repeatType);
 
-  CalendarDate getEndRepeat();
+    CalendarDate getEndRepeat();
 
-  void setEndRepeat(CalendarDate endRepeat);
+    void setEndRepeat(CalendarDate endRepeat);
 
 }
diff --git a/src/net/sf/memoranda/TaskImpl.java b/src/net/sf/memoranda/TaskImpl.java
index c731ae6..fd7db19 100755
--- a/src/net/sf/memoranda/TaskImpl.java
+++ b/src/net/sf/memoranda/TaskImpl.java
@@ -8,19 +8,17 @@
  */
 package net.sf.memoranda;
 
-import java.util.Collection;
-import java.util.Vector;
-import java.util.Calendar;
-
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
-import net.sf.memoranda.ui.AgendaPanel;
-import net.sf.memoranda.util.Util;
 import nu.xom.Attribute;
 import nu.xom.Element;
 import nu.xom.Elements;
 import nu.xom.Node;
 
+import java.util.Calendar;
+import java.util.Collection;
+import java.util.Vector;
+
 /**
  *
  */
@@ -36,7 +34,7 @@ public class TaskImpl implements Task, Comparable {
     public TaskImpl(Element taskElement, TaskList tl) {
         _element = taskElement;
         _tl = tl;
-    }    
+    }
 
     public Element getContent() {
         return _element;
@@ -47,146 +45,150 @@ public class TaskImpl implements Task, Comparable {
     }
 
     public void setStartDate(CalendarDate date) {
-           setAttr("startDate", date.toString());
+        setAttr("startDate", date.toString());
     }
 
     public CalendarDate getEndDate() {
-		String ed;
-		try {
-			ed = _element.getAttribute("endDate").getValue();
-		} catch (NullPointerException e) {
-			ed = "";
-		}
-		if (!ed.equals("")){
-			return new CalendarDate(_element.getAttribute("endDate").getValue());
-		}
-		Task parent = this.getParentTask();
-		if (parent != null) {
-			return parent.getEndDate();
-		}
-		Project pr = this._tl.getProject();
-		if (pr.getEndDate() != null) {
-			return pr.getEndDate();
-		}
-		return this.getStartDate().dayBefore();
-        
+        String ed;
+        try {
+            ed = _element.getAttribute("endDate").getValue();
+        } catch (NullPointerException e) {
+            ed = "";
+        }
+        if (!ed.equals("")) {
+            return new CalendarDate(_element.getAttribute("endDate").getValue());
+        }
+        Task parent = this.getParentTask();
+        if (parent != null) {
+            return parent.getEndDate();
+        }
+        Project pr = this._tl.getProject();
+        if (pr.getEndDate() != null) {
+            return pr.getEndDate();
+        }
+        return this.getStartDate().dayBefore();
+
     }
 
     public void setEndDate(CalendarDate date) {
-		if (date == null) {
-			setAttr("endDate", "");
-		} else {
-			setAttr("endDate", date.toString());
-		}
+        if (date == null) {
+            setAttr("endDate", "");
+        } else {
+            setAttr("endDate", date.toString());
+        }
     }
 
     public long getEffort() {
-    	Attribute attr = _element.getAttribute("effort");
-    	if (attr == null) {
-    		return 0;
-    	}else {
-    		try {
-        		return Long.parseLong(attr.getValue());
-    		} catch (NumberFormatException e) {
-    			return 0;
-    		}
-    	}
+        Attribute attr = _element.getAttribute("effort");
+        if (attr == null) {
+            return 0;
+        } else {
+            try {
+                return Long.parseLong(attr.getValue());
+            } catch (NumberFormatException e) {
+                return 0;
+            }
+        }
     }
 
     public void setEffort(long effort) {
         setAttr("effort", String.valueOf(effort));
     }
-	
-	/* 
-	 * @see net.sf.memoranda.Task#getParentTask()
-	 */
-	public Task getParentTask() {
-		Node parentNode = _element.getParent();
-    	if (parentNode instanceof Element) {
-    	    Element parent = (Element) parentNode;
-        	if (parent.getLocalName().equalsIgnoreCase("task")) {
-        	    return new TaskImpl(parent, _tl);
-        	}
-    	}
-    	return null;
-	}
-	
-	public String getParentId() {
-		Task parent = this.getParentTask();
-		if (parent != null) {
-			return parent.getId();
-		}
-		return null;
-	}
-	
-	public void setParentTask(String parentTaskId, nu.xom.Element root) {
+
+    /*
+     * @see net.sf.memoranda.Task#getParentTask()
+     */
+    public Task getParentTask() {
+        Node parentNode = _element.getParent();
+        if (parentNode instanceof Element) {
+            Element parent = (Element) parentNode;
+            if (parent.getLocalName().equalsIgnoreCase("task")) {
+                return new TaskImpl(parent, _tl);
+            }
+        }
+        return null;
+    }
+
+    public String getParentId() {
+        Task parent = this.getParentTask();
+        if (parent != null) {
+            return parent.getId();
+        }
+        return null;
+    }
+
+    public void setParentTask(String parentTaskId, nu.xom.Element root) {
         if (parentTaskId == null) {
             root.appendChild(_element);
         } else {
-    		Element parent = _tl.getTaskElement(parentTaskId);
+            Element parent = _tl.getTaskElement(parentTaskId);
             parent.appendChild(_element);
         }
-	}
+    }
 
     public String getDescription() {
-    	Element thisElement = _element.getFirstChildElement("description");
-    	if (thisElement == null) {
-    		return null;
-    	} else {
-       		return thisElement.getValue();
-    	}
+        Element thisElement = _element.getFirstChildElement("description");
+        if (thisElement == null) {
+            return null;
+        } else {
+            return thisElement.getValue();
+        }
     }
 
     public void setDescription(String s) {
-    	Element desc = _element.getFirstChildElement("description");
-    	if (desc == null) {
-        	desc = new Element("description");
+        Element desc = _element.getFirstChildElement("description");
+        if (desc == null) {
+            desc = new Element("description");
             desc.appendChild(s);
-            _element.appendChild(desc);    	
-    	} else {
+            _element.appendChild(desc);
+        } else {
             desc.removeChildren();
-            desc.appendChild(s);    	
-    	}
+            desc.appendChild(s);
+        }
     }
 
-    /**s
+    /**
+     * s
+     *
      * @see net.sf.memoranda.Task#getStatus()
      */
     public int getStatus(CalendarDate date) {
         CalendarDate start = getStartDate();
         CalendarDate end = null;
         try {
-			end = getEndDate();
-		} catch (NullPointerException e) {
-			end = null;
-		}
+            end = getEndDate();
+        } catch (NullPointerException e) {
+            end = null;
+        }
         if (isFrozen()) {
             return Task.FROZEN;
         }
         if (isCompleted()) {
-        	return Task.COMPLETED;
+            return Task.COMPLETED;
         }
-        if(date.before(start)) {
-			return Task.SCHEDULED;
-		}else if (end==null || end.before(start)) {
-        	return Task.ACTIVE;
+        if (date.before(start)) {
+            return Task.SCHEDULED;
+        } else if (end == null || end.before(start)) {
+            return Task.ACTIVE;
         } else if (date.inPeriod(start, end)) {
             if (date.equals(end)) {
                 return Task.DEADLINE;
             } else {
                 return Task.ACTIVE;
             }
-        } else if(start.after(end)) {
-			return Task.ACTIVE;
-		}
+        } else if (start.after(end)) {
+            return Task.ACTIVE;
+        }
 
         return Task.FAILED;
     }
+
     /**
      * Method isDependsCompleted.
+     *
      * @return boolean
      */
-/*
+    /*
     private boolean isDependsCompleted() {
         Vector v = (Vector) getDependsFrom();
         boolean check = true;
@@ -197,7 +199,8 @@ public class TaskImpl implements Task, Comparable {
         }
         return check;
     }
-*/
+    */
+
     private boolean isFrozen() {
         return _element.getAttribute("frozen") != null;
     }
@@ -220,19 +223,19 @@ public class TaskImpl implements Task, Comparable {
         return _element.getFirstChildElement("text").getValue();
     }
 
-    public String toString() {
-        return getText();
-    }
-    
     /**
      * @see net.sf.memoranda.Task#setText()
      */
     public void setText(String s) {
-    	Element txt = new Element("text");
+        Element txt = new Element("text");
         txt.appendChild(s);
         _element.appendChild(txt);
-//        _element.getFirstChildElement("text").removeChildren();
-//        _element.getFirstChildElement("text").appendChild(s);
+        //        _element.getFirstChildElement("text").removeChildren();
+        //        _element.getFirstChildElement("text").appendChild(s);
+    }
+
+    public String toString() {
+        return getText();
     }
 
     /**
@@ -246,8 +249,9 @@ public class TaskImpl implements Task, Comparable {
      * @see net.sf.memoranda.Task#unfreeze()
      */
     public void unfreeze() {
-        if (this.isFrozen())
+        if (this.isFrozen()) {
             _element.removeAttribute(new Attribute("frozen", "yes"));
+        }
     }
 
     /**
@@ -259,11 +263,13 @@ public class TaskImpl implements Task, Comparable {
         for (int i = 0; i < deps.size(); i++) {
             String id = deps.get(i).getAttribute("idRef").getValue();
             Task t = _tl.getTask(id);
-            if (t != null)
+            if (t != null) {
                 v.add(t);
+            }
         }
         return v;
     }
+
     /**
      * @see net.sf.memoranda.Task#addDependsFrom(net.sf.memoranda.Task)
      */
@@ -272,6 +278,7 @@ public class TaskImpl implements Task, Comparable {
         dep.addAttribute(new Attribute("idRef", task.getId()));
         _element.appendChild(dep);
     }
+
     /**
      * @see net.sf.memoranda.Task#removeDependsFrom(net.sf.memoranda.Task)
      */
@@ -285,28 +292,34 @@ public class TaskImpl implements Task, Comparable {
             }
         }
     }
+
     /**
      * @see net.sf.memoranda.Task#getProgress()
      */
     public int getProgress() {
         return new Integer(_element.getAttribute("progress").getValue()).intValue();
     }
+
     /**
      * @see net.sf.memoranda.Task#setProgress(int)
      */
     public void setProgress(int p) {
-        if ((p >= 0) && (p <= 100))
+        if ((p >= 0) && (p <= 100)) {
             setAttr("progress", new Integer(p).toString());
+        }
     }
+
     /**
      * @see net.sf.memoranda.Task#getPriority()
      */
     public int getPriority() {
         Attribute pa = _element.getAttribute("priority");
-        if (pa == null)
+        if (pa == null) {
             return Task.PRIORITY_NORMAL;
+        }
         return new Integer(pa.getValue()).intValue();
     }
+
     /**
      * @see net.sf.memoranda.Task#setPriority(int)
      */
@@ -317,76 +330,80 @@ public class TaskImpl implements Task, Comparable {
     private void setAttr(String a, String value) {
         Attribute attr = _element.getAttribute(a);
         if (attr == null) {
-           _element.addAttribute(new Attribute(a, value));
+            _element.addAttribute(new Attribute(a, value));
         } else {
             attr.setValue(value);
         }
     }
 
-	/**
-	 * A "Task rate" is an informal index of importance of the task
-	 * considering priority, number of days to deadline and current 
-	 * progress. 
-	 * 
-	 * rate = (100-progress) / (numOfDays+1) * (priority+1)
-	 * @param CalendarDate
-	 * @return long
-	 */
+    /**
+     * A "Task rate" is an informal index of importance of the task
+     * considering priority, number of days to deadline and current
+     * progress.
+     * <p>
+     * rate = (100-progress) / (numOfDays+1) * (priority+1)
+     *
+     * @param CalendarDate
+     * @return long
+     */
 
-	private long calcTaskRate(CalendarDate d) {
-		Calendar endDateCal = getEndDate().getCalendar();
-		Calendar dateCal = d.getCalendar();
-		int numOfDays = (endDateCal.get(Calendar.YEAR)*365 + endDateCal.get(Calendar.DAY_OF_YEAR)) 
-				- (dateCal.get(Calendar.YEAR)*365 + dateCal.get(Calendar.DAY_OF_YEAR));
-		if (numOfDays < 0) return -1; //Something wrong ?
-		return (100-getProgress()) / (numOfDays+1) * (getPriority()+1);
-	}
+    private long calcTaskRate(CalendarDate d) {
+        Calendar endDateCal = getEndDate().getCalendar();
+        Calendar dateCal = d.getCalendar();
+        int numOfDays = (endDateCal.get(Calendar.YEAR) * 365 + endDateCal.get(Calendar.DAY_OF_YEAR))
+                - (dateCal.get(Calendar.YEAR) * 365 + dateCal.get(Calendar.DAY_OF_YEAR));
+        if (numOfDays < 0) {
+            return -1; //Something wrong ?
+        }
+        return (100 - getProgress()) / (numOfDays + 1) * (getPriority() + 1);
+    }
 
     /**
      * @see net.sf.memoranda.Task#getRate()
      */
-	 
-     public long getRate() {
-/*	   Task t = (Task)task;
-	   switch (mode) {
-		   case BY_IMP_RATE: return -1*calcTaskRate(t, date);
-		   case BY_END_DATE: return t.getEndDate().getDate().getTime();
-		   case BY_PRIORITY: return 5-t.getPriority();
-		   case BY_COMPLETION: return 100-t.getProgress();
-	   }
-       return -1;
-*/
-		return -1*calcTaskRate(CurrentDate.get());
-	 }
-	   
-	 /*
-	  * Comparable interface
-	  */
-	  
-	 public int compareTo(Object o) {
-		 Task task = (Task) o;
-		 	if(getRate() > task.getRate()) {
-				return 1;
-		 	} else if(getRate() < task.getRate()) {
-				return -1;
-		 	} else { 
-				return 0;
-		 	}
-	 }
-	 
-	 public boolean equals(Object o) {
-	     return ((o instanceof Task) && (((Task)o).getId().equals(this.getId())));
-	 }
-
-	/* 
-	 * @see net.sf.memoranda.Task#getSubTasks()
-	 */
-	public Collection getSubTasks() {
-		Elements subTasks = _element.getChildElements("task");
-            return convertToTaskObjects(subTasks);
-	}
-
-	private Collection convertToTaskObjects(Elements tasks) {
+
+    public long getRate() {
+        /*
+        Task t = (Task)task;
+        switch (mode) {
+           case BY_IMP_RATE: return -1*calcTaskRate(t, date);
+           case BY_END_DATE: return t.getEndDate().getDate().getTime();
+           case BY_PRIORITY: return 5-t.getPriority();
+           case BY_COMPLETION: return 100-t.getProgress();
+        }
+        return -1;
+        */
+        return -1 * calcTaskRate(CurrentDate.get());
+    }
+
+    /*
+    * Comparable interface
+    */
+
+    public int compareTo(Object o) {
+        Task task = (Task) o;
+        if (getRate() > task.getRate()) {
+            return 1;
+        } else if (getRate() < task.getRate()) {
+            return -1;
+        } else {
+            return 0;
+        }
+    }
+
+    public boolean equals(Object o) {
+        return ((o instanceof Task) && (((Task) o).getId().equals(this.getId())));
+    }
+
+    /*
+     * @see net.sf.memoranda.Task#getSubTasks()
+     */
+    public Collection getSubTasks() {
+        Elements subTasks = _element.getChildElements("task");
+        return convertToTaskObjects(subTasks);
+    }
+
+    private Collection convertToTaskObjects(Elements tasks) {
         Vector v = new Vector();
         for (int i = 0; i < tasks.size(); i++) {
             Task t = new TaskImpl(tasks.get(i), _tl);
@@ -394,105 +411,108 @@ public class TaskImpl implements Task, Comparable {
         }
         return v;
     }
-	
-	/* 
-	 * @see net.sf.memoranda.Task#getSubTask(java.lang.String)
-	 */
-	public Task getSubTask(String id) {
-		Elements subTasks = _element.getChildElements("task");
-		for (int i = 0; i < subTasks.size(); i++) {
-			if (subTasks.get(i).getAttribute("id").getValue().equals(id))
-				return new TaskImpl(subTasks.get(i), _tl);
-		}
-		return null;
-	}
-
-	/* 
-	 * @see net.sf.memoranda.Task#hasSubTasks()
-	 */
-	public boolean hasSubTasks(String id) {
-		Elements subTasks = _element.getChildElements("task");
-		for (int i = 0; i < subTasks.size(); i++) {
-			if (subTasks.get(i).getAttribute("id").getValue().equals(id)) {
-				return true;
-			}
-		}
-		return false;
-	}
-
-//	@Override
-//	public int getRepeat() {
-//        Attribute a = _element.getAttribute("repeat-type");
-//        if (a != null) return new Integer(a.getValue()).intValue();
-//        return 0;
-//	}
-	
-	public int getPeriod() {
-    Attribute a = _element.getAttribute("period");
-    if (a != null) return new Integer(a.getValue()).intValue();
-    return 0;
-	}
-
-	@Override
-	public boolean isRepeatable() {
-    	int repType = getRepeatType();//Integer.parseInt(_element.getAttribute("repeatType").getValue());
-    	return repType != TaskListImpl.NO_REPEAT;
-	}
-	
+
+    /*
+     * @see net.sf.memoranda.Task#getSubTask(java.lang.String)
+     */
+    public Task getSubTask(String id) {
+        Elements subTasks = _element.getChildElements("task");
+        for (int i = 0; i < subTasks.size(); i++) {
+            if (subTasks.get(i).getAttribute("id").getValue().equals(id)) {
+                return new TaskImpl(subTasks.get(i), _tl);
+            }
+        }
+        return null;
+    }
+
+    /*
+     * @see net.sf.memoranda.Task#hasSubTasks()
+     */
+    public boolean hasSubTasks(String id) {
+        Elements subTasks = _element.getChildElements("task");
+        for (int i = 0; i < subTasks.size(); i++) {
+            if (subTasks.get(i).getAttribute("id").getValue().equals(id)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    //    @Override
+    //    public int getRepeat() {
+    //        Attribute a = _element.getAttribute("repeat-type");
+    //        if (a != null) return new Integer(a.getValue()).intValue();
+    //        return 0;
+    //    }
+
+    public int getPeriod() {
+        Attribute a = _element.getAttribute("period");
+        if (a != null) {
+            return new Integer(a.getValue()).intValue();
+        }
+        return 0;
+    }
+
+    @Override
+    public boolean isRepeatable() {
+        int repType = getRepeatType();//Integer.parseInt(_element.getAttribute("repeatType").getValue());
+        return repType != TaskListImpl.NO_REPEAT;
+    }
+
+    public boolean getWorkingDaysOnly() {
+        boolean workingDays = false;
+        Attribute a = _element.getAttribute("workingDays");
+        if (a != null && a.getValue().equals("true")) {
+            workingDays = true;
+        }
+        return workingDays;
+    }
+    //
+    //    public void setFrequency(int frequency) {
+    //        _element.addAttribute(new Attribute("frequency", String.valueOf(frequency)));
+    //    }
+
     public void setWorkingDaysOnly(boolean workDaysOnly) {
-    	if(workDaysOnly){
-    		_element.addAttribute(new Attribute("workingDays",String.valueOf(workDaysOnly)));
-    	}
-    }
-//    
-//    public void setFrequency(int frequency) {
-//        _element.addAttribute(new Attribute("frequency", String.valueOf(frequency)));
-//    }
-    
-    public boolean getWorkingDaysOnly(){
-		boolean workingDays = false;
-		Attribute a = _element.getAttribute("workingDays");
-		if(a != null && a.getValue().equals("true")){
-			workingDays = true;
-		}
-		return workingDays;
-	}
-	
-    public void setRepeatType(int repeatType) {
-    	setAttr("repeatType", String.valueOf(repeatType));
+        if (workDaysOnly) {
+            _element.addAttribute(new Attribute("workingDays", String.valueOf(workDaysOnly)));
+        }
     }
-    
+
     public int getRepeatType() {
-    	int repType = Integer.parseInt(_element.getAttribute("repeatType").getValue());
-    	//repeatType can be 0-No-Repeat, 1-Daily, 2-Weekly, 3-Monthly, 4-Yearly
-    	if(repType < TaskListImpl.NO_REPEAT || repType > TaskListImpl.REPEAT_YEARLY) {
-    		repType = -1;
-    	}
-    	return repType;
-    }
-    
-	public void setEndRepeat(CalendarDate endRepeat) {
-		if(endRepeat != null  && isRepeatable()) {
-			setAttr("endRepeat", endRepeat.toString());
-		} else {
-			setAttr("endRepeat", "");
-		}
-	}
-	
-	public CalendarDate getEndRepeat() {
-		String temp; 
-		try {
-			temp = _element.getAttribute("endRepeat").getValue();
-		} catch (NullPointerException e) {
-			temp = "";
-		}
-		CalendarDate attr;
-		if(temp.equals("")) {
-			attr = null;
-		} else {
-			attr = new CalendarDate(temp);
-		}
-		return attr;
-	}
+        int repType = Integer.parseInt(_element.getAttribute("repeatType").getValue());
+        //repeatType can be 0-No-Repeat, 1-Daily, 2-Weekly, 3-Monthly, 4-Yearly
+        if (repType < TaskListImpl.NO_REPEAT || repType > TaskListImpl.REPEAT_YEARLY) {
+            repType = -1;
+        }
+        return repType;
+    }
+
+    public void setRepeatType(int repeatType) {
+        setAttr("repeatType", String.valueOf(repeatType));
+    }
+
+    public CalendarDate getEndRepeat() {
+        String temp;
+        try {
+            temp = _element.getAttribute("endRepeat").getValue();
+        } catch (NullPointerException e) {
+            temp = "";
+        }
+        CalendarDate attr;
+        if (temp.equals("")) {
+            attr = null;
+        } else {
+            attr = new CalendarDate(temp);
+        }
+        return attr;
+    }
+
+    public void setEndRepeat(CalendarDate endRepeat) {
+        if (endRepeat != null && isRepeatable()) {
+            setAttr("endRepeat", endRepeat.toString());
+        } else {
+            setAttr("endRepeat", "");
+        }
+    }
 }
-	
\ No newline at end of file
+    
\ No newline at end of file
diff --git a/src/net/sf/memoranda/TaskList.java b/src/net/sf/memoranda/TaskList.java
index d13bd21..5c17b4b 100755
--- a/src/net/sf/memoranda/TaskList.java
+++ b/src/net/sf/memoranda/TaskList.java
@@ -2,7 +2,7 @@
  * TaskList.java
  * Created on 21.02.2003, 12:25:16 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
@@ -16,51 +16,54 @@ import java.util.Stack;
 import java.util.Vector;
 
 /**
- *  Tasklist interface for creating a tasklist.
+ * Tasklist interface for creating a tasklist.
  */
 /*$Id: TaskList.java,v 1.8 2005/12/01 08:12:26 alexeya Exp $*/
 public interface TaskList {
 
-  Project getProject();
-  
-  Task getTask(String id);
-
-  /* Task createTask(CalendarDate startDate, CalendarDate endDate, String text,
-     int priority, long effort, String description, String parentTaskId); */
-
-  Task createTask (Stack<Object> taskCreationParams);
-    
-  void removeTask(Task task);
-  
-  Task createRptInstanceTask(Stack<Object> taskCreationParams);
-  
-  void clearTempTasks();
-  
-  public boolean hasSubTasks(String id);
-    
-  public boolean hasParentTask(String id);
-
-  public Collection<Task> getTopLevelTasks();
-  
-  public Collection getAllSubTasks(String taskId);
-  
-  public Collection getActiveSubTasks(String taskId,CalendarDate date);
-    
-  //    public void adjustParentTasks(Task t);
-    
-  public long calculateTotalEffortFromSubTasks(Task task);
-  
-  public CalendarDate getLatestEndDateFromSubTasks(Task task);
-  
-  public CalendarDate getEarliestStartDateFromSubTasks(Task task);
-  
-  public long[] calculateCompletionFromSubTasks(Task task);
-  
-  Vector<Task> getRepeatableTaskforDate(CalendarDate date);
-  Collection getDuplicateTasks(String id, CalendarDate date);
-  
-  nu.xom.Element getTaskElement(String id);
-
-  nu.xom.Document getXmlContent();
+    Project getProject();
+
+    Task getTask(String id);
+
+    /*
+    Task createTask(CalendarDate startDate, CalendarDate endDate, String text,
+    int priority, long effort, String description, String parentTaskId);
+    */
+
+    Task createTask(Stack<Object> taskCreationParams);
+
+    void removeTask(Task task);
+
+    Task createRptInstanceTask(Stack<Object> taskCreationParams);
+
+    void clearTempTasks();
+
+    public boolean hasSubTasks(String id);
+
+    public boolean hasParentTask(String id);
+
+    public Collection<Task> getTopLevelTasks();
+
+    public Collection getAllSubTasks(String taskId);
+
+    public Collection getActiveSubTasks(String taskId, CalendarDate date);
+
+    //    public void adjustParentTasks(Task t);
+
+    public long calculateTotalEffortFromSubTasks(Task task);
+
+    public CalendarDate getLatestEndDateFromSubTasks(Task task);
+
+    public CalendarDate getEarliestStartDateFromSubTasks(Task task);
+
+    public long[] calculateCompletionFromSubTasks(Task task);
+
+    Vector<Task> getRepeatableTaskforDate(CalendarDate date);
+
+    Collection getDuplicateTasks(String id, CalendarDate date);
+
+    nu.xom.Element getTaskElement(String id);
+
+    nu.xom.Document getXmlContent();
 
 }
diff --git a/src/net/sf/memoranda/TaskListImpl.java b/src/net/sf/memoranda/TaskListImpl.java
index d71a4d2..5164cf5 100755
--- a/src/net/sf/memoranda/TaskListImpl.java
+++ b/src/net/sf/memoranda/TaskListImpl.java
@@ -2,7 +2,7 @@
  * TaskListImpl.java
  * Created on 21.02.2003, 12:29:54 Alex
  * Package: net.sf.memoranda
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
@@ -11,462 +11,403 @@ package net.sf.memoranda;
 
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.Util;
-import nu.xom.Attribute;
-import nu.xom.Document;
-import nu.xom.Element;
-import nu.xom.Elements;
-import nu.xom.Node;
-import net.sf.memoranda.EventsManager.Day;
-import net.sf.memoranda.EventsManager.Year;
-import net.sf.memoranda.EventsManager.Month;
-
-import java.util.Calendar;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Hashtable;
-import java.util.Iterator;
-import java.util.Stack;
-import java.util.Vector;
+import nu.xom.*;
+
+import java.util.*;
 //import nu.xom.converters.*;
 //import org.apache.xerces.dom.*;
 //import nux.xom.xquery.XQueryUtil;
 
-/** TaskListImp the implementation of TaskList.
- * 
+/**
+ * TaskListImp the implementation of TaskList.
  */
 /*$Id: TaskListImpl.java,v 1.14 2006/07/03 11:59:19 alexeya Exp $*/
 public class TaskListImpl implements TaskList {
-	
-	
-  public static final int NO_REPEAT = 0;
-  public static final int REPEAT_DAILY = 1;
-  public static final int REPEAT_WEEKLY = 2;
-  public static final int REPEAT_MONTHLY = 3;
-  public static final int REPEAT_YEARLY = 4;
-  
-  
-  private Project _project = null;
-  private nu.xom.Document _document = null;
-  private static Stack<Task> tempTasks = new Stack<Task>();
-  static nu.xom.Element _root = null;
-  
-  /*
-   * Hastable of "task" XOM elements for quick searching them by ID's
-   * (ID => element) 
-   */
-  private Hashtable<String, nu.xom.Element> elements = new Hashtable<String, Element>();
-    
-  /**
-   * Constructor for TaskListImpl.
-   */
-  public TaskListImpl(Document doc, Project prj) {
-    _document = doc;
-    _root = _document.getRootElement();
-    _project = prj;
-    buildElements(_root);
-  }
-  
-  /**
-   * Constructs Task list for Project prj.
-   * @param prj
-   *     given project task list is associated with.
-   */
-    
-  public TaskListImpl(Project prj) {            
-    _root = new Element("tasklist");
-    _document = new Document(_root);
-    _project = prj;
-  }
-  
-  /**
-   * Returns project.
-   * @return project
-   */
-  
-  public Project getProject() {
-    return _project;
-  }
-  
-  /*
-   * Build the hashtable recursively
-   */
-  
-  private void buildElements(Element parent) {
-    Elements els = parent.getChildElements("task");
-    for (int i = 0; i < els.size(); i++) {
-      Element el = els.get(i);
-      elements.put(el.getAttribute("id").getValue(), el);
-      buildElements(el);
+
+
+    public static final int NO_REPEAT = 0;
+    public static final int REPEAT_DAILY = 1;
+    public static final int REPEAT_WEEKLY = 2;
+    public static final int REPEAT_MONTHLY = 3;
+    public static final int REPEAT_YEARLY = 4;
+    static nu.xom.Element _root = null;
+    private static Stack<Task> tempTasks = new Stack<Task>();
+    private Project _project = null;
+    private nu.xom.Document _document = null;
+    /*
+     * Hastable of "task" XOM elements for quick searching them by ID's
+     * (ID => element)
+     */
+    private Hashtable<String, nu.xom.Element> elements = new Hashtable<String, Element>();
+
+    /**
+     * Constructor for TaskListImpl.
+     */
+    public TaskListImpl(Document doc, Project prj) {
+        _document = doc;
+        _root = _document.getRootElement();
+        _project = prj;
+        buildElements(_root);
     }
-  }
 
-  /**
-    * All methods to obtain list of tasks are consolidated under
-    *  getAllSubTasks and getActiveSubTasks.
-    * If a root task is required, just send a null taskId
+    /**
+     * Constructs Task list for Project prj.
+     *
+     * @param prj given project task list is associated with.
+     */
+
+    public TaskListImpl(Project prj) {
+        _root = new Element("tasklist");
+        _document = new Document(_root);
+        _project = prj;
+    }
+
+    /**
+     * Returns project.
+     *
+     * @return project
+     */
+
+    public Project getProject() {
+        return _project;
+    }
+  
+    /*
+    * Build the hashtable recursively
     */
-  public Collection<Task> getAllSubTasks(String taskId) {
-    if ((taskId == null) || (taskId.length() == 0)) {
-      return getAllRootTasks();
-    } else {
-      Element task = (Element) getTaskElement(taskId);
-      if (task == null) {
-        return new Vector<Task>();
-      }
-      Elements subTasks = task.getChildElements("task");
-      return convertToTaskObjects(subTasks);
+
+    private void buildElements(Element parent) {
+        Elements els = parent.getChildElements("task");
+        for (int i = 0; i < els.size(); i++) {
+            Element el = els.get(i);
+            elements.put(el.getAttribute("id").getValue(), el);
+            buildElements(el);
+        }
+    }
+
+    /**
+     * All methods to obtain list of tasks are consolidated under
+     * getAllSubTasks and getActiveSubTasks.
+     * If a root task is required, just send a null taskId
+     */
+    public Collection<Task> getAllSubTasks(String taskId) {
+        if ((taskId == null) || (taskId.length() == 0)) {
+            return getAllRootTasks();
+        } else {
+            Element task = (Element) getTaskElement(taskId);
+            if (task == null) {
+                return new Vector<Task>();
+            }
+            Elements subTasks = task.getChildElements("task");
+            return convertToTaskObjects(subTasks);
+        }
+    }
+
+    public Collection<Task> getTopLevelTasks() {
+        return getAllRootTasks();
     }
-  }
-    
-  public Collection<Task> getTopLevelTasks() {
-    return getAllRootTasks();
-  }
-
-  /**
-    * All methods to obtain list of tasks are consolidated under
-    *  getAllSubTasks and getActiveSubTasks.
-    * If a root task is required, just send a null taskId
+
+    /**
+     * All methods to obtain list of tasks are consolidated under
+     * getAllSubTasks and getActiveSubTasks.
+     * If a root task is required, just send a null taskId
+     */
+    public Collection<Task> getActiveSubTasks(String taskId, CalendarDate date) {
+        Collection<Task> allTasks = getAllSubTasks(taskId);
+        return filterActiveTasks(allTasks, date);
+    }
+
+    private Task constructTask(Stack<Object> taskCreationParams) {
+        String id = (String) taskCreationParams.pop();
+        CalendarDate endRepeat = (CalendarDate) taskCreationParams.pop();
+        boolean repeatHasEnd = (boolean) taskCreationParams.pop();
+        int repeatType = (int) taskCreationParams.pop();
+        int progress = (int) taskCreationParams.pop();
+        boolean workDays = (boolean) taskCreationParams.pop();
+        String parentTaskId = (String) taskCreationParams.pop();
+        String description = (String) taskCreationParams.pop();
+        long effort = (long) taskCreationParams.pop();
+        int priority = (int) taskCreationParams.pop();
+        String text = (String) taskCreationParams.pop();
+        CalendarDate endDate = (CalendarDate) taskCreationParams.pop();
+        CalendarDate startDate = (CalendarDate) taskCreationParams.pop();
+
+        assert (Task.REPEAT_FREQUENCIES_INDEX[repeatType] == repeatType);
+        Element taskElem = new Element("task");
+        taskElem.addAttribute(new Attribute("id", id));
+        Task task = new TaskImpl(taskElem, this);
+        task.setStartDate(startDate);
+        task.setEndDate(endDate);
+        task.setText(text);
+        task.setPriority(priority);
+        task.setEffort(effort);
+        task.setDescription(description);
+        task.setParentTask(parentTaskId, _root);
+        task.setWorkingDaysOnly(workDays);
+        task.setProgress(progress);
+        task.setRepeatType(repeatType); // 0-none, 1-Daily, 2-Weekly, 3-Monthly, 4-Yearly
+        if (repeatHasEnd) {
+            task.setEndRepeat(endRepeat);
+        }
+        return task;
+    }
+ 
+    /*
+    * (non-Javadoc)
+    * @see net.sf.memoranda.TaskList#createTask(net.sf.memoranda.date.CalendarDate,
+    *  net.sf.memoranda.date.CalendarDate, java.lang.String,
+    *   int, long, java.lang.String, java.lang.String, boolean, int, int)
     */
-  public Collection<Task> getActiveSubTasks(String taskId,CalendarDate date) {
-    Collection<Task> allTasks = getAllSubTasks(taskId);        
-    return filterActiveTasks(allTasks,date);
-  }
-
-  /*    public Task createTask(
-       CalendarDate startDate, 
-       CalendarDate endDate, 
-       String text, 
-       int priority, 
-       long effort, 
-       String description, 
-       String parentTaskId) {
-        Element el = new Element("task");
-        el.addAttribute(new Attribute("startDate", startDate.toString()));
-        if (endDate != null)
-        el.addAttribute(new Attribute("endDate", endDate.toString()));
+
+    /**
+     * Create task adds a task to the task list.
+     *
+     * @param startDate The date the task begins
+     * @param endDate   the date the task ends
+     */
+    public Task createTask(Stack<Object> taskCreationParams) {
         String id = Util.generateId();
-        el.addAttribute(new Attribute("id", id));
-        el.addAttribute(new Attribute("progress", "0"));
-        el.addAttribute(new Attribute("effort", String.valueOf(effort)));
-        el.addAttribute(new Attribute("priority", String.valueOf(priority)));
-                
-        Element txt = new Element("text");
-        txt.appendChild(text);
-        el.appendChild(txt);
-
-        Element desc = new Element("description");
-        desc.appendChild(description);
-        el.appendChild(desc);
 
+        taskCreationParams.add(id);
+        Task task = constructTask(taskCreationParams);
+
+        elements.put(id, task.getContent());
+
+        return new TaskImpl(task.getContent(), this);
+    }
+
+    /**
+     * @see net.sf.memoranda.TaskList#removeTask(import net.sf.memoranda.Task)
+     */
+
+    public void removeTask(Task task) {
+        String parentTaskId = task.getParentId();
         if (parentTaskId == null) {
-            _root.appendChild(el);
+            _root.removeChild(task.getContent());
+        } else {
+            Element parentNode = (Element) getTaskElement(parentTaskId);
+            parentNode.removeChild(task.getContent());
         }
-        else {
-            Element parent = getTaskElement(parentTaskId);
-            parent.appendChild(el);
+        elements.remove(task.getId());
+    }
+
+    /*
+     * (non-Javadoc)
+     * @see net.sf.memoranda.TaskList#createTask(net.sf.memoranda.date.CalendarDate,
+     *  net.sf.memoranda.date.CalendarDate, java.lang.String,
+     *   int, long, java.lang.String, java.lang.String, boolean, int, int)
+     */
+
+    /**
+     * Create task adds a task to the task list.
+     *
+     * @param startDate The date the task begins
+     * @param endDate   the date the task ends
+     */
+    public Task createRptInstanceTask(Stack<Object> taskCreationParams) {
+        String id = Util.generateId();
+
+        taskCreationParams.add(id);
+        Task task = constructTask(taskCreationParams);
+
+        for (int i = 0; i < elements.size(); i++) {
+            if (elements.contains(task.getContent())) { //This is where we will fix the duplicating tasks bug
+                return null;
+            }
         }
-        
-        elements.put(id, el);
-        Util.debug("Created task with parent " + parentTaskId);
-        TaskImpl ret = new TaskImpl(el, this);
-        AgendaPanel.refresh(ret.getStartDate());
-        return ret;
-    }*/
-  
-  private Task constructTask(Stack<Object> taskCreationParams) {
-	  String id = (String) taskCreationParams.pop();
-	  CalendarDate endRepeat  = (CalendarDate) taskCreationParams.pop();
-	    boolean repeatHasEnd = (boolean) taskCreationParams.pop();
-	    int repeatType = (int) taskCreationParams.pop();
-	    int progress = (int) taskCreationParams.pop();
-	    boolean workDays = (boolean) taskCreationParams.pop();
-	    String parentTaskId = (String) taskCreationParams.pop();
-	    String description = (String) taskCreationParams.pop();
-	    long effort = (long) taskCreationParams.pop();
-	    int priority = (int) taskCreationParams.pop();
-	    String text = (String) taskCreationParams.pop();
-	    CalendarDate endDate= (CalendarDate) taskCreationParams.pop();	  
-	    CalendarDate startDate = (CalendarDate) taskCreationParams.pop();
-	    
-	    assert (Task.REPEAT_FREQUENCIES_INDEX [repeatType] == repeatType);
-	    Element taskElem = new Element("task");
-	    taskElem.addAttribute(new Attribute("id", id));
-	    Task task = new TaskImpl(taskElem, this);
-	    task.setStartDate(startDate);
-	    task.setEndDate(endDate);
-	    task.setText(text);
-	    task.setPriority(priority);
-	    task.setEffort(effort);
-	    task.setDescription(description);
-	    task.setParentTask(parentTaskId, _root);
-	    task.setWorkingDaysOnly(workDays);
-	    task.setProgress(progress);
-	    task.setRepeatType(repeatType); // 0-none, 1-Daily, 2-Weekly, 3-Monthly, 4-Yearly	    
-	    if(repeatHasEnd) {
-	    	task.setEndRepeat(endRepeat);
-	    }
-		return task;
-  }
- 
-  /*
-   * (non-Javadoc)
-   * @see net.sf.memoranda.TaskList#createTask(net.sf.memoranda.date.CalendarDate,
-   *  net.sf.memoranda.date.CalendarDate, java.lang.String,
-   *   int, long, java.lang.String, java.lang.String, boolean, int, int)
-   */
-  /**
-   *  Create task adds a task to the task list.
-   *  @param startDate
-   *    The date the task begins
-   *  @param endDate
-   *   the date the task ends
-   */
-  public Task createTask(Stack<Object> taskCreationParams) {
-    String id = Util.generateId();
-    
-    taskCreationParams.add(id);
-    Task task = constructTask(taskCreationParams);
-
-	elements.put(id, task.getContent());
-	
-    return new TaskImpl(task.getContent(), this);
-  }
-    
-  /**
-   * @see net.sf.memoranda.TaskList#removeTask(import net.sf.memoranda.Task)
-   */
-
-  public void removeTask(Task task) {
-    String parentTaskId = task.getParentId();
-    if (parentTaskId == null) {
-      _root.removeChild(task.getContent());            
-    } else {
-      Element parentNode = (Element) getTaskElement(parentTaskId);
-      parentNode.removeChild(task.getContent());
+        elements.put(id, task.getContent());
+        //tempTasks.add(task);
+        return new TaskImpl(task.getContent(), this);
     }
-    elements.remove(task.getId());
-  }
-
-  /*
-   * (non-Javadoc)
-   * @see net.sf.memoranda.TaskList#createTask(net.sf.memoranda.date.CalendarDate,
-   *  net.sf.memoranda.date.CalendarDate, java.lang.String,
-   *   int, long, java.lang.String, java.lang.String, boolean, int, int)
-   */
-  /**
-   *  Create task adds a task to the task list.
-   *  @param startDate
-   *    The date the task begins
-   *  @param endDate
-   *   the date the task ends
-   */
-  public Task createRptInstanceTask(Stack<Object> taskCreationParams) {
-	    String id = Util.generateId();
-	    
-    taskCreationParams.add(id);
-    Task task = constructTask(taskCreationParams);
-
-    for (int i = 0; i < elements.size(); i++) {
-		if(elements.contains(task.getContent()))//This is where we will fix the duplicating tasks bug
-			return null;
-	}
-	elements.put(id, task.getContent());
-	//tempTasks.add(task);
-    return new TaskImpl(task.getContent(), this);
-  }
-  
-  public void clearTempTasks(){
-	  while(!tempTasks.isEmpty()){
-		try {
-			this.removeTask(tempTasks.pop());
-		} catch (Exception e) {
-			System.out.println("[DEBUG] Temp Task Not Found");
-		}
-	  }
-  }
-  
-  /**
-   * check for subtasks.
-   * @param id
-   *   id of the item being checked.
-   */
-  public boolean hasSubTasks(String id) {
-    Element task = (Element) getTaskElement(id);
-    if (task == null) {
-      return false; 
+
+    public void clearTempTasks() {
+        while (!tempTasks.isEmpty()) {
+            try {
+                this.removeTask(tempTasks.pop());
+            } catch (Exception e) {
+                System.out.println("[DEBUG] Temp Task Not Found");
+            }
+        }
     }
-    if (task.getChildElements("task").size() > 0) {
-      return true;
-    } else {
-      return false;
+
+    /**
+     * check for subtasks.
+     *
+     * @param id id of the item being checked.
+     */
+    public boolean hasSubTasks(String id) {
+        Element task = (Element) getTaskElement(id);
+        if (task == null) {
+            return false;
+        }
+        if (task.getChildElements("task").size() > 0) {
+            return true;
+        } else {
+            return false;
+        }
     }
-  }
-
-  public Task getTask(String id) {
-    Util.debug("Getting task " + id);          
-    return new TaskImpl((Element) getTaskElement(id), this);          
-  }
-    
-  /**
-   * Checks for parent task.
-   * @param id
-   *   id of the item being checked.
-   */
-  public boolean hasParentTask(String id) {
-    Element element = getTaskElement(id);
-
-    Node parentNode = element.getParent();
-    if (parentNode instanceof Element) {
-      Element parent = (Element) parentNode;
-      if (parent.getLocalName().equalsIgnoreCase("task")) {
-        return true;
-      } else {
-        return false;
-      }
-    } else {
-      return false;
+
+    public Task getTask(String id) {
+        Util.debug("Getting task " + id);
+        return new TaskImpl((Element) getTaskElement(id), this);
     }
-  }
 
-  /**
-   * @see net.sf.memoranda.TaskList#getXmlContent()
-   */
-  
-  public Document getXmlContent() {
-	  return _document;
-  }
-    
-  /**
-    * Recursively calculate total effort based on subtasks for every node in the task tree
-    * The values are saved as they are calculated as well.
-    * 
-    * @param task
-    *  task to calculate effort for.
-    * @return
-    *   total effort from given task
-    */  
-  public long calculateTotalEffortFromSubTasks(Task task) {
-    long totalEffort = 0;
-    if (hasSubTasks(task.getId())) {
-      Collection<Task> subTasks = getAllSubTasks(task.getId());
-      for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext();) {
-        Task iteratedTask = iter.next();
-        totalEffort = totalEffort + calculateTotalEffortFromSubTasks(iteratedTask);
-      }
-      task.setEffort(totalEffort);
-      return totalEffort;            
-    } else {
-      return task.getEffort();
+    /**
+     * Checks for parent task.
+     *
+     * @param id id of the item being checked.
+     */
+    public boolean hasParentTask(String id) {
+        Element element = getTaskElement(id);
+
+        Node parentNode = element.getParent();
+        if (parentNode instanceof Element) {
+            Element parent = (Element) parentNode;
+            if (parent.getLocalName().equalsIgnoreCase("task")) {
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
     }
-  }
-
-  /**
-    * Looks through the entire sub task tree and corrects any inconsistencies in start dates.
-    * 
-    * @param task
-    *   parent task used to check subtasks. 
-    * @return
-    *    earliest start date.
-    */
-  public CalendarDate getEarliestStartDateFromSubTasks(Task task) {
-    CalendarDate startDate = task.getStartDate();
-    if (hasSubTasks(task.getId())) {
-      Collection<Task> subTasks = getAllSubTasks(task.getId());
-      for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext();) {
-        Task iteratedTask = iter.next();
-        CalendarDate dd = getEarliestStartDateFromSubTasks(iteratedTask);
-        if (dd.before(startDate)) {
-          startDate = dd;        
+
+    /**
+     * @see net.sf.memoranda.TaskList#getXmlContent()
+     */
+
+    public Document getXmlContent() {
+        return _document;
+    }
+
+    /**
+     * Recursively calculate total effort based on subtasks for every node in the task tree
+     * The values are saved as they are calculated as well.
+     *
+     * @param task task to calculate effort for.
+     * @return total effort from given task
+     */
+    public long calculateTotalEffortFromSubTasks(Task task) {
+        long totalEffort = 0;
+        if (hasSubTasks(task.getId())) {
+            Collection<Task> subTasks = getAllSubTasks(task.getId());
+            for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext(); ) {
+                Task iteratedTask = iter.next();
+                totalEffort = totalEffort + calculateTotalEffortFromSubTasks(iteratedTask);
+            }
+            task.setEffort(totalEffort);
+            return totalEffort;
+        } else {
+            return task.getEffort();
         }
-      }
-      task.setStartDate(startDate);
-      return startDate;
-    } else {
-      return task.getStartDate();
     }
-  }
-
-  /**
-   * Looks through the entire sub task tree and corrects any inconsistencies in start dates.
-   * 
-   * @param task
-   *   task to be checked for latest End date.
-   * @return
-   *   latest end date.
-   */
-  public CalendarDate getLatestEndDateFromSubTasks(Task task) {
-    CalendarDate date = task.getEndDate();
-    if (hasSubTasks(task.getId())) {
-      Collection<Task> subTasks = getAllSubTasks(task.getId());
-      for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext();) {
-        Task iteratorTask = iter.next();
-        CalendarDate dd = getLatestEndDateFromSubTasks(iteratorTask);
-        if (dd.after(date)) {
-          date = dd;
+
+    /**
+     * Looks through the entire sub task tree and corrects any inconsistencies in start dates.
+     *
+     * @param task parent task used to check subtasks.
+     * @return earliest start date.
+     */
+    public CalendarDate getEarliestStartDateFromSubTasks(Task task) {
+        CalendarDate startDate = task.getStartDate();
+        if (hasSubTasks(task.getId())) {
+            Collection<Task> subTasks = getAllSubTasks(task.getId());
+            for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext(); ) {
+                Task iteratedTask = iter.next();
+                CalendarDate dd = getEarliestStartDateFromSubTasks(iteratedTask);
+                if (dd.before(startDate)) {
+                    startDate = dd;
+                }
+            }
+            task.setStartDate(startDate);
+            return startDate;
+        } else {
+            return task.getStartDate();
         }
-      }
-      task.setEndDate(date);
-      return date;
-    } else {
-      return task.getEndDate();
     }
-  }
-    
-  /**
-   * Looks through the entire sub task tree and calculates progress on all parent task nodes
-   * 
-   * @param task
-   *  task used to complete subtasks.
-   * @return long[] 
-   *     of size 2. First long is expended effort in milliseconds,
-   *       2nd long is total effort in milliseconds
-   */
-  public long[] calculateCompletionFromSubTasks(Task task) {
-    /* Util.debug("Task " + t.getText()); */
-        
-    long[] res = new long[2];
-    long expendedEffort = 0; // milliseconds
-    long totalEffort = 0; // milliseconds
-    if (hasSubTasks(task.getId())) {
-      Collection<Task> subTasks = getAllSubTasks(task.getId());
-      for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext();) {
-        Task iterTask = iter.next();
-        long[] subTaskCompletion = calculateCompletionFromSubTasks(iterTask);
-        expendedEffort = expendedEffort + subTaskCompletion[0];
-        totalEffort = totalEffort + subTaskCompletion[1];
-      }
-            
-      int thisProgress = (int) Math.round((((double)expendedEffort 
-          / (double)totalEffort) * 100));
-      task.setProgress(thisProgress);
-
-      /*          Util.debug("Expended Effort: "+ expendedEffort);
-                  Util.debug("Total Effort: "+ totalEffort);
-                  Util.debug("Progress: "+ t.getProgress());   */
-
-      res[0] = expendedEffort;
-      res[1] = totalEffort;
-      return res;            
-    } else {
-      long eff = task.getEffort();
-      // if effort was not filled in, it is assumed to be "1 hr" for the purpose of calculation
-      if (eff == 0) {
-        eff = 1;
-      }
-      res[0] = Math.round((double)(task.getProgress() * eff) / 100d); 
-      res[1] = eff;
-      return res;
+
+    /**
+     * Looks through the entire sub task tree and corrects any inconsistencies in start dates.
+     *
+     * @param task task to be checked for latest End date.
+     * @return latest end date.
+     */
+    public CalendarDate getLatestEndDateFromSubTasks(Task task) {
+        CalendarDate date = task.getEndDate();
+        if (hasSubTasks(task.getId())) {
+            Collection<Task> subTasks = getAllSubTasks(task.getId());
+            for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext(); ) {
+                Task iteratorTask = iter.next();
+                CalendarDate dd = getLatestEndDateFromSubTasks(iteratorTask);
+                if (dd.after(date)) {
+                    date = dd;
+                }
+            }
+            task.setEndDate(date);
+            return date;
+        } else {
+            return task.getEndDate();
+        }
+    }
+
+    /**
+     * Looks through the entire sub task tree and calculates progress on all parent task nodes
+     *
+     * @param task task used to complete subtasks.
+     * @return long[]
+     * of size 2. First long is expended effort in milliseconds,
+     * 2nd long is total effort in milliseconds
+     */
+    public long[] calculateCompletionFromSubTasks(Task task) {
+        /* Util.debug("Task " + t.getText()); */
+        long[] res = new long[2];
+        long expendedEffort = 0; // milliseconds
+        long totalEffort = 0; // milliseconds
+        if (hasSubTasks(task.getId())) {
+            Collection<Task> subTasks = getAllSubTasks(task.getId());
+            for (Iterator<Task> iter = subTasks.iterator(); iter.hasNext(); ) {
+                Task iterTask = iter.next();
+                long[] subTaskCompletion = calculateCompletionFromSubTasks(iterTask);
+                expendedEffort = expendedEffort + subTaskCompletion[0];
+                totalEffort = totalEffort + subTaskCompletion[1];
+            }
+
+            int thisProgress = (int) Math.round((((double) expendedEffort
+                    / (double) totalEffort) * 100));
+            task.setProgress(thisProgress);
+
+            /*
+            Util.debug("Expended Effort: "+ expendedEffort);
+            Util.debug("Total Effort: "+ totalEffort);
+            Util.debug("Progress: "+ t.getProgress());
+            */
+
+            res[0] = expendedEffort;
+            res[1] = totalEffort;
+            return res;
+        } else {
+            long eff = task.getEffort();
+            // if effort was not filled in, it is assumed to be "1 hr" for the purpose of calculation
+            if (eff == 0) {
+                eff = 1;
+            }
+            res[0] = Math.round((double) (task.getProgress() * eff) / 100d);
+            res[1] = eff;
+            return res;
+        }
     }
-  }    
-
-  /**
-   *  get Task element method.
-   *  @param id - id of the task
-   *  @return taskElement the contents of the task
-   */
-  public nu.xom.Element getTaskElement(String id) {
+
+    /**
+     * get Task element method.
+     *
+     * @param id - id of the task
+     * @return taskElement the contents of the task
+     */
+    public nu.xom.Element getTaskElement(String id) {
                
-    /*Nodes nodes = XQueryUtil.xquery(_doc, "//task[@id='" + id + "']");
+        /*
+        Nodes nodes = XQueryUtil.xquery(_doc, "//task[@id='" + id + "']");
         if (nodes.size() > 0) {
             Element el = (Element) nodes.get(0);
             return el;            
@@ -474,135 +415,141 @@ public class TaskListImpl implements TaskList {
         else {
             Util.debug("Task " + id + " cannot be found in project " + _project.getTitle());
             return null;
-        } */
-    Element el = elements.get(id);
-    if (el == null) {
-      Util.debug("Task " + id + " cannot be found in project " + _project.getTitle());
+        }
+        */
+        Element el = elements.get(id);
+        if (el == null) {
+            Util.debug("Task " + id + " cannot be found in project " + _project.getTitle());
+        }
+        return el;
     }
-    return el;
-  }
-    
-  private Collection<Task> getAllRootTasks() {
-    Elements tasks = _root.getChildElements("task");
-    return convertToTaskObjects(tasks);
-  }
-    
-  private Collection<Task> convertToTaskObjects(Elements tasks) {
-    Vector<Task> vector = new Vector<Task>();
-
-    for (int i = 0; i < tasks.size(); i++) {
-      Task task = new TaskImpl(tasks.get(i), this);
-      vector.add(task);
+
+    private Collection<Task> getAllRootTasks() {
+        Elements tasks = _root.getChildElements("task");
+        return convertToTaskObjects(tasks);
     }
-    return vector;
-  }
-
-  private Collection<Task> filterActiveTasks(Collection<Task> tasks,CalendarDate date) {
-    Vector<Task> vector = new Vector<Task>();
-    for (Iterator<Task> iter = tasks.iterator(); iter.hasNext();) {
-      Task iteratorTask = iter.next();
-      if (isActive(iteratorTask,date)) {
-        vector.add(iteratorTask);
-      }
+
+    private Collection<Task> convertToTaskObjects(Elements tasks) {
+        Vector<Task> vector = new Vector<Task>();
+
+        for (int i = 0; i < tasks.size(); i++) {
+            Task task = new TaskImpl(tasks.get(i), this);
+            vector.add(task);
+        }
+        return vector;
     }
-    return vector;
-  }
 
-  private boolean isActive(Task task,CalendarDate date) {
-    if ((task.getStatus(date) == Task.ACTIVE) || (task.getStatus(date) == Task.DEADLINE)
-        || (task.getStatus(date) == Task.FAILED)) {
-      return true;
-    } else {
-      return false;
+    private Collection<Task> filterActiveTasks(Collection<Task> tasks, CalendarDate date) {
+        Vector<Task> vector = new Vector<Task>();
+        for (Iterator<Task> iter = tasks.iterator(); iter.hasNext(); ) {
+            Task iteratorTask = iter.next();
+            if (isActive(iteratorTask, date)) {
+                vector.add(iteratorTask);
+            }
+        }
+        return vector;
+    }
+
+    private boolean isActive(Task task, CalendarDate date) {
+        if ((task.getStatus(date) == Task.ACTIVE) || (task.getStatus(date) == Task.DEADLINE)
+                || (task.getStatus(date) == Task.FAILED)) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * Returns a collection of repeatable Tasks.
+     *
+     * @return repeatableTasks
+     */
+    public Collection<Task> getDuplicateTasks(String taskId, CalendarDate endDate) {
+        Vector<Task> vector = new Vector<Task>();
+        nu.xom.Elements elements = _root.getChildElements("task");
+        Task t;
+        for (int i = 0; i < elements.size(); i++) {
+            t = getTask((elements.get(i).getAttribute("id").getValue()));
+            if (t.getEndDate() == endDate && t.getId() == taskId) {
+                vector.add(t);
+            }
+        }
+        return vector;
+
+    }
+
+    public Vector<Task> getRepeatableTasks() {
+        Vector<Task> vector = new Vector<Task>();
+        nu.xom.Elements elements = _root.getChildElements("task");
+        Task t;
+
+        for (int i = 0; i < elements.size(); i++) {
+            t = getTask(elements.get(i).getAttribute("id").getValue());
+            if (t.isRepeatable()) {
+                vector.add(t);
+            }
+        }
+        return vector;
+    }
+
+
+    public Vector<Task> getRepeatableTaskforDate(CalendarDate date) {
+        Vector<Task> repeatableTasks = getRepeatableTasks();
+        Vector<Task> tasksForDate = new Vector<Task>();
+        boolean duplicate = false;
+        Task task;
+        CalendarDate endRepeat;
+
+        for (int i = 0; i < repeatableTasks.size(); i++) {
+            task = (Task) repeatableTasks.get(i);
+            endRepeat = task.getEndRepeat();
+
+            for (int j = 0; j < tasksForDate.size(); j++) {
+                if (task.getText().equals(tasksForDate.get(j).getText()) &&
+                        task.getStartDate().equals(tasksForDate.get(j).getStartDate())) {
+                    duplicate = true;
+                }
+            }
+
+            if (!duplicate) {
+                if ((date.after(task.getStartDate()) && endRepeat == null)
+                        || (date.inPeriod(task.getStartDate(), endRepeat))) {
+                    if (!task.getWorkingDaysOnly() ||
+                            (task.getWorkingDaysOnly() &&
+                                    !((date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY)
+                                            || (date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)))) {
+                        if (task.getRepeatType() == REPEAT_DAILY) {
+                            //Why are we bothering to check this? If something repeats daily, its period should
+                            //always be zero and it should show up every day.
+                            int n = date.getCalendar().get(Calendar.DAY_OF_YEAR);
+                            int ns = task.getStartDate().getCalendar().get(Calendar.DAY_OF_YEAR);
+                            if (task.getPeriod() == 0 || (n - ns) % task.getPeriod() == 0) { //Why is this if here?
+                                tasksForDate.add(task);
+                            }
+                        } else if (task.getRepeatType() == REPEAT_WEEKLY) {
+                            if (date.getCalendar().get(Calendar.DAY_OF_WEEK) ==
+                                    task.getStartDate().getCalendar().get(Calendar.DAY_OF_WEEK)) {
+                                tasksForDate.add(task);
+                            }
+                        } else if (task.getRepeatType() == REPEAT_MONTHLY) {
+                            if (date.getCalendar().get(Calendar.DAY_OF_MONTH) ==
+                                    task.getStartDate().getCalendar().get(Calendar.DAY_OF_MONTH)) {
+                                tasksForDate.add(task);
+                            }
+                        } else if (task.getRepeatType() == REPEAT_YEARLY) {
+                            if (date.getCalendar().get(Calendar.DAY_OF_YEAR) ==
+                                    task.getStartDate().getCalendar().get(Calendar.DAY_OF_YEAR)) {
+                                tasksForDate.add(task);
+                            }
+                        }
+                    }
+                }
+            } else {
+                duplicate = false;
+            }
+        }
+        return tasksForDate;
     }
-  }
-  /**
-   * Returns a collection of repeatable Tasks.
-   * @return repeatableTasks
-   */
-  public Collection<Task> getDuplicateTasks(String taskId, CalendarDate endDate){
-	  Vector<Task> vector = new Vector<Task>();
-	  nu.xom.Elements elements = _root.getChildElements("task");
-	  Task t;
-	  for(int i=0;i<elements.size();i++){
-		  t = getTask((elements.get(i).getAttribute("id").getValue()));
-		  if(t.getEndDate() == endDate && t.getId() == taskId) {
-			  vector.add(t);
-		  }
-	  }
-	  return vector;
-	  
-  }
-  
-  public  Vector<Task> getRepeatableTasks() {
-  	Vector<Task> vector = new Vector<Task>();
-	nu.xom.Elements elements = _root.getChildElements("task");
-	Task t;
-	
-	for(int i = 0; i< elements.size(); i++){
-		t = getTask(elements.get(i).getAttribute("id").getValue());
-		if(t.isRepeatable()) {
-			vector.add(t);
-		}
-	}
-  	return vector;
-  }
-  
-  
-  public Vector<Task> getRepeatableTaskforDate(CalendarDate date) {
-  	Vector<Task> repeatableTasks = getRepeatableTasks();
-  	Vector<Task> tasksForDate = new Vector<Task>();
-  	boolean duplicate = false;
-  	Task task;
-  	CalendarDate endRepeat; 
-  	
-  	for(int i = 0; i < repeatableTasks.size(); i++) {
-  		task = (Task) repeatableTasks.get(i);
-  		endRepeat = task.getEndRepeat();
-
-  		for(int j = 0; j < tasksForDate.size(); j++) {
-  			if(task.getText().equals(tasksForDate.get(j).getText()) &&
-  					task.getStartDate().equals(tasksForDate.get(j).getStartDate())) {
-  				duplicate = true;
-  			}
-  		}
-  		
-  		if(!duplicate) {
-	  		if ((date.after(task.getStartDate()) && endRepeat == null) 
-	  				|| (date.inPeriod(task.getStartDate(), endRepeat))) {
-	    		if(!task.getWorkingDaysOnly() || 
-	    				(task.getWorkingDaysOnly() && 
-	    						!((date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY)
-	    						|| (date.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY)))) {
-	    			if(task.getRepeatType() == REPEAT_DAILY) {
-	    				//Why are we bothering to check this? If something repeats daily, its period should 
-	    				//always be zero and it should show up every day.
-	    				int n= date.getCalendar().get(Calendar.DAY_OF_YEAR);
-	    				int ns= task.getStartDate().getCalendar().get(Calendar.DAY_OF_YEAR);
-	    				if(task.getPeriod()==0 || (n-ns) % task.getPeriod() == 0){ //Why is this if here?
-	    					tasksForDate.add(task);
-	    				}
-		    		} else if (task.getRepeatType() == REPEAT_WEEKLY) {
-		  				if(date.getCalendar().get(Calendar.DAY_OF_WEEK) == 
-		  						task.getStartDate().getCalendar().get(Calendar.DAY_OF_WEEK))
-		  					tasksForDate.add(task);
-		  			} else if(task.getRepeatType() == REPEAT_MONTHLY) {
-		  				if(date.getCalendar().get(Calendar.DAY_OF_MONTH) == 
-		  						task.getStartDate().getCalendar().get(Calendar.DAY_OF_MONTH))
-		  					tasksForDate.add(task);
-		  			} else if(task.getRepeatType() == REPEAT_YEARLY) {
-		  				if(date.getCalendar().get(Calendar.DAY_OF_YEAR) == 
-		  						task.getStartDate().getCalendar().get(Calendar.DAY_OF_YEAR))
-		  					tasksForDate.add(task);
-		  			}
-	    		}
-	  		}
-  		} else {
-	  		duplicate = false;
-  		}
-  	}
-    return tasksForDate;
-  }
 
 
   
diff --git a/src/net/sf/memoranda/date/CalendarDate.java b/src/net/sf/memoranda/date/CalendarDate.java
index cec52e3..6c2a335 100755
--- a/src/net/sf/memoranda/date/CalendarDate.java
+++ b/src/net/sf/memoranda/date/CalendarDate.java
@@ -8,13 +8,13 @@
  */
 package net.sf.memoranda.date;
 
+import net.sf.memoranda.util.Local;
+import net.sf.memoranda.util.Util;
+
 import java.text.DateFormat;
 import java.util.Calendar;
 import java.util.Date;
 
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.Util;
-
 /**
  *
  */
@@ -43,10 +43,11 @@ public class CalendarDate {
         cal.set(Calendar.MONTH, _month);
         cal.getTime();
         int dmax = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
-        if (day <= dmax)
-          _day = day;
-        else
-          _day = dmax;
+        if (day <= dmax) {
+            _day = day;
+        } else {
+            _day = dmax;
+        }
 
     }
 
@@ -131,12 +132,10 @@ public class CalendarDate {
         if (object.getClass().isInstance(CalendarDate.class)) {
             CalendarDate d2 = (CalendarDate) object;
             return ((d2.getDay() == getDay()) && (d2.getMonth() == getMonth()) && (d2.getYear() == getYear()));
-        }
-        else if (object.getClass().isInstance(Calendar.class)) {
+        } else if (object.getClass().isInstance(Calendar.class)) {
             Calendar cal = (Calendar) object;
             return this.equals(new CalendarDate(cal));
-        }
-        else if (object.getClass().isInstance(Date.class)) {
+        } else if (object.getClass().isInstance(Date.class)) {
             Date d = (Date) object;
             return this.equals(new CalendarDate(d));
         }
@@ -145,22 +144,25 @@ public class CalendarDate {
     }
 
     public boolean equals(CalendarDate date) {
-        if (date == null)
+        if (date == null) {
             return false;
+        }
 
         return ((date.getDay() == getDay()) && (date.getMonth() == getMonth()) && (date.getYear() == getYear()));
     }
 
     public boolean before(CalendarDate date) {
-        if (date == null)
+        if (date == null) {
             return true;
+        }
 
         return this.getCalendar().before(date.getCalendar());
     }
 
     public boolean after(CalendarDate date) {
-        if (date == null)
+        if (date == null) {
             return true;
+        }
 
         return this.getCalendar().after(date.getCalendar());
     }
@@ -171,23 +173,23 @@ public class CalendarDate {
 
     public String toString() {
         return Util.getDateStamp(this);
-    }  
-    
+    }
+
     public String getFullDateString() {
         return Local.getDateString(this, DateFormat.FULL);
     }
-    
+
     public String getMediumDateString() {
         return Local.getDateString(this, DateFormat.MEDIUM);
     }
-    
+
     public String getLongDateString() {
         return Local.getDateString(this, DateFormat.LONG);
     }
-    
+
     public String getShortDateString() {
         return Local.getDateString(this, DateFormat.SHORT);
     }
-    
+
 
 }
diff --git a/src/net/sf/memoranda/date/CurrentDate.java b/src/net/sf/memoranda/date/CurrentDate.java
index a66f32c..1c12d7e 100755
--- a/src/net/sf/memoranda/date/CurrentDate.java
+++ b/src/net/sf/memoranda/date/CurrentDate.java
@@ -7,6 +7,7 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.date;
+
 import java.util.Collection;
 import java.util.Vector;
 
@@ -24,7 +25,9 @@ public class CurrentDate {
     }
 
     public static void set(CalendarDate date) {
-        if (date.equals(_date)) return;
+        if (date.equals(_date)) {
+            return;
+        }
         _date = date;
         dateChanged(date);
     }
@@ -42,7 +45,8 @@ public class CurrentDate {
     }
 
     private static void dateChanged(CalendarDate date) {
-        for (int i = 0; i < dateListeners.size(); i++)
-            ((DateListener)dateListeners.get(i)).dateChange(date);
+        for (int i = 0; i < dateListeners.size(); i++) {
+            ((DateListener) dateListeners.get(i)).dateChange(date);
+        }
     }
 }
diff --git a/src/net/sf/memoranda/date/DateListener.java b/src/net/sf/memoranda/date/DateListener.java
index efdcf19..7cb087e 100755
--- a/src/net/sf/memoranda/date/DateListener.java
+++ b/src/net/sf/memoranda/date/DateListener.java
@@ -3,6 +3,6 @@ package net.sf.memoranda.date;
 /*$Id: DateListener.java,v 1.2 2004/01/30 12:17:41 alexeya Exp $*/
 public interface DateListener {
 
-  void dateChange(CalendarDate date);
+    void dateChange(CalendarDate date);
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/test/CalendarDateTest.java b/src/net/sf/memoranda/test/CalendarDateTest.java
index 617b5a3..aeaa701 100644
--- a/src/net/sf/memoranda/test/CalendarDateTest.java
+++ b/src/net/sf/memoranda/test/CalendarDateTest.java
@@ -1,56 +1,52 @@
 package net.sf.memoranda.test;
 
-import static org.junit.Assert.*;
-
-import org.junit.After;
-import org.junit.AfterClass;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
 import net.sf.memoranda.date.CalendarDate;
+import org.junit.*;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class CalendarDateTest {
-	
-	private CalendarDate cd1;
-	private CalendarDate cd2;
-	private CalendarDate cd3;
-
-	@BeforeClass
-	public static void setUpBeforeClass() throws Exception {
-	}
-
-	@AfterClass
-	public static void tearDownAfterClass() throws Exception {
-	}
-
-	@Before
-	public void setUp() throws Exception {
-		cd1 = new CalendarDate(10,2,2016);
-		cd2 = new CalendarDate(11,2,2016);
-		cd3 = new CalendarDate(10,2,2016);
-	}
-
-	@After
-	public void tearDown() throws Exception {
-	}
-
-	@Test
-	public void equalsTest() {
-		assertTrue(cd1.equals(cd3));
-		assertFalse(cd1.equals(cd2));
-	}
-	
-	@Test
-	public void beforeTest() {
-		assertTrue(cd1.before(cd2));
-		assertFalse(cd2.before(cd1));
-	}
-	
-	@Test
-	public void afterTest() {
-		assertFalse(cd1.after(cd2));
-		assertTrue(cd2.after(cd1));
-	}
+
+    private CalendarDate cd1;
+    private CalendarDate cd2;
+    private CalendarDate cd3;
+
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+    }
+
+    @AfterClass
+    public static void tearDownAfterClass() throws Exception {
+    }
+
+    @Before
+    public void setUp() throws Exception {
+        cd1 = new CalendarDate(10, 2, 2016);
+        cd2 = new CalendarDate(11, 2, 2016);
+        cd3 = new CalendarDate(10, 2, 2016);
+    }
+
+    @After
+    public void tearDown() throws Exception {
+    }
+
+    @Test
+    public void equalsTest() {
+        assertTrue(cd1.equals(cd3));
+        assertFalse(cd1.equals(cd2));
+    }
+
+    @Test
+    public void beforeTest() {
+        assertTrue(cd1.before(cd2));
+        assertFalse(cd2.before(cd1));
+    }
+
+    @Test
+    public void afterTest() {
+        assertFalse(cd1.after(cd2));
+        assertTrue(cd2.after(cd1));
+    }
 
 }
diff --git a/src/net/sf/memoranda/test/HourlyEventTest.java b/src/net/sf/memoranda/test/HourlyEventTest.java
index d3e0642..b0bb418 100644
--- a/src/net/sf/memoranda/test/HourlyEventTest.java
+++ b/src/net/sf/memoranda/test/HourlyEventTest.java
@@ -4,16 +4,14 @@ import net.sf.memoranda.Event;
 import net.sf.memoranda.EventsManager;
 import net.sf.memoranda.EventsScheduler;
 import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.ui.App;
 import net.sf.memoranda.ui.EventDialog;
-import net.sf.memoranda.util.Local;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
 import java.util.Vector;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 
 public class HourlyEventTest {
 
@@ -24,7 +22,7 @@ public class HourlyEventTest {
     boolean workDays;
 
     @Before
- // creates a new repeatableHour test and compares the period of when the notify panel will pop up
+    // creates a new repeatableHour test and compares the period of when the notify panel will pop up
     public void setUp() throws Exception {
         repeatType = 5;
         //dialog = new EventDialog(App.getFrame(), Local.getString("New event"));
@@ -40,34 +38,34 @@ public class HourlyEventTest {
 
     @Test
     public void testEventHourPeriod() {
-    	System.out.println("[DEBUG] Starting testEventHourPeriod()");
+        System.out.println("[DEBUG] Starting testEventHourPeriod()");
         EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour, minute, text, workDays);
-    	System.out.println("[DEBUG] Valid Event Created");
+        System.out.println("[DEBUG] Valid Event Created");
         //all current events
-        Vector events= (Vector)EventsManager.getActiveEvents();
+        Vector events = (Vector) EventsManager.getActiveEvents();
         //gets the new event that was just created
-        Event event= (Event) events.get(events.size() - 1);
-     // sends to eventMinute and gets the current time and checks when the next notify pop will pop up.
+        Event event = (Event) events.get(events.size() - 1);
+        // sends to eventMinute and gets the current time and checks when the next notify pop will pop up.
         EventsScheduler.eventHour(event);
-		System.out.println("[DEBUG] " + period +" = "+event.getPeriod());
+        System.out.println("[DEBUG] " + period + " = " + event.getPeriod());
         // ensures time we set to timer is the same
         assertEquals(period, event.getPeriod());
     }
 
     @Test
     public void testEventHourExists() {
-    	System.out.println("[DEBUG] Starting testEventHourExists()");
+        System.out.println("[DEBUG] Starting testEventHourExists()");
         int beforeAdded = EventsScheduler.counter();
         System.out.println("[DEBUG] " + beforeAdded);
-        EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour+1, minute+1, text, workDays);
+        EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour + 1, minute + 1, text, workDays);
         System.out.println("[DEBUG] Valid Event Created");
-        Vector events= (Vector)EventsManager.getActiveEvents();
-        Event event= (Event) events.get(events.size() - 1);
+        Vector events = (Vector) EventsManager.getActiveEvents();
+        Event event = (Event) events.get(events.size() - 1);
         EventsScheduler.eventHour(event);
         int afterAdded = 0;
         afterAdded = EventsScheduler.counter();
-		System.out.println("[DEBUG] " + beforeAdded +" != "+afterAdded);
-		// ensures that event was added to the timer vector
+        System.out.println("[DEBUG] " + beforeAdded + " != " + afterAdded);
+        // ensures that event was added to the timer vector
         assertFalse(beforeAdded == afterAdded);
     }
 }
diff --git a/src/net/sf/memoranda/test/MinutleyEventTest.java b/src/net/sf/memoranda/test/MinutleyEventTest.java
index 43687bf..d3728a0 100644
--- a/src/net/sf/memoranda/test/MinutleyEventTest.java
+++ b/src/net/sf/memoranda/test/MinutleyEventTest.java
@@ -1,69 +1,67 @@
 package net.sf.memoranda.test;
 
-import static org.junit.Assert.*;
-
-import java.util.Vector;
-
 import net.sf.memoranda.Event;
 import net.sf.memoranda.EventsManager;
 import net.sf.memoranda.EventsScheduler;
 import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.ui.App;
 import net.sf.memoranda.ui.EventDialog;
-import net.sf.memoranda.util.Local;
-
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
+import java.util.Vector;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+
 public class MinutleyEventTest {
 
-	int repeatType, period, hour, minute;
-	String text;
-	CalendarDate startDate, endDate;
-	EventDialog dialog;
-	boolean workDays;
+    int repeatType, period, hour, minute;
+    String text;
+    CalendarDate startDate, endDate;
+    EventDialog dialog;
+    boolean workDays;
+
+    // sets up the variable to create a new repeatable event
+    @Before
+    public void setUp() throws Exception {
+        repeatType = 6;
+        //dialog = new EventDialog(App.getFrame(), Local.getString("New event"));
+        startDate = CalendarDate.today();
+        endDate = CalendarDate.tomorrow();
+        period = 1;
+        hour = 7;
+        minute = 14;
+        text = "hello";
+        workDays = false;
+        System.out.println("[DEBUG] Minutely Set Up complete");
+    }
 
-// sets up the variable to create a new repeatable event
-	@Before
-	public void setUp() throws Exception {
-		repeatType = 6;
-		//dialog = new EventDialog(App.getFrame(), Local.getString("New event"));
-		startDate = CalendarDate.today();
-		endDate = CalendarDate.tomorrow();
-		period = 1;
-		hour = 7;
-		minute = 14;
-		text = "hello";
-		workDays = false;
-		System.out.println("[DEBUG] Minutely Set Up complete");
-	}
-// creates a new repeatableMinute test and compares the period of when the notify panel will pop up
-	@Test
-	public void testEventMinutePeriod() {
-		EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour, minute, text, workDays);
-		// all current events
-		Vector events= (Vector)EventsManager.getActiveEvents();
-		//gets the event we created
-		Event event= (Event) events.get(events.size() - 1);
-		// sends to eventMinute and gets the current time and checks when the next notify pop will pop up.
-		EventsScheduler.eventMinute(event);
-		System.out.println("[DEBUG] " + period +" = "+event.getPeriod());
-		// ensures time we set to timer is the same
-		assertEquals(period, event.getPeriod());
-	}
+    // creates a new repeatableMinute test and compares the period of when the notify panel will pop up
+    @Test
+    public void testEventMinutePeriod() {
+        EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour, minute, text, workDays);
+        // all current events
+        Vector events = (Vector) EventsManager.getActiveEvents();
+        //gets the event we created
+        Event event = (Event) events.get(events.size() - 1);
+        // sends to eventMinute and gets the current time and checks when the next notify pop will pop up.
+        EventsScheduler.eventMinute(event);
+        System.out.println("[DEBUG] " + period + " = " + event.getPeriod());
+        // ensures time we set to timer is the same
+        assertEquals(period, event.getPeriod());
+    }
 
-	@Test
-	public void testEventMinuteExists() {
-		int beforeAdded = EventsScheduler.counter();
-		EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour+1, minute+1, text, workDays);
-		Vector events= (Vector)EventsManager.getActiveEvents();
-		Event event= (Event) events.get(events.size() - 1);
-		EventsScheduler.eventMinute(event);
-		int afterAdded = EventsScheduler.counter();
-		System.out.println("[DEBUG] " + beforeAdded +" != "+afterAdded);
-		// ensures that event was added to the timer vector
-		assertFalse(beforeAdded == afterAdded);
-	}
+    @Test
+    public void testEventMinuteExists() {
+        int beforeAdded = EventsScheduler.counter();
+        EventsManager.createRepeatableEvent(repeatType, startDate, endDate, period, hour + 1, minute + 1, text, workDays);
+        Vector events = (Vector) EventsManager.getActiveEvents();
+        Event event = (Event) events.get(events.size() - 1);
+        EventsScheduler.eventMinute(event);
+        int afterAdded = EventsScheduler.counter();
+        System.out.println("[DEBUG] " + beforeAdded + " != " + afterAdded);
+        // ensures that event was added to the timer vector
+        assertFalse(beforeAdded == afterAdded);
+    }
 
 }
diff --git a/src/net/sf/memoranda/test/ProjectCreationDeletionTest.java b/src/net/sf/memoranda/test/ProjectCreationDeletionTest.java
index cf9b081..0163cf8 100644
--- a/src/net/sf/memoranda/test/ProjectCreationDeletionTest.java
+++ b/src/net/sf/memoranda/test/ProjectCreationDeletionTest.java
@@ -1,98 +1,93 @@
 package net.sf.memoranda.test;
 
-import static org.junit.Assert.*;
-
-import java.awt.event.ActionEvent;
-
+import net.sf.memoranda.Project;
+import net.sf.memoranda.ProjectManager;
+import net.sf.memoranda.date.CalendarDate;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectManager;
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.ui.AgendaPanel;
+import static org.junit.Assert.assertTrue;
 
 public class ProjectCreationDeletionTest {
-	
-	int allProj;
-	
-	@BeforeClass
-	public static void setUpBeforeClass() throws Exception {
-		ProjectManager.createProject("1", "Test Project", CalendarDate.today(), null);
-	}
 
-	@Before
-	public void setUp() throws Exception {
-		allProj = ProjectManager.getAllProjectsNumber();
-	}
+    int allProj;
+
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+        ProjectManager.createProject("1", "Test Project", CalendarDate.today(), null);
+    }
+
+    @Before
+    public void setUp() throws Exception {
+        allProj = ProjectManager.getAllProjectsNumber();
+    }
+
+    /**
+     * Test creation with no end date
+     */
+    @Test
+    public void testNoEndNewProject() {
+        ProjectManager.createProject("2", "Test Project", CalendarDate.today(), null);
+        assertTrue(allProj + 1 == ProjectManager.getAllProjectsNumber());
+    }
+
+    /**
+     * Test start and end date
+     */
+    @Test
+    public void testNormalNewProject() {
+        ProjectManager.createProject("3", "Testing", CalendarDate.today(), CalendarDate.tomorrow());
+        assertTrue(allProj + 1 == ProjectManager.getAllProjectsNumber());
+    }
+
+    /**
+     * Test no start date
+     */
+    @Test
+    public void testNoStartNewProject() {
+        ProjectManager.createProject("4", "Another Test", null, CalendarDate.tomorrow());
+        assertTrue(allProj + 1 == ProjectManager.getAllProjectsNumber());
+    }
+
+    /**
+     * Test creating a project with an empty name.
+     */
+    @Test
+    public void testNoNamedProject() {
+        ProjectManager.createProject("5", "", null, CalendarDate.tomorrow());
+        assertTrue(allProj + 1 == ProjectManager.getAllProjectsNumber());
+    }
+
+    /**
+     * Test End date is before start date.
+     */
+    @Test
+    public void testEndAfterStart() {
+        ProjectManager.createProject("6", "Basic Test", CalendarDate.tomorrow(), CalendarDate.today());
+        assertTrue(allProj + 1 == ProjectManager.getAllProjectsNumber());
+        Project testPrj = ProjectManager.getProject("6");
+        assertTrue(testPrj.getEndDate().equals(testPrj.getStartDate()));
+    }
 
-	/**
-	 * Test creation with no end date
-	 */
-	@Test
-	public void testNoEndNewProject() {
-		ProjectManager.createProject("2", "Test Project", CalendarDate.today(), null);
-		assertTrue(allProj+1 == ProjectManager.getAllProjectsNumber());
-	}
-	
-	/**
-	 * Test start and end date
-	 */
-	@Test
-	public void testNormalNewProject() {
-		ProjectManager.createProject("3", "Testing", CalendarDate.today(), CalendarDate.tomorrow());
-		assertTrue(allProj+1 == ProjectManager.getAllProjectsNumber());
-	}
-	
-	/**
-	 * Test no start date
-	 */
-	@Test
-	public void testNoStartNewProject() {
-		ProjectManager.createProject("4", "Another Test", null, CalendarDate.tomorrow());
-		assertTrue(allProj+1 == ProjectManager.getAllProjectsNumber());
-	}
+    /**
+     * Tests an appropriate project deletion.
+     */
+    @Test
+    public void testNormalDeleteProject() {
+        if (allProj < 1) {
+            ProjectManager.createProject("Default", CalendarDate.today(), null);
+        }
+        ProjectManager.removeProject("1");
+        assertTrue(allProj - 1 == ProjectManager.getAllProjectsNumber());
+    }
 
-	/**
-	 * Test creating a project with an empty name.
-	 */
-	@Test
-	public void testNoNamedProject() {
-		ProjectManager.createProject("5", "", null, CalendarDate.tomorrow());
-		assertTrue(allProj+1 == ProjectManager.getAllProjectsNumber());
-	}
-	
-	/**
-	 * Test End date is before start date.
-	 */
-	@Test
-	public void testEndAfterStart() {
-		ProjectManager.createProject("6", "Basic Test", CalendarDate.tomorrow(), CalendarDate.today());
-		assertTrue(allProj+1 == ProjectManager.getAllProjectsNumber());
-		Project testPrj = ProjectManager.getProject("6");
-		assertTrue(testPrj.getEndDate().equals(testPrj.getStartDate()));
-	}
-	
-	/**
-	 * Tests an appropriate project deletion.
-	 */
-	@Test
-	public void testNormalDeleteProject() {
-		if(allProj < 1) {
-			ProjectManager.createProject("Default", CalendarDate.today(), null);
-		}
-		ProjectManager.removeProject("1");
-		assertTrue(allProj-1 == ProjectManager.getAllProjectsNumber());
-	}
-	
-	/**
-	 * Test removing a nonexistant project.
-	 */
-	@Test
-	public void testDeleteFakeProject() {
-			ProjectManager.removeProject("PLM22");
-			assertTrue(allProj == ProjectManager.getAllProjectsNumber());
-	}
+    /**
+     * Test removing a nonexistant project.
+     */
+    @Test
+    public void testDeleteFakeProject() {
+        ProjectManager.removeProject("PLM22");
+        assertTrue(allProj == ProjectManager.getAllProjectsNumber());
+    }
 }
diff --git a/src/net/sf/memoranda/test/TaskDialogTes.java b/src/net/sf/memoranda/test/TaskDialogTes.java
index 57a7565..a0d244f 100644
--- a/src/net/sf/memoranda/test/TaskDialogTes.java
+++ b/src/net/sf/memoranda/test/TaskDialogTes.java
@@ -1,53 +1,48 @@
 /**
- * 
+ *
  */
 package net.sf.memoranda.test;
 
-import static org.junit.Assert.*;
+import org.junit.*;
 
-import org.junit.After;
-import org.junit.AfterClass;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import static org.junit.Assert.fail;
 
 /**
  * @author jorda
- *
  */
 public class TaskDialogTes {
 
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@BeforeClass
-	public static void setUpBeforeClass() throws Exception {
-	}
-
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@AfterClass
-	public static void tearDownAfterClass() throws Exception {
-	}
-
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@Before
-	public void setUp() throws Exception {
-	}
-
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@After
-	public void tearDown() throws Exception {
-	}
-
-	@Test
-	public void test() {
-		fail("Not yet implemented");
-	}
+    /**
+     * @throws java.lang.Exception
+     */
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+    }
+
+    /**
+     * @throws java.lang.Exception
+     */
+    @AfterClass
+    public static void tearDownAfterClass() throws Exception {
+    }
+
+    /**
+     * @throws java.lang.Exception
+     */
+    @Before
+    public void setUp() throws Exception {
+    }
+
+    /**
+     * @throws java.lang.Exception
+     */
+    @After
+    public void tearDown() throws Exception {
+    }
+
+    @Test
+    public void test() {
+        fail("Not yet implemented");
+    }
 
 }
diff --git a/src/net/sf/memoranda/test/TaskOperationsTest.java b/src/net/sf/memoranda/test/TaskOperationsTest.java
index 1efca32..74c5d3e 100644
--- a/src/net/sf/memoranda/test/TaskOperationsTest.java
+++ b/src/net/sf/memoranda/test/TaskOperationsTest.java
@@ -1,109 +1,92 @@
 /**
- * 
+ *
  */
 package net.sf.memoranda.test;
 
-import static org.junit.Assert.*;
-
-import java.util.Calendar;
-import java.util.Vector;
-
+import net.sf.memoranda.*;
+import net.sf.memoranda.date.CalendarDate;
+import net.sf.memoranda.util.Util;
+import nu.xom.Attribute;
+import nu.xom.Element;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
-import nu.xom.Attribute;
-import nu.xom.Element;
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectImpl;
-import net.sf.memoranda.Task;
-import net.sf.memoranda.TaskList;
-import net.sf.memoranda.TaskListImpl;
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.util.Util;
+import java.util.Calendar;
+
+import static org.junit.Assert.assertTrue;
 
 /**
  * @author Daniel McEvoy
- *
  */
 public class TaskOperationsTest {
 
-	TaskList testTL;
+    TaskList testTL;
 
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@Before
-	public void setUp() throws Exception {
-		String id = Util.generateId();
-		Element elem = new Element("project");
+    /**
+     * @throws java.lang.Exception
+     */
+    @Before
+    public void setUp() throws Exception {
+        String id = Util.generateId();
+        Element elem = new Element("project");
         elem.addAttribute(new Attribute("id", id));
-		Project testPrj = new ProjectImpl(elem);
-		testTL = new TaskListImpl(testPrj);
-	}
+        Project testPrj = new ProjectImpl(elem);
+        testTL = new TaskListImpl(testPrj);
+    }
+
+    @Test
+    public void testRegTaskCreation() {
+        Task t = testTL.createTask(CalendarDate.today(), CalendarDate.tomorrow(), "text property",
+                1, 2, "This is a description!", null, false, 10, 0, false, null);
+        assertTrue(testTL.getTask(t.getId()).equals(t));
+    }
+
+    @Test
+    public void testRecurringTaskCreation() {
+        Calendar temp = CalendarDate.toCalendar(CalendarDate.today().getDay(), CalendarDate.today().getMonth(), CalendarDate.today().getYear());
+        CalendarDate dateDay = new CalendarDate(temp).tomorrow();
+        temp.add(temp.DATE, 7);
+        CalendarDate dateWeek = new CalendarDate(temp);
+        CalendarDate dateMonth = new CalendarDate(CalendarDate.toDate(CalendarDate.today().getDay(),
+                (CalendarDate.today().getMonth() + 1) % 12, CalendarDate.today().getYear()));
+        temp.add(temp.DATE, -7);
+        temp.add(temp.DATE, 365);
+        CalendarDate dateYear = new CalendarDate(temp);
+
+        Task t1 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
+                "ext", 1, 2, "This is a description!", null, false, 10, 1, false, dateDay);
+        Task t2 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
+                "txt", 1, 2, "This is a description!", null, false, 10, 2, false, dateWeek);
+        Task t3 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
+                "tet", 1, 2, "This is a description!", null, false, 10, 3, false, dateMonth);
+        Task t4 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
+                "tex", 1, 2, "This is a description!", null, false, 10, 4, false, dateYear);
+
+        assertTrue(t1.isRepeatable() && t2.isRepeatable() && t3.isRepeatable() && t4.isRepeatable());
+    }
+
+    @Test
+    public void testNoEndDateCreation() {
+        Task t = testTL.createTask(CalendarDate.today(), null, "text property",
+                1, 2, "This is a description!", null, false, 10, 0, false, null);
+        assertTrue(t.equals(testTL.getTask(t.getId())));
+    }
 
-	@Test
-	public void testRegTaskCreation() {
-		Task t = testTL.createTask(CalendarDate.today(), CalendarDate.tomorrow(), "text property",
-				1, 2, "This is a description!", null, false, 10, 0, false, null);
-		assertTrue(testTL.getTask(t.getId()).equals(t));
-	}
+    @Test
+    public void testInvalidStartCreation() {
+        Task t = null;
+        try {
+            t = testTL.createTask(null, null, "text property",
+                    1, 2, "This is a description!", null, false, 10, 0, false, null);
+        } catch (Exception e) {
+            assertTrue(t == null);
+        }
+    }
 
-	@Test
-	public void testRecurringTaskCreation() {
-		Calendar temp = CalendarDate.toCalendar(CalendarDate.today().getDay(), CalendarDate.today().getMonth(), CalendarDate.today().getYear());
-		CalendarDate dateDay = new CalendarDate(temp).tomorrow();
-		temp.add(temp.DATE, 7);
-		CalendarDate dateWeek = new CalendarDate(temp);
-		CalendarDate dateMonth = new CalendarDate(CalendarDate.toDate(CalendarDate.today().getDay(), 
-				(CalendarDate.today().getMonth() + 1) % 12, CalendarDate.today().getYear()));
-		temp.add(temp.DATE, -7);
-		temp.add(temp.DATE, 365);
-		CalendarDate dateYear = new CalendarDate(temp);
-		
-		Task t1 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
-				"ext", 1, 2, "This is a description!", null, false, 10, 1, false, dateDay);	
-		Task t2 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
-				"txt", 1, 2, "This is a description!", null, false, 10, 2, false, dateWeek);
-		Task t3 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
-				"tet", 1, 2, "This is a description!", null, false, 10, 3, false, dateMonth);
-		Task t4 = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
-				"tex", 1, 2, "This is a description!", null, false, 10, 4, false, dateYear);
-		
-		assertTrue(t1.isRepeatable() && t2.isRepeatable() && t3.isRepeatable() && t4.isRepeatable());
-/*		Vector<Task> vTask = (Vector<Task>) testTL.getRepeatableTaskforDate(dateDay);
-		//assertTrue(vTask.get(0).getText().equals(t1.getText()));
-		vTask = (Vector<Task>) testTL.getRepeatableTaskforDate(dateWeek);
-		//assertTrue(vTask.get(0).getText().equals(t2.getText()));
-		vTask = (Vector<Task>) testTL.getRepeatableTaskforDate(dateMonth);
-		//assertTrue(vTask.get(0).getText().equals(t3.getText()));
-		vTask = (Vector<Task>) testTL.getRepeatableTaskforDate(dateYear);
-		//assertTrue(vTask.get(0).getText().equals(t4.getText()));
-*/	}
-	
-	@Test
-	public void testNoEndDateCreation() {
-		Task t = testTL.createTask(CalendarDate.today(), null, "text property",
-				1, 2, "This is a description!", null, false, 10, 0, false, null);
-		assertTrue(t.equals(testTL.getTask(t.getId())));
-	}
-	
-	@Test
-	public void testInvalidStartCreation() {
-		Task t = null;
-		try {
-			t = testTL.createTask(null, null, "text property",
-					1, 2, "This is a description!", null, false, 10, 0, false, null);
-		} catch (Exception e) {
-			assertTrue(t == null);
-		}
-	}
-	
-	@Test
-	public void testWorkingDaysOnlyRecurCreation() {
-		Task t = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
-				"text", 1, 2, "This is a description!", null, true, 10, 4, false, null);
-		assertTrue(t.getWorkingDaysOnly());
-	}
+    @Test
+    public void testWorkingDaysOnlyRecurCreation() {
+        Task t = testTL.createTask(CalendarDate.today(), CalendarDate.today(),
+                "text", 1, 2, "This is a description!", null, true, 10, 4, false, null);
+        assertTrue(t.getWorkingDaysOnly());
+    }
 }
diff --git a/src/net/sf/memoranda/test/TaskReportDialogTest.java b/src/net/sf/memoranda/test/TaskReportDialogTest.java
index 43c9049..61de0d4 100644
--- a/src/net/sf/memoranda/test/TaskReportDialogTest.java
+++ b/src/net/sf/memoranda/test/TaskReportDialogTest.java
@@ -1,58 +1,54 @@
-/**
- * 
- */
-package net.sf.memoranda.test;
-
-import static org.junit.Assert.*;
-
-import org.junit.After;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-import net.sf.memoranda.ui.FileExportDialog;
-import net.sf.memoranda.ui.TaskReportDialog;
-
-/**
- * @author Jordan Partridge
- *
+/**
+ *
+ */
+package net.sf.memoranda.test;
+
+import net.sf.memoranda.ui.FileExportDialog;
+import net.sf.memoranda.ui.TaskReportDialog;
+import org.junit.After;
+import org.junit.AfterClass;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author Jordan Partridge
  */
 public class TaskReportDialogTest {
 
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@BeforeClass
-	public static void setUpBeforeClass() throws Exception {
-	}
-
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@AfterClass
-	public static void tearDownAfterClass() throws Exception {
-	}
-
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@After
-	public void tearDown() throws Exception {
-	}
-
-	@Test
-	public void test() {
-		if (false) {
-			FileExportDialog test2 = new FileExportDialog(null, null, null);
-			TaskReportDialog test = new TaskReportDialog(null, null);
-			test.isDisplayable();
-			test.setVisible(true);
-			test.setVisible(true);
-		}
-		else
-		{
-			assertTrue(true);
-		}
-	}
+    /**
+     * @throws java.lang.Exception
+     */
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+    }
+
+    /**
+     * @throws java.lang.Exception
+     */
+    @AfterClass
+    public static void tearDownAfterClass() throws Exception {
+    }
+
+    /**
+     * @throws java.lang.Exception
+     */
+    @After
+    public void tearDown() throws Exception {
+    }
+
+    @Test
+    public void test() {
+        if (false) {
+            FileExportDialog test2 = new FileExportDialog(null, null, null);
+            TaskReportDialog test = new TaskReportDialog(null, null);
+            test.isDisplayable();
+            test.setVisible(true);
+            test.setVisible(true);
+        } else {
+            assertTrue(true);
+        }
+    }
 
 }
diff --git a/src/net/sf/memoranda/test/TestAgendaRefresh.java b/src/net/sf/memoranda/test/TestAgendaRefresh.java
index 77de6f1..25e549b 100644
--- a/src/net/sf/memoranda/test/TestAgendaRefresh.java
+++ b/src/net/sf/memoranda/test/TestAgendaRefresh.java
@@ -1,96 +1,84 @@
 /**
- * 
+ *
  */
 package net.sf.memoranda.test;
 
-import static org.junit.Assert.*;
-
-import net.sf.memoranda.CurrentProject;
 import net.sf.memoranda.ProjectManager;
-import net.sf.memoranda.TaskListImpl;
 import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.date.CurrentDate;
-import net.sf.memoranda.ui.*;
-
+import net.sf.memoranda.ui.AgendaPanel;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import net.sf.memoranda.ui.AgendaPanel;
-
 /**
  * @author Daniel McEvoy; Jordan Partridge
- *
  */
 public class TestAgendaRefresh {
 
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@BeforeClass
-	public static void setUpBeforeClass() throws Exception {
-	}
-	
-
-	/**
-	 * @throws java.lang.Exception
-	 */
-	@Before
-	public void setUp() throws Exception {
-		AgendaPanel.setRefreshCount(0);
-		
-	}
-
-	@Test
-	public void testNewProjectRefresh() {
-		CalendarDate startDate = new CalendarDate(1, 2, 4);
-		CalendarDate endDate = new CalendarDate(3,4,4);
-		ProjectManager.createProject("My Project", startDate, endDate);
-		 
-		ProjectManager.createProject("My Project2", startDate, endDate);
-		
-		ProjectManager.createProject("My Project3", startDate, endDate);
-		ProjectManager.createProject("My Project4", startDate, endDate);
-
-		ProjectManager.createProject("My Project5", startDate, endDate);
-
-		ProjectManager.createProject("My Project6", startDate, endDate);
-		assert AgendaPanel.getRefreshCount() == 6;
-
-		
-		
-		
-	}
-
-	@Test
-	public void testDeleteProjectRefresh() {
-		AgendaPanel.setRefreshCount(0);
-		ProjectManager.removeProject("My Project6");
-		ProjectManager.removeProject("My Project5");
-		ProjectManager.removeProject("My Project4");
-		ProjectManager.removeProject("My Project3");
-		ProjectManager.removeProject("My Project2");
-		assert(AgendaPanel.getRefreshCount() == 5);
-	}
-	
-//	@Test
-//	public void testNewTaskRefresh() {
-//		AgendaPanel.setRefreshCount(0);
-//		CalendarDate startDate = new CalendarDate(1, 2, 4);
-//		CalendarDate endDate = new CalendarDate(3,4,4);
-//		CurrentProject.getTaskList().createTask(startDate, endDate, "task",4,4, "", "1");
-//		CurrentProject.getTaskList().createTask(startDate, endDate, "task1",4,4, "", "1");
-//		CurrentProject.getTaskList().createTask(startDate, endDate, "task2",4,4, "", "1");
-//		CurrentProject.getTaskList().createTask(startDate, endDate, "task3",4,4, "", "1");
-//		CurrentProject.getTaskList().createTask(startDate, endDate, "task4",4,4, "", "1");
-//		CurrentProject.getTaskList().createTask(startDate, endDate, "task5",4,4, "", "1");
-//		assert(AgendaPanel.getRefreshCount() == 6);
-//
-//	}
-	
-	@Test
-	public void testDateChangeRefresh() {
-		//fail("Not yet implemented");
-	}
+    /**
+     * @throws java.lang.Exception
+     */
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+    }
+
+    /**
+     * @throws java.lang.Exception
+     */
+    @Before
+    public void setUp() throws Exception {
+        AgendaPanel.setRefreshCount(0);
+
+    }
+
+    @Test
+    public void testNewProjectRefresh() {
+        CalendarDate startDate = new CalendarDate(1, 2, 4);
+        CalendarDate endDate = new CalendarDate(3, 4, 4);
+        ProjectManager.createProject("My Project", startDate, endDate);
+
+        ProjectManager.createProject("My Project2", startDate, endDate);
+
+        ProjectManager.createProject("My Project3", startDate, endDate);
+        ProjectManager.createProject("My Project4", startDate, endDate);
+
+        ProjectManager.createProject("My Project5", startDate, endDate);
+
+        ProjectManager.createProject("My Project6", startDate, endDate);
+        assert AgendaPanel.getRefreshCount() == 6;
+
+
+    }
+
+    @Test
+    public void testDeleteProjectRefresh() {
+        AgendaPanel.setRefreshCount(0);
+        ProjectManager.removeProject("My Project6");
+        ProjectManager.removeProject("My Project5");
+        ProjectManager.removeProject("My Project4");
+        ProjectManager.removeProject("My Project3");
+        ProjectManager.removeProject("My Project2");
+        assert (AgendaPanel.getRefreshCount() == 5);
+    }
+
+    //    @Test
+    //    public void testNewTaskRefresh() {
+    //        AgendaPanel.setRefreshCount(0);
+    //        CalendarDate startDate = new CalendarDate(1, 2, 4);
+    //        CalendarDate endDate = new CalendarDate(3,4,4);
+    //        CurrentProject.getTaskList().createTask(startDate, endDate, "task",4,4, "", "1");
+    //        CurrentProject.getTaskList().createTask(startDate, endDate, "task1",4,4, "", "1");
+    //        CurrentProject.getTaskList().createTask(startDate, endDate, "task2",4,4, "", "1");
+    //        CurrentProject.getTaskList().createTask(startDate, endDate, "task3",4,4, "", "1");
+    //        CurrentProject.getTaskList().createTask(startDate, endDate, "task4",4,4, "", "1");
+    //        CurrentProject.getTaskList().createTask(startDate, endDate, "task5",4,4, "", "1");
+    //        assert(AgendaPanel.getRefreshCount() == 6);
+    //
+    //    }
+
+    @Test
+    public void testDateChangeRefresh() {
+        //fail("Not yet implemented");
+    }
 
 }
diff --git a/src/net/sf/memoranda/test/TrayTest.java b/src/net/sf/memoranda/test/TrayTest.java
index f787c26..d2e0ae2 100644
--- a/src/net/sf/memoranda/test/TrayTest.java
+++ b/src/net/sf/memoranda/test/TrayTest.java
@@ -21,14 +21,15 @@ public class TrayTest {
 
             // Wait until the frame is actually active before proceeding
             // on any tests
-            while (!(App.getFrame().isActive()))
+            while (!(App.getFrame().isActive())) {
                 Thread.sleep(100);
+            }
         }
     }
 
     @Test
     public void testAddTray() {
-		if (SystemTray.isSupported()) {
+        if (SystemTray.isSupported()) {
             // Starting off, there should be no tray
             assertEquals(App.getFrame().trayActive(), false);
             // Minimized, there should also be no tray icon
@@ -53,5 +54,5 @@ public class TrayTest {
             // There is no test to run.
             assertTrue(true);
         }
-	}
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/tests/CalendarDateTest.java b/src/net/sf/memoranda/tests/CalendarDateTest.java
index 9cc0fca..c09c99d 100644
--- a/src/net/sf/memoranda/tests/CalendarDateTest.java
+++ b/src/net/sf/memoranda/tests/CalendarDateTest.java
@@ -1,68 +1,64 @@
 package net.sf.memoranda.tests;
 
-import static org.junit.Assert.*;
-
-import org.junit.After;
-import org.junit.AfterClass;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
 import net.sf.memoranda.date.CalendarDate;
+import org.junit.*;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class CalendarDateTest {
-	
-	private CalendarDate cd1;
-	private CalendarDate cd2;
-	private CalendarDate cd3;
 
-	@BeforeClass
-	public static void setUpBeforeClass() throws Exception {
-	}
+    private CalendarDate cd1;
+    private CalendarDate cd2;
+    private CalendarDate cd3;
+
+    @BeforeClass
+    public static void setUpBeforeClass() throws Exception {
+    }
+
+    @AfterClass
+    public static void tearDownAfterClass() throws Exception {
+    }
+
+    @Before
+    public void setUp() throws Exception {
+        cd1 = new CalendarDate(10, 2, 2016);
+        cd2 = new CalendarDate(11, 2, 2016);
+        cd3 = new CalendarDate(10, 2, 2016);
+    }
 
-	@AfterClass
-	public static void tearDownAfterClass() throws Exception {
-	}
+    @After
+    public void tearDown() throws Exception {
+    }
 
-	@Before
-	public void setUp() throws Exception {
-		cd1 = new CalendarDate(10,2,2016);
-		cd2 = new CalendarDate(11,2,2016);
-		cd3 = new CalendarDate(10,2,2016);
-	}
+    @Test
+    public void equalsTest() {
+        Boolean t = cd1.equals(cd3);
+        System.out.println("[DEBUG] Test Equals true: " + t.toString());
+        assertTrue(t);
+        Boolean f = cd1.equals(cd2);
+        System.out.println("[DEBUG] Test Equals false: " + f.toString());
+        assertFalse(f);
+    }
 
-	@After
-	public void tearDown() throws Exception {
-	}
+    @Test
+    public void beforeTest() {
+        Boolean t = cd1.before(cd2);
+        System.out.println("[DEBUG] Test Before true: " + t.toString());
+        assertTrue(t);
+        Boolean f = cd2.before(cd1);
+        System.out.println("[DEBUG] Test Before false: " + f.toString());
+        assertFalse(f);
+    }
 
-	@Test
-	public void equalsTest() {
-		Boolean t = cd1.equals(cd3);
-		System.out.println("[DEBUG] Test Equals true: " + t.toString());
-		assertTrue(t);
-		Boolean f = cd1.equals(cd2);
-		System.out.println("[DEBUG] Test Equals false: " + f.toString());		
-		assertFalse(f);
-	}
-	
-	@Test
-	public void beforeTest() {
-		Boolean t = cd1.before(cd2);
-		System.out.println("[DEBUG] Test Before true: " + t.toString());
-		assertTrue(t);
-		Boolean f = cd2.before(cd1);
-		System.out.println("[DEBUG] Test Before false: " + f.toString());		
-		assertFalse(f);
-	}
-	
-	@Test
-	public void afterTest() {
-		Boolean t = cd2.after(cd1);
-		System.out.println("[DEBUG] Test After true: " + t.toString());
-		assertTrue(t);
-		Boolean f = cd1.after(cd2);
-		System.out.println("[DEBUG] Test After false: " + f.toString());
-		assertFalse(f);
-	}
+    @Test
+    public void afterTest() {
+        Boolean t = cd2.after(cd1);
+        System.out.println("[DEBUG] Test After true: " + t.toString());
+        assertTrue(t);
+        Boolean f = cd1.after(cd2);
+        System.out.println("[DEBUG] Test After false: " + f.toString());
+        assertFalse(f);
+    }
 
 }
diff --git a/src/net/sf/memoranda/ui/AddResourceDialog.java b/src/net/sf/memoranda/ui/AddResourceDialog.java
index 2f5de3f..d2527a2 100755
--- a/src/net/sf/memoranda/ui/AddResourceDialog.java
+++ b/src/net/sf/memoranda/ui/AddResourceDialog.java
@@ -1,30 +1,11 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ButtonGroup;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JFileChooser;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JRadioButton;
-import javax.swing.JCheckBox;
-import javax.swing.JTextField;
-import javax.swing.UIManager;
+import javax.swing.*;
 import javax.swing.event.CaretEvent;
-
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
 
 /*$Id: AddResourceDialog.java,v 1.12 2007/03/20 06:21:46 alexeya Exp $*/
 public class AddResourceDialog extends JDialog {
@@ -51,29 +32,28 @@ public class AddResourceDialog extends JDialog {
         try {
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
             ex.printStackTrace();
         }
     }
 
-	/**
-	 * setup user interface and init dialog
-	 */
-	 
+    /**
+     * setup user interface and init dialog
+     */
+
     void jbInit() throws Exception {
-		this.setResizable(false);
+        this.setResizable(false);
         dialogTitlePanel.setBackground(Color.WHITE);
         dialogTitlePanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
         header.setFont(new java.awt.Font("Dialog", 0, 20));
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("New resource"));
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.AddResourceDialog.class.getResource(
-            "resources/icons/resource48.png")));
+                "resources/icons/resource48.png")));
         dialogTitlePanel.add(header);
         this.getContentPane().add(dialogTitlePanel, BorderLayout.NORTH);
-        
+
         buttonGroup1.add(localFileRB);
         buttonGroup1.add(inetShortcutRB);
         localFileRB.setSelected(true);
@@ -85,23 +65,26 @@ public class AddResourceDialog extends JDialog {
         });
         gbc = new GridBagConstraints();
         gbc.gridwidth = 2;
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.insets = new Insets(10, 15, 5, 15);
         gbc.anchor = GridBagConstraints.WEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
         areaPanel.add(localFileRB, gbc);
-        
+
         gbc = new GridBagConstraints();
         gbc.gridwidth = 2;
-        gbc.gridx = 2; gbc.gridy = 0;
+        gbc.gridx = 2;
+        gbc.gridy = 0;
         gbc.insets = new Insets(10, 15, 5, 15);
         gbc.anchor = GridBagConstraints.WEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
         areaPanel.add(projectFileCB, gbc);
-        
-        jLabel1.setText(Local.getString("Path")+": ");
+
+        jLabel1.setText(Local.getString("Path") + ": ");
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 1;
+        gbc.gridx = 0;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 20, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
@@ -114,7 +97,8 @@ public class AddResourceDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 1;
+        gbc.gridx = 1;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 5, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
@@ -126,7 +110,8 @@ public class AddResourceDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 2; gbc.gridy = 1;
+        gbc.gridx = 2;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 10, 5, 15);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(browseB, gbc);
@@ -137,14 +122,16 @@ public class AddResourceDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 2;
+        gbc.gridx = 0;
+        gbc.gridy = 2;
         gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 15, 5, 15);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(inetShortcutRB, gbc);
-        jLabel2.setText(Local.getString("URL")+":  ");
+        jLabel2.setText(Local.getString("URL") + ":  ");
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 3;
+        gbc.gridx = 0;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 20, 5, 15);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(jLabel2, gbc);
@@ -156,14 +143,15 @@ public class AddResourceDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 3;
+        gbc.gridx = 1;
+        gbc.gridy = 3;
         gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 5, 0, 15);
         gbc.anchor = GridBagConstraints.WEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
         areaPanel.add(urlField, gbc);
         this.getContentPane().add(areaPanel, BorderLayout.CENTER);
-        
+
         okB.setEnabled(false);
         okB.setMaximumSize(new Dimension(100, 26));
         okB.setMinimumSize(new Dimension(100, 26));
@@ -186,94 +174,95 @@ public class AddResourceDialog extends JDialog {
         });
         buttonsPanel.add(okB);
         buttonsPanel.add(cancelB);
-		enableFields();
+        enableFields();
         this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
     }
 
-	/**
-	 * set CANCELLED variable to false so we can know the user 
-	 * pressed the ok buton and close this dialog.
-	 */
-	 
+    /**
+     * set CANCELLED variable to false so we can know the user
+     * pressed the ok buton and close this dialog.
+     */
+
     void okB_actionPerformed(ActionEvent e) {
         CANCELLED = false;
-		this.dispose();
+        this.dispose();
     }
 
-	/**
-	 * close the dialog window
-	 */
-	 
+    /**
+     * close the dialog window
+     */
+
     void cancelB_actionPerformed(ActionEvent e) {
         this.dispose();
     }
 
-	/**
-	 * enable localRB fields. Request focus for the text field 
-	 * so the user can start typing and set the pathField text selected
-	 */
-	 
+    /**
+     * enable localRB fields. Request focus for the text field
+     * so the user can start typing and set the pathField text selected
+     */
+
     void localFileRB_actionPerformed(ActionEvent e) {
-		enableFields();
+        enableFields();
         checkOkEnabled();
-		urlField.select(0,0);
-		pathField.select(0,pathField.getText().length());
-		pathField.requestFocus();
-	}
+        urlField.select(0, 0);
+        pathField.select(0, pathField.getText().length());
+        pathField.requestFocus();
+    }
+
+    /**
+     * enable inetShorcutRB fields. Request focus for the text field
+     * so the user can start typing and set the urlField text selected
+     */
 
-	/**
-	 * enable inetShorcutRB fields. Request focus for the text field 
-	 * so the user can start typing and set the urlField text selected
-	 */
-	
     void inetShortcutRB_actionPerformed(ActionEvent e) {
-		enableFields();
+        enableFields();
         checkOkEnabled();
-		pathField.select(0,0);
-		urlField.select(0,urlField.getText().length());
-		urlField.requestFocus();
-	}
+        pathField.select(0, 0);
+        urlField.select(0, urlField.getText().length());
+        urlField.requestFocus();
+    }
+
+    /**
+     * setup the JFileChooser so the user can select the resource file
+     */
 
-	/**
-	 * setup the JFileChooser so the user can select the resource file
-	 */
-	 
     void browseB_actionPerformed(ActionEvent e) {
         // Fix until Sun's JVM supports more locales...
-        UIManager.put("FileChooser.lookInLabelText", 
-            Local.getString("Look in:"));
-        UIManager.put("FileChooser.upFolderToolTipText", 
-            Local.getString("Up One Level"));
-        UIManager.put("FileChooser.newFolderToolTipText", 
-            Local.getString("Create New Folder"));
-        UIManager.put("FileChooser.listViewButtonToolTipText", 
-            Local.getString("List"));
-        UIManager.put("FileChooser.detailsViewButtonToolTipText", 
-            Local.getString("Details"));
-        UIManager.put("FileChooser.fileNameLabelText", 
-            Local.getString("File Name:"));
-        UIManager.put("FileChooser.filesOfTypeLabelText", 
-            Local.getString("Files of Type:"));
-        UIManager.put("FileChooser.openButtonText", 
-            Local.getString("Open"));
-        UIManager.put("FileChooser.openButtonToolTipText", 
-            Local.getString("Open selected file"));
-        UIManager.put("FileChooser.cancelButtonText", 
-            Local.getString("Cancel"));
-        UIManager.put("FileChooser.cancelButtonToolTipText", 
-            Local.getString("Cancel"));
-        
+        UIManager.put("FileChooser.lookInLabelText",
+                Local.getString("Look in:"));
+        UIManager.put("FileChooser.upFolderToolTipText",
+                Local.getString("Up One Level"));
+        UIManager.put("FileChooser.newFolderToolTipText",
+                Local.getString("Create New Folder"));
+        UIManager.put("FileChooser.listViewButtonToolTipText",
+                Local.getString("List"));
+        UIManager.put("FileChooser.detailsViewButtonToolTipText",
+                Local.getString("Details"));
+        UIManager.put("FileChooser.fileNameLabelText",
+                Local.getString("File Name:"));
+        UIManager.put("FileChooser.filesOfTypeLabelText",
+                Local.getString("Files of Type:"));
+        UIManager.put("FileChooser.openButtonText",
+                Local.getString("Open"));
+        UIManager.put("FileChooser.openButtonToolTipText",
+                Local.getString("Open selected file"));
+        UIManager.put("FileChooser.cancelButtonText",
+                Local.getString("Cancel"));
+        UIManager.put("FileChooser.cancelButtonToolTipText",
+                Local.getString("Cancel"));
+
         JFileChooser chooser = new JFileChooser();
         chooser.setFileHidingEnabled(false);
         chooser.setDialogTitle(Local.getString("Add resource"));
         chooser.setAcceptAllFileFilterUsed(true);
-        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);        
+        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
         chooser.setPreferredSize(new Dimension(550, 375));
         /*java.io.File lastSel = (java.io.File) Context.get("LAST_SELECTED_RESOURCE_FILE");
         if (lastSel != null)
             chooser.setCurrentDirectory(lastSel);*/
-        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
+        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
             return;
+        }
         /*try {
             Context.put("LAST_SELECTED_RESOURCE_FILE", chooser.getSelectedFile());
         }
@@ -282,44 +271,44 @@ public class AddResourceDialog extends JDialog {
         checkOkEnabled();
     }
 
-	/**
-	 * disable the ok button if pathField is empty
-	 */
-	 
+    /**
+     * disable the ok button if pathField is empty
+     */
+
     void pathField_caretUpdate(CaretEvent e) {
         checkOkEnabled();
     }
 
-	/**
-	 * disable the ok button if urlField is empty
-	 */
-	
-    void urlField_caretUpdate(CaretEvent e) {        
+    /**
+     * disable the ok button if urlField is empty
+     */
+
+    void urlField_caretUpdate(CaretEvent e) {
         checkOkEnabled();
     }
-    
-	/**
-	 * do not enable the ok button until the text field is not empty.
-	 */
-	 
-    void checkOkEnabled() {        
-         okB.setEnabled(
-            (localFileRB.isSelected() && pathField.getText().length() > 0) ||
-            (inetShortcutRB.isSelected() && urlField.getText().length() > 0)
-         );
+
+    /**
+     * do not enable the ok button until the text field is not empty.
+     */
+
+    void checkOkEnabled() {
+        okB.setEnabled(
+                (localFileRB.isSelected() && pathField.getText().length() > 0) ||
+                        (inetShortcutRB.isSelected() && urlField.getText().length() > 0)
+        );
     }
 
-	/** 
-	 * enable and disable fields when user selects the radio buttons options
-	 */
-	 
-	void enableFields() {
-		 pathField.setEnabled(localFileRB.isSelected());
-		 jLabel1.setEnabled(localFileRB.isSelected());
-		 browseB.setEnabled(localFileRB.isSelected());
-		 projectFileCB.setEnabled(localFileRB.isSelected());
-		 
-		 urlField.setEnabled(inetShortcutRB.isSelected());
-		 jLabel2.setEnabled(inetShortcutRB.isSelected());
-	}
+    /**
+     * enable and disable fields when user selects the radio buttons options
+     */
+
+    void enableFields() {
+        pathField.setEnabled(localFileRB.isSelected());
+        jLabel1.setEnabled(localFileRB.isSelected());
+        browseB.setEnabled(localFileRB.isSelected());
+        projectFileCB.setEnabled(localFileRB.isSelected());
+
+        urlField.setEnabled(inetShortcutRB.isSelected());
+        jLabel2.setEnabled(inetShortcutRB.isSelected());
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/AgendaPanel.java b/src/net/sf/memoranda/ui/AgendaPanel.java
index 02ff4a3..7cfb9e1 100755
--- a/src/net/sf/memoranda/ui/AgendaPanel.java
+++ b/src/net/sf/memoranda/ui/AgendaPanel.java
@@ -1,46 +1,6 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Point;
-import java.awt.event.ActionEvent;
-import java.awt.event.KeyEvent;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Date;
-import java.util.Map;
-import java.util.Stack;
-
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JEditorPane;
-import javax.swing.JFrame;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JToolBar;
-import javax.swing.KeyStroke;
-import javax.swing.SwingUtilities;
-import javax.swing.event.HyperlinkEvent;
-import javax.swing.event.HyperlinkListener;
-
-import net.sf.memoranda.ui.AppFrame;
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.EventNotificationListener;
-import net.sf.memoranda.EventsManager;
-import net.sf.memoranda.EventsScheduler;
-import net.sf.memoranda.History;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ProjectManager;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.Task;
-import net.sf.memoranda.TaskList;
-//import net.sf.memoranda.History.HistoryForwardAction;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
@@ -50,74 +10,87 @@ import net.sf.memoranda.util.Local;
 import net.sf.memoranda.util.Util;
 import nu.xom.Element;
 
+import javax.swing.*;
+import javax.swing.event.HyperlinkEvent;
+import javax.swing.event.HyperlinkListener;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.KeyEvent;
+import java.util.*;
+
+//import net.sf.memoranda.History.HistoryForwardAction;
+
 /*$Id: AgendaPanel.java,v 1.11 2005/02/15 16:58:02 rawsushi Exp $*/
 public class AgendaPanel extends JPanel {
-	BorderLayout borderLayout1 = new BorderLayout();
-	JButton historyBackB = new JButton();
-	JToolBar toolBar = new JToolBar();
-	JButton historyForwardB = new JButton();
-	static JButton removeProjB = new JButton();
-	static JButton newProjB = new JButton();
-	JButton newTaskB = new JButton();
-	JButton subTaskB = new JButton();
-	JButton export = new JButton();
-	static JEditorPane viewer = new JEditorPane("text/html", "");
-	String[] priorities = {"Highest","High","Medium","Low","Lowest"};
-	 static JScrollPane scrollPane = new JScrollPane();
-	DailyItemsPanel parentPanel = null;
-	public static RemoveProjAction removeProjAction = new RemoveProjAction();
-	public static NewProjAction newProjAction = new NewProjAction();
-
-	//	JPopupMenu agendaPPMenu = new JPopupMenu();
-	//	JCheckBoxMenuItem ppShowActiveOnlyChB = new JCheckBoxMenuItem();
-
-	static Collection expandedTasks;
-	static String gotoTask = null;
-
-	boolean isActive = true;
-	private static int refreshCount = 0;
-
-	public AgendaPanel(DailyItemsPanel _parentPanel) {
-		this.setRefreshCount(0);
-		try {
-			parentPanel = _parentPanel;
-			jbInit();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-			ex.printStackTrace();
-		}
-	}
-	public static void setRefreshCount(int i) {
-		refreshCount = i;
-		
-	}
-	public static int getRefreshCount(){
-		return refreshCount;
-	}
-	void jbInit() throws Exception {
-		expandedTasks = new ArrayList();
-		toolBar.setFloatable(false);
-		viewer.setEditable(false);
-		viewer.setOpaque(false);
-		viewer.addHyperlinkListener(new HyperlinkListener() {
-
-			public void hyperlinkUpdate(HyperlinkEvent e) {
-				if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
-					String d = e.getDescription();
-					if (d.equalsIgnoreCase("memoranda:events"))
-						parentPanel.alarmB_actionPerformed(null);
-					else if (d.startsWith("memoranda:tasks")) {
-						String id = d.split("#")[1];
-						CurrentProject.set(ProjectManager.getProject(id));
-						parentPanel.taskB_actionPerformed(null);
-					} else if (d.startsWith("memoranda:project")) {
-						String id = d.split("#")[1];
-						CurrentProject.set(ProjectManager.getProject(id));
-					} else if (d.startsWith("memoranda:removesticker")) {
+    BorderLayout borderLayout1 = new BorderLayout();
+    JButton historyBackB = new JButton();
+    JToolBar toolBar = new JToolBar();
+    JButton historyForwardB = new JButton();
+    static JButton removeProjB = new JButton();
+    static JButton newProjB = new JButton();
+    JButton newTaskB = new JButton();
+    JButton subTaskB = new JButton();
+    JButton export = new JButton();
+    static JEditorPane viewer = new JEditorPane("text/html", "");
+    String[] priorities = {"Highest", "High", "Medium", "Low", "Lowest"};
+    static JScrollPane scrollPane = new JScrollPane();
+    DailyItemsPanel parentPanel = null;
+    public static RemoveProjAction removeProjAction = new RemoveProjAction();
+    public static NewProjAction newProjAction = new NewProjAction();
+
+    //	JPopupMenu agendaPPMenu = new JPopupMenu();
+    //  JCheckBoxMenuItem ppShowActiveOnlyChB = new JCheckBoxMenuItem();
+
+    static Collection expandedTasks;
+    static String gotoTask = null;
+
+    boolean isActive = true;
+    private static int refreshCount = 0;
+
+    public AgendaPanel(DailyItemsPanel _parentPanel) {
+        this.setRefreshCount(0);
+        try {
+            parentPanel = _parentPanel;
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+            ex.printStackTrace();
+        }
+    }
+
+    public static void setRefreshCount(int i) {
+        refreshCount = i;
+
+    }
+
+    public static int getRefreshCount() {
+        return refreshCount;
+    }
+
+    void jbInit() throws Exception {
+        expandedTasks = new ArrayList();
+        toolBar.setFloatable(false);
+        viewer.setEditable(false);
+        viewer.setOpaque(false);
+        viewer.addHyperlinkListener(new HyperlinkListener() {
+
+            public void hyperlinkUpdate(HyperlinkEvent e) {
+                if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
+                    String d = e.getDescription();
+                    if (d.equalsIgnoreCase("memoranda:events")) {
+                        parentPanel.alarmB_actionPerformed(null);
+                    } else if (d.startsWith("memoranda:tasks")) {
+                        String id = d.split("#")[1];
+                        CurrentProject.set(ProjectManager.getProject(id));
+                        parentPanel.taskB_actionPerformed(null);
+                    } else if (d.startsWith("memoranda:project")) {
+                        String id = d.split("#")[1];
+                        CurrentProject.set(ProjectManager.getProject(id));
+                    } else if (d.startsWith("memoranda:removesticker")) {
                         String id = d.split("#")[1];
                         StickerConfirmation stc = new StickerConfirmation(App.getFrame());
                         Dimension frmSize = App.getFrame().getSize();
-                        stc.setSize(new Dimension(300,180));
+                        stc.setSize(new Dimension(300, 180));
                         Point loc = App.getFrame().getLocation();
                         stc.setLocation(
                                 (frmSize.width - stc.getSize().width) / 2 + loc.x,
@@ -125,399 +98,340 @@ public class AgendaPanel extends JPanel {
                                         + loc.y);
                         stc.setVisible(true);
                         if (!stc.CANCELLED) {
-                        EventsManager.removeSticker(id);
-                        CurrentStorage.get().storeEventsManager();}
+                            EventsManager.removeSticker(id);
+                            CurrentStorage.get().storeEventsManager();
+                        }
+                        refresh(CurrentDate.get());
+                    } else if (d.startsWith("memoranda:addsticker")) {
+                        StickerDialog dlg = new StickerDialog(App.getFrame());
+                        Dimension frmSize = App.getFrame().getSize();
+                        dlg.setSize(new Dimension(300, 380));
+                        Point loc = App.getFrame().getLocation();
+                        dlg.setLocation(
+                                (frmSize.width - dlg.getSize().width) / 2 + loc.x,
+                                (frmSize.height - dlg.getSize().height) / 2
+                                        + loc.y);
+                        dlg.setVisible(true);
+                        if (!dlg.CANCELLED) {
+                            String txt = dlg.getStickerText();
+                            int sP = dlg.getPriority();
+                            txt = txt.replaceAll("\\n", "<br>");
+                            txt = "<div style=\"background-color:" + dlg.getStickerColor() + ";font-size:" + dlg.getStickerTextSize() + ";color:" + dlg.getStickerTextColor() + "; \">" + txt + "</div>";
+                            EventsManager.createSticker(txt, sP);
+                            CurrentStorage.get().storeEventsManager();
+                        }
+                        refresh(CurrentDate.get());
+                        System.out.println("add a sticker");
+                    } else if (d.startsWith("memoranda:expandsubtasks")) {
+                        String id = d.split("#")[1];
+                        gotoTask = id;
+                        expandedTasks.add(id);
+                        refresh(CurrentDate.get());
+                    } else if (d.startsWith("memoranda:closesubtasks")) {
+                        String id = d.split("#")[1];
+                        gotoTask = id;
+                        expandedTasks.remove(id);
+                        refresh(CurrentDate.get());
+                    } else if (d.startsWith("memoranda:expandsticker")) {
+                        String id = d.split("#")[1];
+                        Element pre_sticker = (Element) ((Map) EventsManager.getStickers()).get(id);
+                        String sticker = pre_sticker.getValue();
+                        int first = sticker.indexOf(">");
+                        int last = sticker.lastIndexOf("<");
+                        int backcolor = sticker.indexOf("#");
+                        int fontcolor = sticker.indexOf("#", backcolor + 1);
+                        int sP = Integer.parseInt(pre_sticker.getAttributeValue("priority"));
+                        String backGroundColor = sticker.substring(backcolor, sticker.indexOf(';', backcolor));
+                        String foreGroundColor = sticker.substring(fontcolor, sticker.indexOf(';', fontcolor));
+                        sticker = "<html>" + sticker.substring(first + 1, last) + "</html>";
+                        StickerExpand dlg = new StickerExpand(App.getFrame(), sticker, backGroundColor, foreGroundColor, Local.getString("priority") + ": " + Local.getString(priorities[sP]));
+                        Dimension frmSize = App.getFrame().getSize();
+                        dlg.setSize(new Dimension(300, 200));
+                        Point loc = App.getFrame().getLocation();
+                        dlg.setLocation(
+                                (frmSize.width - dlg.getSize().width) / 2 + loc.x,
+                                (frmSize.height - dlg.getSize().height) / 2
+                                        + loc.y);
+                        dlg.stickerText.setText(sticker);
+                        dlg.setVisible(true);
+                    } else if (d.startsWith("memoranda:editsticker")) {
+                        String id = d.split("#")[1];
+                        Element pre_sticker = (Element) ((Map) EventsManager.getStickers()).get(id);
+                        String sticker = pre_sticker.getValue();
+                        sticker = sticker.replaceAll("<br>", "\n");
+                        int first = sticker.indexOf(">");
+                        int last = sticker.lastIndexOf("<");
+                        int backcolor = sticker.indexOf("#");
+                        int fontcolor = sticker.indexOf("#", backcolor + 1);
+                        int sizeposition = sticker.indexOf("font-size") + 10;
+                        int size = Integer.parseInt(sticker.substring(sizeposition, sizeposition + 2));
+                        System.out.println(size + " " + sizeposition);
+                        int sP = Integer.parseInt(pre_sticker.getAttributeValue("priority"));
+                        String backGroundColor = sticker.substring(backcolor, sticker.indexOf(';', backcolor));
+                        String foreGroundColor = sticker.substring(fontcolor, sticker.indexOf(';', fontcolor));
+                        StickerDialog dlg = new StickerDialog(App.getFrame(), sticker.substring(first + 1, last), backGroundColor, foreGroundColor, sP, size);
+                        Dimension frmSize = App.getFrame().getSize();
+                        dlg.setSize(new Dimension(300, 380));
+                        Point loc = App.getFrame().getLocation();
+                        dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x,
+                                (frmSize.height - dlg.getSize().height) / 2 + loc.y);
+                        dlg.setVisible(true);
+                        if (!dlg.CANCELLED) {
+                            String txt = dlg.getStickerText();
+                            sP = dlg.getPriority();
+                            txt = txt.replaceAll("\\n", "<br>");
+                            txt = "<div style=\"background-color:" + dlg.getStickerColor() + ";font-size:" + dlg.getStickerTextSize() + ";color:" + dlg.getStickerTextColor() + ";\">" + txt + "</div>";
+                            EventsManager.removeSticker(id);
+                            EventsManager.createSticker(txt, sP);
+                            CurrentStorage.get().storeEventsManager();
+                        }
                         refresh(CurrentDate.get());
-					} else if (d.startsWith("memoranda:addsticker")) {
-						StickerDialog dlg = new StickerDialog(App.getFrame());
-						Dimension frmSize = App.getFrame().getSize();
-						dlg.setSize(new Dimension(300,380));
-						Point loc = App.getFrame().getLocation();
-						dlg.setLocation(
-								(frmSize.width - dlg.getSize().width) / 2 + loc.x,
-								(frmSize.height - dlg.getSize().height) / 2
-								+ loc.y);
-						dlg.setVisible(true);
-						if (!dlg.CANCELLED) {
-							String txt = dlg.getStickerText();
-							int sP = dlg.getPriority();
-							txt = txt.replaceAll("\\n", "<br>");
-                            txt = "<div style=\"background-color:"+dlg.getStickerColor()+";font-size:"+dlg.getStickerTextSize()+";color:"+dlg.getStickerTextColor()+"; \">"+txt+"</div>";
-							EventsManager.createSticker(txt, sP);
-							CurrentStorage.get().storeEventsManager();
-						}
-						refresh(CurrentDate.get());
-						System.out.println("add a sticker");
-					} else if (d.startsWith("memoranda:expandsubtasks")) {
-						String id = d.split("#")[1];
-						gotoTask = id;
-						expandedTasks.add(id);
-						refresh(CurrentDate.get());
-					} else if (d.startsWith("memoranda:closesubtasks")) {
-						String id = d.split("#")[1];
-						gotoTask = id;
-						expandedTasks.remove(id);
-						refresh(CurrentDate.get());
-					} else if (d.startsWith("memoranda:expandsticker")) {
-						String id = d.split("#")[1];
-						Element pre_sticker=(Element)((Map)EventsManager.getStickers()).get(id);
-						String sticker = pre_sticker.getValue();
-						int first=sticker.indexOf(">");
-						int last=sticker.lastIndexOf("<");
-						int backcolor=sticker.indexOf("#");
-						int fontcolor=sticker.indexOf("#", backcolor+1);
-						int sP=Integer.parseInt(pre_sticker.getAttributeValue("priority"));
-						String backGroundColor=sticker.substring(backcolor, sticker.indexOf(';',backcolor));
-						String foreGroundColor=sticker.substring(fontcolor, sticker.indexOf(';',fontcolor));
-						sticker="<html>"+sticker.substring(first+1, last)+"</html>";
-						StickerExpand dlg = new StickerExpand(App.getFrame(),sticker,backGroundColor,foreGroundColor,Local.getString("priority")+": "+Local.getString(priorities[sP]));
-						Dimension frmSize = App.getFrame().getSize();
-						dlg.setSize(new Dimension(300,200));
-						Point loc = App.getFrame().getLocation();
-						dlg.setLocation(
-								(frmSize.width - dlg.getSize().width) / 2 + loc.x,
-								(frmSize.height - dlg.getSize().height) / 2
-								+ loc.y);
-						dlg.stickerText.setText(sticker);
-						dlg.setVisible(true);
-					}else if (d.startsWith("memoranda:editsticker")) {
-						String id = d.split("#")[1];
-						Element pre_sticker=(Element)((Map)EventsManager.getStickers()).get(id);
-						String sticker = pre_sticker.getValue();
-						sticker=sticker.replaceAll("<br>","\n");
-						int first=sticker.indexOf(">");
-						int last=sticker.lastIndexOf("<");
-						int backcolor=sticker.indexOf("#");
-						int fontcolor=sticker.indexOf("#", backcolor+1);
-						int sizeposition=sticker.indexOf("font-size")+10;
-						int size=Integer.parseInt(sticker.substring(sizeposition,sizeposition+2));
-						System.out.println(size+" "+sizeposition);
-						int sP=Integer.parseInt(pre_sticker.getAttributeValue("priority"));
-						String backGroundColor=sticker.substring(backcolor, sticker.indexOf(';',backcolor));
-						String foreGroundColor=sticker.substring(fontcolor, sticker.indexOf(';',fontcolor));
-						StickerDialog dlg = new StickerDialog(App.getFrame(), sticker.substring(first+1, last), backGroundColor, foreGroundColor, sP, size);
-						Dimension frmSize = App.getFrame().getSize();
-						dlg.setSize(new Dimension(300,380));
-						Point loc = App.getFrame().getLocation();
-						dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x,
-							 		(frmSize.height - dlg.getSize().height) / 2 + loc.y);
-						dlg.setVisible(true);
-						if (!dlg.CANCELLED) {
-							String txt = dlg.getStickerText();
-							sP = dlg.getPriority();
-							txt = txt.replaceAll("\\n", "<br>");
-							txt = "<div style=\"background-color:"+dlg.getStickerColor()+";font-size:"+dlg.getStickerTextSize()+";color:"+dlg.getStickerTextColor()+";\">"+txt+"</div>";
-							EventsManager.removeSticker(id);
-							EventsManager.createSticker(txt, sP);
-							CurrentStorage.get().storeEventsManager();
-						 }
-						 refresh(CurrentDate.get());
-					}else if (d.startsWith("memoranda:exportstickerst")) {
-						 /*  Falta agregar el exportar sticker mientras tanto..*/
-						 final JFrame parent = new JFrame();
-						 String name = JOptionPane.showInputDialog(parent,Local.getString("Enter filename to export"),null);
-						 new ExportSticker(name).export("txt");
-						 //JOptionPane.showMessageDialog(null,name);
-					}else if (d.startsWith("memoranda:exportstickersh")) {
-						 /*  Falta agregar el exportar sticker mientras tanto..*/
-						 final JFrame parent = new JFrame();
-						 String name = JOptionPane.showInputDialog(parent,Local.getString("Enter filename to export"),null);
-						 new ExportSticker(name).export("html");
-						 //JOptionPane.showMessageDialog(null,name);
-					}else if (d.startsWith("memoranda:importstickers")) {
-						final JFrame parent = new JFrame();
-						String name = JOptionPane.showInputDialog(parent,Local.getString("Enter filename to import"),null);
-						new ImportSticker(name).import_file();
-					}
-					else if(d.startsWith("memoranda:newtask")){
-						 TaskDialog dlg = new TaskDialog(App.getFrame(), Local.getString("New task"));
-					        
-					        //XXX String parentTaskId = taskTable.getCurrentRootTask();
-					        
-					        Dimension frmSize = App.getFrame().getSize();
-					        Point loc = App.getFrame().getLocation();
-					        dlg.startDate.getModel().setValue(CurrentDate.get().getDate());
-					        dlg.endDate.getModel().setValue(CurrentDate.get().getDate());
-					        dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
-					        dlg.setVisible(true);
-					        if (dlg.CANCELLED)
-					            return;
-					        CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
-					        CalendarDate ed;
-					 		if(dlg.chkEndDate.isSelected()) {
-					 			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
-					 		} else {
-					 			ed = null;
-					 		}
-					 		CalendarDate repEnd;
-					 		if(dlg.chkEndDateRpt.isSelected()) {
-					 			repEnd = new CalendarDate((Date) dlg.endDateRpt.getModel().getValue());
-					 		} else {
-					 			repEnd = null;
-					 		}
-					        long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
-
-					        Task newTask;					    	
-					    	Stack<Object> taskCreationParams = new Stack<Object>();
-					    	taskCreationParams.add(sd);
-					    	taskCreationParams.add(ed); 
-					    	taskCreationParams.add(dlg.todoField.getText());  
-					    	taskCreationParams.add(dlg.priorityCB.getSelectedIndex());
-					    	taskCreationParams.add(effort); 
-					    	taskCreationParams.add(dlg.descriptionField.getText());
-					    	taskCreationParams.add(null);
-					    	taskCreationParams.add(dlg.chkWorkingDays.isSelected()); 
-					    	taskCreationParams.add(((Integer)dlg.progress.getValue()).intValue());
-					    	taskCreationParams.add(dlg.cbRepeatType.getSelectedIndex());
-					    	taskCreationParams.add(dlg.chkEndDate.isSelected());
-					    	taskCreationParams.add(repEnd);
-					    	newTask = CurrentProject.getTaskList().createTask(taskCreationParams);
-					    	
-					    	newTask.setProgress(((Integer)dlg.progress.getValue()).intValue());							
-					        CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
-					        TaskTable.tableChanged();
-					        parentPanel.updateIndicators();
-					        //taskTable.updateUI();	
-					}
-				}
-			}
-		});
-		historyBackB.setAction(History.historyBackAction);
-		historyBackB.setFocusable(false);
-		historyBackB.setBorderPainted(false);
-		historyBackB.setToolTipText(Local.getString("History back"));
-		historyBackB.setRequestFocusEnabled(false);
-		historyBackB.setPreferredSize(new Dimension(24, 24));
-		historyBackB.setMinimumSize(new Dimension(24, 24));
-		historyBackB.setMaximumSize(new Dimension(24, 24));
-		historyBackB.setText("");
-
-		historyForwardB.setAction(History.historyForwardAction);
-		historyForwardB.setBorderPainted(false);
-		historyForwardB.setFocusable(false);
-		historyForwardB.setPreferredSize(new Dimension(24, 24));
-		historyForwardB.setRequestFocusEnabled(false);
-		historyForwardB.setToolTipText(Local.getString("History forward"));
-		historyForwardB.setMinimumSize(new Dimension(24, 24));
-		historyForwardB.setMaximumSize(new Dimension(24, 24));
-		historyForwardB.setText("");
-		
-		newProjB.setAction(AgendaPanel.newProjAction);
-		newProjB.setPreferredSize(new Dimension(24 ,24));
-		newProjB.setRequestFocusEnabled(false);
-		newProjB.setToolTipText(Local.getString("Removes the currently active project"));
-		newProjB.setMinimumSize(new Dimension(24, 24));
-		newProjB.setMaximumSize(new Dimension(24, 24));
-		newProjB.setText("");
-		newProjB.setBorderPainted(false);
-		newProjB.setFocusable(false);
-
-		removeProjB.setAction(AgendaPanel.removeProjAction);
-		removeProjB.setPreferredSize(new Dimension(24 ,24));
-		removeProjB.setRequestFocusEnabled(false);
-		removeProjB.setToolTipText(Local.getString("Removes the currently active project"));
-		removeProjB.setMinimumSize(new Dimension(24, 24));
-		removeProjB.setMaximumSize(new Dimension(24, 24));
-		removeProjB.setText("");
-		removeProjB.setBorderPainted(false);
-		removeProjB.setFocusable(false);
-		
-		newTaskB.setIcon(
-		            new ImageIcon(AppFrame.class.getResource("resources/icons/todo_new.png")));
-		        newTaskB.setEnabled(true);
-		        newTaskB.setMaximumSize(new Dimension(24, 24));
-		        newTaskB.setMinimumSize(new Dimension(24, 24));
-		        newTaskB.setToolTipText(Local.getString("Create new task"));
-		        newTaskB.setRequestFocusEnabled(false);
-		        newTaskB.setPreferredSize(new Dimension(24, 24));
-		        newTaskB.setFocusable(false);
-		        newTaskB.addActionListener(new java.awt.event.ActionListener() {
-		            public void actionPerformed(ActionEvent e) {
-		            	parentPanel.tasksPanel.newTaskB_actionPerformed(e);
-		            	refresh(CurrentDate.get());
-		            }
-		        });
-		        newTaskB.setBorderPainted(false);
-		        
-		
-				
-		this.setLayout(borderLayout1);
-		scrollPane.getViewport().setBackground(Color.white);
-
-		scrollPane.getViewport().add(viewer, null);
-		this.add(scrollPane, BorderLayout.CENTER);
-		toolBar.add(historyBackB, null);
-		toolBar.add(historyForwardB, null);
-		toolBar.addSeparator(new Dimension(8, 24));
-		toolBar.add(newProjB, null);
-		toolBar.add(removeProjB, null);
-		toolBar.addSeparator(new Dimension(8, 24));
-		toolBar.add(newTaskB, null);
-
-		this.add(toolBar, BorderLayout.NORTH);
-
-		CurrentDate.addDateListener(new DateListener() {
-			public void dateChange(CalendarDate d) {
-				if (isActive)
-					refresh(d);
-			}
-		});
-		CurrentProject.addProjectListener(new ProjectListener() {
-
-			public void projectChange(
-					Project prj,
-					NoteList nl,
-					TaskList tl,
-					ResourcesList rl) {
-			}
-
-			public void projectWasChanged() {
-				if (isActive)
-					refresh(CurrentDate.get());
-			}});
-		EventsScheduler.addListener(new EventNotificationListener() {
-			public void eventIsOccured(net.sf.memoranda.Event ev) {
-				if (isActive)
-					refresh(CurrentDate.get());
-			}
-
-			public void eventsChanged() {
-				if (isActive)
-					refresh(CurrentDate.get());
-			}
-		});
-		refresh(CurrentDate.get());
-
-		//        agendaPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
-		//        agendaPPMenu.add(ppShowActiveOnlyChB);
-		//        PopupListener ppListener = new PopupListener();
-		//        viewer.addMouseListener(ppListener);
-		//		ppShowActiveOnlyChB.setFont(new java.awt.Font("Dialog", 1, 11));
-		//		ppShowActiveOnlyChB.setText(
-		//			Local.getString("Show Active only"));
-		//		ppShowActiveOnlyChB.addActionListener(new java.awt.event.ActionListener() {
-		//			public void actionPerformed(ActionEvent e) {
-		//				toggleShowActiveOnly_actionPerformed(e);
-		//			}
-		//		});		
-		//		boolean isShao =
-		//			(Context.get("SHOW_ACTIVE_TASKS_ONLY") != null)
-		//				&& (Context.get("SHOW_ACTIVE_TASKS_ONLY").equals("true"));
-		//		ppShowActiveOnlyChB.setSelected(isShao);
-		//		toggleShowActiveOnly_actionPerformed(null);		
-	}
-	
-	//Event listener class adding a new project.
-	public static class NewProjAction extends AbstractAction {
-		
-        public  NewProjAction() {
-            super(Local.getString("Create Project"), 
-            new ImageIcon(AppFrame.class.getResource("resources/icons/newproject.png")));
+                    } else if (d.startsWith("memoranda:exportstickerst")) {
+                        /* Falta agregar el exportar sticker mientras tanto..*/
+                        final JFrame parent = new JFrame();
+                        String name = JOptionPane.showInputDialog(parent, Local.getString("Enter filename to export"), null);
+                        new ExportSticker(name).export("txt");
+                    } else if (d.startsWith("memoranda:exportstickersh")) {
+                        /*  Falta agregar el exportar sticker mientras tanto..*/
+                        final JFrame parent = new JFrame();
+                        String name = JOptionPane.showInputDialog(parent, Local.getString("Enter filename to export"), null);
+                        new ExportSticker(name).export("html");
+                    } else if (d.startsWith("memoranda:importstickers")) {
+                        final JFrame parent = new JFrame();
+                        String name = JOptionPane.showInputDialog(parent, Local.getString("Enter filename to import"), null);
+                        new ImportSticker(name).import_file();
+                    } else if (d.startsWith("memoranda:newtask")) {
+                        TaskDialog dlg = new TaskDialog(App.getFrame(), Local.getString("New task"));
+                        Dimension frmSize = App.getFrame().getSize();
+                        Point loc = App.getFrame().getLocation();
+                        dlg.startDate.getModel().setValue(CurrentDate.get().getDate());
+                        dlg.endDate.getModel().setValue(CurrentDate.get().getDate());
+                        dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
+                        dlg.setVisible(true);
+                        if (dlg.CANCELLED) {
+                            return;
+                        }
+                        CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
+                        CalendarDate ed;
+                        if (dlg.chkEndDate.isSelected()) {
+                            ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+                        } else {
+                            ed = null;
+                        }
+                        CalendarDate repEnd;
+                        if (dlg.chkEndDateRpt.isSelected()) {
+                            repEnd = new CalendarDate((Date) dlg.endDateRpt.getModel().getValue());
+                        } else {
+                            repEnd = null;
+                        }
+                        long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
+
+                        Task newTask;
+                        Stack<Object> taskCreationParams = new Stack<Object>();
+                        taskCreationParams.add(sd);
+                        taskCreationParams.add(ed);
+                        taskCreationParams.add(dlg.todoField.getText());
+                        taskCreationParams.add(dlg.priorityCB.getSelectedIndex());
+                        taskCreationParams.add(effort);
+                        taskCreationParams.add(dlg.descriptionField.getText());
+                        taskCreationParams.add(null);
+                        taskCreationParams.add(dlg.chkWorkingDays.isSelected());
+                        taskCreationParams.add(((Integer) dlg.progress.getValue()).intValue());
+                        taskCreationParams.add(dlg.cbRepeatType.getSelectedIndex());
+                        taskCreationParams.add(dlg.chkEndDate.isSelected());
+                        taskCreationParams.add(repEnd);
+                        newTask = CurrentProject.getTaskList().createTask(taskCreationParams);
+
+                        newTask.setProgress(((Integer) dlg.progress.getValue()).intValue());
+                        CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
+                        TaskTable.tableChanged();
+                        parentPanel.updateIndicators();
+                        //taskTable.updateUI();
+                    }
+                }
+            }
+        });
+        historyBackB.setAction(History.historyBackAction);
+        historyBackB.setFocusable(false);
+        historyBackB.setBorderPainted(false);
+        historyBackB.setToolTipText(Local.getString("History back"));
+        historyBackB.setRequestFocusEnabled(false);
+        historyBackB.setPreferredSize(new Dimension(24, 24));
+        historyBackB.setMinimumSize(new Dimension(24, 24));
+        historyBackB.setMaximumSize(new Dimension(24, 24));
+        historyBackB.setText("");
+
+        historyForwardB.setAction(History.historyForwardAction);
+        historyForwardB.setBorderPainted(false);
+        historyForwardB.setFocusable(false);
+        historyForwardB.setPreferredSize(new Dimension(24, 24));
+        historyForwardB.setRequestFocusEnabled(false);
+        historyForwardB.setToolTipText(Local.getString("History forward"));
+        historyForwardB.setMinimumSize(new Dimension(24, 24));
+        historyForwardB.setMaximumSize(new Dimension(24, 24));
+        historyForwardB.setText("");
+
+        newProjB.setAction(AgendaPanel.newProjAction);
+        newProjB.setPreferredSize(new Dimension(24, 24));
+        newProjB.setRequestFocusEnabled(false);
+        newProjB.setToolTipText(Local.getString("Removes the currently active project"));
+        newProjB.setMinimumSize(new Dimension(24, 24));
+        newProjB.setMaximumSize(new Dimension(24, 24));
+        newProjB.setText("");
+        newProjB.setBorderPainted(false);
+        newProjB.setFocusable(false);
+
+        removeProjB.setAction(AgendaPanel.removeProjAction);
+        removeProjB.setPreferredSize(new Dimension(24, 24));
+        removeProjB.setRequestFocusEnabled(false);
+        removeProjB.setToolTipText(Local.getString("Removes the currently active project"));
+        removeProjB.setMinimumSize(new Dimension(24, 24));
+        removeProjB.setMaximumSize(new Dimension(24, 24));
+        removeProjB.setText("");
+        removeProjB.setBorderPainted(false);
+        removeProjB.setFocusable(false);
+
+        newTaskB.setIcon(
+                new ImageIcon(AppFrame.class.getResource("resources/icons/todo_new.png")));
+        newTaskB.setEnabled(true);
+        newTaskB.setMaximumSize(new Dimension(24, 24));
+        newTaskB.setMinimumSize(new Dimension(24, 24));
+        newTaskB.setToolTipText(Local.getString("Create new task"));
+        newTaskB.setRequestFocusEnabled(false);
+        newTaskB.setPreferredSize(new Dimension(24, 24));
+        newTaskB.setFocusable(false);
+        newTaskB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                parentPanel.tasksPanel.newTaskB_actionPerformed(e);
+                refresh(CurrentDate.get());
+            }
+        });
+        newTaskB.setBorderPainted(false);
+
+
+        this.setLayout(borderLayout1);
+        scrollPane.getViewport().setBackground(Color.white);
+
+        scrollPane.getViewport().add(viewer, null);
+        this.add(scrollPane, BorderLayout.CENTER);
+        toolBar.add(historyBackB, null);
+        toolBar.add(historyForwardB, null);
+        toolBar.addSeparator(new Dimension(8, 24));
+        toolBar.add(newProjB, null);
+        toolBar.add(removeProjB, null);
+        toolBar.addSeparator(new Dimension(8, 24));
+        toolBar.add(newTaskB, null);
+
+        this.add(toolBar, BorderLayout.NORTH);
+
+        CurrentDate.addDateListener(new DateListener() {
+            public void dateChange(CalendarDate d) {
+                if (isActive) {
+                    refresh(d);
+                }
+            }
+        });
+        CurrentProject.addProjectListener(new ProjectListener() {
+
+            public void projectChange(
+                    Project prj,
+                    NoteList nl,
+                    TaskList tl,
+                    ResourcesList rl) {
+            }
+
+            public void projectWasChanged() {
+                if (isActive) {
+                    refresh(CurrentDate.get());
+                }
+            }
+        });
+        EventsScheduler.addListener(new EventNotificationListener() {
+            public void eventIsOccured(net.sf.memoranda.Event ev) {
+                if (isActive) {
+                    refresh(CurrentDate.get());
+                }
+            }
+
+            public void eventsChanged() {
+                if (isActive) {
+                    refresh(CurrentDate.get());
+                }
+            }
+        });
+        refresh(CurrentDate.get());
+    }
+
+    //Event listener class adding a new project.
+    public static class NewProjAction extends AbstractAction {
+
+        public NewProjAction() {
+            super(Local.getString("Create Project"),
+                    new ImageIcon(AppFrame.class.getResource("resources/icons/newproject.png")));
             putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, KeyEvent.ALT_MASK));
             setEnabled(true);
             refresh(CurrentDate.get());
-            
+
         }
-        
+
         public void actionPerformed(ActionEvent e) {
-        	App.getFrame().projectsPanel.ppNewProject_actionPerformed(e);
+            App.getFrame().projectsPanel.ppNewProject_actionPerformed(e);
 
-		}
+        }
     }
-	
-	//Event listener class for the Delete Project button on the agenda panel.
-	public static class RemoveProjAction extends AbstractAction {
-		
-        public  RemoveProjAction() {
-            super(Local.getString("Delete Project"), 
-            new ImageIcon(AppFrame.class.getResource("resources/icons/removeproject.png")));
+
+    //Event listener class for the Delete Project button on the agenda panel.
+    public static class RemoveProjAction extends AbstractAction {
+
+        public RemoveProjAction() {
+            super(Local.getString("Delete Project"),
+                    new ImageIcon(AppFrame.class.getResource("resources/icons/removeproject.png")));
             putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, KeyEvent.ALT_MASK));
-            if(!CurrentProject.get().getTitle().equals("Default Project") || 
-            		ProjectManager.getActiveProjectsNumber() > 1) 
-            	setEnabled(true);
-            else
-            	setEnabled(false);
+            if (!CurrentProject.get().getTitle().equals("Default Project") ||
+                    ProjectManager.getActiveProjectsNumber() > 1) {
+                setEnabled(true);
+            } else {
+                setEnabled(false);
+            }
             refresh(CurrentDate.get());
 
         }
-        
+
         public void actionPerformed(ActionEvent e) {
-        	App.getFrame().projectsPanel.BDeleteProject_actionPerformed(e);
+            App.getFrame().projectsPanel.BDeleteProject_actionPerformed(e);
+
+        }
+    }
+
+    public static void refresh(CalendarDate date) {
+        setRefreshCount(getRefreshCount() + 1);
+        viewer.setText(AgendaGenerator.getAgenda(date, expandedTasks));
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                refreshProjButtons();
+                if (gotoTask != null) {
+                    viewer.scrollToReference(gotoTask);
+                    scrollPane.setViewportView(viewer);
+                    Util.debug("Set view port to " + gotoTask);
+                }
+            }
+        });
+
+        Util.debug("Summary updated.");
+    }
+
+    static void refreshProjButtons() {
+        // Refreshes delete project button.
+        if (!CurrentProject.get().getTitle().equals("Default Project") ||
+                ProjectManager.getActiveProjectsNumber() > 1) {
+            removeProjB.setEnabled(true);
+        } else {
+            removeProjB.setEnabled(false);
+        }
+    }
 
-		}
+    public void setActive(boolean isa) {
+        isActive = isa;
     }
 
-	public static void refresh(CalendarDate date) {
-		setRefreshCount(getRefreshCount() + 1);
-		viewer.setText(AgendaGenerator.getAgenda(date,expandedTasks));
-		SwingUtilities.invokeLater(new Runnable(){
-			public void run() {
-				refreshProjButtons();
-				if(gotoTask != null) {
-					viewer.scrollToReference(gotoTask);
-					scrollPane.setViewportView(viewer);
-					Util.debug("Set view port to " + gotoTask);
-				}
-			}
-		});
-
-		Util.debug("Summary updated.");
-	}
-	
-	 static void refreshProjButtons() {
-		//Refreshes delete project button.
-		if(!CurrentProject.get().getTitle().equals("Default Project") || 
-        		ProjectManager.getActiveProjectsNumber() > 1) 
-        	removeProjB.setEnabled(true);
-        else
-        	removeProjB.setEnabled(false);
-	}
-
-	public void setActive(boolean isa) {
-		isActive = isa;
-	}
-
-	//	void toggleShowActiveOnly_actionPerformed(ActionEvent e) {
-	//		Context.put(
-	//			"SHOW_ACTIVE_TASKS_ONLY",
-	//			new Boolean(ppShowActiveOnlyChB.isSelected()));
-	//		/*if (taskTable.isShowActiveOnly()) {
-	//			// is true, toggle to false
-	//			taskTable.setShowActiveOnly(false);
-	//			//showActiveOnly.setToolTipText(Local.getString("Show Active Only"));			
-	//		}
-	//		else {
-	//			// is false, toggle to true
-	//			taskTable.setShowActiveOnly(true);
-	//			showActiveOnly.setToolTipText(Local.getString("Show All"));			
-	//		}*/	    
-	//		refresh(CurrentDate.get());
-	////		parentPanel.updateIndicators();
-	//		//taskTable.updateUI();
-	//	}
-
-	//
-	//        public void mouseClicked(MouseEvent e) {
-	//        	System.out.println("mouse clicked!");
-	////			if ((e.getClickCount() == 2) && (taskTable.getSelectedRow() > -1))
-	////				editTaskB_actionPerformed(null);
-	//		}
-	//
-	//		public void mousePressed(MouseEvent e) {
-	//        	System.out.println("mouse pressed!");
-	//			maybeShowPopup(e);
-	//		}
-	//
-	//		public void mouseReleased(MouseEvent e) {
-	//        	System.out.println("mouse released!");
-	//			maybeShowPopup(e);
-	//		}
-	//
-	//		private void maybeShowPopup(MouseEvent e) {
-	//			if (e.isPopupTrigger()) {
-	//				agendaPPMenu.show(e.getComponent(), e.getX(), e.getY());
-	//			}
-	//		}
-	//
-	//    }
 }
diff --git a/src/net/sf/memoranda/ui/AllFilesFilter.java b/src/net/sf/memoranda/ui/AllFilesFilter.java
index bf28e61..ed34fa5 100755
--- a/src/net/sf/memoranda/ui/AllFilesFilter.java
+++ b/src/net/sf/memoranda/ui/AllFilesFilter.java
@@ -8,12 +8,12 @@ package net.sf.memoranda.ui;
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
-import java.io.File;
-
-import javax.swing.filechooser.FileFilter;
 
 import net.sf.memoranda.util.Local;
 
+import javax.swing.filechooser.FileFilter;
+import java.io.File;
+
 /**
  *
  */
@@ -34,6 +34,7 @@ public class AllFilesFilter extends FileFilter {
     public static final String WAV = "WAV";
 
     String _type = "";
+
     /**
      * Constructor for AllFilesFilter.
      */
@@ -46,23 +47,25 @@ public class AllFilesFilter extends FileFilter {
      * @see javax.swing.filechooser.FileFilter#accept(java.io.File)
      */
     public boolean accept(File f) {
-        if (f.isDirectory())
+        if (f.isDirectory()) {
             return true;
+        }
         String ext = getExtension(f);
-        if (_type.equals(RTF))
+        if (_type.equals(RTF)) {
             return ext.equals("rtf");
-        else if (_type.equals(ZIP))
+        } else if (_type.equals(ZIP)) {
             return ext.equals("zip");
-        else if (_type.equals(EXE))
+        } else if (_type.equals(EXE)) {
             return (ext.equals("exe") || ext.equals("com") || ext.equals("bat"));
-        else if (_type.equals(JAR))
+        } else if (_type.equals(JAR)) {
             return ext.equals("jar");
-        else if (_type.equals(WAV))
+        } else if (_type.equals(WAV)) {
             return (ext.equals("wav") || ext.equals("au"));
-        else if (_type.equals(XHTML))
+        } else if (_type.equals(XHTML)) {
             return (ext.equals("xhtml") || ext.equals("xml"));
-        else if (_type.equals(ICO))
+        } else if (_type.equals(ICO)) {
             return (ext.equals("ico") || ext.equals("png"));
+        }
         return ext.startsWith("htm");
     }
 
@@ -70,20 +73,21 @@ public class AllFilesFilter extends FileFilter {
      * @see javax.swing.filechooser.FileFilter#getDescription()
      */
     public String getDescription() {
-        if (_type.equals(RTF))
+        if (_type.equals(RTF)) {
             return "Rich Text Format (*.rtf)";
-        else if (_type.equals(ZIP))
+        } else if (_type.equals(ZIP)) {
             return "ZIP archives (*.zip)";
-        else if (_type.equals(EXE))
+        } else if (_type.equals(EXE)) {
             return Local.getString("Executable Files") + " (*.exe, *.com, *.bat)";
-        else if (_type.equals(JAR))
+        } else if (_type.equals(JAR)) {
             return "JAR " + Local.getString("Files") + " (*.jar)";
-        else if (_type.equals(WAV))
+        } else if (_type.equals(WAV)) {
             return Local.getString("Sound files") + " (*.wav, *.au)";
-        else if (_type.equals(XHTML))
+        } else if (_type.equals(XHTML)) {
             return "XHTML files (*.xhtml, *.xml)";
-        else if (_type.equals(ICO))
+        } else if (_type.equals(ICO)) {
             return Local.getString("Icon") + " " + Local.getString("Files") + " (*.ico, *.png)";
+        }
         return "HTML files (*.html, *.htm)";
     }
 
diff --git a/src/net/sf/memoranda/ui/App.java b/src/net/sf/memoranda/ui/App.java
index b5bacc6..8adf8de 100755
--- a/src/net/sf/memoranda/ui/App.java
+++ b/src/net/sf/memoranda/ui/App.java
@@ -1,174 +1,176 @@
 package net.sf.memoranda.ui;
 
-import java.awt.Dimension;
-import java.awt.Frame;
-import java.awt.Toolkit;
-import java.util.Calendar;
-
-import javax.swing.ImageIcon;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.UIManager;
-
 import net.sf.memoranda.EventsScheduler;
 import net.sf.memoranda.util.Configuration;
 
+import javax.swing.*;
+import java.awt.*;
+import java.util.Calendar;
+
 /**
- * 
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 
 /*$Id: App.java,v 1.28 2007/03/20 06:21:46 alexeya Exp $*/
 public class App {
-	// boolean packFrame = false;
+    // boolean packFrame = false;
+
+    static AppFrame frame = null;
 
-	static AppFrame frame = null;
-	
-	public static final String GUIDE_URL = "http://memoranda.sourceforge.net/guide.html";
-	public static final String BUGS_TRACKER_URL = "http://sourceforge.net/tracker/?group_id=90997&atid=595566";
-	public static final String WEBSITE_URL = "http://memoranda.sourceforge.net";
+    public static final String GUIDE_URL = "http://memoranda.sourceforge.net/guide.html";
+    public static final String BUGS_TRACKER_URL = "http://sourceforge.net/tracker/?group_id=90997&atid=595566";
+    public static final String WEBSITE_URL = "http://memoranda.sourceforge.net";
 
-	private JFrame splash = null;
+    private JFrame splash = null;
 
-	/*========================================================================*/ 
-	/* Note: Please DO NOT edit the version/build info manually!
+    /*========================================================================*/ 
+    /* Note: Please DO NOT edit the version/build info manually!
        The actual values are substituted by the Ant build script using 
        'version' property and datestamp.*/
 
-	public static final String VERSION_INFO = "1.0-rc3.1";
-	public static final String BUILD_INFO = "20160122.26";
-	
-	/*========================================================================*/
-
-	public static AppFrame getFrame() {
-		return frame;
-	}
-
-	public void show() {
-		if (frame.isVisible()) {
-			frame.toFront();
-			frame.requestFocus();
-		} else
-			init();
-	}
-
-	public App(boolean fullmode) {
-		super();
-		if (fullmode)
-			fullmode = !Configuration.get("START_MINIMIZED").equals("yes");
-		/* DEBUG */
-		if (!fullmode)
-			System.out.println("Minimized mode");
-		if (!Configuration.get("SHOW_SPLASH").equals("no"))
-			showSplash();
-		System.out.println(VERSION_INFO);
-		System.out.println(Configuration.get("LOOK_AND_FEEL"));
-		try {
-			if (Configuration.get("LOOK_AND_FEEL").equals("system"))
-				UIManager.setLookAndFeel(
-					UIManager.getSystemLookAndFeelClassName());
-			else if (Configuration.get("LOOK_AND_FEEL").equals("default"))
-				UIManager.setLookAndFeel(
-					UIManager.getCrossPlatformLookAndFeelClassName());					
-			else if (
-				Configuration.get("LOOK_AND_FEEL").toString().length() > 0)
-				UIManager.setLookAndFeel(
-					Configuration.get("LOOK_AND_FEEL").toString());
-
-		} catch (Exception e) {		    
-			new ExceptionDialog(e, "Error when initializing a pluggable look-and-feel. Default LF will be used.", "Make sure that specified look-and-feel library classes are on the CLASSPATH.");
-		}
-		if (Configuration.get("FIRST_DAY_OF_WEEK").equals("")) {
-			String fdow;
-			if (Calendar.getInstance().getFirstDayOfWeek() == 2)
-				fdow = "mon";
-			else
-				fdow = "sun";
-			Configuration.put("FIRST_DAY_OF_WEEK", fdow);
-			Configuration.saveConfig();
-			/* DEBUG */
-			System.out.println("[DEBUG] first day of week is set to " + fdow);
-		}
-
-		EventsScheduler.init();
-		frame = new AppFrame();
-		if (fullmode) {
-			init();
-		}
-		if (!Configuration.get("SHOW_SPLASH").equals("no"))
-			splash.dispose();
-	}
-
-	void init() {
-		/*
-		 * if (packFrame) { frame.pack(); } else { frame.validate(); }
-		 * 
-		 * Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
-		 * 
-		 * Dimension frameSize = frame.getSize(); if (frameSize.height >
-		 * screenSize.height) { frameSize.height = screenSize.height; } if
-		 * (frameSize.width > screenSize.width) { frameSize.width =
-		 * screenSize.width; }
-		 * 
-		 * 
-		 * Make the window fullscreen - On Request of users This seems not to
-		 * work on sun's version 1.4.1_01 Works great with 1.4.2 !!! So update
-		 * your J2RE or J2SDK.
-		 */
-		/* Used to maximize the screen if the JVM Version if 1.4 or higher */
-		/* --------------------------------------------------------------- */
-		double JVMVer =
-			Double
-				.valueOf(System.getProperty("java.version").substring(0, 3))
-				.doubleValue();
-
-		frame.pack();
-		if (JVMVer >= 1.4) {
-			frame.setExtendedState(Frame.MAXIMIZED_BOTH);
-		} else {
-			frame.setExtendedState(Frame.NORMAL);
-		}
-		/* --------------------------------------------------------------- */
-		/* Added By Jeremy Whitlock (jcscoobyrs) 07-Nov-2003 at 15:54:24 */
-
-		// Not needed ???
-		frame.setVisible(true);
-		frame.toFront();
-		frame.requestFocus();
-	}
-
-	public static void openWindow() {
-		if (frame == null)
-			return;
-		frame.setVisible(true);
-		frame.setEnabled(true);
-		frame.setExtendedState(JFrame.NORMAL);
-	}
-
-	public static void closeWindow() {
-		if (frame == null)
-			return;
-		frame.setEnabled(false);
-		//frame.dispose();
-	}
-
-	/**
-	 * Method showSplash.
-	 */
-	private void showSplash() {
-		splash = new JFrame();
-				ImageIcon spl =
-			new ImageIcon(App.class.getResource("resources/splash.png"));
-		JLabel l = new JLabel();
-		l.setSize(400, 300);
-		l.setIcon(spl);
-		splash.getContentPane().add(l);
-		splash.setSize(400, 300);
-		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
-		splash.setLocation(
-			(screenSize.width - 400) / 2,
-			(screenSize.height - 300) / 2);
-		splash.setUndecorated(true);
-		splash.setVisible(true);
-	}
+    public static final String VERSION_INFO = "1.0-rc3.1";
+    public static final String BUILD_INFO = "20160122.26";
+
+    /*========================================================================*/
+
+    public static AppFrame getFrame() {
+        return frame;
+    }
+
+    public void show() {
+        if (frame.isVisible()) {
+            frame.toFront();
+            frame.requestFocus();
+        } else {
+            init();
+        }
+    }
+
+    public App(boolean fullmode) {
+        super();
+        if (fullmode) {
+            fullmode = !Configuration.get("START_MINIMIZED").equals("yes");
+        }
+        /* DEBUG */
+        if (!fullmode) {
+            System.out.println("Minimized mode");
+        }
+        if (!Configuration.get("SHOW_SPLASH").equals("no")) {
+            showSplash();
+        }
+        System.out.println(VERSION_INFO);
+        System.out.println(Configuration.get("LOOK_AND_FEEL"));
+        try {
+            if (Configuration.get("LOOK_AND_FEEL").equals("system")) {
+                UIManager.setLookAndFeel(
+                        UIManager.getSystemLookAndFeelClassName());
+            } else if (Configuration.get("LOOK_AND_FEEL").equals("default")) {
+                UIManager.setLookAndFeel(
+                        UIManager.getCrossPlatformLookAndFeelClassName());
+            } else if (
+                    Configuration.get("LOOK_AND_FEEL").toString().length() > 0) {
+                UIManager.setLookAndFeel(
+                        Configuration.get("LOOK_AND_FEEL").toString());
+            }
+
+        } catch (Exception e) {
+            new ExceptionDialog(e, "Error when initializing a pluggable look-and-feel. Default LF will be used.", "Make sure that specified look-and-feel library classes are on the CLASSPATH.");
+        }
+        if (Configuration.get("FIRST_DAY_OF_WEEK").equals("")) {
+            String fdow;
+            if (Calendar.getInstance().getFirstDayOfWeek() == 2) {
+                fdow = "mon";
+            } else {
+                fdow = "sun";
+            }
+            Configuration.put("FIRST_DAY_OF_WEEK", fdow);
+            Configuration.saveConfig();
+            /* DEBUG */
+            System.out.println("[DEBUG] first day of week is set to " + fdow);
+        }
+
+        EventsScheduler.init();
+        frame = new AppFrame();
+        if (fullmode) {
+            init();
+        }
+        if (!Configuration.get("SHOW_SPLASH").equals("no")) {
+            splash.dispose();
+        }
+    }
+
+    void init() {
+        /*
+         * if (packFrame) { frame.pack(); } else { frame.validate(); }
+         * 
+         * Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
+         * 
+         * Dimension frameSize = frame.getSize(); if (frameSize.height >
+         * screenSize.height) { frameSize.height = screenSize.height; } if
+         * (frameSize.width > screenSize.width) { frameSize.width =
+         * screenSize.width; }
+         * 
+         * 
+         * Make the window fullscreen - On Request of users This seems not to
+         * work on sun's version 1.4.1_01 Works great with 1.4.2 !!! So update
+         * your J2RE or J2SDK.
+         */
+        /* Used to maximize the screen if the JVM Version if 1.4 or higher */
+        /* --------------------------------------------------------------- */
+        double JVMVer =
+                Double
+                        .valueOf(System.getProperty("java.version").substring(0, 3))
+                        .doubleValue();
+
+        frame.pack();
+        if (JVMVer >= 1.4) {
+            frame.setExtendedState(Frame.MAXIMIZED_BOTH);
+        } else {
+            frame.setExtendedState(Frame.NORMAL);
+        }
+        /* --------------------------------------------------------------- */
+        /* Added By Jeremy Whitlock (jcscoobyrs) 07-Nov-2003 at 15:54:24 */
+
+        // Not needed ???
+        frame.setVisible(true);
+        frame.toFront();
+        frame.requestFocus();
+    }
+
+    public static void openWindow() {
+        if (frame == null) {
+            return;
+        }
+        frame.setVisible(true);
+        frame.setEnabled(true);
+        frame.setExtendedState(JFrame.NORMAL);
+    }
+
+    public static void closeWindow() {
+        if (frame == null) {
+            return;
+        }
+        frame.setEnabled(false);
+        //frame.dispose();
+    }
+
+    /**
+     * Method showSplash.
+     */
+    private void showSplash() {
+        splash = new JFrame();
+        ImageIcon spl =
+                new ImageIcon(App.class.getResource("resources/splash.png"));
+        JLabel l = new JLabel();
+        l.setSize(400, 300);
+        l.setIcon(spl);
+        splash.getContentPane().add(l);
+        splash.setSize(400, 300);
+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
+        splash.setLocation(
+                (screenSize.width - 400) / 2,
+                (screenSize.height - 300) / 2);
+        splash.setUndecorated(true);
+        splash.setVisible(true);
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/AppFrame.java b/src/net/sf/memoranda/ui/AppFrame.java
index b7c351f..537b6d1 100755
--- a/src/net/sf/memoranda/ui/AppFrame.java
+++ b/src/net/sf/memoranda/ui/AppFrame.java
@@ -77,28 +77,26 @@ public class AppFrame extends JFrame {
         }
     };
 
-    public Action exportNotesAction =
-            new AbstractAction(Local.getString("Export notes") + "...") {
-
-                public void actionPerformed(ActionEvent e) {
-                    ppExport_actionPerformed(e);
-                }
-            };
-
-    public Action importNotesAction =
-            new AbstractAction(Local.getString("Import multiple notes")) {
+    public Action exportNotesAction = new AbstractAction(
+            Local.getString("Export notes") + "...") {
+        public void actionPerformed(ActionEvent e) {
+            ppExport_actionPerformed(e);
+        }
+    };
 
-                public void actionPerformed(ActionEvent e) {
-                    ppImport_actionPerformed(e);
-                }
-            };
-    public Action importOneNoteAction =
-            new AbstractAction(Local.getString("Import one note")) {
+    public Action importNotesAction = new AbstractAction(
+            Local.getString("Import multiple notes")) {
+        public void actionPerformed(ActionEvent e) {
+            ppImport_actionPerformed(e);
+        }
+    };
 
-                public void actionPerformed(ActionEvent e) {
-                    p1Import_actionPerformed(e);
-                }
-            };
+    public Action importOneNoteAction = new AbstractAction(
+            Local.getString("Import one note")) {
+        public void actionPerformed(ActionEvent e) {
+            p1Import_actionPerformed(e);
+        }
+    };
 
     JMenuItem jMenuFileNewPrj = new JMenuItem();
     JMenuItem jMenuFileNewNote = new JMenuItem(workPanel.dailyItemsPanel.editorPanel.newAction);
diff --git a/src/net/sf/memoranda/ui/AppFrame_AboutBox.java b/src/net/sf/memoranda/ui/AppFrame_AboutBox.java
index 28de81b..5d29165 100755
--- a/src/net/sf/memoranda/ui/AppFrame_AboutBox.java
+++ b/src/net/sf/memoranda/ui/AppFrame_AboutBox.java
@@ -1,125 +1,121 @@
 package net.sf.memoranda.ui;
 
-import java.awt.AWTEvent;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Frame;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowEvent;
 
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JLayeredPane;
-
-import net.sf.memoranda.util.Local;
-
 /**
- * 
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 
 /*$Id: AppFrame_AboutBox.java,v 1.13 2005/11/09 22:38:07 alexeya Exp $*/
 public class AppFrame_AboutBox extends JDialog implements ActionListener {
 
-  JButton button1 = new JButton();
-  JLabel imageLabel = new JLabel();
-  JLabel lblText = new JLabel();
-  
-  String product = "Version "+App.VERSION_INFO + " (Build " + App.BUILD_INFO + ")";
-  String copyright = "Copyright (c) 2003, 2004 Memoranda team";
-  String url = App.WEBSITE_URL;
-  String developersHead = Local.getString("Developers") + ":";
-  String[] developers = {
-              "Alex Alishevskikh (alexeya@users.sourceforge.net)",
-              "Patrick Bielen (bielen@stafa.nl)",
-              "Ryan Ho (rawsushi@users.sourceforge.net)",
-              "Ivan Ribas (ivanrise@users.sourceforge.net)",
-              "Jyrki Velhonoja (velhonoja@kapsi.fi>)",
-  			  "Jeremy Whitlock (jwhitlock@starprecision.com)"              
-  };
-  String othersHead = Local.getString("Other contributors") + ":";
-  String[] others = {
-              "Thomas Chuffart (informatique@pierrelouiscarlier.fr)",
-              "Willy Dobe (wdobe@gmx.de)",
-              "Yunjie Liu (liu-610@163.com)",
-              "Kenneth J. Pouncey (kjpou@pt.lu)",
-              "Michael Radtke (mradtke@abigale.de)",
-              "Carel-J Rischmuller (carel-j.rischmuller@epiuse.com)",
-              "Milena Vitali-Charewicz (milo22370@yahoo.com)",
-              "Toru Watanabe (t-wata@cablenet.ne.jp)"                            
- };
-    
-  JLayeredPane layeredPane;
-  ImageIcon image;
-  JLabel imgLabel;
-                                   
-  public AppFrame_AboutBox(Frame parent) {
-    super(parent);
-    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
-    try {
-      jbInit();
+    JButton button1 = new JButton();
+    JLabel imageLabel = new JLabel();
+    JLabel lblText = new JLabel();
+
+    String product = "Version " + App.VERSION_INFO + " (Build " + App.BUILD_INFO + ")";
+    String copyright = "Copyright (c) 2003, 2004 Memoranda team";
+    String url = App.WEBSITE_URL;
+    String developersHead = Local.getString("Developers") + ":";
+    String[] developers = {
+            "Alex Alishevskikh (alexeya@users.sourceforge.net)",
+            "Patrick Bielen (bielen@stafa.nl)",
+            "Ryan Ho (rawsushi@users.sourceforge.net)",
+            "Ivan Ribas (ivanrise@users.sourceforge.net)",
+            "Jyrki Velhonoja (velhonoja@kapsi.fi>)",
+            "Jeremy Whitlock (jwhitlock@starprecision.com)"
+    };
+    String othersHead = Local.getString("Other contributors") + ":";
+    String[] others = {
+            "Thomas Chuffart (informatique@pierrelouiscarlier.fr)",
+            "Willy Dobe (wdobe@gmx.de)",
+            "Yunjie Liu (liu-610@163.com)",
+            "Kenneth J. Pouncey (kjpou@pt.lu)",
+            "Michael Radtke (mradtke@abigale.de)",
+            "Carel-J Rischmuller (carel-j.rischmuller@epiuse.com)",
+            "Milena Vitali-Charewicz (milo22370@yahoo.com)",
+            "Toru Watanabe (t-wata@cablenet.ne.jp)"
+    };
+
+    JLayeredPane layeredPane;
+    ImageIcon image;
+    JLabel imgLabel;
+
+    public AppFrame_AboutBox(Frame parent) {
+        super(parent);
+        enableEvents(AWTEvent.WINDOW_EVENT_MASK);
+        try {
+            jbInit();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        setSize(400, 500);
     }
-    catch(Exception e) {
-      e.printStackTrace();
+
+    //Component initialization
+    private void jbInit() throws Exception {
+        String text = "<html>";
+        text += "<b>" + product + "</b><br><br>";
+        text += copyright + "<br>" + url + "<br><br>";
+        text += "<b>" + developersHead + "</b><br>";
+        for (int i = 0; i < developers.length; i++) {
+            text += developers[i] + "<br>";
+        }
+        text += "<br><b>" + othersHead + "</b><br>";
+        for (int i = 0; i < others.length; i++) {
+            text += others[i] + "<br>";
+        }
+
+        text += "</html>";
+
+        image = new ImageIcon(AppFrame_AboutBox.class.getResource("resources/memoranda.png"));
+        this.setTitle(Local.getString("About Memoranda"));
+        setResizable(false);
+        // Initialize Objects
+        lblText.setFont(new java.awt.Font("Dialog", 0, 11));
+        lblText.setText(text);
+        lblText.setBounds(10, 55, 300, 400);
+
+
+        button1.setText(Local.getString("Ok"));
+        button1.setBounds(150, 415, 95, 30);
+        button1.addActionListener(this);
+        button1.setPreferredSize(new Dimension(95, 30));
+        button1.setBackground(new Color(69, 125, 186));
+        button1.setForeground(Color.white);
+        layeredPane = getLayeredPane();
+        //layeredPane.setPreferredSize(new Dimension(300, 300));
+        imgLabel = new JLabel(image);
+        imgLabel.setBounds(0, 0, image.getIconWidth(), image.getIconHeight());
+        layeredPane.add(imgLabel, new Integer(1));
+        layeredPane.add(lblText, new Integer(2));
+        layeredPane.add(button1, new Integer(2));
+        this.getContentPane().setBackground(new Color(251, 197, 63));
     }
-    setSize(400, 500);
-  }
-  //Component initialization
-  private void jbInit() throws Exception  {    
-    String text = "<html>";
-    text += "<b>"+product+"</b><br><br>";
-    text += copyright + "<br>" + url + "<br><br>";
-    text += "<b>" + developersHead + "</b><br>";    
-    for (int i = 0; i < developers.length; i++)
-        text += developers[i]+"<br>";    
-    text += "<br><b>" + othersHead + "</b><br>";    
-    for (int i = 0; i < others.length; i++)
-        text += others[i]+"<br>"; 
-    
-    text += "</html>";
-    
-    image = new ImageIcon(AppFrame_AboutBox.class.getResource("resources/memoranda.png"));
-    this.setTitle(Local.getString("About Memoranda"));
-    setResizable(false);
-    // Initialize Objects
-    lblText.setFont(new java.awt.Font("Dialog", 0, 11));
-    lblText.setText(text);
-    lblText.setBounds(10, 55, 300, 400);
-
-    
-    button1.setText(Local.getString("Ok"));
-    button1.setBounds(150, 415, 95, 30);
-    button1.addActionListener(this);
-    button1.setPreferredSize(new Dimension(95, 30));
-    button1.setBackground(new Color(69, 125, 186));
-    button1.setForeground(Color.white);
-    layeredPane = getLayeredPane();
-    //layeredPane.setPreferredSize(new Dimension(300, 300));
-    imgLabel = new JLabel(image);
-    imgLabel.setBounds(0, 0, image.getIconWidth(), image.getIconHeight());
-    layeredPane.add(imgLabel, new Integer(1));
-    layeredPane.add(lblText, new Integer(2));    
-    layeredPane.add(button1, new Integer(2));
-    this.getContentPane().setBackground(new Color(251, 197, 63));
-  }
-  //Overridden so we can exit when window is closed
-  protected void processWindowEvent(WindowEvent e) {
-    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
-      cancel();
+
+    //Overridden so we can exit when window is closed
+    protected void processWindowEvent(WindowEvent e) {
+        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
+            cancel();
+        }
+        super.processWindowEvent(e);
+    }
+
+    //Close the dialog
+    void cancel() {
+        dispose();
     }
-    super.processWindowEvent(e);
-  }
-  //Close the dialog
-  void cancel() {
-    dispose();
-  }
-  //Close the dialog on a button event
-  public void actionPerformed(ActionEvent e) {
-    if (e.getSource() == button1) {
-      cancel();
+
+    //Close the dialog on a button event
+    public void actionPerformed(ActionEvent e) {
+        if (e.getSource() == button1) {
+            cancel();
+        }
     }
-  }
 }
diff --git a/src/net/sf/memoranda/ui/BookmarksPanel.java b/src/net/sf/memoranda/ui/BookmarksPanel.java
index 9c4fa3a..374d40b 100755
--- a/src/net/sf/memoranda/ui/BookmarksPanel.java
+++ b/src/net/sf/memoranda/ui/BookmarksPanel.java
@@ -8,32 +8,30 @@
  */
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
+import javax.swing.*;
+import java.awt.*;
 
 /*$Id: BookmarksPanel.java,v 1.4 2004/04/05 10:05:44 alexeya Exp $*/
 public class BookmarksPanel extends JPanel {
-  BorderLayout borderLayout1 = new BorderLayout();
-  JScrollPane scrollPane = new JScrollPane();
-  public NotesList notesList = new NotesList(NotesList.BOOKMARKS);
+    BorderLayout borderLayout1 = new BorderLayout();
+    JScrollPane scrollPane = new JScrollPane();
+    public NotesList notesList = new NotesList(NotesList.BOOKMARKS);
 
-  public BookmarksPanel() {
-    try {
-      jbInit();
+    public BookmarksPanel() {
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
     }
-    catch(Exception ex) {
-      new ExceptionDialog(ex);
+
+    void jbInit() throws Exception {
+        this.setLayout(borderLayout1);
+        this.add(scrollPane, BorderLayout.CENTER);
+        scrollPane.getViewport().add(notesList, null);
+
+
     }
-  }
-  void jbInit() throws Exception {
-    this.setLayout(borderLayout1);
-    this.add(scrollPane, BorderLayout.CENTER);
-    scrollPane.getViewport().add(notesList, null);
-
-    
-  }
 
 
 }
diff --git a/src/net/sf/memoranda/ui/CalendarFrame.java b/src/net/sf/memoranda/ui/CalendarFrame.java
index 8579014..4f23b09 100755
--- a/src/net/sf/memoranda/ui/CalendarFrame.java
+++ b/src/net/sf/memoranda/ui/CalendarFrame.java
@@ -1,39 +1,35 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.JInternalFrame;
+import javax.swing.*;
 import javax.swing.border.Border;
-
-import net.sf.memoranda.util.Local;
+import java.awt.*;
 
 /*$Id: CalendarFrame.java,v 1.5 2004/04/05 10:05:44 alexeya Exp $*/
 public class CalendarFrame extends JInternalFrame {
 
-  public JNCalendarPanel cal = new JNCalendarPanel();
-  Border border1;
+    public JNCalendarPanel cal = new JNCalendarPanel();
+    Border border1;
+
+    public CalendarFrame() {
+        try {
+            jbInit();
+        } catch (Exception e) {
+            new ExceptionDialog(e);
+        }
 
-  public CalendarFrame() {
-    try {
-      jbInit();
-    }
-    catch(Exception e) {
-      new ExceptionDialog(e);
     }
 
-  }
-  private void jbInit() throws Exception {
-    border1 = BorderFactory.createLineBorder(Color.gray,1);
-    this.setClosable(true);
-    this.setTitle(Local.getString("Select date"));
-    this.setBorder(border1);
-    //this.setPreferredSize(new Dimension(200, 200));
-    this.setToolTipText("");
-    cal.setPreferredSize(new Dimension(this.getContentPane().getWidth(),
-    this.getContentPane().getHeight()));
-    this.getContentPane().add(cal,  BorderLayout.CENTER);
-  }
+    private void jbInit() throws Exception {
+        border1 = BorderFactory.createLineBorder(Color.gray, 1);
+        this.setClosable(true);
+        this.setTitle(Local.getString("Select date"));
+        this.setBorder(border1);
+        //this.setPreferredSize(new Dimension(200, 200));
+        this.setToolTipText("");
+        cal.setPreferredSize(new Dimension(this.getContentPane().getWidth(),
+                this.getContentPane().getHeight()));
+        this.getContentPane().add(cal, BorderLayout.CENTER);
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/DailyItemsPanel.java b/src/net/sf/memoranda/ui/DailyItemsPanel.java
index a9c89a3..a527eab 100755
--- a/src/net/sf/memoranda/ui/DailyItemsPanel.java
+++ b/src/net/sf/memoranda/ui/DailyItemsPanel.java
@@ -1,50 +1,20 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.CardLayout;
-import java.awt.Color;
-import java.awt.Cursor;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Insets;
-import java.awt.SystemColor;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JSplitPane;
-import javax.swing.JTabbedPane;
-import javax.swing.JToolBar;
-import javax.swing.SwingConstants;
-import javax.swing.border.Border;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.CurrentNote;
-import net.sf.memoranda.NoteListener;
-import net.sf.memoranda.EventNotificationListener;
-import net.sf.memoranda.EventsScheduler;
-import net.sf.memoranda.History;
-import net.sf.memoranda.HistoryItem;
-import net.sf.memoranda.HistoryListener;
-import net.sf.memoranda.Note;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.Task;
-import net.sf.memoranda.TaskList;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
 import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Local;
 import net.sf.memoranda.util.Util;
+
+import javax.swing.*;
+import javax.swing.border.Border;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+
 /**
- * 
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 
@@ -71,7 +41,7 @@ public class DailyItemsPanel extends JPanel {
     boolean expanded = true;
 
     Note currentNote;
-	CalendarDate currentDate;
+    CalendarDate currentDate;
 
     boolean calendarIgnoreChange = false;
     boolean dateChangedByCalendar = false;
@@ -83,7 +53,7 @@ public class DailyItemsPanel extends JPanel {
     Border border1;
     JButton toggleButton = new JButton();
     WorkPanel parentPanel = null;
-    
+
     boolean addedToHistory = false;
     JPanel indicatorsPanel = new JPanel();
     JButton alarmB = new JButton();
@@ -92,25 +62,25 @@ public class DailyItemsPanel extends JPanel {
     JPanel mainTabsPanel = new JPanel();
     NotesControlPanel notesControlPane = new NotesControlPanel();
     CardLayout cardLayout2 = new CardLayout();
-        
+
     JTabbedPane tasksTabbedPane = new JTabbedPane();
     JTabbedPane eventsTabbedPane = new JTabbedPane();
-	JTabbedPane agendaTabbedPane = new JTabbedPane();
+    JTabbedPane agendaTabbedPane = new JTabbedPane();
     Border border2;
 
-	String CurrentPanel;
-	
+    String CurrentPanel;
+
     Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
 
     public DailyItemsPanel(WorkPanel _parentPanel) {
         try {
             parentPanel = _parentPanel;
             jbInit();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
+
     void jbInit() throws Exception {
         border1 = BorderFactory.createEtchedBorder(Color.white, Color.gray);
         border2 = BorderFactory.createEtchedBorder(Color.white, new Color(161, 161, 161));
@@ -201,12 +171,12 @@ public class DailyItemsPanel extends JPanel {
         statusPanel.add(indicatorsPanel, BorderLayout.EAST);
 
         mainPanel.add(editorsPanel, BorderLayout.CENTER);
-        
+
         editorsPanel.add(agendaPanel, "AGENDA");
         editorsPanel.add(eventsPanel, "EVENTS");
         editorsPanel.add(tasksPanel, "TASKS");
         editorsPanel.add(editorPanel, "NOTES");
-        
+
         splitPane.add(mainPanel, JSplitPane.RIGHT);
         splitPane.add(controlPanel, JSplitPane.LEFT);
         controlPanel.add(toggleToolBar, BorderLayout.SOUTH);
@@ -223,28 +193,29 @@ public class DailyItemsPanel extends JPanel {
 
         CurrentProject.addProjectListener(new ProjectListener() {
             public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {
-//            	Util.debug("DailyItemsPanel Project Listener: Project is going to be changed!");				
-//            	Util.debug("current project is " + CurrentProject.get().getTitle());
+                //                Util.debug("DailyItemsPanel Project Listener: Project is going to be changed!");
+                //                Util.debug("current project is " + CurrentProject.get().getTitle());
 
-            	currentProjectChanged(p, nl, tl, rl);
+                currentProjectChanged(p, nl, tl, rl);
             }
+
             public void projectWasChanged() {
-//            	Util.debug("DailyItemsPanel Project Listener: Project has been changed!");            	
-//            	Util.debug("current project is " + CurrentProject.get().getTitle());
-            	
-            	// cannot save note here, changing to new project
-            	currentNote = CurrentProject.getNoteList().getNoteForDate(CurrentDate.get());
-        		CurrentNote.set(currentNote,false);
-                editorPanel.setDocument(currentNote);        
-                
-//                // DEBUG
-//                if (currentNote != null) {
-//                    Util.debug("currentNote has been set to " + currentNote.getTitle());        	
-//                }
-//                else {
-//                    Util.debug("currentNote has been set to null");
-//                }
-//                // DEBUG
+                //                Util.debug("DailyItemsPanel Project Listener: Project has been changed!");
+                //                Util.debug("current project is " + CurrentProject.get().getTitle());
+
+                // cannot save note here, changing to new project
+                currentNote = CurrentProject.getNoteList().getNoteForDate(CurrentDate.get());
+                CurrentNote.set(currentNote, false);
+                editorPanel.setDocument(currentNote);
+
+                //                // DEBUG
+                //                if (currentNote != null) {
+                //                    Util.debug("currentNote has been set to " + currentNote.getTitle());
+                //                }
+                //                else {
+                //                    Util.debug("currentNote has been set to null");
+                //                }
+                //                // DEBUG
             }
         });
 
@@ -253,11 +224,12 @@ public class DailyItemsPanel extends JPanel {
                 currentNoteChanged(note, toSaveCurrentNote);
             }
         });
-		
+
         calendar.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (calendarIgnoreChange)
+                if (calendarIgnoreChange) {
                     return;
+                }
                 dateChangedByCalendar = true;
                 CurrentDate.set(calendar.get());
                 dateChangedByCalendar = false;
@@ -291,28 +263,27 @@ public class DailyItemsPanel extends JPanel {
             }
         });
 
-		currentDate = CurrentDate.get();
+        currentDate = CurrentDate.get();
         currentNote = CurrentProject.getNoteList().getNoteForDate(CurrentDate.get());
-		CurrentNote.set(currentNote,true);
+        CurrentNote.set(currentNote, true);
         editorPanel.setDocument(currentNote);
         History.add(new HistoryItem(CurrentDate.get(), CurrentProject.get()));
         cmainPanel.add(mainTabsPanel, BorderLayout.CENTER);
         mainTabsPanel.add(eventsTabbedPane, "EVENTSTAB");
         mainTabsPanel.add(tasksTabbedPane, "TASKSTAB");
         mainTabsPanel.add(notesControlPane, "NOTESTAB");
-		mainTabsPanel.add(agendaTabbedPane, "AGENDATAB");
+        mainTabsPanel.add(agendaTabbedPane, "AGENDATAB");
         updateIndicators(CurrentDate.get(), CurrentProject.getTaskList());
         mainPanel.setBorder(null);
     }
 
-   
 
     void currentDateChanged(CalendarDate newdate) {
         Cursor cur = App.getFrame().getCursor();
         App.getFrame().setCursor(waitCursor);
         if (!changedByHistory) {
-           History.add(new HistoryItem(newdate, CurrentProject.get()));
-		}
+            History.add(new HistoryItem(newdate, CurrentProject.get()));
+        }
         if (!dateChangedByCalendar) {
             calendarIgnoreChange = true;
             calendar.set(newdate);
@@ -321,10 +292,10 @@ public class DailyItemsPanel extends JPanel {
 
         /*if ((currentNote != null) && !changedByHistory && !addedToHistory)
                             History.add(new HistoryItem(currentNote));*/
-		currentNoteChanged(currentNote,true);
-		currentNote = CurrentProject.getNoteList().getNoteForDate(newdate);
- 		CurrentNote.set(currentNote,true);
-		currentDate = CurrentDate.get();
+        currentNoteChanged(currentNote, true);
+        currentNote = CurrentProject.getNoteList().getNoteForDate(newdate);
+        CurrentNote.set(currentNote, true);
+        currentDate = CurrentDate.get();
 
         /*addedToHistory = false;
         if (!changedByHistory) {
@@ -334,43 +305,44 @@ public class DailyItemsPanel extends JPanel {
             }
         }*/
 
-		currentDateLabel.setText(newdate.getFullDateString());
+        currentDateLabel.setText(newdate.getFullDateString());
         if ((currentNote != null) && (currentNote.isMarked())) {
             currentDateLabel.setIcon(bookmarkIcon);
             currentDateLabel.setHorizontalTextPosition(SwingConstants.LEFT);
-        }
-        else {
+        } else {
             currentDateLabel.setIcon(null);
-        }		
+        }
 
         updateIndicators(newdate, CurrentProject.getTaskList());
         App.getFrame().setCursor(cur);
     }
 
-	void currentNoteChanged(Note note, boolean toSaveCurrentNote) {
-//		Util.debug("currentNoteChanged");
-		
-		if (editorPanel.isDocumentChanged()) {
-			if (toSaveCurrentNote) {
-	            saveNote();				
-			}
-			notesControlPane.refresh();
+    void currentNoteChanged(Note note, boolean toSaveCurrentNote) {
+        //        Util.debug("currentNoteChanged");
+
+        if (editorPanel.isDocumentChanged()) {
+            if (toSaveCurrentNote) {
+                saveNote();
+            }
+            notesControlPane.refresh();
         }
-		currentNote = note;
-		editorPanel.setDocument(currentNote);
+        currentNote = note;
+        editorPanel.setDocument(currentNote);
         calendar.set(CurrentDate.get());
-		editorPanel.editor.requestFocus();		
-	}
-	
+        editorPanel.editor.requestFocus();
+    }
+
     void currentProjectChanged(Project newprj, NoteList nl, TaskList tl, ResourcesList rl) {
-//		Util.debug("currentProjectChanged");
+        //        Util.debug("currentProjectChanged");
 
         Cursor cur = App.getFrame().getCursor();
         App.getFrame().setCursor(waitCursor);
-        if (!changedByHistory)
+        if (!changedByHistory) {
             History.add(new HistoryItem(CurrentDate.get(), newprj));
-        if (editorPanel.isDocumentChanged())
+        }
+        if (editorPanel.isDocumentChanged()) {
             saveNote();
+        }
         /*if ((currentNote != null) && !changedByHistory && !addedToHistory)
                     History.add(new HistoryItem(currentNote));*/
         CurrentProject.save();        
@@ -382,7 +354,7 @@ public class DailyItemsPanel extends JPanel {
                 addedToHistory = true;
             }
         }*/
-        
+
         updateIndicators(CurrentDate.get(), tl);
         App.getFrame().setCursor(cur);
     }
@@ -395,10 +367,11 @@ public class DailyItemsPanel extends JPanel {
     }
 
     public void saveNote() {
-        if (currentNote == null)
+        if (currentNote == null) {
             currentNote = CurrentProject.getNoteList().createNoteForDate(currentDate);
+        }
         currentNote.setTitle(editorPanel.titleField.getText());
-		currentNote.setId(Util.generateId());
+        currentNote.setId(Util.generateId());
         CurrentStorage.get().storeNote(currentNote, editorPanel.getDocument());
         /*DEBUG* System.out.println("Save");*/
     }
@@ -411,8 +384,7 @@ public class DailyItemsPanel extends JPanel {
             controlPanel.add(toggleToolBar, BorderLayout.EAST);
             splitPane.setDividerLocation((int) controlPanel.getMinimumSize().getWidth());
 
-        }
-        else {
+        } else {
             expanded = true;
             toggleButton.setIcon(collIcon);
             controlPanel.remove(toggleToolBar);
@@ -424,8 +396,9 @@ public class DailyItemsPanel extends JPanel {
     public void updateIndicators(CalendarDate date, TaskList tl) {
         indicatorsPanel.removeAll();
         if (date.equals(CalendarDate.today())) {
-            if (tl.getActiveSubTasks(null,date).size() > 0)
+            if (tl.getActiveSubTasks(null, date).size() > 0) {
                 indicatorsPanel.add(taskB, null);
+            }
             if (EventsScheduler.isEventScheduled()) {
                 /*String evlist = "";
                 for (Iterator it = EventsScheduler.getScheduledEvents().iterator(); it.hasNext();) {
@@ -447,32 +420,34 @@ public class DailyItemsPanel extends JPanel {
     public void selectPanel(String pan) {
         if (calendar.jnCalendar.renderer.getTask() != null) {
             calendar.jnCalendar.renderer.setTask(null);
-         //   calendar.jnCalendar.updateUI();
+            //   calendar.jnCalendar.updateUI();
         }
         if (pan.equals("TASKS") && (tasksPanel.taskTable.getSelectedRow() > -1)) {
             Task t =
-                CurrentProject.getTaskList().getTask(
-                    tasksPanel
-                        .taskTable
-                        .getModel()
-                        .getValueAt(tasksPanel.taskTable.getSelectedRow(), TaskTable.TASK_ID)
-                        .toString());
+                    CurrentProject.getTaskList().getTask(
+                            tasksPanel
+                                    .taskTable
+                                    .getModel()
+                                    .getValueAt(tasksPanel.taskTable.getSelectedRow(), TaskTable.TASK_ID)
+                                    .toString());
             calendar.jnCalendar.renderer.setTask(t);
-       //     calendar.jnCalendar.updateUI();
+            //     calendar.jnCalendar.updateUI();
         }
         boolean isAg = pan.equals("AGENDA");
         agendaPanel.setActive(isAg);
-        if (isAg)
-        	AgendaPanel.refresh(CurrentDate.get());
+        if (isAg) {
+            AgendaPanel.refresh(CurrentDate.get());
+        }
         cardLayout1.show(editorsPanel, pan);
         cardLayout2.show(mainTabsPanel, pan + "TAB");
-		calendar.jnCalendar.updateUI();
-		CurrentPanel=pan;
+        calendar.jnCalendar.updateUI();
+        CurrentPanel = pan;
+    }
+
+    public String getCurrentPanel() {
+        return CurrentPanel;
     }
 
-	public String getCurrentPanel() {
-		return CurrentPanel;
-	}
     void taskB_actionPerformed(ActionEvent e) {
         parentPanel.tasksB_actionPerformed(null);
     }
diff --git a/src/net/sf/memoranda/ui/EditTypeDialog.java b/src/net/sf/memoranda/ui/EditTypeDialog.java
index bd183b9..1f23ae2 100755
--- a/src/net/sf/memoranda/ui/EditTypeDialog.java
+++ b/src/net/sf/memoranda/ui/EditTypeDialog.java
@@ -1,28 +1,14 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.event.ActionEvent;
-import java.io.File;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JFileChooser;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-import javax.swing.SwingConstants;
-import javax.swing.UIManager;
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.TitledBorder;
 import javax.swing.event.CaretEvent;
-
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.File;
 
 /*$Id: EditTypeDialog.java,v 1.9 2005/07/05 08:17:24 alexeya Exp $*/
 public class EditTypeDialog extends JDialog {
@@ -63,7 +49,7 @@ public class EditTypeDialog extends JDialog {
     JPanel jPanel5 = new JPanel();
     Border border7;
     TitledBorder titledBorder7;
-    String[] mimes = { "application", "audio", "image", "text", "video" };
+    String[] mimes = {"application", "audio", "image", "text", "video"};
     public String iconPath = "";
     BorderLayout borderLayout7 = new BorderLayout();
     BorderLayout borderLayout5 = new BorderLayout();
@@ -78,14 +64,13 @@ public class EditTypeDialog extends JDialog {
         try {
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
 
     void jbInit() throws Exception {
-	this.setResizable(false);
+        this.setResizable(false);
         border1 = BorderFactory.createLineBorder(Color.gray, 1);
         titledBorder1 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("File type extensions"));
         border2 = BorderFactory.createLineBorder(Color.gray, 1);
@@ -97,9 +82,9 @@ public class EditTypeDialog extends JDialog {
         border5 = BorderFactory.createLineBorder(Color.gray, 1);
         titledBorder5 = new TitledBorder(border5, Local.getString("Application"));
         border6 = BorderFactory.createEmptyBorder();
-        titledBorder6 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("Icon")+":");
+        titledBorder6 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("Icon") + ":");
         border7 = BorderFactory.createEmptyBorder();
-        titledBorder7 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("MIME-type")+":");
+        titledBorder7 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("MIME-type") + ":");
         border8 = BorderFactory.createLineBorder(Color.gray, 1);
         border9 = BorderFactory.createEmptyBorder(0, 5, 0, 5);
         buttonsPanel.setLayout(flowLayout1);
@@ -112,14 +97,14 @@ public class EditTypeDialog extends JDialog {
                 cancelB_actionPerformed(e);
             }
         });
-        flowLayout7.setAlignment(FlowLayout.LEFT);        
+        flowLayout7.setAlignment(FlowLayout.LEFT);
         header.setFont(new java.awt.Font("Dialog", 0, 20));
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("Resource type"));
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.EditTypeDialog.class.getResource(
-            "resources/icons/resource48.png")));
+                "resources/icons/resource48.png")));
         jPanel1.setLayout(borderLayout1);
-        dialogTitlePanel.setBackground(Color.WHITE); 
+        dialogTitlePanel.setBackground(Color.WHITE);
         dialogTitlePanel.setLayout(flowLayout7);
         dialogTitlePanel.setBorder(border9);
         okB.setEnabled(false);
@@ -211,7 +196,8 @@ public class EditTypeDialog extends JDialog {
         checkOkEnabled();
     }
 
-    void descField_caretUpdate(CaretEvent e) {}
+    void descField_caretUpdate(CaretEvent e) {
+    }
 
     void checkOkEnabled() {
         okB.setEnabled((extField.getText().length() > 0));
@@ -231,7 +217,7 @@ public class EditTypeDialog extends JDialog {
         UIManager.put("FileChooser.cancelButtonText", Local.getString("Cancel"));
         UIManager.put("FileChooser.cancelButtonToolTipText", Local.getString("Cancel"));
         UIManager.put("FileChooser.acceptAllFileFilterText", Local.getString("All Files") + " (*.*)");
-        
+
         JFileChooser chooser = new JFileChooser();
         chooser.setPreferredSize(new Dimension(550, 375));
         chooser.setFileHidingEnabled(false);
@@ -239,7 +225,7 @@ public class EditTypeDialog extends JDialog {
         //chooser.setAcceptAllFileFilterUsed(true);
         chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
         chooser.setCurrentDirectory(
-            new File(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes").getPath()));
+                new File(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes").getPath()));
         /*if (System.getProperty("os.name").startsWith("Win")) {
             chooser.setFileFilter(new AllFilesFilter(AllFilesFilter.ICO));
             chooser.setCurrentDirectory(new File("C:\\Program Files"));
@@ -249,11 +235,9 @@ public class EditTypeDialog extends JDialog {
         if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
             try {
                 iconLabel.setIcon(new ImageIcon(chooser.getSelectedFile().getPath()));
-           }
-            catch (Exception ex) {
-		    //ex.printStackTrace();
-	    }
-            finally {
+            } catch (Exception ex) {
+                //ex.printStackTrace();
+            } finally {
                 iconPath = chooser.getSelectedFile().getPath();
             }
 
diff --git a/src/net/sf/memoranda/ui/EditorPanel.java b/src/net/sf/memoranda/ui/EditorPanel.java
index 626c452..8b643cf 100755
--- a/src/net/sf/memoranda/ui/EditorPanel.java
+++ b/src/net/sf/memoranda/ui/EditorPanel.java
@@ -1,590 +1,578 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.Point;
-import java.awt.event.ActionEvent;
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStreamReader;
-import java.io.StringReader;
-import java.net.URL;
-import java.text.DateFormat;
-
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JFileChooser;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-import javax.swing.JToolBar;
-import javax.swing.UIManager;
-import javax.swing.text.html.HTMLDocument;
-
+import net.sf.memoranda.CurrentNote;
 import net.sf.memoranda.History;
 import net.sf.memoranda.Note;
 import net.sf.memoranda.date.CurrentDate;
-import net.sf.memoranda.CurrentNote;
 import net.sf.memoranda.ui.htmleditor.HTMLEditor;
-import net.sf.memoranda.util.Util;
-import net.sf.memoranda.util.Context;
-import net.sf.memoranda.util.CurrentStorage;
-import net.sf.memoranda.util.HTMLFileExport;
-import net.sf.memoranda.util.HTMLFileImport;
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.Configuration;
+import net.sf.memoranda.util.*;
+
+import javax.swing.*;
+import javax.swing.text.html.HTMLDocument;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.KeyEvent;
+import java.awt.event.KeyListener;
+import java.io.*;
+import java.text.DateFormat;
 
 /*$Id: EditorPanel.java,v 1.21 2006/06/28 22:58:31 alexeya Exp $*/
 public class EditorPanel extends JPanel {
-	BorderLayout borderLayout1 = new BorderLayout();
+    BorderLayout borderLayout1 = new BorderLayout();
 
-	JPanel jPanel1 = new JPanel();
+    JPanel jPanel1 = new JPanel();
 
-	public HTMLEditor editor = null;
+    public HTMLEditor editor = null;
 
-	JButton importB = new JButton();
+    JButton importB = new JButton();
 
-	JButton exportB = new JButton();
+    JButton exportB = new JButton();
 
-	JButton redoB = new JButton();
+    JButton redoB = new JButton();
 
-	JButton copyB = new JButton();
+    JButton copyB = new JButton();
 
-	JButton historyBackB = new JButton();
+    JButton historyBackB = new JButton();
 
-	JToolBar editorToolBar = new JToolBar();
+    JToolBar editorToolBar = new JToolBar();
 
-	JButton pasteB = new JButton();
+    JButton pasteB = new JButton();
 
-	JButton historyForwardB = new JButton();
+    JButton historyForwardB = new JButton();
 
-	JButton insDateB = new JButton();
+    JButton insDateB = new JButton();
 
-	JButton insTimeB = new JButton();
+    JButton insTimeB = new JButton();
 
-	// JButton printB = new JButton();
-	JButton undoB = new JButton();
+    // JButton printB = new JButton();
+    JButton undoB = new JButton();
 
-	JButton cutB = new JButton();
+    JButton cutB = new JButton();
 
-	BorderLayout borderLayout2 = new BorderLayout();
+    BorderLayout borderLayout2 = new BorderLayout();
 
-	JToolBar titleBar = new JToolBar();
+    JToolBar titleBar = new JToolBar();
 
-	JLabel titleLabel = new JLabel();
+    JLabel titleLabel = new JLabel();
 
-	public JTextField titleField = new JTextField();
+    public JTextField titleField = new JTextField();
 
-	JButton btn_New_Note = new JButton();
+    JButton btn_New_Note = new JButton();
 
-	JButton previewB = new JButton();
+    JButton previewB = new JButton();
 
-	DailyItemsPanel parentPanel = null;
+    DailyItemsPanel parentPanel = null;
 
-	public EditorPanel(DailyItemsPanel parent) {
-		try {
-			parentPanel = parent;
-			jbInit();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
-
-	public Action insertTimeAction = new AbstractAction(Local
-			.getString("Insert current time"), new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class
-					.getResource("resources/icons/time.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			insTimeB_actionPerformed(e);
-		}
-	};
-
-	public Action insertDateAction = new AbstractAction(Local
-			.getString("Insert current date"), new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class
-					.getResource("resources/icons/date.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			insDateB_actionPerformed(e);
-		}
-	};
-
-	/*
-	 * public Action printAction = new AbstractAction( "Print", new
-	 * ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/print.png"))) {
-	 * public void actionPerformed(ActionEvent e) { doPrint(); } };
-	 */
-
-	public Action newAction = new AbstractAction(Local.getString("New note"),
-			new ImageIcon(net.sf.memoranda.ui.AppFrame.class
-					.getResource("resources/icons/filenew.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			btn_New_Note_actionPerformed(e);
-		}
-	};
-
-	public Action exportAction = new AbstractAction(Local
-			.getString("Export note to file"), new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class
-					.getResource("resources/icons/export.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			exportB_actionPerformed(e);
-		}
-	};
-
-	public Action importAction = new AbstractAction(Local
-			.getString("Insert file"), new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class
-					.getResource("resources/icons/import.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			importB_actionPerformed(e);
-		}
-	};
-
-	public Action previewAction = new AbstractAction(Local
-			.getString("Preview note in browser"), new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class
-					.getResource("resources/icons/preview.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			previewB_actionPerformed(e);
-		}
-	};
-
-	void jbInit() throws Exception {
-
-		if (!Configuration.get("DISABLE_L10N").equals("yes"))
-			net.sf.memoranda.ui.htmleditor.util.Local.setMessages(Local
-					.getMessages());
-
-		editor = new HTMLEditor();
-
-		this.setLayout(borderLayout1);
-
-		btn_New_Note.setAction(newAction);
-		btn_New_Note.setMaximumSize(new Dimension(24, 24));
-		btn_New_Note.setMinimumSize(new Dimension(24, 24));
-		btn_New_Note.setPreferredSize(new Dimension(24, 24));
-		btn_New_Note.setRequestFocusEnabled(false);
-		btn_New_Note.setToolTipText(Local.getString("New note"));
-		btn_New_Note.setBorderPainted(false);
-		btn_New_Note.setFocusable(false);
-		btn_New_Note.setText("");
-
-		importB.setAction(importAction);
-		importB.setBorderPainted(false);
-		importB.setFocusable(false);
-		importB.setPreferredSize(new Dimension(24, 24));
-		importB.setRequestFocusEnabled(false);
-		importB.setToolTipText(Local.getString("Insert file"));
-		importB.setMinimumSize(new Dimension(24, 24));
-		importB.setMaximumSize(new Dimension(24, 24));
-		importB.setText("");
-
-		exportB.setAction(exportAction);
-		exportB.setMaximumSize(new Dimension(24, 24));
-		exportB.setMinimumSize(new Dimension(24, 24));
-		exportB.setPreferredSize(new Dimension(24, 24));
-		exportB.setRequestFocusEnabled(false);
-		exportB.setToolTipText(Local.getString("Export note to file"));
-		exportB.setBorderPainted(false);
-		exportB.setFocusable(false);
-		exportB.setText("");
-
-		redoB.setAction(editor.redoAction);
-		redoB.setMaximumSize(new Dimension(24, 24));
-		redoB.setMinimumSize(new Dimension(24, 24));
-		redoB.setPreferredSize(new Dimension(24, 24));
-		redoB.setRequestFocusEnabled(false);
-		redoB.setToolTipText(Local.getString("Redo"));
-		redoB.setBorderPainted(false);
-		redoB.setFocusable(false);
-		redoB.setText("");
-
-		copyB.setAction(editor.copyAction);
-		copyB.setMaximumSize(new Dimension(24, 24));
-		copyB.setMinimumSize(new Dimension(24, 24));
-		copyB.setPreferredSize(new Dimension(24, 24));
-		copyB.setRequestFocusEnabled(false);
-		copyB.setToolTipText(Local.getString("Copy"));
-		copyB.setBorderPainted(false);
-		copyB.setFocusable(false);
-		copyB.setText("");
-
-		historyBackB.setAction(History.historyBackAction);
-		historyBackB.setMaximumSize(new Dimension(24, 24));
-		historyBackB.setMinimumSize(new Dimension(24, 24));
-		historyBackB.setPreferredSize(new Dimension(24, 24));
-		historyBackB.setRequestFocusEnabled(false);
-		historyBackB.setToolTipText(Local.getString("History back"));
-		historyBackB.setBorderPainted(false);
-		historyBackB.setFocusable(false);
-		historyBackB.setText("");
-
-		historyForwardB.setAction(History.historyForwardAction);
-		historyForwardB.setBorderPainted(false);
-		historyForwardB.setFocusable(false);
-		historyForwardB.setPreferredSize(new Dimension(24, 24));
-		historyForwardB.setRequestFocusEnabled(false);
-		historyForwardB.setToolTipText(Local.getString("History forward"));
-		historyForwardB.setMinimumSize(new Dimension(24, 24));
-		historyForwardB.setMaximumSize(new Dimension(24, 24));
-		historyForwardB.setText("");
-
-		pasteB.setAction(editor.pasteAction);
-		pasteB.setMaximumSize(new Dimension(24, 24));
-		pasteB.setMinimumSize(new Dimension(24, 24));
-		pasteB.setPreferredSize(new Dimension(24, 24));
-		pasteB.setRequestFocusEnabled(false);
-		pasteB.setToolTipText(Local.getString("paste"));
-		pasteB.setBorderPainted(false);
-		pasteB.setFocusable(false);
-		pasteB.setText("");
-
-		insDateB.setAction(insertDateAction);
-		insDateB.setBorderPainted(false);
-		insDateB.setFocusable(false);
-		insDateB.setPreferredSize(new Dimension(24, 24));
-		insDateB.setRequestFocusEnabled(false);
-		insDateB.setToolTipText(Local.getString("Insert current date"));
-		insDateB.setMinimumSize(new Dimension(24, 24));
-		insDateB.setMaximumSize(new Dimension(24, 24));
-		insDateB.setText("");
-
-		insTimeB.setAction(insertTimeAction);
-		insTimeB.setMaximumSize(new Dimension(24, 24));
-		insTimeB.setMinimumSize(new Dimension(24, 24));
-		insTimeB.setPreferredSize(new Dimension(24, 24));
-		insTimeB.setRequestFocusEnabled(false);
-		insTimeB.setToolTipText(Local.getString("Insert current time"));
-		insTimeB.setBorderPainted(false);
-		insTimeB.setFocusable(false);
-		insTimeB.setText("");
-
-		undoB.setAction(editor.undoAction);
-		undoB.setBorderPainted(false);
-		undoB.setFocusable(false);
-		undoB.setPreferredSize(new Dimension(24, 24));
-		undoB.setRequestFocusEnabled(false);
-		undoB.setToolTipText(Local.getString("Undo"));
-		undoB.setMinimumSize(new Dimension(24, 24));
-		undoB.setMaximumSize(new Dimension(24, 24));
-		undoB.setText("");
-
-		cutB.setAction(editor.cutAction);
-		cutB.setBorderPainted(false);
-		cutB.setFocusable(false);
-		cutB.setPreferredSize(new Dimension(24, 24));
-		cutB.setRequestFocusEnabled(false);
-		cutB.setToolTipText(Local.getString("Cut"));
-		cutB.setMinimumSize(new Dimension(24, 24));
-		cutB.setMaximumSize(new Dimension(24, 24));
-		cutB.setText("");
-
-		previewB.setAction(previewAction);
-		previewB.setBorderPainted(false);
-		previewB.setFocusable(false);
-		previewB.setPreferredSize(new Dimension(24, 24));
-		previewB.setRequestFocusEnabled(false);
-		previewB.setToolTipText(previewAction.getValue(Action.NAME).toString());
-		previewB.setMinimumSize(new Dimension(24, 24));
-		previewB.setMaximumSize(new Dimension(24, 24));
-		previewB.setText("");
-
-		/*
-		 * printB.setAction(printAction); printB.setMaximumSize(new
-		 * Dimension(24, 24)); printB.setMinimumSize(new Dimension(24, 24));
-		 * printB.setPreferredSize(new Dimension(24, 24));
-		 * printB.setRequestFocusEnabled(false);
-		 * printB.setToolTipText(Local.getString("Print"));
-		 * printB.setBorderPainted(false); printB.setFocusable(false);
-		 * printB.setText("");
-		 */
-
-		jPanel1.setLayout(borderLayout2);
-		titleLabel.setFont(new java.awt.Font("Dialog", 1, 10));
-		titleLabel.setText(Local.getString("Title") + "  ");
-		titleField.setText("");
-		editorToolBar.setFloatable(false);
-		editor.editToolbar.setFloatable(false);
-		titleBar.setFloatable(false);
-		this.add(jPanel1, BorderLayout.CENTER);
-		editorToolBar.add(btn_New_Note, null);
-		editorToolBar.addSeparator(new Dimension(8, 24));
-		editorToolBar.add(historyBackB, null);
-		editorToolBar.add(historyForwardB, null);
-		editorToolBar.addSeparator(new Dimension(8, 24));
-		editorToolBar.add(undoB, null);
-		editorToolBar.add(redoB, null);
-		editorToolBar.addSeparator(new Dimension(8, 24));
-		editorToolBar.add(cutB, null);
-		editorToolBar.add(copyB, null);
-		editorToolBar.add(pasteB, null);
-		editorToolBar.addSeparator(new Dimension(8, 24));
-		editorToolBar.add(insDateB, null);
-		editorToolBar.add(insTimeB, null);
-		editorToolBar.addSeparator(new Dimension(8, 24));
-		editorToolBar.add(importB, null);
-		editorToolBar.add(exportB, null);
-		editorToolBar.addSeparator(new Dimension(8, 24));
-		editorToolBar.add(previewB, null);
-		// editorToolBar.add(printB, null);
-		jPanel1.add(editorToolBar, BorderLayout.NORTH);
-		jPanel1.add(editor, BorderLayout.CENTER);
-		this.add(titleBar, BorderLayout.NORTH);
-		titleBar.add(titleLabel, null);
-		titleBar.add(titleField, null);
-		initCSS();
-		editor.editor.setAntiAlias(Configuration.get("ANTIALIAS_TEXT").toString().equalsIgnoreCase("yes"));
-		// editor.editor.enableInputMethods(false);
-		// editor.editor.getInputContext().selectInputMethod(Locale.getDefault());
-		titleField.addKeyListener(new KeyListener() {
-
-			public void keyPressed(KeyEvent ke) {
-				if (ke.getKeyCode() == KeyEvent.VK_ENTER)
-					editor.editor.requestFocus();
-			}
-
-			public void keyReleased(KeyEvent arg0) {
-			}
-
-			public void keyTyped(KeyEvent arg0) {
-			}
-		});
-	}
-
-	public void initCSS() {
-		BufferedReader br = new BufferedReader(new InputStreamReader(
-				net.sf.memoranda.ui.EditorPanel.class
-						.getResourceAsStream("resources/css/default.css")));
-		String css = "";
-		try {
-			String s = br.readLine();
-			while (s != null) {
-				css = css + s + "\n";
-				s = br.readLine();
-			}
-		} catch (IOException ex) {
-			ex.printStackTrace();
-		}
-		String NORMAL_FONT = Configuration.get("NORMAL_FONT").toString();
-		String HEADER_FONT = Configuration.get("HEADER_FONT").toString();
-		String MONO_FONT = Configuration.get("MONO_FONT").toString();
-		String BASE_FONT_SIZE = Configuration.get("BASE_FONT_SIZE").toString();
-		css = css.replaceAll("%NORMAL_FONT%", NORMAL_FONT.length() > 0 ? "\""+NORMAL_FONT+"\""
-				: "serif");
-		css = css.replaceAll("%HEADER_FONT%", HEADER_FONT.length() > 0 ? "\""+HEADER_FONT+"\""
-				: "sans-serif");
-		css = css.replaceAll("%MONO_FONT%", MONO_FONT.length() > 0 ? "\""+MONO_FONT+"\""
-				: "monospaced");
-		css = css.replaceAll("%BASE_FONT_SIZE%",
-				BASE_FONT_SIZE.length() > 0 ? BASE_FONT_SIZE : "16");		
-		editor.setStyleSheet(new StringReader(css));
-		String usercss = (String) Configuration.get("USER_CSS");
-		if (usercss.length() > 0)
-			try {
-				// DEBUG
-				System.out.println("***[DEBUG] User css used: " + usercss);
-				editor.setStyleSheet(new InputStreamReader(
-						new java.io.FileInputStream(usercss)));
-			} catch (Exception ex) {
-				System.out.println("***[DEBUG] Failed to open: " + usercss);
-				ex.printStackTrace();
-			}
-
-	}
-
-	void insDateB_actionPerformed(ActionEvent e) {
-		editor.editor.replaceSelection(CurrentDate.get().getFullDateString());
-	}
-
-	void insTimeB_actionPerformed(ActionEvent e) {
-		java.util.Date d = new java.util.Date();
-		editor.editor.replaceSelection(DateFormat.getTimeInstance(
-				DateFormat.SHORT, Local.getCurrentLocale()).format(d));
-	}
-
-	void exportB_actionPerformed(ActionEvent e) {
-		// Fix until Sun's JVM supports more locales...
-		UIManager.put("FileChooser.lookInLabelText", Local
-				.getString("Save in:"));
-		UIManager.put("FileChooser.upFolderToolTipText", Local
-				.getString("Up One Level"));
-		UIManager.put("FileChooser.newFolderToolTipText", Local
-				.getString("Create New Folder"));
-		UIManager.put("FileChooser.listViewButtonToolTipText", Local
-				.getString("List"));
-		UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
-				.getString("Details"));
-		UIManager.put("FileChooser.fileNameLabelText", Local
-				.getString("File Name:"));
-		UIManager.put("FileChooser.filesOfTypeLabelText", Local
-				.getString("Files of Type:"));
-		UIManager.put("FileChooser.saveButtonText", Local.getString("Save"));
-		UIManager.put("FileChooser.saveButtonToolTipText", Local
-				.getString("Save selected file"));
-		UIManager
-				.put("FileChooser.cancelButtonText", Local.getString("Cancel"));
-		UIManager.put("FileChooser.cancelButtonToolTipText", Local
-				.getString("Cancel"));
-
-		JFileChooser chooser = new JFileChooser();
-		chooser.setFileHidingEnabled(false);
-		chooser.setDialogTitle(Local.getString("Export note"));
-		chooser.setAcceptAllFileFilterUsed(false);
-		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
-		chooser
-				.addChoosableFileFilter(new AllFilesFilter(AllFilesFilter.XHTML));
-		chooser.addChoosableFileFilter(new AllFilesFilter(AllFilesFilter.HTML));
-		// chooser.addChoosableFileFilter(new
-		// AllFilesFilter(AllFilesFilter.RTF));
-		String lastSel = (String) Context.get("LAST_SELECTED_EXPORT_FILE");
-		if (lastSel != null)
-			chooser.setCurrentDirectory(new File(lastSel));
-
-		FileExportDialog dlg = new FileExportDialog(App.getFrame(), Local
-				.getString("Export note"), chooser);
-		String enc = (String) Context.get("EXPORT_FILE_ENCODING");
-		if (enc != null)
-			dlg.encCB.setSelectedItem(enc);
-		String templ = (String) Context.get("EXPORT_TEMPLATE");
-		if (templ != null)
-			dlg.templF.setText(templ);
-		String xhtml = (String) Context.get("EXPORT_XHTML");
-		if ((xhtml != null) && (xhtml.equalsIgnoreCase("YES")))
-			dlg.xhtmlChB.setSelected(true);
-		String num = (String) Context.get("EXPORT_NUMENT");
-		if ((num != null) && (num.equalsIgnoreCase("YES")))
-			dlg.numentChB.setSelected(true);
-		Dimension dlgSize = new Dimension(550, 475);
-		dlg.setSize(dlgSize);
-		Dimension frmSize = App.getFrame().getSize();
-		Point loc = App.getFrame().getLocation();
-		dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x,
-				(frmSize.height - dlgSize.height) / 2 + loc.y);
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-
-		Context.put("LAST_SELECTED_EXPORT_FILE", chooser.getSelectedFile()
-				.getPath());
-		Context.put("EXPORT_FILE_ENCODING", dlg.encCB.getSelectedItem());
-		Context.put("EXPORT_NUMENT", dlg.numentChB.isSelected() ? "YES" : "NO");
-		Context.put("EXPORT_XHTML", dlg.xhtmlChB.isSelected() ? "YES" : "NO");
-		String template = null;
-		if (dlg.usetemplChB.isSelected() && dlg.templF.getText().length() > 0) {
-			template = dlg.templF.getText();
-			Context.put("EXPORT_TEMPLATE", template);
-		}
-		/*
-		 * if (chooser.getFileFilter().getDescription().equals("Rich Text
-		 * Format")) new RTFFileExport(chooser.getSelectedFile(),
-		 * editor.document); else
-		 */
-		int ei = dlg.encCB.getSelectedIndex();
-		enc = null;
-		if (ei == 1)
-			enc = "UTF-8";
-		File f = chooser.getSelectedFile();
-		new HTMLFileExport(f, editor.document, CurrentNote.get(), enc,
-				dlg.numentChB.isSelected(), template, dlg.xhtmlChB.isSelected());
-	}
-
-	String initialTitle = "";
-
-	public void setDocument(Note note) {
-		// Note note = CurrentProject.getNoteList().getActiveNote();
-		// try {
-		// this.editor.editor.setPage(CurrentStorage.get().getNoteURL(note));
-		editor.document = (HTMLDocument) CurrentStorage.get().openNote(note);
-		editor.initEditor();
-		if (note != null)
-			titleField.setText(note.getTitle());
-		else
-			titleField.setText("");
-		initialTitle = titleField.getText();
-		/*
-		 * } catch (Exception ex) { new ExceptionDialog(ex); }
-		 */
-		/*
-		 * Document doc = CurrentStorage.get().openNote(note); try {
-		 * this.editor.editor.setText(doc.getText(0, doc.getLength())); } catch
-		 * (Exception ex){ ex.printStackTrace(); }
-		 */
-		// .setDocument(CurrentStorage.get().openNote(note));
-	}
-
-	public javax.swing.text.Document getDocument() {
-		return this.editor.document;
-	}
-
-	public boolean isDocumentChanged() {
-		return editor.isDocumentChanged()
-				|| !titleField.getText().equals(initialTitle);
-	}
-
-	void importB_actionPerformed(ActionEvent e) {
-		// Fix until Sun's JVM supports more locales...
-		UIManager.put("FileChooser.lookInLabelText", Local
-				.getString("Look in:"));
-		UIManager.put("FileChooser.upFolderToolTipText", Local
-				.getString("Up One Level"));
-		UIManager.put("FileChooser.newFolderToolTipText", Local
-				.getString("Create New Folder"));
-		UIManager.put("FileChooser.listViewButtonToolTipText", Local
-				.getString("List"));
-		UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
-				.getString("Details"));
-		UIManager.put("FileChooser.fileNameLabelText", Local
-				.getString("File Name:"));
-		UIManager.put("FileChooser.filesOfTypeLabelText", Local
-				.getString("Files of Type:"));
-		UIManager.put("FileChooser.openButtonText", Local.getString("Open"));
-		UIManager.put("FileChooser.openButtonToolTipText", Local
-				.getString("Open selected file"));
-		UIManager
-				.put("FileChooser.cancelButtonText", Local.getString("Cancel"));
-		UIManager.put("FileChooser.cancelButtonToolTipText", Local
-				.getString("Cancel"));
-
-		JFileChooser chooser = new JFileChooser();
-		chooser.setFileHidingEnabled(false);
-		chooser.setDialogTitle(Local.getString("Insert file"));
-		chooser.setAcceptAllFileFilterUsed(false);
-		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
-		chooser.addChoosableFileFilter(new AllFilesFilter(AllFilesFilter.HTML));
-		chooser.setPreferredSize(new Dimension(550, 375));
-		String lastSel = (String) Context.get("LAST_SELECTED_IMPORT_FILE");
-		if (lastSel != null)
-			chooser.setCurrentDirectory(new java.io.File(lastSel));
-		if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
-			return;
-
-		Context.put("LAST_SELECTED_IMPORT_FILE", chooser.getSelectedFile()
-				.getPath());
-
-		File f = chooser.getSelectedFile();
-		new HTMLFileImport(f, editor);
-	}
-
-	void btn_New_Note_actionPerformed(ActionEvent e) {
-		CurrentNote.set(null, true);
-		setDocument(null);
-		this.titleField.requestFocus();
-	}
-
-	void previewB_actionPerformed(ActionEvent e) {
-		File f;
-		try {
-			f = Util.getTempFile();
-			new HTMLFileExport(f, editor.document, CurrentNote.get(), "UTF-8",
-					false, null, false);
-			Util.runBrowser("file:" + f.getAbsolutePath());
-		} catch (IOException ioe) {
-			new ExceptionDialog(ioe, "Cannot create temporary file", null);
-		}
-	}
+    public EditorPanel(DailyItemsPanel parent) {
+        try {
+            parentPanel = parent;
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
+
+    public Action insertTimeAction = new AbstractAction(Local
+            .getString("Insert current time"), new ImageIcon(
+            net.sf.memoranda.ui.AppFrame.class
+                    .getResource("resources/icons/time.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            insTimeB_actionPerformed(e);
+        }
+    };
+
+    public Action insertDateAction = new AbstractAction(Local
+            .getString("Insert current date"), new ImageIcon(
+            net.sf.memoranda.ui.AppFrame.class
+                    .getResource("resources/icons/date.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            insDateB_actionPerformed(e);
+        }
+    };
+
+    /*
+     * public Action printAction = new AbstractAction( "Print", new
+     * ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/print.png"))) {
+     * public void actionPerformed(ActionEvent e) { doPrint(); } };
+     */
+
+    public Action newAction = new AbstractAction(Local.getString("New note"),
+            new ImageIcon(net.sf.memoranda.ui.AppFrame.class
+                    .getResource("resources/icons/filenew.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            btn_New_Note_actionPerformed(e);
+        }
+    };
+
+    public Action exportAction = new AbstractAction(Local
+            .getString("Export note to file"), new ImageIcon(
+            net.sf.memoranda.ui.AppFrame.class
+                    .getResource("resources/icons/export.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            exportB_actionPerformed(e);
+        }
+    };
+
+    public Action importAction = new AbstractAction(Local
+            .getString("Insert file"), new ImageIcon(
+            net.sf.memoranda.ui.AppFrame.class
+                    .getResource("resources/icons/import.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            importB_actionPerformed(e);
+        }
+    };
+
+    public Action previewAction = new AbstractAction(Local
+            .getString("Preview note in browser"), new ImageIcon(
+            net.sf.memoranda.ui.AppFrame.class
+                    .getResource("resources/icons/preview.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            previewB_actionPerformed(e);
+        }
+    };
+
+    void jbInit() throws Exception {
+
+        if (!Configuration.get("DISABLE_L10N").equals("yes")) {
+            net.sf.memoranda.ui.htmleditor.util.Local.setMessages(Local
+                    .getMessages());
+        }
+
+        editor = new HTMLEditor();
+
+        this.setLayout(borderLayout1);
+
+        btn_New_Note.setAction(newAction);
+        btn_New_Note.setMaximumSize(new Dimension(24, 24));
+        btn_New_Note.setMinimumSize(new Dimension(24, 24));
+        btn_New_Note.setPreferredSize(new Dimension(24, 24));
+        btn_New_Note.setRequestFocusEnabled(false);
+        btn_New_Note.setToolTipText(Local.getString("New note"));
+        btn_New_Note.setBorderPainted(false);
+        btn_New_Note.setFocusable(false);
+        btn_New_Note.setText("");
+
+        importB.setAction(importAction);
+        importB.setBorderPainted(false);
+        importB.setFocusable(false);
+        importB.setPreferredSize(new Dimension(24, 24));
+        importB.setRequestFocusEnabled(false);
+        importB.setToolTipText(Local.getString("Insert file"));
+        importB.setMinimumSize(new Dimension(24, 24));
+        importB.setMaximumSize(new Dimension(24, 24));
+        importB.setText("");
+
+        exportB.setAction(exportAction);
+        exportB.setMaximumSize(new Dimension(24, 24));
+        exportB.setMinimumSize(new Dimension(24, 24));
+        exportB.setPreferredSize(new Dimension(24, 24));
+        exportB.setRequestFocusEnabled(false);
+        exportB.setToolTipText(Local.getString("Export note to file"));
+        exportB.setBorderPainted(false);
+        exportB.setFocusable(false);
+        exportB.setText("");
+
+        redoB.setAction(editor.redoAction);
+        redoB.setMaximumSize(new Dimension(24, 24));
+        redoB.setMinimumSize(new Dimension(24, 24));
+        redoB.setPreferredSize(new Dimension(24, 24));
+        redoB.setRequestFocusEnabled(false);
+        redoB.setToolTipText(Local.getString("Redo"));
+        redoB.setBorderPainted(false);
+        redoB.setFocusable(false);
+        redoB.setText("");
+
+        copyB.setAction(editor.copyAction);
+        copyB.setMaximumSize(new Dimension(24, 24));
+        copyB.setMinimumSize(new Dimension(24, 24));
+        copyB.setPreferredSize(new Dimension(24, 24));
+        copyB.setRequestFocusEnabled(false);
+        copyB.setToolTipText(Local.getString("Copy"));
+        copyB.setBorderPainted(false);
+        copyB.setFocusable(false);
+        copyB.setText("");
+
+        historyBackB.setAction(History.historyBackAction);
+        historyBackB.setMaximumSize(new Dimension(24, 24));
+        historyBackB.setMinimumSize(new Dimension(24, 24));
+        historyBackB.setPreferredSize(new Dimension(24, 24));
+        historyBackB.setRequestFocusEnabled(false);
+        historyBackB.setToolTipText(Local.getString("History back"));
+        historyBackB.setBorderPainted(false);
+        historyBackB.setFocusable(false);
+        historyBackB.setText("");
+
+        historyForwardB.setAction(History.historyForwardAction);
+        historyForwardB.setBorderPainted(false);
+        historyForwardB.setFocusable(false);
+        historyForwardB.setPreferredSize(new Dimension(24, 24));
+        historyForwardB.setRequestFocusEnabled(false);
+        historyForwardB.setToolTipText(Local.getString("History forward"));
+        historyForwardB.setMinimumSize(new Dimension(24, 24));
+        historyForwardB.setMaximumSize(new Dimension(24, 24));
+        historyForwardB.setText("");
+
+        pasteB.setAction(editor.pasteAction);
+        pasteB.setMaximumSize(new Dimension(24, 24));
+        pasteB.setMinimumSize(new Dimension(24, 24));
+        pasteB.setPreferredSize(new Dimension(24, 24));
+        pasteB.setRequestFocusEnabled(false);
+        pasteB.setToolTipText(Local.getString("paste"));
+        pasteB.setBorderPainted(false);
+        pasteB.setFocusable(false);
+        pasteB.setText("");
+
+        insDateB.setAction(insertDateAction);
+        insDateB.setBorderPainted(false);
+        insDateB.setFocusable(false);
+        insDateB.setPreferredSize(new Dimension(24, 24));
+        insDateB.setRequestFocusEnabled(false);
+        insDateB.setToolTipText(Local.getString("Insert current date"));
+        insDateB.setMinimumSize(new Dimension(24, 24));
+        insDateB.setMaximumSize(new Dimension(24, 24));
+        insDateB.setText("");
+
+        insTimeB.setAction(insertTimeAction);
+        insTimeB.setMaximumSize(new Dimension(24, 24));
+        insTimeB.setMinimumSize(new Dimension(24, 24));
+        insTimeB.setPreferredSize(new Dimension(24, 24));
+        insTimeB.setRequestFocusEnabled(false);
+        insTimeB.setToolTipText(Local.getString("Insert current time"));
+        insTimeB.setBorderPainted(false);
+        insTimeB.setFocusable(false);
+        insTimeB.setText("");
+
+        undoB.setAction(editor.undoAction);
+        undoB.setBorderPainted(false);
+        undoB.setFocusable(false);
+        undoB.setPreferredSize(new Dimension(24, 24));
+        undoB.setRequestFocusEnabled(false);
+        undoB.setToolTipText(Local.getString("Undo"));
+        undoB.setMinimumSize(new Dimension(24, 24));
+        undoB.setMaximumSize(new Dimension(24, 24));
+        undoB.setText("");
+
+        cutB.setAction(editor.cutAction);
+        cutB.setBorderPainted(false);
+        cutB.setFocusable(false);
+        cutB.setPreferredSize(new Dimension(24, 24));
+        cutB.setRequestFocusEnabled(false);
+        cutB.setToolTipText(Local.getString("Cut"));
+        cutB.setMinimumSize(new Dimension(24, 24));
+        cutB.setMaximumSize(new Dimension(24, 24));
+        cutB.setText("");
+
+        previewB.setAction(previewAction);
+        previewB.setBorderPainted(false);
+        previewB.setFocusable(false);
+        previewB.setPreferredSize(new Dimension(24, 24));
+        previewB.setRequestFocusEnabled(false);
+        previewB.setToolTipText(previewAction.getValue(Action.NAME).toString());
+        previewB.setMinimumSize(new Dimension(24, 24));
+        previewB.setMaximumSize(new Dimension(24, 24));
+        previewB.setText("");
+
+        /*
+         * printB.setAction(printAction); printB.setMaximumSize(new
+         * Dimension(24, 24)); printB.setMinimumSize(new Dimension(24, 24));
+         * printB.setPreferredSize(new Dimension(24, 24));
+         * printB.setRequestFocusEnabled(false);
+         * printB.setToolTipText(Local.getString("Print"));
+         * printB.setBorderPainted(false); printB.setFocusable(false);
+         * printB.setText("");
+         */
+
+        jPanel1.setLayout(borderLayout2);
+        titleLabel.setFont(new java.awt.Font("Dialog", 1, 10));
+        titleLabel.setText(Local.getString("Title") + "  ");
+        titleField.setText("");
+        editorToolBar.setFloatable(false);
+        editor.editToolbar.setFloatable(false);
+        titleBar.setFloatable(false);
+        this.add(jPanel1, BorderLayout.CENTER);
+        editorToolBar.add(btn_New_Note, null);
+        editorToolBar.addSeparator(new Dimension(8, 24));
+        editorToolBar.add(historyBackB, null);
+        editorToolBar.add(historyForwardB, null);
+        editorToolBar.addSeparator(new Dimension(8, 24));
+        editorToolBar.add(undoB, null);
+        editorToolBar.add(redoB, null);
+        editorToolBar.addSeparator(new Dimension(8, 24));
+        editorToolBar.add(cutB, null);
+        editorToolBar.add(copyB, null);
+        editorToolBar.add(pasteB, null);
+        editorToolBar.addSeparator(new Dimension(8, 24));
+        editorToolBar.add(insDateB, null);
+        editorToolBar.add(insTimeB, null);
+        editorToolBar.addSeparator(new Dimension(8, 24));
+        editorToolBar.add(importB, null);
+        editorToolBar.add(exportB, null);
+        editorToolBar.addSeparator(new Dimension(8, 24));
+        editorToolBar.add(previewB, null);
+        // editorToolBar.add(printB, null);
+        jPanel1.add(editorToolBar, BorderLayout.NORTH);
+        jPanel1.add(editor, BorderLayout.CENTER);
+        this.add(titleBar, BorderLayout.NORTH);
+        titleBar.add(titleLabel, null);
+        titleBar.add(titleField, null);
+        initCSS();
+        editor.editor.setAntiAlias(Configuration.get("ANTIALIAS_TEXT").toString().equalsIgnoreCase("yes"));
+        // editor.editor.enableInputMethods(false);
+        // editor.editor.getInputContext().selectInputMethod(Locale.getDefault());
+        titleField.addKeyListener(new KeyListener() {
+
+            public void keyPressed(KeyEvent ke) {
+                if (ke.getKeyCode() == KeyEvent.VK_ENTER) {
+                    editor.editor.requestFocus();
+                }
+            }
+
+            public void keyReleased(KeyEvent arg0) {
+            }
+
+            public void keyTyped(KeyEvent arg0) {
+            }
+        });
+    }
+
+    public void initCSS() {
+        BufferedReader br = new BufferedReader(new InputStreamReader(
+                net.sf.memoranda.ui.EditorPanel.class
+                        .getResourceAsStream("resources/css/default.css")));
+        String css = "";
+        try {
+            String s = br.readLine();
+            while (s != null) {
+                css = css + s + "\n";
+                s = br.readLine();
+            }
+        } catch (IOException ex) {
+            ex.printStackTrace();
+        }
+        String NORMAL_FONT = Configuration.get("NORMAL_FONT").toString();
+        String HEADER_FONT = Configuration.get("HEADER_FONT").toString();
+        String MONO_FONT = Configuration.get("MONO_FONT").toString();
+        String BASE_FONT_SIZE = Configuration.get("BASE_FONT_SIZE").toString();
+        css = css.replaceAll("%NORMAL_FONT%", NORMAL_FONT.length() > 0 ? "\"" + NORMAL_FONT + "\""
+                : "serif");
+        css = css.replaceAll("%HEADER_FONT%", HEADER_FONT.length() > 0 ? "\"" + HEADER_FONT + "\""
+                : "sans-serif");
+        css = css.replaceAll("%MONO_FONT%", MONO_FONT.length() > 0 ? "\"" + MONO_FONT + "\""
+                : "monospaced");
+        css = css.replaceAll("%BASE_FONT_SIZE%",
+                BASE_FONT_SIZE.length() > 0 ? BASE_FONT_SIZE : "16");
+        editor.setStyleSheet(new StringReader(css));
+        String usercss = (String) Configuration.get("USER_CSS");
+        if (usercss.length() > 0) {
+            try {
+                // DEBUG
+                System.out.println("***[DEBUG] User css used: " + usercss);
+                editor.setStyleSheet(new InputStreamReader(
+                        new java.io.FileInputStream(usercss)));
+            } catch (Exception ex) {
+                System.out.println("***[DEBUG] Failed to open: " + usercss);
+                ex.printStackTrace();
+            }
+        }
+
+    }
+
+    void insDateB_actionPerformed(ActionEvent e) {
+        editor.editor.replaceSelection(CurrentDate.get().getFullDateString());
+    }
+
+    void insTimeB_actionPerformed(ActionEvent e) {
+        java.util.Date d = new java.util.Date();
+        editor.editor.replaceSelection(DateFormat.getTimeInstance(
+                DateFormat.SHORT, Local.getCurrentLocale()).format(d));
+    }
+
+    void exportB_actionPerformed(ActionEvent e) {
+        // Fix until Sun's JVM supports more locales...
+        UIManager.put("FileChooser.lookInLabelText", Local
+                .getString("Save in:"));
+        UIManager.put("FileChooser.upFolderToolTipText", Local
+                .getString("Up One Level"));
+        UIManager.put("FileChooser.newFolderToolTipText", Local
+                .getString("Create New Folder"));
+        UIManager.put("FileChooser.listViewButtonToolTipText", Local
+                .getString("List"));
+        UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
+                .getString("Details"));
+        UIManager.put("FileChooser.fileNameLabelText", Local
+                .getString("File Name:"));
+        UIManager.put("FileChooser.filesOfTypeLabelText", Local
+                .getString("Files of Type:"));
+        UIManager.put("FileChooser.saveButtonText", Local.getString("Save"));
+        UIManager.put("FileChooser.saveButtonToolTipText", Local
+                .getString("Save selected file"));
+        UIManager
+                .put("FileChooser.cancelButtonText", Local.getString("Cancel"));
+        UIManager.put("FileChooser.cancelButtonToolTipText", Local
+                .getString("Cancel"));
+
+        JFileChooser chooser = new JFileChooser();
+        chooser.setFileHidingEnabled(false);
+        chooser.setDialogTitle(Local.getString("Export note"));
+        chooser.setAcceptAllFileFilterUsed(false);
+        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
+        chooser
+                .addChoosableFileFilter(new AllFilesFilter(AllFilesFilter.XHTML));
+        chooser.addChoosableFileFilter(new AllFilesFilter(AllFilesFilter.HTML));
+        // chooser.addChoosableFileFilter(new
+        // AllFilesFilter(AllFilesFilter.RTF));
+        String lastSel = (String) Context.get("LAST_SELECTED_EXPORT_FILE");
+        if (lastSel != null) {
+            chooser.setCurrentDirectory(new File(lastSel));
+        }
+
+        FileExportDialog dlg = new FileExportDialog(App.getFrame(), Local
+                .getString("Export note"), chooser);
+        String enc = (String) Context.get("EXPORT_FILE_ENCODING");
+        if (enc != null) {
+            dlg.encCB.setSelectedItem(enc);
+        }
+        String templ = (String) Context.get("EXPORT_TEMPLATE");
+        if (templ != null) {
+            dlg.templF.setText(templ);
+        }
+        String xhtml = (String) Context.get("EXPORT_XHTML");
+        if ((xhtml != null) && (xhtml.equalsIgnoreCase("YES"))) {
+            dlg.xhtmlChB.setSelected(true);
+        }
+        String num = (String) Context.get("EXPORT_NUMENT");
+        if ((num != null) && (num.equalsIgnoreCase("YES"))) {
+            dlg.numentChB.setSelected(true);
+        }
+        Dimension dlgSize = new Dimension(550, 475);
+        dlg.setSize(dlgSize);
+        Dimension frmSize = App.getFrame().getSize();
+        Point loc = App.getFrame().getLocation();
+        dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+
+        Context.put("LAST_SELECTED_EXPORT_FILE", chooser.getSelectedFile()
+                .getPath());
+        Context.put("EXPORT_FILE_ENCODING", dlg.encCB.getSelectedItem());
+        Context.put("EXPORT_NUMENT", dlg.numentChB.isSelected() ? "YES" : "NO");
+        Context.put("EXPORT_XHTML", dlg.xhtmlChB.isSelected() ? "YES" : "NO");
+        String template = null;
+        if (dlg.usetemplChB.isSelected() && dlg.templF.getText().length() > 0) {
+            template = dlg.templF.getText();
+            Context.put("EXPORT_TEMPLATE", template);
+        }
+        /*
+         * if (chooser.getFileFilter().getDescription().equals("Rich Text
+         * Format")) new RTFFileExport(chooser.getSelectedFile(),
+         * editor.document); else
+         */
+        int ei = dlg.encCB.getSelectedIndex();
+        enc = null;
+        if (ei == 1) {
+            enc = "UTF-8";
+        }
+        File f = chooser.getSelectedFile();
+        new HTMLFileExport(f, editor.document, CurrentNote.get(), enc,
+                dlg.numentChB.isSelected(), template, dlg.xhtmlChB.isSelected());
+    }
+
+    String initialTitle = "";
+
+    public void setDocument(Note note) {
+        // Note note = CurrentProject.getNoteList().getActiveNote();
+        // try {
+        // this.editor.editor.setPage(CurrentStorage.get().getNoteURL(note));
+        editor.document = (HTMLDocument) CurrentStorage.get().openNote(note);
+        editor.initEditor();
+        if (note != null) {
+            titleField.setText(note.getTitle());
+        } else {
+            titleField.setText("");
+        }
+        initialTitle = titleField.getText();
+        /*
+         * } catch (Exception ex) { new ExceptionDialog(ex); }
+         * Document doc = CurrentStorage.get().openNote(note); try {
+         * this.editor.editor.setText(doc.getText(0, doc.getLength())); } catch
+         * (Exception ex){ ex.printStackTrace(); }
+         * .setDocument(CurrentStorage.get().openNote(note));
+         */
+    }
+
+    public javax.swing.text.Document getDocument() {
+        return this.editor.document;
+    }
+
+    public boolean isDocumentChanged() {
+        return editor.isDocumentChanged()
+                || !titleField.getText().equals(initialTitle);
+    }
+
+    void importB_actionPerformed(ActionEvent e) {
+        // Fix until Sun's JVM supports more locales...
+        UIManager.put("FileChooser.lookInLabelText", Local
+                .getString("Look in:"));
+        UIManager.put("FileChooser.upFolderToolTipText", Local
+                .getString("Up One Level"));
+        UIManager.put("FileChooser.newFolderToolTipText", Local
+                .getString("Create New Folder"));
+        UIManager.put("FileChooser.listViewButtonToolTipText", Local
+                .getString("List"));
+        UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
+                .getString("Details"));
+        UIManager.put("FileChooser.fileNameLabelText", Local
+                .getString("File Name:"));
+        UIManager.put("FileChooser.filesOfTypeLabelText", Local
+                .getString("Files of Type:"));
+        UIManager.put("FileChooser.openButtonText", Local.getString("Open"));
+        UIManager.put("FileChooser.openButtonToolTipText", Local
+                .getString("Open selected file"));
+        UIManager
+                .put("FileChooser.cancelButtonText", Local.getString("Cancel"));
+        UIManager.put("FileChooser.cancelButtonToolTipText", Local
+                .getString("Cancel"));
+
+        JFileChooser chooser = new JFileChooser();
+        chooser.setFileHidingEnabled(false);
+        chooser.setDialogTitle(Local.getString("Insert file"));
+        chooser.setAcceptAllFileFilterUsed(false);
+        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
+        chooser.addChoosableFileFilter(new AllFilesFilter(AllFilesFilter.HTML));
+        chooser.setPreferredSize(new Dimension(550, 375));
+        String lastSel = (String) Context.get("LAST_SELECTED_IMPORT_FILE");
+        if (lastSel != null) {
+            chooser.setCurrentDirectory(new java.io.File(lastSel));
+        }
+        if (chooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
+            return;
+        }
+
+        Context.put("LAST_SELECTED_IMPORT_FILE", chooser.getSelectedFile()
+                .getPath());
+
+        File f = chooser.getSelectedFile();
+        new HTMLFileImport(f, editor);
+    }
+
+    void btn_New_Note_actionPerformed(ActionEvent e) {
+        CurrentNote.set(null, true);
+        setDocument(null);
+        this.titleField.requestFocus();
+    }
+
+    void previewB_actionPerformed(ActionEvent e) {
+        File f;
+        try {
+            f = Util.getTempFile();
+            new HTMLFileExport(f, editor.document, CurrentNote.get(), "UTF-8",
+                    false, null, false);
+            Util.runBrowser("file:" + f.getAbsolutePath());
+        } catch (IOException ioe) {
+            new ExceptionDialog(ioe, "Cannot create temporary file", null);
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/EventDialog.java b/src/net/sf/memoranda/ui/EventDialog.java
index 6fbfd63..750c153 100755
--- a/src/net/sf/memoranda/ui/EventDialog.java
+++ b/src/net/sf/memoranda/ui/EventDialog.java
@@ -1,13 +1,13 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
+import net.sf.memoranda.date.CalendarDate;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.border.TitledBorder;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.WindowEvent;
@@ -17,30 +17,8 @@ import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 
-import javax.swing.BorderFactory;
-import javax.swing.ButtonGroup;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JRadioButton;
-import javax.swing.JSpinner;
-import javax.swing.JTextField;
-import javax.swing.SpinnerDateModel;
-import javax.swing.SpinnerNumberModel;
-import javax.swing.SwingConstants;
-import javax.swing.border.TitledBorder;
-import javax.swing.event.ChangeEvent;
-import javax.swing.event.ChangeListener;
-
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.util.Local;
-
 /*$Id: EventDialog.java,v 1.28 2005/02/19 10:06:25 rawsushi Exp $*/
-public class EventDialog extends JDialog implements WindowListener {	
+public class EventDialog extends JDialog implements WindowListener {
     public boolean CANCELLED = false;
     boolean ignoreStartChanged = false;
     boolean ignoreEndChanged = false;
@@ -60,9 +38,9 @@ public class EventDialog extends JDialog implements WindowListener {
     public JRadioButton dailyRepeatRB = new JRadioButton();
     public JRadioButton hourlyRepeatRB = new JRadioButton();
     public JRadioButton minutelyRepeatRB = new JRadioButton();
-    public JSpinner daySpin = new JSpinner(new SpinnerNumberModel(1,1,365,1));
-    public JSpinner hourSpin = new JSpinner(new SpinnerNumberModel(1,1,24,1));
-    public JSpinner minuteSpin = new JSpinner(new SpinnerNumberModel(1,1,60,1));
+    public JSpinner daySpin = new JSpinner(new SpinnerNumberModel(1, 1, 365, 1));
+    public JSpinner hourSpin = new JSpinner(new SpinnerNumberModel(1, 1, 24, 1));
+    public JSpinner minuteSpin = new JSpinner(new SpinnerNumberModel(1, 1, 60, 1));
     JLabel lblDays = new JLabel();
     JLabel lblHours = new JLabel();
     JLabel lblMinutes = new JLabel();
@@ -72,11 +50,11 @@ public class EventDialog extends JDialog implements WindowListener {
     public JRadioButton weeklyRepeatRB = new JRadioButton();
     public JComboBox weekdaysCB = new JComboBox(Local.getWeekdayNames());
     public JCheckBox enableEndDateCB = new JCheckBox();
-	public JCheckBox workingDaysOnlyCB = new JCheckBox();
+    public JCheckBox workingDaysOnlyCB = new JCheckBox();
     public JSpinner endDate = new JSpinner(new SpinnerDateModel());
     JButton setEndDateB = new JButton();
     public JRadioButton monthlyRepeatRB = new JRadioButton();
-    public JSpinner dayOfMonthSpin = new JSpinner(new SpinnerNumberModel(1,1,31,1));
+    public JSpinner dayOfMonthSpin = new JSpinner(new SpinnerNumberModel(1, 1, 31, 1));
     JLabel lblDoM = new JLabel();
     public JRadioButton yearlyRepeatRB = new JRadioButton();
     ButtonGroup repeatRBGroup = new ButtonGroup();
@@ -86,21 +64,20 @@ public class EventDialog extends JDialog implements WindowListener {
     CalendarFrame endCalFrame = new CalendarFrame();
     CalendarFrame startCalFrame = new CalendarFrame();
     private Date eventDate;
-    
+
     public EventDialog(Frame frame, String title) {
         super(frame, title, true);
         try {
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
         super.addWindowListener(this);
     }
 
     void jbInit() throws Exception {
-    	this.setResizable(false);
+        this.setResizable(false);
         // Build headerPanel
         headerPanel.setBackground(Color.WHITE);
         headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
@@ -108,27 +85,30 @@ public class EventDialog extends JDialog implements WindowListener {
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("Event"));
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.EventDialog.class.getResource(
-            "resources/icons/event48.png")));
+                "resources/icons/event48.png")));
         headerPanel.add(header);
-        
+
         // Build eventPanel
         lblTime.setText(Local.getString("Time"));
         lblTime.setMinimumSize(new Dimension(60, 24));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.insets = new Insets(10, 10, 5, 10);
         gbc.anchor = GridBagConstraints.WEST;
         eventPanel.add(lblTime, gbc);
         timeSpin.setPreferredSize(new Dimension(60, 24));
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 0;
+        gbc.gridx = 1;
+        gbc.gridy = 0;
         gbc.insets = new Insets(10, 0, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         eventPanel.add(timeSpin, gbc);
         lblText.setText(Local.getString("Text"));
         lblText.setMinimumSize(new Dimension(120, 24));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 1;
+        gbc.gridx = 0;
+        gbc.gridy = 1;
         gbc.gridwidth = 3;
         gbc.insets = new Insets(5, 10, 5, 10);
         gbc.anchor = GridBagConstraints.WEST;
@@ -136,16 +116,17 @@ public class EventDialog extends JDialog implements WindowListener {
         textField.setMinimumSize(new Dimension(375, 24));
         textField.setPreferredSize(new Dimension(375, 24));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 2;
+        gbc.gridx = 0;
+        gbc.gridy = 2;
         gbc.gridwidth = 6;
         gbc.insets = new Insets(5, 10, 10, 10);
         gbc.anchor = GridBagConstraints.WEST;
         gbc.fill = GridBagConstraints.HORIZONTAL;
         eventPanel.add(textField, gbc);
-        
+
         // Build RepeatPanel
         repeatBorder = new TitledBorder(BorderFactory.createLineBorder(
-        Color.gray, 1), Local.getString("Repeat"));
+                Color.gray, 1), Local.getString("Repeat"));
         repeatPanel.setBorder(repeatBorder);
 
         // no repeat
@@ -159,7 +140,8 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.gridwidth = 4;
         gbc.insets = new Insets(5, 5, 5, 0);    // --> might have to change this
         gbc.anchor = GridBagConstraints.WEST;
@@ -168,7 +150,8 @@ public class EventDialog extends JDialog implements WindowListener {
 
         // minute repeat
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 1;
+        gbc.gridx = 0;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 5, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(minutelyRepeatRB, gbc);
@@ -181,14 +164,16 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 1;
+        gbc.gridx = 1;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 5, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(minuteSpin, gbc);
         lblMinutes.setText("minute(s)");
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 2; gbc.gridy = 1;
+        gbc.gridx = 2;
+        gbc.gridy = 1;
         gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 5, 5, 40);
         gbc.anchor = GridBagConstraints.WEST;
@@ -196,7 +181,8 @@ public class EventDialog extends JDialog implements WindowListener {
 
         // hour repeat
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 2;
+        gbc.gridx = 0;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 5, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(hourlyRepeatRB, gbc);
@@ -209,14 +195,16 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 2;
+        gbc.gridx = 1;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 5, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(hourSpin, gbc);
         lblHours.setText("hour(s)");
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 2; gbc.gridy = 2;
+        gbc.gridx = 2;
+        gbc.gridy = 2;
         gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 5, 5, 40);
         gbc.anchor = GridBagConstraints.WEST;
@@ -234,21 +222,24 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 3;
+        gbc.gridx = 0;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 5, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(dailyRepeatRB, gbc);
         daySpin.setPreferredSize(new Dimension(50, 24));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 3;
+        gbc.gridx = 1;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 5, 5, 0);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(daySpin, gbc);
         lblDays.setText(Local.getString("day(s)"));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 2; gbc.gridy = 3;
+        gbc.gridx = 2;
+        gbc.gridy = 3;
         gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 5, 5, 40);
         gbc.anchor = GridBagConstraints.WEST;
@@ -257,37 +248,40 @@ public class EventDialog extends JDialog implements WindowListener {
         lblSince.setMinimumSize(new Dimension(70, 16));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 4; gbc.gridy = 3;
+        gbc.gridx = 4;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.EAST;
         repeatPanel.add(lblSince, gbc);
         startDate.addChangeListener(new ChangeListener() {
             public void stateChanged(ChangeEvent e) {
-                if (ignoreStartChanged)
+                if (ignoreStartChanged) {
                     return;
+                }
                 ignoreStartChanged = true;
                 Date sd = (Date) startDate.getModel().getValue();
                 Date ed = (Date) endDate.getModel().getValue();
                 // Commented out, value was resetted to endDate !!!
                 if (sd.after(ed)) {
-                  endDate.getModel().setValue(sd);
-                  ed = sd;
+                    endDate.getModel().setValue(sd);
+                    ed = sd;
                 }
                 startCalFrame.cal.set(new CalendarDate(sd));
                 ignoreStartChanged = false;
             }
         });
         startDate.setPreferredSize(new Dimension(80, 24));
-        
+
         //Added by (jcscoobyrs) on 12-Nov-2003 at 15:34:27 PM
-		//---------------------------------------------------
-		SimpleDateFormat sdf = new SimpleDateFormat();
-		sdf = (SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT);
-        startDate.setEditor(new JSpinner.DateEditor(startDate, 
-        	sdf.toPattern()));
+        //---------------------------------------------------
+        SimpleDateFormat sdf = new SimpleDateFormat();
+        sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.SHORT);
+        startDate.setEditor(new JSpinner.DateEditor(startDate,
+                sdf.toPattern()));
         //---------------------------------------------------
         gbc = new GridBagConstraints();
-        gbc.gridx = 5; gbc.gridy = 3;
+        gbc.gridx = 5;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(startDate, gbc);
@@ -297,12 +291,13 @@ public class EventDialog extends JDialog implements WindowListener {
             }
         });
         setStartDateB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
         setStartDateB.setText("");
         setStartDateB.setPreferredSize(new Dimension(24, 24));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 6; gbc.gridy = 3;
+        gbc.gridx = 6;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(setStartDateB, gbc);
@@ -317,14 +312,16 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 4;
+        gbc.gridx = 0;
+        gbc.gridy = 4;
         gbc.insets = new Insets(5, 5, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(weeklyRepeatRB, gbc);
         weekdaysCB.setPreferredSize(new Dimension(100, 25));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 4;
+        gbc.gridx = 1;
+        gbc.gridy = 4;
         gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 0, 5, 40);
         gbc.anchor = GridBagConstraints.WEST;
@@ -338,19 +335,21 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 4; gbc.gridy = 4;
+        gbc.gridx = 4;
+        gbc.gridy = 4;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.EAST;
         repeatPanel.add(enableEndDateCB, gbc);
         endDate.setPreferredSize(new Dimension(80, 24));
-		//Added by (jcscoobyrs) on 12-Nov-2003 at 15:34:27 PM
-		//---------------------------------------------------
-		endDate.setEditor(new JSpinner.DateEditor(endDate, sdf.toPattern()));
-		//---------------------------------------------------
+        //Added by (jcscoobyrs) on 12-Nov-2003 at 15:34:27 PM
+        //---------------------------------------------------
+        endDate.setEditor(new JSpinner.DateEditor(endDate, sdf.toPattern()));
+        //---------------------------------------------------
         endDate.addChangeListener(new ChangeListener() {
             public void stateChanged(ChangeEvent e) {
-                if (ignoreEndChanged)
+                if (ignoreEndChanged) {
                     return;
+                }
                 ignoreEndChanged = true;
                 Date sd = (Date) startDate.getModel().getValue();
                 Date ed = (Date) endDate.getModel().getValue();
@@ -362,20 +361,22 @@ public class EventDialog extends JDialog implements WindowListener {
                 ignoreEndChanged = false;
             }
         });
-		// working days
-		workingDaysOnlyCB.setText(Local.getString("Working days only"));
-		workingDaysOnlyCB.setHorizontalAlignment(SwingConstants.RIGHT);
+        // working days
+        workingDaysOnlyCB.setText(Local.getString("Working days only"));
+        workingDaysOnlyCB.setHorizontalAlignment(SwingConstants.RIGHT);
 
-		gbc = new GridBagConstraints();
-        gbc.gridx = 4; gbc.gridy = 5;
-		gbc.gridwidth = 2;
+        gbc = new GridBagConstraints();
+        gbc.gridx = 4;
+        gbc.gridy = 5;
+        gbc.gridwidth = 2;
         gbc.insets = new Insets(5, 0, 5, -25);
         gbc.anchor = GridBagConstraints.EAST;
-		repeatPanel.add(workingDaysOnlyCB, gbc);
-		// -------------------------------------
+        repeatPanel.add(workingDaysOnlyCB, gbc);
+        // -------------------------------------
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 5; gbc.gridy = 4;
+        gbc.gridx = 5;
+        gbc.gridy = 4;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(endDate, gbc);
@@ -383,7 +384,7 @@ public class EventDialog extends JDialog implements WindowListener {
         setEndDateB.setPreferredSize(new Dimension(24, 24));
         setEndDateB.setText("");
         setEndDateB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
         setEndDateB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 setEndDateB_actionPerformed(e);
@@ -391,7 +392,8 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 6; gbc.gridy = 4;
+        gbc.gridx = 6;
+        gbc.gridy = 4;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(setEndDateB, gbc);
@@ -404,41 +406,45 @@ public class EventDialog extends JDialog implements WindowListener {
         });
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 5;
+        gbc.gridx = 0;
+        gbc.gridy = 5;
         gbc.insets = new Insets(5, 5, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(monthlyRepeatRB, gbc);
         dayOfMonthSpin.setPreferredSize(new Dimension(50, 24));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 5;
+        gbc.gridx = 1;
+        gbc.gridy = 5;
         gbc.insets = new Insets(5, 5, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(dayOfMonthSpin, gbc);
         lblDoM.setText(Local.getString("day of month"));
 
         gbc = new GridBagConstraints();
-        gbc.gridx = 2; gbc.gridy = 5;
+        gbc.gridx = 2;
+        gbc.gridy = 5;
         gbc.insets = new Insets(5, 5, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         repeatPanel.add(lblDoM, gbc);
-		yearlyRepeatRB.setActionCommand("yearly");
-		yearlyRepeatRB.setText(Local.getString("Yearly"));
-		yearlyRepeatRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				yearlyRepeatRB_actionPerformed(e);
-			}
-		});
-
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 6;
-		gbc.gridwidth = 5;
-		gbc.insets = new Insets(5, 5, 5, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		repeatPanel.add(yearlyRepeatRB, gbc);
+        yearlyRepeatRB.setActionCommand("yearly");
+        yearlyRepeatRB.setText(Local.getString("Yearly"));
+        yearlyRepeatRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                yearlyRepeatRB_actionPerformed(e);
+            }
+        });
+
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 6;
+        gbc.gridwidth = 5;
+        gbc.insets = new Insets(5, 5, 5, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        repeatPanel.add(yearlyRepeatRB, gbc);
 
         //
-        
+
         repeatRBGroup.add(noRepeatRB);
         repeatRBGroup.add(minutelyRepeatRB);
         repeatRBGroup.add(hourlyRepeatRB);
@@ -446,7 +452,7 @@ public class EventDialog extends JDialog implements WindowListener {
         repeatRBGroup.add(weeklyRepeatRB);
         repeatRBGroup.add(monthlyRepeatRB);
         repeatRBGroup.add(yearlyRepeatRB);
-        
+
         // Build ButtonsPanel
         okB.setMaximumSize(new Dimension(100, 26));
         okB.setMinimumSize(new Dimension(100, 26));
@@ -469,7 +475,7 @@ public class EventDialog extends JDialog implements WindowListener {
         cancelB.setMaximumSize(new Dimension(100, 26));
         buttonsPanel.add(okB);
         buttonsPanel.add(cancelB);
-        
+
         // Finally build the Dialog
         topPanel.add(headerPanel, BorderLayout.NORTH);
         topPanel.add(eventPanel, BorderLayout.SOUTH);
@@ -477,25 +483,28 @@ public class EventDialog extends JDialog implements WindowListener {
         bottomPanel.add(buttonsPanel, BorderLayout.SOUTH);
         this.getContentPane().add(topPanel, BorderLayout.NORTH);
         this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-        
+
         // Do final things...
         startCalFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreStartChanged) return;
+                if (ignoreStartChanged) {
+                    return;
+                }
                 startDate.getModel().setValue(startCalFrame.cal.get().getCalendar().getTime());
             }
         });
         endCalFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreEndChanged)
+                if (ignoreEndChanged) {
                     return;
+                }
                 endDate.getModel().setValue(endCalFrame.cal.get().getCalendar().getTime());
             }
         });
         disableElements();
         ((JSpinner.DateEditor) timeSpin.getEditor()).getFormat().applyPattern("HH:mm");
         enableEndDateCB_actionPerformed(null);
-        
+
     }
 
     void disableElements() {
@@ -510,20 +519,20 @@ public class EventDialog extends JDialog implements WindowListener {
         endDate.setEnabled(false);
         setEndDateB.setEnabled(false);
         enableEndDateCB.setEnabled(false);
-		enableEndDateCB.setSelected(false);
-		workingDaysOnlyCB.setEnabled(false);
-		workingDaysOnlyCB.setSelected(false);		
+        enableEndDateCB.setSelected(false);
+        workingDaysOnlyCB.setEnabled(false);
+        workingDaysOnlyCB.setSelected(false);
     }
-    
+
     public void yearlyRepeatRB_actionPerformed(ActionEvent e) {
-		disableElements();
-		startDate.setEnabled(true);
-		setStartDateB.setEnabled(true);
-		lblSince.setEnabled(true);
-		enableEndDateCB.setEnabled(true);
-		workingDaysOnlyCB.setEnabled(true);
-		startDate.getModel().setValue(
-			startCalFrame.cal.get().getCalendar().getTime());
+        disableElements();
+        startDate.setEnabled(true);
+        setStartDateB.setEnabled(true);
+        lblSince.setEnabled(true);
+        enableEndDateCB.setEnabled(true);
+        workingDaysOnlyCB.setEnabled(true);
+        startDate.getModel().setValue(
+                startCalFrame.cal.get().getCalendar().getTime());
     }
 
     public void monthlyRepeatRB_actionPerformed(ActionEvent e) {
@@ -533,9 +542,9 @@ public class EventDialog extends JDialog implements WindowListener {
         setStartDateB.setEnabled(true);
         lblSince.setEnabled(true);
         enableEndDateCB.setEnabled(true);
-		workingDaysOnlyCB.setEnabled(true);
-		startDate.getModel().setValue(
-			startCalFrame.cal.get().getCalendar().getTime());        
+        workingDaysOnlyCB.setEnabled(true);
+        startDate.getModel().setValue(
+                startCalFrame.cal.get().getCalendar().getTime());
     }
 
     public void dailyRepeatRB_actionPerformed(ActionEvent e) {
@@ -545,9 +554,9 @@ public class EventDialog extends JDialog implements WindowListener {
         setStartDateB.setEnabled(true);
         lblSince.setEnabled(true);
         enableEndDateCB.setEnabled(true);
-		workingDaysOnlyCB.setEnabled(true);
-		startDate.getModel().setValue(
-			startCalFrame.cal.get().getCalendar().getTime());        
+        workingDaysOnlyCB.setEnabled(true);
+        startDate.getModel().setValue(
+                startCalFrame.cal.get().getCalendar().getTime());
     }
 
     public void weeklyRepeatRB_actionPerformed(ActionEvent e) {
@@ -557,8 +566,8 @@ public class EventDialog extends JDialog implements WindowListener {
         setStartDateB.setEnabled(true);
         lblSince.setEnabled(true);
         enableEndDateCB.setEnabled(true);
-		startDate.getModel().setValue(
-			startCalFrame.cal.get().getCalendar().getTime());        
+        startDate.getModel().setValue(
+                startCalFrame.cal.get().getCalendar().getTime());
     }
 
     public void hourlyRepeatRB_actionPerformed(ActionEvent e) {
@@ -618,32 +627,38 @@ public class EventDialog extends JDialog implements WindowListener {
 
     public void enableEndDateCB_actionPerformed(ActionEvent e) {
         endDate.setEnabled(enableEndDateCB.isSelected());
-        setEndDateB.setEnabled(enableEndDateCB.isSelected());        
+        setEndDateB.setEnabled(enableEndDateCB.isSelected());
     }
-    
-    public void windowOpened( WindowEvent e ) {}
 
-    public void windowClosing( WindowEvent e ) {
+    public void windowOpened(WindowEvent e) {
+    }
+
+    public void windowClosing(WindowEvent e) {
         CANCELLED = true;
         this.dispose();
     }
-    
+
     public void setEventDate(Date d) {
-	    eventDate = d;
-	}
-	
-	public Date getEventDate() {
-		return eventDate;
-	}
-	
-    public void windowClosed( WindowEvent e ) {}
+        eventDate = d;
+    }
 
-	public void windowIconified( WindowEvent e ) {}
+    public Date getEventDate() {
+        return eventDate;
+    }
+
+    public void windowClosed(WindowEvent e) {
+    }
+
+    public void windowIconified(WindowEvent e) {
+    }
 
-	public void windowDeiconified( WindowEvent e ) {}
+    public void windowDeiconified(WindowEvent e) {
+    }
 
-	public void windowActivated( WindowEvent e ) {}
+    public void windowActivated(WindowEvent e) {
+    }
 
-	public void windowDeactivated( WindowEvent e ) {}
+    public void windowDeactivated(WindowEvent e) {
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/EventNotificationDialog.java b/src/net/sf/memoranda/ui/EventNotificationDialog.java
index 18cd442..e7c0e53 100755
--- a/src/net/sf/memoranda/ui/EventNotificationDialog.java
+++ b/src/net/sf/memoranda/ui/EventNotificationDialog.java
@@ -1,137 +1,129 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.event.ActionEvent;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.SwingConstants;
-import javax.swing.border.Border;
-
 import net.sf.memoranda.util.Configuration;
 import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
+import javax.swing.border.Border;
 import java.applet.Applet;
 import java.applet.AudioClip;
+import java.awt.*;
+import java.awt.event.ActionEvent;
 import java.io.File;
 import java.net.URL;
 
 
 /*$Id: EventNotificationDialog.java,v 1.8 2004/10/18 19:08:56 ivanrise Exp $*/
 public class EventNotificationDialog extends JFrame {
-  JPanel panel1 = new JPanel();
-  BorderLayout borderLayout1 = new BorderLayout();
-  JButton jButton1 = new JButton();
-  Border border1;
-  Border border2;
-  Border border3;
-  JPanel jPanel1 = new JPanel();
-  JLabel textLabel = new JLabel();
-  JLabel timeLabel = new JLabel();
-  Border border4;
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JButton jButton1 = new JButton();
+    Border border1;
+    Border border2;
+    Border border3;
+    JPanel jPanel1 = new JPanel();
+    JLabel textLabel = new JLabel();
+    JLabel timeLabel = new JLabel();
+    Border border4;
 
-  public EventNotificationDialog(String title, String time, String text) {
-    super();
-    this.setTitle(title);
-    try {
-      jbInit();
-      pack();
+    public EventNotificationDialog(String title, String time, String text) {
+        super();
+        this.setTitle(title);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+        timeLabel.setText(time);
+        timeLabel.setIcon(new ImageIcon(net.sf.memoranda.ui.TaskDialog.class.getResource(
+                "resources/icons/event48.png")));
+        textLabel.setText(text);
+        this.setSize(300, 200);
+        this.setLocationRelativeTo(null);
+        this.setVisible(true);
+        this.toFront();
+        this.requestFocus();
+        //jButton1.requestFocus();
     }
-    catch(Exception ex) {
-      new ExceptionDialog(ex);
+
+    public EventNotificationDialog() {
+        this("", "", "");
+    }
+
+    void jbInit() throws Exception {
+        this.setResizable(false);
+        this.setIconImage(new ImageIcon(EventNotificationDialog.class.getResource("resources/icons/jnotes16.png")).getImage());
+        this.getContentPane().setBackground(new Color(251, 197, 63));
+        border2 = BorderFactory.createEmptyBorder(0, 30, 0, 30);
+        border3 = BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(Color.white, new Color(142, 142, 142)), BorderFactory.createEmptyBorder(0, 30, 0, 30));
+        border4 = BorderFactory.createEmptyBorder(10, 10, 0, 10);
+        panel1.setLayout(borderLayout1);
+        panel1.setBackground(new Color(251, 197, 63));
+
+        jButton1.setText(Local.getString("Ok"));
+        jButton1.setBounds(150, 415, 95, 30);
+        jButton1.setPreferredSize(new Dimension(95, 30));
+        jButton1.setBackground(new Color(69, 125, 186));
+        jButton1.setForeground(Color.white);
+        jButton1.setDefaultCapable(true);
+        jButton1.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                jButton1_actionPerformed(e);
+            }
+        });
+        panel1.setBorder(border4);
+        panel1.setMinimumSize(new Dimension(300, 200));
+        panel1.setPreferredSize(new Dimension(300, 200));
+        timeLabel.setFont(new java.awt.Font("Dialog", 0, 20));
+        timeLabel.setHorizontalAlignment(SwingConstants.CENTER);
+        textLabel.setHorizontalAlignment(SwingConstants.CENTER);
+        getContentPane().add(panel1);
+        panel1.add(jPanel1, BorderLayout.SOUTH);
+        jPanel1.add(jButton1, null);
+        jPanel1.setBackground(new Color(251, 197, 63));
+        panel1.add(textLabel, BorderLayout.CENTER);
+        panel1.add(timeLabel, BorderLayout.NORTH);
+        playSoundNotification();
     }
-    timeLabel.setText(time);
-    timeLabel.setIcon(new ImageIcon(net.sf.memoranda.ui.TaskDialog.class.getResource(
-            "resources/icons/event48.png")));
-    textLabel.setText(text);
-    this.setSize(300,200);
-    this.setLocationRelativeTo(null);
-    this.setVisible(true);    
-    this.toFront();
-    this.requestFocus();
-    //jButton1.requestFocus();
-  }
 
-  public EventNotificationDialog() {
-    this("", "", "");
-  }
-  void jbInit() throws Exception {
-    this.setResizable(false);
-    this.setIconImage(new ImageIcon(EventNotificationDialog.class.getResource("resources/icons/jnotes16.png")).getImage());
-    this.getContentPane().setBackground(new Color(251, 197, 63));
-    border2 = BorderFactory.createEmptyBorder(0,30,0,30);
-    border3 = BorderFactory.createCompoundBorder(BorderFactory.createEtchedBorder(Color.white,new Color(142, 142, 142)),BorderFactory.createEmptyBorder(0,30,0,30));
-    border4 = BorderFactory.createEmptyBorder(10,10,0,10);
-    panel1.setLayout(borderLayout1);
-    panel1.setBackground(new Color(251, 197, 63));
-    
-    jButton1.setText(Local.getString("Ok"));
-    jButton1.setBounds(150, 415, 95, 30);
-    jButton1.setPreferredSize(new Dimension(95, 30));
-    jButton1.setBackground(new Color(69, 125, 186));
-    jButton1.setForeground(Color.white);
-    jButton1.setDefaultCapable(true);
-    jButton1.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        jButton1_actionPerformed(e);
-      }
-    });
-    panel1.setBorder(border4);
-    panel1.setMinimumSize(new Dimension(300, 200));
-    panel1.setPreferredSize(new Dimension(300, 200));
-    timeLabel.setFont(new java.awt.Font("Dialog", 0, 20));
-    timeLabel.setHorizontalAlignment(SwingConstants.CENTER);
-    textLabel.setHorizontalAlignment(SwingConstants.CENTER);
-    getContentPane().add(panel1);
-    panel1.add(jPanel1,  BorderLayout.SOUTH);
-    jPanel1.add(jButton1, null);
-    jPanel1.setBackground(new Color(251, 197, 63));
-    panel1.add(textLabel, BorderLayout.CENTER);
-    panel1.add(timeLabel, BorderLayout.NORTH);
-    playSoundNotification();
-  }
+    void jButton1_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
 
-  void jButton1_actionPerformed(ActionEvent e) {
-       this.dispose();
-  }
-  
-  private void playSoundNotification() {
-		if (Configuration.get("NOTIFY_SOUND").equals("DISABLED"))
-			return;
-		if (Configuration.get("NOTIFY_SOUND").equals("BEEP")) {
-			java.awt.Toolkit.getDefaultToolkit().beep();
-			return;
-		}
-		if (Configuration.get("NOTIFY_SOUND").equals("")) {
-			Configuration.put("NOTIFY_SOUND", "DEFAULT");
-			Configuration.saveConfig();
-		}
-		URL url;
-		if (Configuration.get("NOTIFY_SOUND").equals("DEFAULT"))
-			url =
-				EventNotificationDialog.class.getResource(
-					"resources/beep.wav");
-		else
-			try {
-				url =
-					new File(Configuration.get("NOTIFY_SOUND").toString())
-						.toURL();
-			} catch (Exception ex) {
-				url =
-					EventNotificationDialog.class.getResource(
-						"resources/beep.wav");
-			}
-		try {
-			AudioClip clip = Applet.newAudioClip(url);
-			clip.play();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex, "Error loading audioclip from "+url, "Check the location and type of audioclip file.");
-		}
-	}
+    private void playSoundNotification() {
+        if (Configuration.get("NOTIFY_SOUND").equals("DISABLED")) {
+            return;
+        }
+        if (Configuration.get("NOTIFY_SOUND").equals("BEEP")) {
+            java.awt.Toolkit.getDefaultToolkit().beep();
+            return;
+        }
+        if (Configuration.get("NOTIFY_SOUND").equals("")) {
+            Configuration.put("NOTIFY_SOUND", "DEFAULT");
+            Configuration.saveConfig();
+        }
+        URL url;
+        if (Configuration.get("NOTIFY_SOUND").equals("DEFAULT")) {
+            url =
+                    EventNotificationDialog.class.getResource(
+                            "resources/beep.wav");
+        } else {
+            try {
+                url =
+                        new File(Configuration.get("NOTIFY_SOUND").toString())
+                                .toURL();
+            } catch (Exception ex) {
+                url =
+                        EventNotificationDialog.class.getResource(
+                                "resources/beep.wav");
+            }
+        }
+        try {
+            AudioClip clip = Applet.newAudioClip(url);
+            clip.play();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex, "Error loading audioclip from " + url, "Check the location and type of audioclip file.");
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/EventsPanel.java b/src/net/sf/memoranda/ui/EventsPanel.java
index a033fa8..2a64f87 100755
--- a/src/net/sf/memoranda/ui/EventsPanel.java
+++ b/src/net/sf/memoranda/ui/EventsPanel.java
@@ -200,8 +200,9 @@ public class EventsPanel extends JPanel {
         eventsTable.addKeyListener(new KeyListener() {
             public void keyPressed(KeyEvent e) {
                 if (eventsTable.getSelectedRows().length > 0
-                        && e.getKeyCode() == KeyEvent.VK_DELETE)
+                        && e.getKeyCode() == KeyEvent.VK_DELETE) {
                     ppRemoveEvent_actionPerformed(null);
+                }
             }
 
             public void keyReleased(KeyEvent e) {
@@ -251,7 +252,9 @@ public class EventsPanel extends JPanel {
 
                 if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon")) {
                     d--;
-                    if (d < 0) d = 6;
+                    if (d < 0) {
+                        d = 6;
+                    }
                 }
 
                 dialog.weekdaysCB.setSelectedIndex(d);
@@ -281,8 +284,9 @@ public class EventsPanel extends JPanel {
         dialog.setLocation((frameSize.width - dialog.getSize().width) / 2 + location.x, (frameSize.height - dialog.getSize().height) / 2 + location.y);
         dialog.setVisible(true);
 
-        if (dialog.CANCELLED)
+        if (dialog.CANCELLED) {
             return;
+        }
 
         EventsManager.removeEvent(event);
         Calendar calendar = new GregorianCalendar(Local.getCurrentLocale()); //Fix deprecated methods to get hours
@@ -297,9 +301,9 @@ public class EventsPanel extends JPanel {
         //int mm = ((Date) dlg.timeSpin.getModel().getValue()).getMinutes();
         String text = dialog.textField.getText();
 
-        if (dialog.noRepeatRB.isSelected())
+        if (dialog.noRepeatRB.isSelected()) {
             EventsManager.createEvent(CurrentDate.get(), hour, minute, text);
-        else {
+        } else {
             updateEvents(dialog, hour, minute, text);
         }
 
@@ -334,8 +338,9 @@ public class EventsPanel extends JPanel {
         dialog.setFont((new Font("serif", Font.PLAIN, 20)));
         dialog.setVisible(true);
 
-        if (dialog.CANCELLED)
+        if (dialog.CANCELLED) {
             return;
+        }
 
         Calendar calendar = new GregorianCalendar(Local.getCurrentLocale()); //Fix deprecated methods to get hours
         //by (jcscoobyrs) 14-Nov-2003 at 10:24:38 AM
@@ -352,9 +357,9 @@ public class EventsPanel extends JPanel {
 
         CalendarDate eventCalendarDate = new CalendarDate(dialog.getEventDate());
 
-        if (dialog.noRepeatRB.isSelected())
+        if (dialog.noRepeatRB.isSelected()) {
             EventsManager.createEvent(eventCalendarDate, hour, minute, text);
-        else {
+        } else {
             updateEvents(dialog, hour, minute, text);
         }
 
@@ -379,8 +384,9 @@ public class EventsPanel extends JPanel {
         CalendarDate startDate = new CalendarDate((Date) dialog.startDate.getModel().getValue());
         CalendarDate endDate = null;
 
-        if (dialog.enableEndDateCB.isSelected())
+        if (dialog.enableEndDateCB.isSelected()) {
             endDate = new CalendarDate((Date) dialog.endDate.getModel().getValue());
+        }
 
         if (dialog.minutelyRepeatRB.isSelected()) {
             repeatType = EventsManager.REPEAT_MINUTELY;
@@ -396,18 +402,20 @@ public class EventsPanel extends JPanel {
             period = dialog.weekdaysCB.getSelectedIndex() + 1;
 
             if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon")) {
-                if (period == 7)
+                if (period == 7) {
                     period = 1;
-                else
+                } else {
                     period++;
+                }
             }
 
         } else if (dialog.yearlyRepeatRB.isSelected()) {
             repeatType = EventsManager.REPEAT_YEARLY;
             period = startDate.getCalendar().get(Calendar.DAY_OF_YEAR);
 
-            if ((startDate.getYear() % 4) == 0 && startDate.getCalendar().get(Calendar.DAY_OF_YEAR) > 60)
+            if ((startDate.getYear() % 4) == 0 && startDate.getCalendar().get(Calendar.DAY_OF_YEAR) > 60) {
                 period--;
+            }
 
         } else {
             repeatType = EventsManager.REPEAT_MONTHLY;
@@ -421,14 +429,14 @@ public class EventsPanel extends JPanel {
         String message;
         net.sf.memoranda.Event event;
 
-        if (eventsTable.getSelectedRows().length > 1)
+        if (eventsTable.getSelectedRows().length > 1) {
             message = Local.getString("Remove")
                     + " "
                     + eventsTable.getSelectedRows().length
                     + " "
                     + Local.getString("events")
                     + "\n" + Local.getString("Are you sure?");
-        else {
+        } else {
             event = (net.sf.memoranda.Event) eventsTable.getModel().getValueAt(
                     eventsTable.getSelectedRow(),
                     EventsTable.EVENT);
@@ -444,8 +452,9 @@ public class EventsPanel extends JPanel {
                 App.getFrame(), message, Local.getString("Remove event"),
                 JOptionPane.YES_NO_OPTION);
 
-        if (confirmation != JOptionPane.YES_OPTION)
+        if (confirmation != JOptionPane.YES_OPTION) {
             return;
+        }
 
         for (int i = 0; i < eventsTable.getSelectedRows().length; i++) {
             event = (net.sf.memoranda.Event) eventsTable.getModel().getValueAt(
@@ -454,12 +463,13 @@ public class EventsPanel extends JPanel {
         }
 
         eventsTable.getSelectionModel().clearSelection();
-/*        CurrentStorage.get().storeEventsManager();
+        /*
+        CurrentStorage.get().storeEventsManager();
         eventsTable.refresh();
         EventsScheduler.init();
         parentPanel.calendar.jnCalendar.updateUI();
         parentPanel.updateIndicators();
-*/
+        */
         saveEvents();
     }
 
@@ -478,8 +488,9 @@ public class EventsPanel extends JPanel {
     class PopupListener extends MouseAdapter {
 
         public void mouseClicked(MouseEvent mouseEvent) {
-            if ((mouseEvent.getClickCount() == 2) && (eventsTable.getSelectedRow() > -1))
+            if ((mouseEvent.getClickCount() == 2) && (eventsTable.getSelectedRow() > -1)) {
                 editEventB_actionPerformed(null);
+            }
         }
 
         public void mousePressed(MouseEvent mouseEvent) {
diff --git a/src/net/sf/memoranda/ui/EventsTable.java b/src/net/sf/memoranda/ui/EventsTable.java
index 9d2472e..68eac2e 100755
--- a/src/net/sf/memoranda/ui/EventsTable.java
+++ b/src/net/sf/memoranda/ui/EventsTable.java
@@ -8,21 +8,20 @@
  */
 package net.sf.memoranda.ui;
 
-import java.awt.Component;
-import java.awt.Font;
-import java.util.Date;
-import java.util.Vector;
-
-import javax.swing.JTable;
-import javax.swing.table.AbstractTableModel;
-import javax.swing.table.TableCellRenderer;
-
 import net.sf.memoranda.Event;
 import net.sf.memoranda.EventsManager;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
 import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.table.AbstractTableModel;
+import javax.swing.table.TableCellRenderer;
+import java.awt.*;
+import java.util.Date;
+import java.util.Vector;
+
 /**
  *
  */
@@ -33,6 +32,7 @@ public class EventsTable extends JTable {
     public static final int EVENT_ID = 101;
 
     Vector events = new Vector();
+
     /**
      * Constructor for EventsTable.
      */
@@ -50,10 +50,10 @@ public class EventsTable extends JTable {
     }
 
     public void initTable(CalendarDate d) {
-        events = (Vector)EventsManager.getEventsForDate(d);
+        events = (Vector) EventsManager.getEventsForDate(d);
         getColumnModel().getColumn(0).setPreferredWidth(60);
         getColumnModel().getColumn(0).setMaxWidth(60);
-	clearSelection();
+        clearSelection();
         updateUI();
     }
 
@@ -61,31 +61,31 @@ public class EventsTable extends JTable {
         initTable(CurrentDate.get());
     }
 
-     public TableCellRenderer getCellRenderer(int row, int column) {
+    public TableCellRenderer getCellRenderer(int row, int column) {
         return new javax.swing.table.DefaultTableCellRenderer() {
 
             public Component getTableCellRendererComponent(
-                JTable table,
-                Object value,
-                boolean isSelected,
-                boolean hasFocus,
-                int row,
-                int column) {
+                    JTable table,
+                    Object value,
+                    boolean isSelected,
+                    boolean hasFocus,
+                    int row,
+                    int column) {
                 Component comp;
                 comp = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
-                Event ev = (Event)getModel().getValueAt(row, EVENT);
+                Event ev = (Event) getModel().getValueAt(row, EVENT);
                 comp.setForeground(java.awt.Color.gray);
-                if (ev.isRepeatable())
+                if (ev.isRepeatable()) {
                     comp.setFont(comp.getFont().deriveFont(Font.ITALIC));
+                }
                 if (CurrentDate.get().after(CalendarDate.today())) {
-                  comp.setForeground(java.awt.Color.black);
-                }                
-                else if (CurrentDate.get().equals(CalendarDate.today())) {
-                  if (ev.getTime().after(new Date())) {
                     comp.setForeground(java.awt.Color.black);
-                    //comp.setFont(new java.awt.Font("Dialog", 1, 12));
-                    comp.setFont(comp.getFont().deriveFont(Font.BOLD));
-                  }
+                } else if (CurrentDate.get().equals(CalendarDate.today())) {
+                    if (ev.getTime().after(new Date())) {
+                        comp.setForeground(java.awt.Color.black);
+                        //comp.setFont(new java.awt.Font("Dialog", 1, 12));
+                        comp.setFont(comp.getFont().deriveFont(Font.BOLD));
+                    }
                 }
                 return comp;
             }
@@ -96,8 +96,8 @@ public class EventsTable extends JTable {
     class EventsTableModel extends AbstractTableModel {
 
         String[] columnNames = {
-            //Local.getString("Task name"),
-            Local.getString("Time"),
+                //Local.getString("Task name"),
+                Local.getString("Time"),
                 Local.getString("Text")
         };
 
@@ -110,26 +110,27 @@ public class EventsTable extends JTable {
         }
 
         public int getRowCount() {
-			int i;
-			try {
-				i = events.size();
-			}
-			catch(NullPointerException e) {
-				i = 1;
-			}
-			return i;
+            int i;
+            try {
+                i = events.size();
+            } catch (NullPointerException e) {
+                i = 1;
+            }
+            return i;
         }
 
         public Object getValueAt(int row, int col) {
-           Event ev = (Event)events.get(row);
-           if (col == 0)
-                //return ev.getHour()+":"+ev.getMinute();
+            Event ev = (Event) events.get(row);
+            if (col == 0) {
+                // return ev.getHour()+":"+ev.getMinute();
                 return ev.getTimeString();
-           else if (col == 1)
+            } else if (col == 1) {
                 return ev.getText();
-           else if (col == EVENT_ID)
+            } else if (col == EVENT_ID) {
                 return ev.getId();
-           else return ev;
+            } else {
+                return ev;
+            }
         }
 
         public String getColumnName(int col) {
diff --git a/src/net/sf/memoranda/ui/ExceptionDialog.java b/src/net/sf/memoranda/ui/ExceptionDialog.java
index 265ab91..d91bb0e 100755
--- a/src/net/sf/memoranda/ui/ExceptionDialog.java
+++ b/src/net/sf/memoranda/ui/ExceptionDialog.java
@@ -1,159 +1,162 @@
 package net.sf.memoranda.ui;
 
-import java.awt.*;
+import net.sf.memoranda.util.Util;
+
 import javax.swing.*;
-import java.awt.event.*;
-import java.io.*;
-import net.sf.memoranda.util.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.PrintWriter;
+import java.io.StringWriter;
 
 /*$Id: ExceptionDialog.java,v 1.2 2004/10/18 19:09:10 ivanrise Exp $*/
 public class ExceptionDialog extends JDialog {
-  JPanel panel1 = new JPanel();
-  BorderLayout borderLayout1 = new BorderLayout();
-  private JPanel jPanel1 = new JPanel();
-  private JLabel jLabel1 = new JLabel();
-  private JPanel jPanel2 = new JPanel();
-  private JLabel jLabel2 = new JLabel();
-  private BorderLayout borderLayout2 = new BorderLayout();
-  private BorderLayout borderLayout3 = new BorderLayout();
-  private JLabel descLabel = new JLabel();
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    private JPanel jPanel1 = new JPanel();
+    private JLabel jLabel1 = new JLabel();
+    private JPanel jPanel2 = new JPanel();
+    private JLabel jLabel2 = new JLabel();
+    private BorderLayout borderLayout2 = new BorderLayout();
+    private BorderLayout borderLayout3 = new BorderLayout();
+    private JLabel descLabel = new JLabel();
 
-  private String description;
-  private String tip;
-  private String trace;
-  private JPanel jPanel3 = new JPanel();
-  private JScrollPane jScrollPane1 = new JScrollPane();
-  private JTextArea traceTextArea = new JTextArea();
-  private JButton reportB = new JButton();
-  private JButton closeB = new JButton();
-  private FlowLayout flowLayout1 = new FlowLayout();
-  private JPanel jPanel4 = new JPanel();
-  private JButton copyB = new JButton();
-  private BorderLayout borderLayout4 = new BorderLayout();
-  
-  private Frame owner; 
-    
-  public ExceptionDialog(Exception exc, String description, String tip) {
-    super(App.getFrame(), "Problem", true);
-    exc.printStackTrace();
-    owner = App.getFrame();
-    if ((description != null) && (description.length() > 0))        
-        this.description = description;
-    else if (exc.getMessage() != null)
-        this.description = exc.getMessage();
-    else
-        this.description = "Unknown error";
-    this.tip = tip;
-    StringWriter sw = new StringWriter();
-    exc.printStackTrace(new PrintWriter(sw));
-    this.trace = sw.toString();
-    try {
-      jbInit();      
-      setVisible(true);
+    private String description;
+    private String tip;
+    private String trace;
+    private JPanel jPanel3 = new JPanel();
+    private JScrollPane jScrollPane1 = new JScrollPane();
+    private JTextArea traceTextArea = new JTextArea();
+    private JButton reportB = new JButton();
+    private JButton closeB = new JButton();
+    private FlowLayout flowLayout1 = new FlowLayout();
+    private JPanel jPanel4 = new JPanel();
+    private JButton copyB = new JButton();
+    private BorderLayout borderLayout4 = new BorderLayout();
+
+    private Frame owner;
+
+    public ExceptionDialog(Exception exc, String description, String tip) {
+        super(App.getFrame(), "Problem", true);
+        exc.printStackTrace();
+        owner = App.getFrame();
+        if ((description != null) && (description.length() > 0)) {
+            this.description = description;
+        } else if (exc.getMessage() != null) {
+            this.description = exc.getMessage();
+        } else {
+            this.description = "Unknown error";
+        }
+        this.tip = tip;
+        StringWriter sw = new StringWriter();
+        exc.printStackTrace(new PrintWriter(sw));
+        this.trace = sw.toString();
+        try {
+            jbInit();
+            setVisible(true);
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
     }
-    catch(Exception ex) {
-      ex.printStackTrace();
+
+    public ExceptionDialog(Exception exc) {
+        this(exc, "", "");
     }
-  }
-  
-  public ExceptionDialog(Exception exc) {
-      this(exc, "", "");
-  }
 
-  public ExceptionDialog() {
-    this(null, "", "");
-  }
+    public ExceptionDialog() {
+        this(null, "", "");
+    }
+
+    private void jbInit() throws Exception {
+        panel1.setLayout(borderLayout1);
+        jPanel1.setBackground(Color.white);
+        jPanel1.setLayout(borderLayout3);
+        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16));
+        jLabel1.setHorizontalAlignment(SwingConstants.LEFT);
+        jLabel1.setHorizontalTextPosition(SwingConstants.RIGHT);
+        jLabel1.setText("Problem occured");
+        jLabel1.setIcon(new ImageIcon(net.sf.memoranda.ui.ExceptionDialog.class.getResource(
+                "resources/icons/error.png")));
 
-  private void jbInit() throws Exception {    
-    panel1.setLayout(borderLayout1);    
-    jPanel1.setBackground(Color.white);
-    jPanel1.setLayout(borderLayout3);
-    jLabel1.setFont(new java.awt.Font("Dialog", 1, 16));
-    jLabel1.setHorizontalAlignment(SwingConstants.LEFT);
-    jLabel1.setHorizontalTextPosition(SwingConstants.RIGHT);
-    jLabel1.setText("Problem occured");
-    jLabel1.setIcon(new ImageIcon(net.sf.memoranda.ui.ExceptionDialog.class.getResource(
-            "resources/icons/error.png")));
-        
-    jLabel2.setFont(new java.awt.Font("Dialog", 0, 11));
-    jLabel2.setText("<html>An internal exception occured. It is may be a result of bug in the " +
-    "program, corrupted data, incorrect configuration or hardware failure.<br><br>" +
-    "Click on <b>Report bug..</b> button to submit a bug to the Memoranda bugs tracker on SourceForge.net </html>");
-    jPanel2.setLayout(borderLayout2);
-    jPanel2.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
-    borderLayout3.setVgap(5);
-    String labelText = "<html><b>Description:</b><br>"+description;
-    if ((tip != null) && (tip.length() > 0))
-      labelText = labelText + "<br><br><b>Tip:</b><br>"+tip;
-    labelText = labelText + "<br><br><b>Stack trace:</b></html>";
-    descLabel.setText(labelText);
-    descLabel.setFont(new java.awt.Font("Dialog", 0, 12));
-    jScrollPane1.setEnabled(false);
-    reportB.setMaximumSize(new Dimension(120, 25));
-    reportB.setMinimumSize(new Dimension(120, 25));
-    reportB.setPreferredSize(new Dimension(120, 25));
-    reportB.setText("Report bug...");
-    reportB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        reportB_actionPerformed(e);
-      }
-    });
-    closeB.setMaximumSize(new Dimension(120, 25));
-    closeB.setMinimumSize(new Dimension(120, 25));
-    closeB.setPreferredSize(new Dimension(120, 25));
-    closeB.setText("Close");
-    closeB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        closeB_actionPerformed(e);
-      }
-    });
-    this.getRootPane().setDefaultButton(closeB);
-    jPanel3.setLayout(flowLayout1);
-    flowLayout1.setAlignment(FlowLayout.RIGHT);
-    copyB.setText("Copy to clipboard");
-    copyB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        copyB_actionPerformed(e);
-      }
-    });
-    copyB.setHorizontalAlignment(SwingConstants.RIGHT);
-    jPanel4.setLayout(borderLayout4);
-    traceTextArea.setText(trace);
-    traceTextArea.setEditable(false);
-    borderLayout1.setVgap(5);   
-    getContentPane().add(panel1);
-    panel1.add(jPanel1, BorderLayout.NORTH);
-    jPanel1.add(jLabel1,  BorderLayout.NORTH);
-    jPanel1.add(jLabel2, BorderLayout.CENTER);
-    panel1.add(jPanel2, BorderLayout.CENTER);
-    jPanel2.add(descLabel, BorderLayout.NORTH);
-    jPanel2.add(jScrollPane1, BorderLayout.CENTER);
-    jPanel2.add(jPanel4,  BorderLayout.SOUTH);
-    jPanel4.add(copyB,  BorderLayout.WEST);
-    jScrollPane1.getViewport().add(traceTextArea, null);
-    panel1.add(jPanel3,  BorderLayout.SOUTH);
-    jPanel3.add(closeB, null);
-    jPanel3.add(reportB, null);
-    Dimension dlgSize = new Dimension(400, 500);
-    this.setSize(dlgSize); 
-    if (owner != null) {
-        Dimension frmSize = owner.getSize();
-        Point loc = owner.getLocation();
-        this.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
+        jLabel2.setFont(new java.awt.Font("Dialog", 0, 11));
+        jLabel2.setText("<html>An internal exception occured. It is may be a result of bug in the " +
+                "program, corrupted data, incorrect configuration or hardware failure.<br><br>" +
+                "Click on <b>Report bug..</b> button to submit a bug to the Memoranda bugs tracker on SourceForge.net </html>");
+        jPanel2.setLayout(borderLayout2);
+        jPanel2.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
+        borderLayout3.setVgap(5);
+        String labelText = "<html><b>Description:</b><br>" + description;
+        if ((tip != null) && (tip.length() > 0)) {
+            labelText = labelText + "<br><br><b>Tip:</b><br>" + tip;
+        }
+        labelText = labelText + "<br><br><b>Stack trace:</b></html>";
+        descLabel.setText(labelText);
+        descLabel.setFont(new java.awt.Font("Dialog", 0, 12));
+        jScrollPane1.setEnabled(false);
+        reportB.setMaximumSize(new Dimension(120, 25));
+        reportB.setMinimumSize(new Dimension(120, 25));
+        reportB.setPreferredSize(new Dimension(120, 25));
+        reportB.setText("Report bug...");
+        reportB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                reportB_actionPerformed(e);
+            }
+        });
+        closeB.setMaximumSize(new Dimension(120, 25));
+        closeB.setMinimumSize(new Dimension(120, 25));
+        closeB.setPreferredSize(new Dimension(120, 25));
+        closeB.setText("Close");
+        closeB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                closeB_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(closeB);
+        jPanel3.setLayout(flowLayout1);
+        flowLayout1.setAlignment(FlowLayout.RIGHT);
+        copyB.setText("Copy to clipboard");
+        copyB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                copyB_actionPerformed(e);
+            }
+        });
+        copyB.setHorizontalAlignment(SwingConstants.RIGHT);
+        jPanel4.setLayout(borderLayout4);
+        traceTextArea.setText(trace);
+        traceTextArea.setEditable(false);
+        borderLayout1.setVgap(5);
+        getContentPane().add(panel1);
+        panel1.add(jPanel1, BorderLayout.NORTH);
+        jPanel1.add(jLabel1, BorderLayout.NORTH);
+        jPanel1.add(jLabel2, BorderLayout.CENTER);
+        panel1.add(jPanel2, BorderLayout.CENTER);
+        jPanel2.add(descLabel, BorderLayout.NORTH);
+        jPanel2.add(jScrollPane1, BorderLayout.CENTER);
+        jPanel2.add(jPanel4, BorderLayout.SOUTH);
+        jPanel4.add(copyB, BorderLayout.WEST);
+        jScrollPane1.getViewport().add(traceTextArea, null);
+        panel1.add(jPanel3, BorderLayout.SOUTH);
+        jPanel3.add(closeB, null);
+        jPanel3.add(reportB, null);
+        Dimension dlgSize = new Dimension(400, 500);
+        this.setSize(dlgSize);
+        if (owner != null) {
+            Dimension frmSize = owner.getSize();
+            Point loc = owner.getLocation();
+            this.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
+        }
     }
-  }
 
-  void copyB_actionPerformed(ActionEvent e) {
-    traceTextArea.selectAll();
-    traceTextArea.copy();
-    traceTextArea.setSelectionEnd(0);
-  }
+    void copyB_actionPerformed(ActionEvent e) {
+        traceTextArea.selectAll();
+        traceTextArea.copy();
+        traceTextArea.setSelectionEnd(0);
+    }
 
-  void closeB_actionPerformed(ActionEvent e) {
-    this.dispose();
-  }
+    void closeB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
 
-  void reportB_actionPerformed(ActionEvent e) {
-      Util.runBrowser(App.BUGS_TRACKER_URL);
-  }
+    void reportB_actionPerformed(ActionEvent e) {
+        Util.runBrowser(App.BUGS_TRACKER_URL);
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/ExitConfirmationDialog.java b/src/net/sf/memoranda/ui/ExitConfirmationDialog.java
index 18ba92b..d8cad47 100755
--- a/src/net/sf/memoranda/ui/ExitConfirmationDialog.java
+++ b/src/net/sf/memoranda/ui/ExitConfirmationDialog.java
@@ -1,80 +1,66 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
+import net.sf.memoranda.util.Configuration;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.WindowEvent;
 import java.awt.event.WindowListener;
 
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.SwingConstants;
-
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.Configuration;
-
 public class ExitConfirmationDialog extends JDialog implements WindowListener {
-    
+
     public boolean CANCELLED = false;
-	public JLabel header = new JLabel();
-	JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-	JPanel bottomPanel = new JPanel(new BorderLayout());
-	
+    public JLabel header = new JLabel();
+    JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+    JPanel bottomPanel = new JPanel(new BorderLayout());
+
     JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
     JButton okB = new JButton();
     JButton cancelB = new JButton();
-	
-	public JCheckBox donotaskCB = new JCheckBox();
-	
-	JPanel mainPanel = new JPanel(new BorderLayout());
-	
+
+    public JCheckBox donotaskCB = new JCheckBox();
+
+    JPanel mainPanel = new JPanel(new BorderLayout());
+
     public ExitConfirmationDialog(Frame frame, String title) {
-       super(frame, title, true);
-       try {
-           jbInit();
-           pack();
-       }
-       catch (Exception ex) {
-           new ExceptionDialog(ex);
-       }
-       super.addWindowListener(this);
+        super(frame, title, true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+        super.addWindowListener(this);
     }
 
-	void jbInit() throws Exception {
-		this.setResizable(false);
-        
-		// Build headerPanel
+    void jbInit() throws Exception {
+        this.setResizable(false);
+
+        // Build headerPanel
         headerPanel.setBackground(Color.WHITE);
         headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
         header.setFont(new java.awt.Font("Dialog", 0, 20));
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("Exit"));
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.EventDialog.class.getResource(
-            "resources/icons/exit.png")));
+                "resources/icons/exit.png")));
         headerPanel.add(header);
-		
-		// Build mainPanel
-		JLabel confirm = new JLabel();
-		confirm.setText("<HTML>"+Local.getString("This action will cause Memoranda to exit") + 
-										"<p>" + Local.getString("Do you want to continue?"));
-										
-		donotaskCB.setText(Local.getString("do not ask again"));
-		donotaskCB.setHorizontalAlignment(SwingConstants.CENTER);
-		
-		mainPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
-		mainPanel.add(donotaskCB,BorderLayout.SOUTH);
-		mainPanel.add(confirm,BorderLayout.CENTER);
-		
-	    // Build ButtonsPanel
+
+        // Build mainPanel
+        JLabel confirm = new JLabel();
+        confirm.setText("<HTML>" + Local.getString("This action will cause Memoranda to exit") +
+                "<p>" + Local.getString("Do you want to continue?"));
+
+        donotaskCB.setText(Local.getString("do not ask again"));
+        donotaskCB.setHorizontalAlignment(SwingConstants.CENTER);
+
+        mainPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
+        mainPanel.add(donotaskCB, BorderLayout.SOUTH);
+        mainPanel.add(confirm, BorderLayout.CENTER);
+
+        // Build ButtonsPanel
         okB.setMaximumSize(new Dimension(100, 26));
         okB.setMinimumSize(new Dimension(100, 26));
         okB.setPreferredSize(new Dimension(100, 26));
@@ -96,46 +82,57 @@ public class ExitConfirmationDialog extends JDialog implements WindowListener {
         cancelB.setMaximumSize(new Dimension(100, 26));
         buttonsPanel.add(okB);
         buttonsPanel.add(cancelB);
-		bottomPanel.add(buttonsPanel, BorderLayout.SOUTH);
-		
-		this.getRootPane().setDefaultButton(okB);
-		
-		// Build dialog
-		this.getContentPane().add(mainPanel, BorderLayout.CENTER);
-		this.getContentPane().add(headerPanel, BorderLayout.NORTH);
-		this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-	}
-	
-	// if donotaskCB is checked update Configuration.
-	public void  checkDoNotAsk() {
-		if (this.donotaskCB.isSelected()) {
-			Configuration.put("ASK_ON_EXIT", "no");
-			Configuration.saveConfig();
-		}
-	}
-	
-	// ok button action
+        bottomPanel.add(buttonsPanel, BorderLayout.SOUTH);
+
+        this.getRootPane().setDefaultButton(okB);
+
+        // Build dialog
+        this.getContentPane().add(mainPanel, BorderLayout.CENTER);
+        this.getContentPane().add(headerPanel, BorderLayout.NORTH);
+        this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
+    }
+
+    // if donotaskCB is checked update Configuration.
+    public void checkDoNotAsk() {
+        if (this.donotaskCB.isSelected()) {
+            Configuration.put("ASK_ON_EXIT", "no");
+            Configuration.saveConfig();
+        }
+    }
+
+    // ok button action
     void okB_actionPerformed(ActionEvent e) {
-		checkDoNotAsk();
+        checkDoNotAsk();
         this.dispose();
     }
 
-	//cancel button action
+    //cancel button action
     void cancelB_actionPerformed(ActionEvent e) {
         CANCELLED = true;
-		checkDoNotAsk();
+        checkDoNotAsk();
         this.dispose();
     }
-	
-    public void windowClosing( WindowEvent e ) {
+
+    public void windowClosing(WindowEvent e) {
         CANCELLED = true;
         this.dispose();
     }
-    
-	public void windowOpened( WindowEvent e ) {}
-    public void windowClosed( WindowEvent e ) {}
-	public void windowIconified( WindowEvent e ) {}
-	public void windowDeiconified( WindowEvent e ) {}
-	public void windowActivated( WindowEvent e ) {}
-	public void windowDeactivated( WindowEvent e ) {}
+
+    public void windowOpened(WindowEvent e) {
+    }
+
+    public void windowClosed(WindowEvent e) {
+    }
+
+    public void windowIconified(WindowEvent e) {
+    }
+
+    public void windowDeiconified(WindowEvent e) {
+    }
+
+    public void windowActivated(WindowEvent e) {
+    }
+
+    public void windowDeactivated(WindowEvent e) {
+    }
 }
diff --git a/src/net/sf/memoranda/ui/ExportFilter.java b/src/net/sf/memoranda/ui/ExportFilter.java
index e2c52d1..994cd8a 100755
--- a/src/net/sf/memoranda/ui/ExportFilter.java
+++ b/src/net/sf/memoranda/ui/ExportFilter.java
@@ -3,17 +3,17 @@ package net.sf.memoranda.ui;
 /**
  * ExportFilter.java
  * Created on 25.02.2003, 17:30:12 Alex
- * Package: 
- * 
+ * Package:
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
-import java.io.File;
 
 import javax.swing.filechooser.FileFilter;
+import java.io.File;
 
 /**
- * 
+ *
  */
 /*$Id: ExportFilter.java,v 1.2 2004/01/30 12:17:41 alexeya Exp $*/
 public class ExportFilter extends FileFilter {
@@ -24,6 +24,7 @@ public class ExportFilter extends FileFilter {
     public static final String ZIP = "ZIP";
 
     String _type = "";
+
     /**
      * Constructor for ExportFilter.
      */
@@ -36,15 +37,17 @@ public class ExportFilter extends FileFilter {
      * @see javax.swing.filechooser.FileFilter#accept(java.io.File)
      */
     public boolean accept(File f) {
-        if (f.isDirectory()) 
-            return true;        
+        if (f.isDirectory()) {
+            return true;
+        }
         String ext = getExtension(f);
-        if (_type.equals(RTF))
+        if (_type.equals(RTF)) {
             return ext.equals("rtf");
-        else if (_type.equals(ZIP))
+        } else if (_type.equals(ZIP)) {
             return ext.equals("zip");
-        else if (_type.equals(XHTML))
-            return (ext.equals("xhtml") || ext.equals("xml")); 
+        } else if (_type.equals(XHTML)) {
+            return (ext.equals("xhtml") || ext.equals("xml"));
+        }
         return ext.startsWith("htm");
     }
 
@@ -52,12 +55,13 @@ public class ExportFilter extends FileFilter {
      * @see javax.swing.filechooser.FileFilter#getDescription()
      */
     public String getDescription() {
-        if (_type.equals(RTF))
+        if (_type.equals(RTF)) {
             return "Rich Text Format (*.rtf)";
-        else if (_type.equals(ZIP))
+        } else if (_type.equals(ZIP)) {
             return "ZIP archives (*.zip)";
-        else if (_type.equals(XHTML))
+        } else if (_type.equals(XHTML)) {
             return "XHTML files (*.xhtml, *.xml)";
+        }
         return "HTML files (*.html, *.htm)";
     }
 
diff --git a/src/net/sf/memoranda/ui/ExportSticker.java b/src/net/sf/memoranda/ui/ExportSticker.java
index e57ff01..b033e0a 100755
--- a/src/net/sf/memoranda/ui/ExportSticker.java
+++ b/src/net/sf/memoranda/ui/ExportSticker.java
@@ -1,98 +1,77 @@
 package net.sf.memoranda.ui;
 
-import java.io.*;
-import java.nio.*;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-
-import javax.swing.JOptionPane;
-
 import net.sf.memoranda.EventsManager;
-import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Local;
-import nu.xom.Document;
 import nu.xom.Element;
-import nu.xom.Elements;
+
+import javax.swing.*;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.Map;
 
 public class ExportSticker {
 
-        private String name; 
+    private String name;
         
-        /*public static Document _doc = null;
-        static Element _root = null;
-
-        static {
-                CurrentStorage.get().openEventsManager();
-                if (_doc == null) {
-                        _root = new Element("eventslist");
-/*                        _root.addNamespaceDeclaration("jnevents", NS_JNEVENTS);
-                        _root.appendChild(
-                                new Comment("This is JNotes 2 data file. Do not modify.")); */
-/*                        _doc = new Document(_root);
-                } else
-                        _root = _doc.getRootElement();
+    public ExportSticker(String x) {
+        this.name = remove1(x);
+    }
 
-        }*/
-        
-        public ExportSticker(String x) {
-                this.name = remove1(x);
-        }
+    /**
+     * Function to eliminate special chars from a string
+     */
+    public static String remove1(String input) {
+
+        String original = "Ã¡Ã Ã¤Ã©Ã¨Ã«Ã­Ã¬Ã¯Ã³Ã²Ã¶ÃºÃ¹uÃ±Ã�Ã€Ã„Ã‰ÃˆÃ‹Ã�ÃŒÃ�Ã“Ã’Ã–ÃšÃ™ÃœÃ‘Ã§Ã‡";
+
+        String ascii = "aaaeeeiiiooouuunAAAEEEIIIOOOUUUNcC";
+        String output = input;
+        for (int i = 0; i < original.length(); i++) {
 
-        /**
-         * Function to eliminate special chars from a string
-         */
-        public static String remove1(String input) {
-            
-            String original = "Ã¡Ã Ã¤Ã©Ã¨Ã«Ã­Ã¬Ã¯Ã³Ã²Ã¶ÃºÃ¹uÃ±Ã�Ã€Ã„Ã‰ÃˆÃ‹Ã�ÃŒÃ�Ã“Ã’Ã–ÃšÃ™ÃœÃ‘Ã§Ã‡";
-            
-            String ascii = "aaaeeeiiiooouuunAAAEEEIIIOOOUUUNcC";
-            String output = input;
-            for (int i=0; i<original.length(); i++) {
-            
-                output = output.replace(original.charAt(i), ascii.charAt(i));
-            }
-            return output;
+            output = output.replace(original.charAt(i), ascii.charAt(i));
         }
-        
-        public boolean export(String src){
-                boolean result = true;
-                String fs = System.getProperty("file.separator");
-                
-                String contents = getSticker();
-                try {
-                File file = new File(this.name+"."+src);
-                
-                
-                        FileWriter fwrite=new FileWriter(file,true);
-            
-                        fwrite.write(contents);
-                        
-                        fwrite.close();
-                        JOptionPane.showMessageDialog(null,Local.getString("Successfully Created Document"));
-            
-            
+        return output;
+    }
+
+    public boolean export(String src) {
+        boolean result = true;
+        String fs = System.getProperty("file.separator");
+
+        String contents = getSticker();
+        try {
+            File file = new File(this.name + "." + src);
+
+
+            FileWriter fwrite = new FileWriter(file, true);
+
+            fwrite.write(contents);
+
+            fwrite.close();
+            JOptionPane.showMessageDialog(null, Local.getString("Successfully Created Document"));
+
+
         } catch (IOException e) {
             e.printStackTrace();
-            JOptionPane.showMessageDialog(null,Local.getString("unable to create document"));
-        }
-                
-                
-                        
-                return result;
+            JOptionPane.showMessageDialog(null, Local.getString("unable to create document"));
         }
-        
-        public String getSticker(){
-                Map stickers = EventsManager.getStickers();
+
+
+        return result;
+    }
+
+    public String getSticker() {
+        Map stickers = EventsManager.getStickers();
         String result = "";
-        String nl = System.getProperty("line.separator"); 
-                for (Iterator i = stickers.keySet().iterator(); i.hasNext();) {
-            String id = (String)i.next();
-            result += (String)(((Element)stickers.get(id)).getValue())+nl;
-            }
-            
-                return result;
+        String nl = System.getProperty("line.separator");
+        for (Iterator i = stickers.keySet().iterator(); i.hasNext(); ) {
+            String id = (String) i.next();
+            result += (String) (((Element) stickers.get(id)).getValue()) + nl;
         }
+
+        return result;
+    }
         
         /*public static String getStickers() {
                 String result ="";
@@ -103,7 +82,6 @@ public class ExportSticker {
                 }
                 return m;
         }*/
-        
-        
-        
+
+
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/FileExportDialog.java b/src/net/sf/memoranda/ui/FileExportDialog.java
index 2336c30..3603351 100755
--- a/src/net/sf/memoranda/ui/FileExportDialog.java
+++ b/src/net/sf/memoranda/ui/FileExportDialog.java
@@ -1,33 +1,32 @@
 
 package net.sf.memoranda.ui;
 
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
 import java.awt.event.ActionEvent;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 
-import javax.swing.JComboBox;
-import javax.swing.JFileChooser;
-
-import net.sf.memoranda.util.Local;
-
 /**
- *
- * @author  Alex
+ * @author Alex
  */
 public class FileExportDialog extends javax.swing.JDialog {
-    
+
     public boolean CANCELLED = true;
-    
-    
-    /** Creates new form ExportDialog */
+
+
+    /**
+     * Creates new form ExportDialog
+     */
     public FileExportDialog(java.awt.Frame parent, String title, JFileChooser chooser) {
         super(parent, title, true);
         fileChooser = chooser;
         initComponents();
     }
-    
-   
-    private void initComponents() {//GEN-BEGIN:initComponents
+
+
+    private void initComponents() { //GEN-BEGIN:initComponents
         jPanel2 = new javax.swing.JPanel();
         okB = new javax.swing.JButton();
         cancelB = new javax.swing.JButton();
@@ -64,7 +63,7 @@ public class FileExportDialog extends javax.swing.JDialog {
         cancelB.setText(Local.getString("Cancel"));
         cancelB.setPreferredSize(new java.awt.Dimension(90, 25));
         cancelB.addActionListener(new java.awt.event.ActionListener() {
-            public void actionPerformed(ActionEvent e) {                
+            public void actionPerformed(ActionEvent e) {
                 dispose();
             }
         });
@@ -80,17 +79,16 @@ public class FileExportDialog extends javax.swing.JDialog {
 
             public void propertyChange(PropertyChangeEvent evt) {
                 chooserActionPerformed();
-                
+
             }
-        
+
         });
         /*fileChooser.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(java.awt.event.ActionEvent evt) {
                 chooserActionPerformed();
             }
         });*/
-        
-        
+
 
         filePanel.add(fileChooser, java.awt.BorderLayout.CENTER);
 
@@ -99,7 +97,7 @@ public class FileExportDialog extends javax.swing.JDialog {
         optionsPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
         encPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
 
-        jLabel2.setText(Local.getString("Encoding")+":");
+        jLabel2.setText(Local.getString("Encoding") + ":");
         encPanel.add(jLabel2);
 
         encCB.setMaximumSize(new java.awt.Dimension(32767, 19));
@@ -107,17 +105,16 @@ public class FileExportDialog extends javax.swing.JDialog {
 
         optionsPanel.add(encPanel);
 
-        usetemplChB.setText(Local.getString("Use template")+":");
+        usetemplChB.setText(Local.getString("Use template") + ":");
         usetemplChB.setMargin(new java.awt.Insets(0, 0, 0, 0));
         usetemplChB.addActionListener(new java.awt.event.ActionListener() {
-            public void actionPerformed(ActionEvent e) {                
+            public void actionPerformed(ActionEvent e) {
                 if (usetemplChB.isSelected()) {
                     templF.setEnabled(true);
                     templBrowseB.setEnabled(true);
-                }
-                else {
+                } else {
                     templF.setEnabled(false);
-                    templBrowseB.setEnabled(false);                    
+                    templBrowseB.setEnabled(false);
                 }
             }
         });
@@ -140,7 +137,7 @@ public class FileExportDialog extends javax.swing.JDialog {
         templBrowseB.setEnabled(false);
         templBrowseB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
-               browseTemplate();
+                browseTemplate();
             }
         });
         templPanel.add(templBrowseB, java.awt.BorderLayout.EAST);
@@ -159,31 +156,33 @@ public class FileExportDialog extends javax.swing.JDialog {
         getContentPane().add(filePanel, java.awt.BorderLayout.CENTER);
         getRootPane().setDefaultButton(okB);
         pack();
-    }//GEN-END:initComponents
+    } //GEN-END:initComponents
 
-    private void xhtmlChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xhtmlChBActionPerformed
+    private void xhtmlChBActionPerformed(java.awt.event.ActionEvent evt) { //GEN-FIRST:event_xhtmlChBActionPerformed
         // TODO add your handling code here:
     }
 
-    private void chooserActionPerformed() {//GEN-FIRST:event_chooserActionPerformed
-        okB.setEnabled(fileChooser.getSelectedFile() != null);            
+    private void chooserActionPerformed() { //GEN-FIRST:event_chooserActionPerformed
+        okB.setEnabled(fileChooser.getSelectedFile() != null);
     }
-    
+
     private void browseTemplate() {
-    	JFileChooser chooser = new JFileChooser();
+        JFileChooser chooser = new JFileChooser();
         chooser.setFileHidingEnabled(false);
         chooser.setDialogTitle(Local.getString("Select file"));
         chooser.setAcceptAllFileFilterUsed(true);
         chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
-        if (templF.getText().length() >0)
-        	chooser.setCurrentDirectory(new java.io.File(templF.getText()));
-        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
-        	templF.setText(chooser.getSelectedFile().getPath());
+        if (templF.getText().length() > 0) {
+            chooser.setCurrentDirectory(new java.io.File(templF.getText()));
+        }
+        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
+            templF.setText(chooser.getSelectedFile().getPath());
+        }
     }
-    
+
     private javax.swing.JButton cancelB;
     private javax.swing.JFileChooser fileChooser;
-    
+
     private javax.swing.JPanel encPanel;
     private javax.swing.JPanel filePanel;
     private javax.swing.JLabel jLabel2;
@@ -199,5 +198,5 @@ public class FileExportDialog extends javax.swing.JDialog {
     public javax.swing.JCheckBox xhtmlChB;
     public JComboBox encCB;
     // End of variables declaration//GEN-END:variables
-    
+
 }
diff --git a/src/net/sf/memoranda/ui/ImportSticker.java b/src/net/sf/memoranda/ui/ImportSticker.java
index 84b6eb0..344e7e1 100755
--- a/src/net/sf/memoranda/ui/ImportSticker.java
+++ b/src/net/sf/memoranda/ui/ImportSticker.java
@@ -1,27 +1,20 @@
 package net.sf.memoranda.ui;
 
-import javax.swing.JOptionPane;
-
 import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
+
 public class ImportSticker {
 
-String name;        
-        
-        public ImportSticker(String x) {
-                name = x;
-        }
+    String name;
+
+    public ImportSticker(String x) {
+        name = x;
+    }
 
-        public boolean import_file(){
-                /*
-                 We are working on this =)
-                  
-                  
-                  */
-                
-                JOptionPane.showMessageDialog(null,Local.getString("Unable to import document"));
-                return true;
-        }
-        
-        
-}
\ No newline at end of file
+    public boolean import_file() {
+        /* We are working on this =)  */
+        JOptionPane.showMessageDialog(null, Local.getString("Unable to import document"));
+        return true;
+    }
+}
diff --git a/src/net/sf/memoranda/ui/JNCalendar.java b/src/net/sf/memoranda/ui/JNCalendar.java
index 3462ba9..372f2b2 100755
--- a/src/net/sf/memoranda/ui/JNCalendar.java
+++ b/src/net/sf/memoranda/ui/JNCalendar.java
@@ -1,222 +1,228 @@
 /**
  * JNCalendar.java Created on 13.02.2003, 21:26:38 Alex Package:
  * net.sf.memoranda.ui
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net Copyright (c) 2003
- *         Memoranda Team. http://memoranda.sf.net
+ * Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.ui;
 
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.Calendar;
-import java.util.Vector;
+import net.sf.memoranda.date.CalendarDate;
+import net.sf.memoranda.date.CurrentDate;
+import net.sf.memoranda.util.Configuration;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.JTable;
-import javax.swing.ListSelectionModel;
+import javax.swing.*;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 import javax.swing.table.AbstractTableModel;
 import javax.swing.table.TableCellRenderer;
-
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.date.CurrentDate;
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.Configuration;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.util.Calendar;
+import java.util.Vector;
 
 /**
- *  
+ *
  */
 /*$Id: JNCalendar.java,v 1.8 2004/11/05 07:38:10 pbielen Exp $*/
 public class JNCalendar extends JTable {
 
-	private CalendarDate _date = null;
-	private boolean ignoreChange = false;
-	private Vector selectionListeners = new Vector();
-	CalendarDate startPeriod = null;
-	CalendarDate endPeriod = null;
-	public JNCalendarCellRenderer renderer = new JNCalendarCellRenderer();
-
-	public JNCalendar() {
-		this(CurrentDate.get());
-	}
-	/**
-	 * Constructor for JNCalendar.
-	 */
-	public JNCalendar(CalendarDate date) {
-		super();
-		/* table properties */
-		setCellSelectionEnabled(true);
-		setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-		getTableHeader().setReorderingAllowed(false);
-		getTableHeader().setResizingAllowed(false);
-		set(date);
-
-		/* selection listeners */
-		final ListSelectionModel rowSM = getSelectionModel();
-		final ListSelectionModel colSM = getColumnModel().getSelectionModel();
-		ListSelectionListener lsl = new ListSelectionListener() {
-			public void valueChanged(ListSelectionEvent e) {
-					//Ignore extra messages.
-	if (e.getValueIsAdjusting())
-					return;
-				if (ignoreChange)
-					return;
-				int row = getSelRow();
-				int col = getSelCol();
-				Object val = getModel().getValueAt(row, col);
-				if (val != null) {
-					if (val
-						.toString()
-						.equals(new Integer(_date.getDay()).toString()))
-						return;
-					_date =
-						new CalendarDate(
-							new Integer(val.toString()).intValue(),
-							_date.getMonth(),
-							_date.getYear());
-					notifyListeners();
-				} else {
-					//getSelectionModel().clearSelection();
-					doSelection();
-				}
-			}
-
-		};
-		rowSM.addListSelectionListener(lsl);
-		colSM.addListSelectionListener(lsl);
-	}
-
-	int getSelRow() {
-		return this.getSelectedRow();
-	}
-
-	int getSelCol() {
-		return this.getSelectedColumn();
-	}
-
-	public JNCalendar(CalendarDate date, CalendarDate sd, CalendarDate ed) {
-		this(date);
-		setSelectablePeriod(sd, ed);
-	}
-
-	public void set(CalendarDate date) {
-		_date = date;
-		setCalendarParameters();
-		ignoreChange = true;
-		this.setModel(new JNCalendarModel());
-		ignoreChange = false;
-		doSelection();
-	}
-
-	public CalendarDate get() {
-		return _date;
-	}
-
-	public void addSelectionListener(ActionListener al) {
-		selectionListeners.add(al);
-	}
-
-	public void setSelectablePeriod(CalendarDate sd, CalendarDate ed) {
-		startPeriod = sd;
-		endPeriod = ed;
-	}
-
-	private void notifyListeners() {
-		for(int i=0;i<selectionListeners.size();i++) {
-			((ActionListener) selectionListeners.get(i)).actionPerformed(
-				new ActionEvent(this, 0, "Calendar event"));
-		}
-	}
-
-	public TableCellRenderer getCellRenderer(int row, int column) {
-		Object d = this.getModel().getValueAt(row, column);
-		/*
-		 * if (d != null) return new JNCalendarCellRenderer( new
-		 * CalendarDate(new Integer(d.toString()).intValue(), _date.getMonth(),
-		 * _date.getYear()));
-		 */
-		if (d != null)
-			renderer.setDate(
-				new CalendarDate(
-					new Integer(d.toString()).intValue(),
-					_date.getMonth(),
-					_date.getYear()));
-		else
-			renderer.setDate(null);
-		return renderer;
-	}
-
-	void doSelection() {
-		ignoreChange = true;
-		int selRow = getRow(_date.getDay());
-		int selCol = getCol(_date.getDay());
-		this.setRowSelectionInterval(selRow, selRow);
-		this.setColumnSelectionInterval(selCol, selCol);
-		ignoreChange = false;
-	}
-
-	int getRow(int day) {
-		return ((day - 1) + firstDay) / 7;
-	}
-
-	int getCol(int day) {
-		return ((day - 1) + firstDay) % 7;
-	}
-
-	int firstDay;
-	int daysInMonth;
-
-	void setCalendarParameters() {
-		int d = 1;
-
-		Calendar cal = _date.getCalendar();
-
-		if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon")) {
-			cal.setFirstDayOfWeek(Calendar.MONDAY);
-			d = 2;
-		} else
-			cal.setFirstDayOfWeek(Calendar.SUNDAY);
-
-		cal.set(Calendar.DAY_OF_MONTH, 1);
-		cal.getTime();
-		firstDay = cal.get(Calendar.DAY_OF_WEEK) - d;
-		if (firstDay == -1)
-			firstDay = 6;
-		daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
-	}
-
-	/*$Id: JNCalendar.java,v 1.8 2004/11/05 07:38:10 pbielen Exp $*/
-public class JNCalendarModel extends AbstractTableModel {
-
-		private String[] dayNames = Local.getWeekdayNames();
-
-		public JNCalendarModel() {
-			super();
-		}
-
-		public int getColumnCount() {
-			return 7;
-		}
-
-		public Object getValueAt(int row, int col) {
-			//int pos = (row * 7 + col) - firstDay + 1;
-			int pos = (row * 7 + (col + 1)) - firstDay;
-			if ((pos > 0) && (pos <= daysInMonth))
-				return new Integer(pos);
-			else
-				return null;
-
-		}
-
-		public int getRowCount() {
-			return 6;
-		}
-
-		public String getColumnName(int col) {
-			return dayNames[col];
-		}
-
-	}
+    private CalendarDate _date = null;
+    private boolean ignoreChange = false;
+    private Vector selectionListeners = new Vector();
+    CalendarDate startPeriod = null;
+    CalendarDate endPeriod = null;
+    public JNCalendarCellRenderer renderer = new JNCalendarCellRenderer();
+
+    public JNCalendar() {
+        this(CurrentDate.get());
+    }
+
+    /**
+     * Constructor for JNCalendar.
+     */
+    public JNCalendar(CalendarDate date) {
+        super();
+        /* table properties */
+        setCellSelectionEnabled(true);
+        setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+        getTableHeader().setReorderingAllowed(false);
+        getTableHeader().setResizingAllowed(false);
+        set(date);
+
+        /* selection listeners */
+        final ListSelectionModel rowSM = getSelectionModel();
+        final ListSelectionModel colSM = getColumnModel().getSelectionModel();
+        ListSelectionListener lsl = new ListSelectionListener() {
+            public void valueChanged(ListSelectionEvent e) {
+                //Ignore extra messages.
+                if (e.getValueIsAdjusting()) {
+                    return;
+                }
+                if (ignoreChange) {
+                    return;
+                }
+                int row = getSelRow();
+                int col = getSelCol();
+                Object val = getModel().getValueAt(row, col);
+                if (val != null) {
+                    if (val
+                            .toString()
+                            .equals(new Integer(_date.getDay()).toString())) {
+                        return;
+                    }
+                    _date =
+                            new CalendarDate(
+                                    new Integer(val.toString()).intValue(),
+                                    _date.getMonth(),
+                                    _date.getYear());
+                    notifyListeners();
+                } else {
+                    //getSelectionModel().clearSelection();
+                    doSelection();
+                }
+            }
+
+        };
+        rowSM.addListSelectionListener(lsl);
+        colSM.addListSelectionListener(lsl);
+    }
+
+    int getSelRow() {
+        return this.getSelectedRow();
+    }
+
+    int getSelCol() {
+        return this.getSelectedColumn();
+    }
+
+    public JNCalendar(CalendarDate date, CalendarDate sd, CalendarDate ed) {
+        this(date);
+        setSelectablePeriod(sd, ed);
+    }
+
+    public void set(CalendarDate date) {
+        _date = date;
+        setCalendarParameters();
+        ignoreChange = true;
+        this.setModel(new JNCalendarModel());
+        ignoreChange = false;
+        doSelection();
+    }
+
+    public CalendarDate get() {
+        return _date;
+    }
+
+    public void addSelectionListener(ActionListener al) {
+        selectionListeners.add(al);
+    }
+
+    public void setSelectablePeriod(CalendarDate sd, CalendarDate ed) {
+        startPeriod = sd;
+        endPeriod = ed;
+    }
+
+    private void notifyListeners() {
+        for (int i = 0; i < selectionListeners.size(); i++) {
+            ((ActionListener) selectionListeners.get(i)).actionPerformed(
+                    new ActionEvent(this, 0, "Calendar event"));
+        }
+    }
+
+    public TableCellRenderer getCellRenderer(int row, int column) {
+        Object d = this.getModel().getValueAt(row, column);
+        /*
+         * if (d != null) return new JNCalendarCellRenderer( new
+         * CalendarDate(new Integer(d.toString()).intValue(), _date.getMonth(),
+         * _date.getYear()));
+         */
+        if (d != null) {
+            renderer.setDate(
+                    new CalendarDate(
+                            new Integer(d.toString()).intValue(),
+                            _date.getMonth(),
+                            _date.getYear()));
+        } else {
+            renderer.setDate(null);
+        }
+        return renderer;
+    }
+
+    void doSelection() {
+        ignoreChange = true;
+        int selRow = getRow(_date.getDay());
+        int selCol = getCol(_date.getDay());
+        this.setRowSelectionInterval(selRow, selRow);
+        this.setColumnSelectionInterval(selCol, selCol);
+        ignoreChange = false;
+    }
+
+    int getRow(int day) {
+        return ((day - 1) + firstDay) / 7;
+    }
+
+    int getCol(int day) {
+        return ((day - 1) + firstDay) % 7;
+    }
+
+    int firstDay;
+    int daysInMonth;
+
+    void setCalendarParameters() {
+        int d = 1;
+
+        Calendar cal = _date.getCalendar();
+
+        if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon")) {
+            cal.setFirstDayOfWeek(Calendar.MONDAY);
+            d = 2;
+        } else {
+            cal.setFirstDayOfWeek(Calendar.SUNDAY);
+        }
+
+        cal.set(Calendar.DAY_OF_MONTH, 1);
+        cal.getTime();
+        firstDay = cal.get(Calendar.DAY_OF_WEEK) - d;
+        if (firstDay == -1) {
+            firstDay = 6;
+        }
+        daysInMonth = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
+    }
+
+    /*$Id: JNCalendar.java,v 1.8 2004/11/05 07:38:10 pbielen Exp $*/
+    public class JNCalendarModel extends AbstractTableModel {
+
+        private String[] dayNames = Local.getWeekdayNames();
+
+        public JNCalendarModel() {
+            super();
+        }
+
+        public int getColumnCount() {
+            return 7;
+        }
+
+        public Object getValueAt(int row, int col) {
+            //int pos = (row * 7 + col) - firstDay + 1;
+            int pos = (row * 7 + (col + 1)) - firstDay;
+            if ((pos > 0) && (pos <= daysInMonth)) {
+                return new Integer(pos);
+            } else {
+                return null;
+            }
+
+        }
+
+        public int getRowCount() {
+            return 6;
+        }
+
+        public String getColumnName(int col) {
+            return dayNames[col];
+        }
+
+    }
 
 }
diff --git a/src/net/sf/memoranda/ui/JNCalendarCellRenderer.java b/src/net/sf/memoranda/ui/JNCalendarCellRenderer.java
index bba24ae..02014eb 100755
--- a/src/net/sf/memoranda/ui/JNCalendarCellRenderer.java
+++ b/src/net/sf/memoranda/ui/JNCalendarCellRenderer.java
@@ -7,19 +7,16 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.ui;
-import java.awt.Color;
-import java.awt.Component;
-import java.util.Calendar;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JLabel;
-import javax.swing.JTable;
 
 import net.sf.memoranda.CurrentProject;
 import net.sf.memoranda.EventsManager;
 import net.sf.memoranda.Task;
 import net.sf.memoranda.date.CalendarDate;
+
+import javax.swing.*;
+import java.awt.*;
+import java.util.Calendar;
+
 /**
  *
  */
@@ -29,85 +26,81 @@ public class JNCalendarCellRenderer extends javax.swing.table.DefaultTableCellRe
     boolean disabled = false;
     ImageIcon evIcon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/en.png"));
     Task t = null;
-    
+
     public void setTask(Task _t) {
         t = _t;
     }
-    
+
     public Task getTask() {
         return t;
     }
 
     public Component getTableCellRendererComponent(
-        JTable table,
-        Object value,
-        boolean isSelected,
-        boolean hasFocus,
-        int row,
-        int column) {
-        
-		JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
-		String currentPanel = ((AppFrame)App.getFrame()).workPanel.dailyItemsPanel.getCurrentPanel();
-
-		if (d == null) {
+            JTable table,
+            Object value,
+            boolean isSelected,
+            boolean hasFocus,
+            int row,
+            int column) {
+
+        JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
+        String currentPanel = ((AppFrame) App.getFrame()).workPanel.dailyItemsPanel.getCurrentPanel();
+
+        if (d == null) {
             label.setEnabled(false);
-			label.setIcon(null);
-            label.setBackground(new Color(0xE0,0xE0,0xE0));
+            label.setIcon(null);
+            label.setBackground(new Color(0xE0, 0xE0, 0xE0));
             return label;
         }
-        
-		if (!isSelected) {
-			CalendarDate cpsd = CurrentProject.get().getStartDate();
+
+        if (!isSelected) {
+            CalendarDate cpsd = CurrentProject.get().getStartDate();
             CalendarDate cped = CurrentProject.get().getEndDate();
             if (!(((d.after(cpsd)) && (d.before(cped))) || (d.equals(cpsd)) || (d.equals(cped)))) {
-				label.setBackground(new Color(0xF0,0xF0,0xF0));
-				return label;
-			}
-        }		
+                label.setBackground(new Color(0xF0, 0xF0, 0xF0));
+                return label;
+            }
+        }
 
 
-		label.setHorizontalTextPosition(2);
-		label.setEnabled(true);
-		
+        label.setHorizontalTextPosition(2);
+        label.setEnabled(true);
 
 
         if (d.equals(CalendarDate.today())) {
             label.setBorder(BorderFactory.createLineBorder(new Color(100, 100, 128)));
         }
-        
-		// set foreground color
-		if (d.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
+
+        // set foreground color
+        if (d.getCalendar().get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
             label.setForeground(new Color(255, 0, 0));
+        } else {
+            label.setForeground(Color.BLACK);
+        }
+
+        // set background color
+        if (currentPanel == null) {
+            label.setBackground(Color.WHITE);
+        } else if (currentPanel.equals("TASKS") && (t != null) &&
+                (d.inPeriod(t.getStartDate(), t.getEndDate()))) {
+            label.setBackground(new Color(230, 255, 230));
+        } else if (currentPanel.equals("NOTES") &&
+                CurrentProject.getNoteList().getNoteForDate(d) != null) {
+            label.setBackground(new Color(255, 245, 200));
+        } else if (currentPanel.equals("EVENTS") &&
+                (!(EventsManager.getEventsForDate(d).isEmpty()))) {
+            label.setBackground(new Color(255, 230, 230));
+        } else if (!isSelected) {
+            label.setBackground(Color.WHITE);
+        }
+
+        // always display NREvents
+        if (EventsManager.isNREventsForDate(d)) {
+            label.setIcon(evIcon);
+        } else {
+            label.setIcon(null);
         }
-		else { 		
-			label.setForeground(Color.BLACK);
-		}
-
-		// set background color
-		if (currentPanel == null)
-			label.setBackground(Color.WHITE);
-		
-		else if (currentPanel.equals("TASKS") && (t != null) && 
-			(d.inPeriod(t.getStartDate(), t.getEndDate()))) 
-				label.setBackground( new Color(230, 255, 230));
-		
-		else if(currentPanel.equals("NOTES") && 
-		CurrentProject.getNoteList().getNoteForDate(d) != null) 
-					label.setBackground(new Color(255,245,200));
-		
-		else if(currentPanel.equals("EVENTS") && 
-		(!(EventsManager.getEventsForDate(d).isEmpty()))) 
-					label.setBackground(new Color(255,230,230));
-		
-		else if(!isSelected)
-			label.setBackground(Color.WHITE);
-				
-		// always display NREvents
-		if (EventsManager.isNREventsForDate(d))
-			label.setIcon(evIcon);
-		else
-			label.setIcon(null);
-		
+
         return label;
     }
 
diff --git a/src/net/sf/memoranda/ui/JNCalendarPanel.java b/src/net/sf/memoranda/ui/JNCalendarPanel.java
index cf776b7..83d88a6 100755
--- a/src/net/sf/memoranda/ui/JNCalendarPanel.java
+++ b/src/net/sf/memoranda/ui/JNCalendarPanel.java
@@ -1,8 +1,15 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
+import net.sf.memoranda.*;
+import net.sf.memoranda.date.CalendarDate;
+import net.sf.memoranda.date.CurrentDate;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.border.Border;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.awt.event.KeyEvent;
@@ -10,290 +17,276 @@ import java.util.Calendar;
 import java.util.Enumeration;
 import java.util.Vector;
 
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JComboBox;
-import javax.swing.JPanel;
-import javax.swing.JSpinner;
-import javax.swing.JToolBar;
-import javax.swing.KeyStroke;
-import javax.swing.SpinnerNumberModel;
-import javax.swing.border.Border;
-import javax.swing.event.ChangeEvent;
-import javax.swing.event.ChangeListener;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.TaskList;
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.date.CurrentDate;
-import net.sf.memoranda.util.Local;
-
 /**
- * 
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 
 /*$Id: JNCalendarPanel.java,v 1.9 2004/04/05 10:05:44 alexeya Exp $*/
 public class JNCalendarPanel extends JPanel {
 
-  CalendarDate _date = CurrentDate.get();
-  JToolBar navigationBar = new JToolBar();
-  JPanel mntyPanel = new JPanel(new BorderLayout());
-  JPanel navbPanel = new JPanel(new BorderLayout());
-  JButton dayForwardB = new JButton();
-  JPanel dayForwardBPanel = new JPanel();
-  JButton todayB = new JButton();
-  JPanel todayBPanel = new JPanel();
-  JPanel dayBackBPanel = new JPanel();
-  JButton dayBackB = new JButton();
-  JComboBox monthsCB = new JComboBox(Local.getMonthNames());
-  BorderLayout borderLayout4 = new BorderLayout();
-  JNCalendar jnCalendar = new JNCalendar(CurrentDate.get());
-  JPanel jnCalendarPanel = new JPanel();
-  BorderLayout borderLayout5 = new BorderLayout();
-  JSpinner yearSpin = new JSpinner(new SpinnerNumberModel(jnCalendar.get().getYear(), 1980, 2999, 1));
-  JSpinner.NumberEditor yearSpinner = new JSpinner.NumberEditor(yearSpin, "####");
-
-  boolean ignoreChange = false;
-
-  private Vector selectionListeners = new Vector();
-
-  Border border1;
-  Border border2;
-
-  public JNCalendarPanel() {
-    try {
-      jbInit();
-    }
-    catch(Exception ex) {
-      new ExceptionDialog(ex);
+    CalendarDate _date = CurrentDate.get();
+    JToolBar navigationBar = new JToolBar();
+    JPanel mntyPanel = new JPanel(new BorderLayout());
+    JPanel navbPanel = new JPanel(new BorderLayout());
+    JButton dayForwardB = new JButton();
+    JPanel dayForwardBPanel = new JPanel();
+    JButton todayB = new JButton();
+    JPanel todayBPanel = new JPanel();
+    JPanel dayBackBPanel = new JPanel();
+    JButton dayBackB = new JButton();
+    JComboBox monthsCB = new JComboBox(Local.getMonthNames());
+    BorderLayout borderLayout4 = new BorderLayout();
+    JNCalendar jnCalendar = new JNCalendar(CurrentDate.get());
+    JPanel jnCalendarPanel = new JPanel();
+    BorderLayout borderLayout5 = new BorderLayout();
+    JSpinner yearSpin = new JSpinner(new SpinnerNumberModel(jnCalendar.get().getYear(), 1980, 2999, 1));
+    JSpinner.NumberEditor yearSpinner = new JSpinner.NumberEditor(yearSpin, "####");
+
+    boolean ignoreChange = false;
+
+    private Vector selectionListeners = new Vector();
+
+    Border border1;
+    Border border2;
+
+    public JNCalendarPanel() {
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
     }
-  }
 
-  public Action dayBackAction =
-        new AbstractAction(
+    public Action dayBackAction = new AbstractAction(
             "Go one day back",
             new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/back16.png"))) {
         public void actionPerformed(ActionEvent e) {
             dayBackB_actionPerformed(e);
         }
-  };
-  
-  public Action dayForwardAction =
-        new AbstractAction(
+    };
+
+    public Action dayForwardAction = new AbstractAction(
             "Go one day forward",
             new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/forward16.png"))) {
         public void actionPerformed(ActionEvent e) {
             dayForwardB_actionPerformed(e);
         }
-  };
-  
-  public Action todayAction =
-        new AbstractAction(
+    };
+
+    public Action todayAction = new AbstractAction(
             "Go to today",
             new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/today16.png"))) {
         public void actionPerformed(ActionEvent e) {
             todayB_actionPerformed(e);
         }
-  };
-      
-  void jbInit() throws Exception {
-    //dayBackAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, KeyEvent.ALT_MASK));
-    //dayForwardAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, KeyEvent.ALT_MASK));
-    todayAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_HOME, KeyEvent.ALT_MASK));
-    
-    monthsCB.setRequestFocusEnabled(false);
-    monthsCB.setMaximumRowCount(12);
-    monthsCB.setPreferredSize(new Dimension(50 , 20));
-    border1 = BorderFactory.createEmptyBorder(0,0,5,0);
-    border2 = BorderFactory.createEmptyBorder();
-    this.setLayout(new BorderLayout());
-    navigationBar.setFloatable(false);
-    dayForwardB.setAction(dayForwardAction);
-    dayForwardB.setMinimumSize(new Dimension(24, 24));
-    dayForwardB.setOpaque(false);
-    dayForwardB.setPreferredSize(new Dimension(24, 24));
-    dayForwardB.setRequestFocusEnabled(false);
-    dayForwardB.setBorderPainted(false);
-    dayForwardB.setFocusPainted(false);
-    dayForwardB.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/forward.png")));
-    dayForwardB.setText("");
-    dayForwardB.setToolTipText(Local.getString("One day forward"));
-    
-    dayForwardBPanel.setAlignmentX((float) 0.0);
-    dayForwardBPanel.setMinimumSize(new Dimension(40, 24));
-    dayForwardBPanel.setOpaque(false);
-    dayForwardBPanel.setPreferredSize(new Dimension(40, 24));
-    
-    todayB.setAction(todayAction);
-    todayB.setMinimumSize(new Dimension(24, 24));
-    todayB.setOpaque(false);
-    todayB.setPreferredSize(new Dimension(24, 24));
-    todayB.setRequestFocusEnabled(false);
-    todayB.setBorderPainted(false);
-    todayB.setFocusPainted(false);
-    todayB.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/today.png")));
-    todayB.setText("");
-    todayB.setToolTipText(Local.getString("To today"));
-    
-    dayBackBPanel.setAlignmentX((float) 1.5);
-    dayBackBPanel.setMinimumSize(new Dimension(40, 24));
-    dayBackBPanel.setOpaque(false);
-    dayBackBPanel.setPreferredSize(new Dimension(40, 24));
-    
-    dayBackB.setAction(dayBackAction);
-    dayBackB.setMinimumSize(new Dimension(24, 24));
-    dayBackB.setOpaque(false);
-    dayBackB.setPreferredSize(new Dimension(24, 24));
-    dayBackB.setRequestFocusEnabled(false);
-    dayBackB.setToolTipText("");
-    dayBackB.setBorderPainted(false);
-    dayBackB.setFocusPainted(false);
-    dayBackB.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/back.png")));
-    dayBackB.setText("");
-    dayBackB.setToolTipText(Local.getString("One day back"));
-    
-    yearSpin.setPreferredSize(new Dimension(70, 20));
-    yearSpin.setRequestFocusEnabled(false);
+    };
+
+    void jbInit() throws Exception {
+        //dayBackAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN, KeyEvent.ALT_MASK));
+        //dayForwardAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP, KeyEvent.ALT_MASK));
+        todayAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_HOME, KeyEvent.ALT_MASK));
+
+        monthsCB.setRequestFocusEnabled(false);
+        monthsCB.setMaximumRowCount(12);
+        monthsCB.setPreferredSize(new Dimension(50, 20));
+        border1 = BorderFactory.createEmptyBorder(0, 0, 5, 0);
+        border2 = BorderFactory.createEmptyBorder();
+        this.setLayout(new BorderLayout());
+        navigationBar.setFloatable(false);
+        dayForwardB.setAction(dayForwardAction);
+        dayForwardB.setMinimumSize(new Dimension(24, 24));
+        dayForwardB.setOpaque(false);
+        dayForwardB.setPreferredSize(new Dimension(24, 24));
+        dayForwardB.setRequestFocusEnabled(false);
+        dayForwardB.setBorderPainted(false);
+        dayForwardB.setFocusPainted(false);
+        dayForwardB.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/forward.png")));
+        dayForwardB.setText("");
+        dayForwardB.setToolTipText(Local.getString("One day forward"));
+
+        dayForwardBPanel.setAlignmentX((float) 0.0);
+        dayForwardBPanel.setMinimumSize(new Dimension(40, 24));
+        dayForwardBPanel.setOpaque(false);
+        dayForwardBPanel.setPreferredSize(new Dimension(40, 24));
+
+        todayB.setAction(todayAction);
+        todayB.setMinimumSize(new Dimension(24, 24));
+        todayB.setOpaque(false);
+        todayB.setPreferredSize(new Dimension(24, 24));
+        todayB.setRequestFocusEnabled(false);
+        todayB.setBorderPainted(false);
+        todayB.setFocusPainted(false);
+        todayB.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/today.png")));
+        todayB.setText("");
+        todayB.setToolTipText(Local.getString("To today"));
+
+        dayBackBPanel.setAlignmentX((float) 1.5);
+        dayBackBPanel.setMinimumSize(new Dimension(40, 24));
+        dayBackBPanel.setOpaque(false);
+        dayBackBPanel.setPreferredSize(new Dimension(40, 24));
+
+        dayBackB.setAction(dayBackAction);
+        dayBackB.setMinimumSize(new Dimension(24, 24));
+        dayBackB.setOpaque(false);
+        dayBackB.setPreferredSize(new Dimension(24, 24));
+        dayBackB.setRequestFocusEnabled(false);
+        dayBackB.setToolTipText("");
+        dayBackB.setBorderPainted(false);
+        dayBackB.setFocusPainted(false);
+        dayBackB.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/back.png")));
+        dayBackB.setText("");
+        dayBackB.setToolTipText(Local.getString("One day back"));
+
+        yearSpin.setPreferredSize(new Dimension(70, 20));
+        yearSpin.setRequestFocusEnabled(false);
         yearSpin.setEditor(yearSpinner);
-    navbPanel.setMinimumSize(new Dimension(202, 30));
-    navbPanel.setOpaque(false);
-    navbPanel.setPreferredSize(new Dimension(155, 30));
-    jnCalendar.getTableHeader().setFont(new java.awt.Font("Dialog", 1, 10));
-    jnCalendar.setFont(new java.awt.Font("Dialog", 0, 10));
-    jnCalendar.setGridColor(Color.lightGray);
-    jnCalendarPanel.setLayout(borderLayout5);
-    todayBPanel.setMinimumSize(new Dimension(68, 24));
-    todayBPanel.setOpaque(false);
-    todayBPanel.setPreferredSize(new Dimension(51, 24));
-    this.add(navigationBar, BorderLayout.NORTH);
-    navigationBar.add(navbPanel, null);
-    navbPanel.add(dayBackBPanel, BorderLayout.WEST);
-    dayBackBPanel.add(dayBackB, null);
-    navbPanel.add(todayBPanel, BorderLayout.CENTER);
-    todayBPanel.add(todayB, null);
-    navbPanel.add(dayForwardBPanel, BorderLayout.EAST);
-    dayForwardBPanel.add(dayForwardB, null);
-    this.add(mntyPanel,  BorderLayout.SOUTH);
-    mntyPanel.add(monthsCB, BorderLayout.CENTER);
-    mntyPanel.add(yearSpin,  BorderLayout.EAST);
-    this.add(jnCalendarPanel,  BorderLayout.CENTER);
-    jnCalendar.getTableHeader().setPreferredSize(new Dimension(200, 15));
-    jnCalendarPanel.add(jnCalendar.getTableHeader(), BorderLayout.NORTH);
-    jnCalendarPanel.add(jnCalendar, BorderLayout.CENTER);
-    jnCalendar.addSelectionListener(new ActionListener()  {
-      public void actionPerformed(ActionEvent e) {
-        setCurrentDateDay(jnCalendar.get(), jnCalendar.get().getDay());
-      }
-    });
-    /*CurrentDate.addChangeListener(new ActionListener()  {
-      public void actionPerformed(ActionEvent e) {
-        _date = CurrentDate.get();
-        refreshView();
-      }
-    });*/
-    monthsCB.setFont(new java.awt.Font("Dialog", 0, 11));
-
-    monthsCB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        monthsCB_actionPerformed(e);
-      }
-    });
-
-    yearSpin.addChangeListener(new ChangeListener() {
-      public void stateChanged(ChangeEvent e) {
-        yearSpin_actionPerformed();
-      }
-    });
-    CurrentProject.addProjectListener(new ProjectListener() {
-            public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {}
+        navbPanel.setMinimumSize(new Dimension(202, 30));
+        navbPanel.setOpaque(false);
+        navbPanel.setPreferredSize(new Dimension(155, 30));
+        jnCalendar.getTableHeader().setFont(new java.awt.Font("Dialog", 1, 10));
+        jnCalendar.setFont(new java.awt.Font("Dialog", 0, 10));
+        jnCalendar.setGridColor(Color.lightGray);
+        jnCalendarPanel.setLayout(borderLayout5);
+        todayBPanel.setMinimumSize(new Dimension(68, 24));
+        todayBPanel.setOpaque(false);
+        todayBPanel.setPreferredSize(new Dimension(51, 24));
+        this.add(navigationBar, BorderLayout.NORTH);
+        navigationBar.add(navbPanel, null);
+        navbPanel.add(dayBackBPanel, BorderLayout.WEST);
+        dayBackBPanel.add(dayBackB, null);
+        navbPanel.add(todayBPanel, BorderLayout.CENTER);
+        todayBPanel.add(todayB, null);
+        navbPanel.add(dayForwardBPanel, BorderLayout.EAST);
+        dayForwardBPanel.add(dayForwardB, null);
+        this.add(mntyPanel, BorderLayout.SOUTH);
+        mntyPanel.add(monthsCB, BorderLayout.CENTER);
+        mntyPanel.add(yearSpin, BorderLayout.EAST);
+        this.add(jnCalendarPanel, BorderLayout.CENTER);
+        jnCalendar.getTableHeader().setPreferredSize(new Dimension(200, 15));
+        jnCalendarPanel.add(jnCalendar.getTableHeader(), BorderLayout.NORTH);
+        jnCalendarPanel.add(jnCalendar, BorderLayout.CENTER);
+        jnCalendar.addSelectionListener(new ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                setCurrentDateDay(jnCalendar.get(), jnCalendar.get().getDay());
+            }
+        });
+
+        /*
+        CurrentDate.addChangeListener(new ActionListener()  {
+          public void actionPerformed(ActionEvent e) {
+            _date = CurrentDate.get();
+            refreshView();
+          }
+        });
+        */
+
+        monthsCB.setFont(new java.awt.Font("Dialog", 0, 11));
+
+        monthsCB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                monthsCB_actionPerformed(e);
+            }
+        });
+
+        yearSpin.addChangeListener(new ChangeListener() {
+            public void stateChanged(ChangeEvent e) {
+                yearSpin_actionPerformed();
+            }
+        });
+        CurrentProject.addProjectListener(new ProjectListener() {
+            public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {
+            }
+
             public void projectWasChanged() {
                 jnCalendar.updateUI();
             }
         });
 
 
-    refreshView();
-    yearSpin.setBorder(border2);
-    
-  }
+        refreshView();
+        yearSpin.setBorder(border2);
+
+    }
 
-  public void set(CalendarDate date) {
-    _date = date;
-    refreshView();
-  }
+    public void set(CalendarDate date) {
+        _date = date;
+        refreshView();
+    }
 
-  public CalendarDate get() {
-    return _date;
-  }
+    public CalendarDate get() {
+        return _date;
+    }
 
-  public void addSelectionListener(ActionListener al) {
+    public void addSelectionListener(ActionListener al) {
         selectionListeners.add(al);
     }
 
-  private void notifyListeners() {
-        for (Enumeration en = selectionListeners.elements(); en.hasMoreElements();)
-             ((ActionListener) en.nextElement()).actionPerformed(new ActionEvent(this, 0, "Calendar event"));
-  }
-
-  private void setCurrentDateDay(CalendarDate dt, int d) {
-    if (ignoreChange) return;
-    if (_date.equals(dt)) return;
-    _date = new CalendarDate(d, _date.getMonth(), _date.getYear());
-    notifyListeners();
-  }
-
-  private void refreshView() {
-    ignoreChange = true;
-    jnCalendar.set(_date);
-    monthsCB.setSelectedIndex(new Integer(_date.getMonth()));
-    yearSpin.setValue(new Integer(_date.getYear()));
-    ignoreChange = false;
-  }
-
-  void monthsCB_actionPerformed(ActionEvent e) {
-    if (ignoreChange) return;
-    _date = new CalendarDate(_date.getDay(), monthsCB.getSelectedIndex(), _date.getYear());
-    jnCalendar.set(_date);
-    notifyListeners();
-  }
-
-  void yearSpin_actionPerformed() {
-    if (ignoreChange) return;
-    _date = new CalendarDate(_date.getDay(), _date.getMonth(), ((Integer)yearSpin.getValue()).intValue());
-    jnCalendar.set(_date);
-    notifyListeners();
-  }
-
-  void dayBackB_actionPerformed(ActionEvent e) {
-    Calendar cal = _date.getCalendar();
-    cal.add(Calendar.DATE, -1); cal.getTime();
-    _date = new CalendarDate(cal);
-    refreshView();
-    notifyListeners();
-  }
-
-  void todayB_actionPerformed(ActionEvent e) {
-    _date = CalendarDate.today();
-    refreshView();
-    notifyListeners();
-  }
-
-  void dayForwardB_actionPerformed(ActionEvent e) {
-    Calendar cal = _date.getCalendar();
-    cal.add(Calendar.DATE, 1); cal.getTime();
-    _date = new CalendarDate(cal);
-    refreshView();
-    notifyListeners();
-  }
+    private void notifyListeners() {
+        for (Enumeration en = selectionListeners.elements(); en.hasMoreElements(); ) {
+            ((ActionListener) en.nextElement()).actionPerformed(new ActionEvent(this, 0, "Calendar event"));
+        }
+    }
+
+    private void setCurrentDateDay(CalendarDate dt, int d) {
+        if (ignoreChange) {
+            return;
+        }
+        if (_date.equals(dt)) {
+            return;
+        }
+        _date = new CalendarDate(d, _date.getMonth(), _date.getYear());
+        notifyListeners();
+    }
+
+    private void refreshView() {
+        ignoreChange = true;
+        jnCalendar.set(_date);
+        monthsCB.setSelectedIndex(new Integer(_date.getMonth()));
+        yearSpin.setValue(new Integer(_date.getYear()));
+        ignoreChange = false;
+    }
+
+    void monthsCB_actionPerformed(ActionEvent e) {
+        if (ignoreChange) {
+            return;
+        }
+        _date = new CalendarDate(_date.getDay(), monthsCB.getSelectedIndex(), _date.getYear());
+        jnCalendar.set(_date);
+        notifyListeners();
+    }
+
+    void yearSpin_actionPerformed() {
+        if (ignoreChange) {
+            return;
+        }
+        _date = new CalendarDate(_date.getDay(), _date.getMonth(), ((Integer) yearSpin.getValue()).intValue());
+        jnCalendar.set(_date);
+        notifyListeners();
+    }
+
+    void dayBackB_actionPerformed(ActionEvent e) {
+        Calendar cal = _date.getCalendar();
+        cal.add(Calendar.DATE, -1);
+        cal.getTime();
+        _date = new CalendarDate(cal);
+        refreshView();
+        notifyListeners();
+    }
 
+    void todayB_actionPerformed(ActionEvent e) {
+        _date = CalendarDate.today();
+        refreshView();
+        notifyListeners();
+    }
+
+    void dayForwardB_actionPerformed(ActionEvent e) {
+        Calendar cal = _date.getCalendar();
+        cal.add(Calendar.DATE, 1);
+        cal.getTime();
+        _date = new CalendarDate(cal);
+        refreshView();
+        notifyListeners();
+    }
 
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/NotesControlPanel.java b/src/net/sf/memoranda/ui/NotesControlPanel.java
index 328cab4..549161c 100755
--- a/src/net/sf/memoranda/ui/NotesControlPanel.java
+++ b/src/net/sf/memoranda/ui/NotesControlPanel.java
@@ -1,35 +1,19 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.KeyEvent;
-
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBoxMenuItem;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JPopupMenu;
-import javax.swing.JTabbedPane;
-import javax.swing.JToolBar;
-import javax.swing.event.ChangeEvent;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
-
-import net.sf.memoranda.CurrentProject;
 import net.sf.memoranda.CurrentNote;
+import net.sf.memoranda.CurrentProject;
 import net.sf.memoranda.Note;
 import net.sf.memoranda.date.CurrentDate;
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Configuration;
+import net.sf.memoranda.util.CurrentStorage;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import java.awt.*;
+import java.awt.event.*;
 //import net.sf.memoranda.ui.App;
 //import net.sf.memoranda.ui.AppFrame;
 
@@ -49,19 +33,17 @@ public class NotesControlPanel extends JPanel {
     JPanel buttonsPanel = new JPanel();
     JMenuItem ppAddBkmrk = new JMenuItem();
     JMenuItem ppClearNote = new JMenuItem();
-//    JMenuItem ppInvertSort = new JMenuItem();
-	JCheckBoxMenuItem ppInvertSort = new JCheckBoxMenuItem();
+    //    JMenuItem ppInvertSort = new JMenuItem();
+    JCheckBoxMenuItem ppInvertSort = new JCheckBoxMenuItem();
     JPopupMenu notesPPMenu = new JPopupMenu();
     JMenuItem ppOpenNote = new JMenuItem();
     JMenuItem ppRemoveBkmrk = new JMenuItem();
 
-	
+
     public NotesControlPanel() {
         try {
             jbInit();
-
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
@@ -93,7 +75,7 @@ public class NotesControlPanel extends JPanel {
             }
         });
         ppOpenB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/nopen.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/nopen.png")));
         buttonsPanel.setMinimumSize(new Dimension(70, 22));
         buttonsPanel.setOpaque(false);
         //buttonsPanel.setPreferredSize(new Dimension(80, 22));
@@ -107,7 +89,7 @@ public class NotesControlPanel extends JPanel {
             }
         });
         ppAddBkmrk.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/addbookmark.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/addbookmark.png")));
         ppClearNote.setFont(new java.awt.Font("Dialog", 1, 11));
         ppClearNote.setText(Local.getString("Clear note"));
         ppClearNote.addActionListener(new java.awt.event.ActionListener() {
@@ -116,7 +98,7 @@ public class NotesControlPanel extends JPanel {
             }
         });
         ppClearNote.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/editdelete.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/editdelete.png")));
         ppClearNote.setEnabled(false);
         notesPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
         ppOpenNote.setFont(new java.awt.Font("Dialog", 1, 11));
@@ -136,10 +118,10 @@ public class NotesControlPanel extends JPanel {
             }
         });
         ppInvertSort.setEnabled(true);
-		boolean descSort =
-			(Configuration.get("NOTES_SORT_ORDER").equals("true"));
-		ppInvertSort.setSelected(descSort);
-		
+        boolean descSort =
+                (Configuration.get("NOTES_SORT_ORDER").equals("true"));
+        ppInvertSort.setSelected(descSort);
+
         ppRemoveBkmrk.setFont(new java.awt.Font("Dialog", 1, 11));
         ppRemoveBkmrk.setText(Local.getString("Remove bookmark"));
         ppRemoveBkmrk.addActionListener(new java.awt.event.ActionListener() {
@@ -148,7 +130,7 @@ public class NotesControlPanel extends JPanel {
             }
         });
         ppRemoveBkmrk.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/removebookmark.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/removebookmark.png")));
         ppRemoveBkmrk.setEnabled(false);
         tabbedPane.add(notesListPanel, Local.getString("Notes"));
         tabbedPane.add(bookmarksListPanel, Local.getString("Bookmarks"));
@@ -156,7 +138,7 @@ public class NotesControlPanel extends JPanel {
         this.add(toolBar, BorderLayout.NORTH);
         buttonsPanel.add(ppOpenB, null);
         toolBar.add(buttonsPanel, null);
-        toolBar.addSeparator();        
+        toolBar.addSeparator();
         this.add(tabbedPane, BorderLayout.CENTER);
 
         PopupListener lst = new PopupListener();
@@ -165,7 +147,7 @@ public class NotesControlPanel extends JPanel {
         searchPanel.notesList.addMouseListener(lst);
         ListSelectionListener lsl = new ListSelectionListener() {
             public void valueChanged(ListSelectionEvent e) {
-		ppSetEnabled();
+                ppSetEnabled();
             }
         };
         notesListPanel.notesList.getSelectionModel().addListSelectionListener(lsl);
@@ -174,26 +156,30 @@ public class NotesControlPanel extends JPanel {
         notesList = notesListPanel.notesList;
         notesPPMenu.add(ppOpenNote);
         notesPPMenu.add(ppInvertSort);
-        notesPPMenu.addSeparator();        
+        notesPPMenu.addSeparator();
         notesPPMenu.add(ppAddBkmrk);
         notesPPMenu.add(ppRemoveBkmrk);
         notesPPMenu.addSeparator();
         notesPPMenu.add(ppClearNote);
 
-		// remove notes using the DEL key
-		KeyListener delNotes = new KeyListener() {
-			public void keyPressed(KeyEvent e){
-				if(e.getKeyCode()==KeyEvent.VK_DELETE) {
-					ppClearNote_actionPerformed(null);
-				}
-			}
-			public void	keyReleased(KeyEvent e){}
-			public void keyTyped(KeyEvent e){} 
-		};
-		
-		notesListPanel.notesList.addKeyListener(delNotes);
-		bookmarksListPanel.notesList.addKeyListener(delNotes);
-		searchPanel.notesList.addKeyListener(delNotes);
+        // remove notes using the DEL key
+        KeyListener delNotes = new KeyListener() {
+            public void keyPressed(KeyEvent e) {
+                if (e.getKeyCode() == KeyEvent.VK_DELETE) {
+                    ppClearNote_actionPerformed(null);
+                }
+            }
+
+            public void keyReleased(KeyEvent e) {
+            }
+
+            public void keyTyped(KeyEvent e) {
+            }
+        };
+
+        notesListPanel.notesList.addKeyListener(delNotes);
+        bookmarksListPanel.notesList.addKeyListener(delNotes);
+        searchPanel.notesList.addKeyListener(delNotes);
     }
 
     public void refresh() {
@@ -202,57 +188,60 @@ public class NotesControlPanel extends JPanel {
     }
 
     void tabbedPane_stateChanged(ChangeEvent e) {
-	if(notesList!=null) notesList.clearSelection();
+        if (notesList != null) {
+            notesList.clearSelection();
+        }
         switch (tabbedPane.getSelectedIndex()) {
-            case 0 :
+            case 0:
                 notesList = notesListPanel.notesList;
                 break;
-            case 1 :
+            case 1:
                 notesList = bookmarksListPanel.notesList;
                 break;
-            case 2 :
+            case 2:
                 notesList = searchPanel.notesList;
                 break;
         }
 
-	ppAddBkmrk.setEnabled(false);
-	ppRemoveBkmrk.setEnabled(false);
+        ppAddBkmrk.setEnabled(false);
+        ppRemoveBkmrk.setEnabled(false);
     }
 
     class PopupListener extends MouseAdapter {
 
         public void mouseClicked(MouseEvent e) {
-            if (e.getClickCount() == 2)
+            if (e.getClickCount() == 2) {
                 setActiveNote();
+            }
         }
 
         public void mousePressed(MouseEvent e) {
-             maybeShowPopup(e);
-         }
-        
-         public void mouseReleased(MouseEvent e) {
-             maybeShowPopup(e);
-         }
-        
-         private void maybeShowPopup(MouseEvent e) {
-             if (e.isPopupTrigger()) {
-                 notesPPMenu.show(e.getComponent(), e.getX(), e.getY());
-             }
-         }
+            maybeShowPopup(e);
+        }
+
+        public void mouseReleased(MouseEvent e) {
+            maybeShowPopup(e);
+        }
+
+        private void maybeShowPopup(MouseEvent e) {
+            if (e.isPopupTrigger()) {
+                notesPPMenu.show(e.getComponent(), e.getX(), e.getY());
+            }
+        }
     }
 
     void setActiveNote() {
         Note note = (Note) notesList.getNote(notesList.getSelectedIndex());
         CurrentDate.set(note.getDate());
-		CurrentNote.set(note,true);
+        CurrentNote.set(note, true);
     }
-   
+
 
     void ppOpenB_actionPerformed(ActionEvent e) {
         notesPPMenu.show(
-            toolBar,
-            (int) ppOpenB.getLocation().getX(),
-            (int) ppOpenB.getLocation().getY() + 24);
+                toolBar,
+                (int) ppOpenB.getLocation().getX(),
+                (int) ppOpenB.getLocation().getY() + 24);
     }
 
     void ppAddBkmrk_actionPerformed(ActionEvent e) {
@@ -262,64 +251,67 @@ public class NotesControlPanel extends JPanel {
         }
         notesList.updateUI();
         bookmarksListPanel.notesList.update();
-	ppSetEnabled();
+        ppSetEnabled();
     }
 
     void ppClearNote_actionPerformed(ActionEvent e) {
         String msg;
-        if (notesList.getSelectedIndices().length > 1)
+        if (notesList.getSelectedIndices().length > 1) {
             msg =
-                Local.getString(Local.getString("Clear"))
-                    + " "
-                    + notesList.getSelectedIndices().length
-                    + " "
-                    + Local.getString("notes")
-                    + "\n"
-                    + Local.getString("Are you sure?");
-        else
+                    Local.getString(Local.getString("Clear"))
+                            + " "
+                            + notesList.getSelectedIndices().length
+                            + " "
+                            + Local.getString("notes")
+                            + "\n"
+                            + Local.getString("Are you sure?");
+        } else {
             msg =
-                Local.getString("Clear note")
-                    + "\n'"
-                    + ((Note) notesList.getNote(notesList.getSelectedIndex())).getDate().getFullDateString()
-                    + "'\n"
-                    + Local.getString("Are you sure?");
+                    Local.getString("Clear note")
+                            + "\n'"
+                            + ((Note) notesList.getNote(notesList.getSelectedIndex())).getDate().getFullDateString()
+                            + "'\n"
+                            + Local.getString("Are you sure?");
+        }
 
         int n =
-            JOptionPane.showConfirmDialog(
-                App.getFrame(),
-                msg,
-                Local.getString("Clear note"),
-                JOptionPane.YES_NO_OPTION);
-        if (n != JOptionPane.YES_OPTION)
+                JOptionPane.showConfirmDialog(
+                        App.getFrame(),
+                        msg,
+                        Local.getString("Clear note"),
+                        JOptionPane.YES_NO_OPTION);
+        if (n != JOptionPane.YES_OPTION) {
             return;
+        }
 
         for (int i = 0; i < notesList.getSelectedIndices().length; i++) {
             Note note = (Note) notesList.getNote(notesList.getSelectedIndices()[i]);
-			if(CurrentProject.getNoteList().getActiveNote() != null && note.getDate().equals(CurrentProject.getNoteList().getActiveNote().getDate())){ 
-				/*Debug*/ System.out.println("[DEBUG] Current note removed");
-				CurrentNote.set(null,true);
-			}
-			CurrentProject.getNoteList().removeNote(note.getDate(), note.getId());
-			CurrentStorage.get().removeNote(note);
+            if (CurrentProject.getNoteList().getActiveNote() != null && note.getDate().equals(CurrentProject.getNoteList().getActiveNote().getDate())) {
+                /*Debug*/
+                System.out.println("[DEBUG] Current note removed");
+                CurrentNote.set(null, true);
+            }
+            CurrentProject.getNoteList().removeNote(note.getDate(), note.getId());
+            CurrentStorage.get().removeNote(note);
         }
         bookmarksListPanel.notesList.update();
-		searchPanel.notesList.update();
-		notesListPanel.notesList.update();
+        searchPanel.notesList.update();
+        notesListPanel.notesList.update();
         notesList.updateUI();
-		notesList.clearSelection();
-//		notesList.requestFocus();*/
-//		((AppFrame)App.getFrame()).workPanel.dailyItemsPanel.editorPanel.editor.requestFocus();
+        notesList.clearSelection();
+        //      notesList.requestFocus();*/
+        //      ((AppFrame)App.getFrame()).workPanel.dailyItemsPanel.editorPanel.editor.requestFocus();
     }
-	
+
     void ppOpenNote_actionPerformed(ActionEvent e) {
         setActiveNote();
     }
 
     void ppInvertSort_actionPerformed(ActionEvent e) {
-		Configuration.put(
-			"NOTES_SORT_ORDER",
-			new Boolean(ppInvertSort.isSelected()));
-		Configuration.saveConfig();
+        Configuration.put(
+                "NOTES_SORT_ORDER",
+                new Boolean(ppInvertSort.isSelected()));
+        Configuration.saveConfig();
         notesList.invertSortOrder();
         notesList.update();
     }
@@ -330,20 +322,20 @@ public class NotesControlPanel extends JPanel {
             note.setMark(false);
         }
         bookmarksListPanel.notesList.update();
-	ppSetEnabled();
+        ppSetEnabled();
         notesList.updateUI();
-	notesList.clearSelection();
-	((AppFrame)App.getFrame()).workPanel.dailyItemsPanel.editorPanel.editor.requestFocus();	
+        notesList.clearSelection();
+        ((AppFrame) App.getFrame()).workPanel.dailyItemsPanel.editorPanel.editor.requestFocus();
     }
 
     void ppSetEnabled() {
-    boolean enbl = (notesList.getModel().getSize() > 0) && (notesList.getSelectedIndex() > -1);
-
-    ppRemoveBkmrk.setEnabled(enbl && (((Note) notesList.getNote(notesList.getSelectedIndex())).isMarked())
-    				|| notesList.getSelectedIndices().length > 1);
-    ppAddBkmrk.setEnabled(enbl && !(((Note) notesList.getNote(notesList.getSelectedIndex())).isMarked())
-    				|| notesList.getSelectedIndices().length > 1);
-    ppOpenNote.setEnabled(enbl);
-    ppClearNote.setEnabled(enbl);
+        boolean enbl = (notesList.getModel().getSize() > 0) && (notesList.getSelectedIndex() > -1);
+
+        ppRemoveBkmrk.setEnabled(enbl && (((Note) notesList.getNote(notesList.getSelectedIndex())).isMarked())
+                || notesList.getSelectedIndices().length > 1);
+        ppAddBkmrk.setEnabled(enbl && !(((Note) notesList.getNote(notesList.getSelectedIndex())).isMarked())
+                || notesList.getSelectedIndices().length > 1);
+        ppOpenNote.setEnabled(enbl);
+        ppClearNote.setEnabled(enbl);
     }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/NotesList.java b/src/net/sf/memoranda/ui/NotesList.java
index 1feefa7..5d03a63 100755
--- a/src/net/sf/memoranda/ui/NotesList.java
+++ b/src/net/sf/memoranda/ui/NotesList.java
@@ -1,37 +1,21 @@
 package net.sf.memoranda.ui;
 
-import java.awt.Component;
-import java.awt.Font;
-import java.util.Collections;
-import java.util.Vector;
-
-import javax.swing.AbstractListModel;
-import javax.swing.DefaultListCellRenderer;
-import javax.swing.ImageIcon;
-import javax.swing.JLabel;
-import javax.swing.JList;
-import javax.swing.ListCellRenderer;
-import javax.swing.ListSelectionModel;
-
-import net.sf.memoranda.CurrentNote;
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.Note;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.NoteListener;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.TaskList;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
 import net.sf.memoranda.util.Configuration;
+
+import javax.swing.*;
+import java.awt.*;
+import java.util.Collections;
+import java.util.Vector;
 //import net.sf.memoranda.util.NotesVectorSorter;
 
 /*$Id: NotesList.java,v 1.9 2005/05/05 16:19:16 ivanrise Exp $*/
 public class NotesList extends JList {
 
-    public static final int EMPTY = 0;    
+    public static final int EMPTY = 0;
     public static final int ALL = 1;
     public static final int BOOKMARKS = 2;
 
@@ -42,9 +26,9 @@ public class NotesList extends JList {
 
     public NotesList(int type) {
         super();
-		if(Configuration.get("NOTES_SORT_ORDER").toString().equalsIgnoreCase("true")) {
-			sortOrderDesc = true;
-		}
+        if (Configuration.get("NOTES_SORT_ORDER").toString().equalsIgnoreCase("true")) {
+            sortOrderDesc = true;
+        }
         _type = type;
         this.setFont(new java.awt.Font("Dialog", 0, 11));
         this.setModel(new NotesListModel());
@@ -53,7 +37,7 @@ public class NotesList extends JList {
                 updateUI();
             }
         });
-		
+
         CurrentNote.addNoteListener(new NoteListener() {
             public void noteChange(Note n, boolean toSaveCurrentNote) {
                 updateUI();
@@ -63,6 +47,7 @@ public class NotesList extends JList {
         CurrentProject.addProjectListener(new ProjectListener() {
             public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {
             }
+
             public void projectWasChanged() {
                 update();
             }
@@ -77,55 +62,55 @@ public class NotesList extends JList {
     public void update() {
         if (_type != EMPTY) {
             update(CurrentProject.getNoteList());
-		}
-        else {
-			update(new Vector());
-		}
+        } else {
+            update(new Vector());
+        }
     }
 
     public void update(NoteList nl) {
-        if (_type == ALL)
+        if (_type == ALL) {
             notes = (Vector) nl.getAllNotes();
-        else
+        } else {
             notes = (Vector) nl.getMarkedNotes();
-        
-//        Util.debug("No. of notes in noteList " + notes.size());
+        }
+
+        //        Util.debug("No. of notes in noteList " + notes.size());
         //NotesVectorSorter.sort(notes);
-		Collections.sort(notes);
-		if (sortOrderDesc) {
-			Collections.reverse(notes);		    
-		}
+        Collections.sort(notes);
+        if (sortOrderDesc) {
+            Collections.reverse(notes);
+        }
         updateUI();
     }
 
     public void update(Vector ns) {
         notes = ns;
         // NotesVectorSorter.sort(notes);
-		Collections.sort(notes);
-		if (sortOrderDesc) {
-			Collections.reverse(notes);		    
-		}		
+        Collections.sort(notes);
+        if (sortOrderDesc) {
+            Collections.reverse(notes);
+        }
         updateUI();
     }
 
-    public Note getNote(int index){
+    public Note getNote(int index) {
         return (Note) notes.get(index);
     }
-    
+
     void invertSortOrder() {
         sortOrderDesc = !sortOrderDesc;
     }
 
 
     /*$Id: NotesList.java,v 1.9 2005/05/05 16:19:16 ivanrise Exp $*/
-public class NotesListModel extends AbstractListModel<Object> {
+    public class NotesListModel extends AbstractListModel<Object> {
 
         public NotesListModel() {
             update();
         }
 
         public Object getElementAt(int i) {
-            Note note = (Note)notes.get(i);
+            Note note = (Note) notes.get(i);
             return note.getDate().getShortDateString() + " " + note.getTitle();
         }
 
@@ -138,44 +123,46 @@ public class NotesListModel extends AbstractListModel<Object> {
     ImageIcon bookmarkIcon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/star8.png"));
 
     public ListCellRenderer getCellRenderer() {
-        return new DefaultListCellRenderer()  {
-
-     public Component getListCellRendererComponent(
-       JList list,
-       Object value,            // value to display
-       int index,               // cell index
-       boolean isSelected,      // is the cell selected
-       boolean cellHasFocus)    // the list and the cell have the focus
-     {
-         JLabel label = (JLabel)super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
-         String s = value.toString();
-         label.setText(s);
-         //Note currentNote = CurrentProject.getNoteList().getActiveNote();
-		 Note currentNote = CurrentNote.get();
-         if (currentNote != null) {
-            if (getNote(index).getId().equals(currentNote.getId()))
-                label.setFont(label.getFont().deriveFont(Font.BOLD));
-         }
-         if (getNote(index).isMarked())
-            label.setIcon(bookmarkIcon);
-         //setIcon();
-       /*if (isSelected) {
-             setBackground(list.getSelectionBackground());
-           setForeground(list.getSelectionForeground());
-       }
-         else {
-           setBackground(list.getBackground());
-           setForeground(list.getForeground());
-       }
-       setEnabled(list.isEnabled());
-       setFont(list.getFont());
-         setOpaque(true);*/
-         label.setToolTipText(s);
-         return label;
-     }
-    };
-
- }
-
-
-}
\ No newline at end of file
+        return new DefaultListCellRenderer() {
+
+            public Component getListCellRendererComponent(
+                    JList list,
+                    Object value,            // value to display
+                    int index,               // cell index
+                    boolean isSelected,      // is the cell selected
+                    boolean cellHasFocus) {  // the list and the cell have the focus
+                JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
+                String s = value.toString();
+                label.setText(s);
+                //Note currentNote = CurrentProject.getNoteList().getActiveNote();
+                Note currentNote = CurrentNote.get();
+                if (currentNote != null) {
+                    if (getNote(index).getId().equals(currentNote.getId())) {
+                        label.setFont(label.getFont().deriveFont(Font.BOLD));
+                    }
+                }
+                if (getNote(index).isMarked()) {
+                    label.setIcon(bookmarkIcon);
+                }
+
+                /*
+                setIcon();
+
+                if (isSelected) {
+                    setBackground(list.getSelectionBackground());
+                    setForeground(list.getSelectionForeground());
+                } else {
+                   setBackground(list.getBackground());
+                   setForeground(list.getForeground());
+                }
+                setEnabled(list.isEnabled());
+                setFont(list.getFont());
+                setOpaque(true);
+                */
+
+                label.setToolTipText(s);
+                return label;
+            }
+        };
+    }
+}
diff --git a/src/net/sf/memoranda/ui/NotesListPanel.java b/src/net/sf/memoranda/ui/NotesListPanel.java
index 951f54d..9af0734 100755
--- a/src/net/sf/memoranda/ui/NotesListPanel.java
+++ b/src/net/sf/memoranda/ui/NotesListPanel.java
@@ -1,27 +1,25 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
+import javax.swing.*;
+import java.awt.*;
 
 /*$Id: NotesListPanel.java,v 1.5 2005/01/29 13:55:26 rawsushi Exp $*/
 public class NotesListPanel extends JPanel {
-  BorderLayout borderLayout1 = new BorderLayout();
-  JScrollPane scrollPane = new JScrollPane();
-  public NotesList notesList = new NotesList();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JScrollPane scrollPane = new JScrollPane();
+    public NotesList notesList = new NotesList();
 
-  public NotesListPanel() {
-    try {
-      jbInit();
+    public NotesListPanel() {
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
     }
-    catch(Exception ex) {
-      new ExceptionDialog(ex);
+
+    void jbInit() throws Exception {
+        this.setLayout(borderLayout1);
+        this.add(scrollPane, BorderLayout.CENTER);
+        scrollPane.getViewport().add(notesList, null);
     }
-  }
-  void jbInit() throws Exception {
-    this.setLayout(borderLayout1);
-    this.add(scrollPane, BorderLayout.CENTER);
-    scrollPane.getViewport().add(notesList, null);
-  }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/PreferencesDialog.java b/src/net/sf/memoranda/ui/PreferencesDialog.java
index 1fd11e6..0211b95 100755
--- a/src/net/sf/memoranda/ui/PreferencesDialog.java
+++ b/src/net/sf/memoranda/ui/PreferencesDialog.java
@@ -1,895 +1,916 @@
 package net.sf.memoranda.ui;
 
-import java.io.File;
-import java.util.Vector;
-
+import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.util.Configuration;
 import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Local;
 import net.sf.memoranda.util.MimeTypesList;
-import java.awt.*;
-import net.sf.memoranda.date.CurrentDate;
+
 import javax.swing.*;
-import javax.swing.border.*;
-import java.awt.event.*;
+import javax.swing.border.Border;
+import javax.swing.border.TitledBorder;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.File;
+import java.util.Vector;
 
 /*$Id: PreferencesDialog.java,v 1.16 2006/06/28 22:58:31 alexeya Exp $*/
 public class PreferencesDialog extends JDialog {
-	JPanel topPanel = new JPanel(new BorderLayout());
+    JPanel topPanel = new JPanel(new BorderLayout());
+
+    JTabbedPane tabbedPanel = new JTabbedPane();
 
-	JTabbedPane tabbedPanel = new JTabbedPane();
+    JPanel GeneralPanel = new JPanel(new GridBagLayout());
 
-	JPanel GeneralPanel = new JPanel(new GridBagLayout());
+    GridBagConstraints gbc;
 
-	GridBagConstraints gbc;
+    JLabel jLabel1 = new JLabel();
 
-	JLabel jLabel1 = new JLabel();
+    ButtonGroup minGroup = new ButtonGroup();
 
-	ButtonGroup minGroup = new ButtonGroup();
+    JRadioButton minTaskbarRB = new JRadioButton();
 
-	JRadioButton minTaskbarRB = new JRadioButton();
+    JRadioButton minHideRB = new JRadioButton();
 
-	JRadioButton minHideRB = new JRadioButton();
+    ButtonGroup closeGroup = new ButtonGroup();
 
-	ButtonGroup closeGroup = new ButtonGroup();
+    JLabel jLabel2 = new JLabel();
 
-	JLabel jLabel2 = new JLabel();
+    JRadioButton closeExitRB = new JRadioButton();
 
-	JRadioButton closeExitRB = new JRadioButton();
+    JCheckBox askConfirmChB = new JCheckBox();
 
-	JCheckBox askConfirmChB = new JCheckBox();
+    JRadioButton closeHideRB = new JRadioButton();
 
-	JRadioButton closeHideRB = new JRadioButton();
+    JLabel jLabel3 = new JLabel();
 
-	JLabel jLabel3 = new JLabel();
+    ButtonGroup lfGroup = new ButtonGroup();
 
-	ButtonGroup lfGroup = new ButtonGroup();
+    JRadioButton lfSystemRB = new JRadioButton();
 
-	JRadioButton lfSystemRB = new JRadioButton();
+    JRadioButton lfJavaRB = new JRadioButton();
 
-	JRadioButton lfJavaRB = new JRadioButton();
+    JRadioButton lfCustomRB = new JRadioButton();
 
-	JRadioButton lfCustomRB = new JRadioButton();
+    JLabel classNameLabel = new JLabel();
 
-	JLabel classNameLabel = new JLabel();
+    JTextField lfClassName = new JTextField();
 
-	JTextField lfClassName = new JTextField();
+    JLabel jLabel4 = new JLabel();
 
-	JLabel jLabel4 = new JLabel();
+    JCheckBox enSystrayChB = new JCheckBox();
 
-	JCheckBox enSystrayChB = new JCheckBox();
+    JCheckBox startMinimizedChB = new JCheckBox();
 
-	JCheckBox startMinimizedChB = new JCheckBox();
+    JCheckBox enSplashChB = new JCheckBox();
 
-	JCheckBox enSplashChB = new JCheckBox();
+    JCheckBox enL10nChB = new JCheckBox();
 
-	JCheckBox enL10nChB = new JCheckBox();
+    JCheckBox firstdow = new JCheckBox();
 
-	JCheckBox firstdow = new JCheckBox();
+    JPanel resourcePanel = new JPanel(new BorderLayout());
 
-	JPanel resourcePanel = new JPanel(new BorderLayout());
+    ResourceTypePanel resourceTypePanel = new ResourceTypePanel();
 
-	ResourceTypePanel resourceTypePanel = new ResourceTypePanel();
+    Border rstPanelBorder;
 
-	Border rstPanelBorder;
+    JPanel rsBottomPanel = new JPanel(new GridBagLayout());
 
-	JPanel rsBottomPanel = new JPanel(new GridBagLayout());
+    TitledBorder rsbpBorder;
 
-	TitledBorder rsbpBorder;
+    JButton okB = new JButton();
 
-	JButton okB = new JButton();
+    JButton cancelB = new JButton();
 
-	JButton cancelB = new JButton();
+    JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
 
-	JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
+    JLabel jLabel5 = new JLabel();
 
-	JLabel jLabel5 = new JLabel();
+    JTextField browserPath = new JTextField();
 
-	JTextField browserPath = new JTextField();
+    JButton browseB = new JButton();
 
-	JButton browseB = new JButton();
+    JLabel lblExit = new JLabel();
 
-	JLabel lblExit = new JLabel();
+    JPanel soundPanel = new JPanel();
 
-	JPanel soundPanel = new JPanel();
+    JCheckBox enableSoundCB = new JCheckBox();
 
-	JCheckBox enableSoundCB = new JCheckBox();
+    BorderLayout borderLayout1 = new BorderLayout();
 
-	BorderLayout borderLayout1 = new BorderLayout();
+    TitledBorder titledBorder1;
 
-	TitledBorder titledBorder1;
+    ButtonGroup soundGroup = new ButtonGroup();
 
-	ButtonGroup soundGroup = new ButtonGroup();
+    JPanel jPanel2 = new JPanel();
 
-	JPanel jPanel2 = new JPanel();
+    JButton soundFileBrowseB = new JButton();
 
-	JButton soundFileBrowseB = new JButton();
+    GridLayout gridLayout1 = new GridLayout();
 
-	GridLayout gridLayout1 = new GridLayout();
+    JPanel jPanel1 = new JPanel();
 
-	JPanel jPanel1 = new JPanel();
+    JRadioButton soundBeepRB = new JRadioButton();
 
-	JRadioButton soundBeepRB = new JRadioButton();
+    JLabel jLabel6 = new JLabel();
 
-	JLabel jLabel6 = new JLabel();
+    JTextField soundFile = new JTextField();
 
-	JTextField soundFile = new JTextField();
+    JRadioButton soundDefaultRB = new JRadioButton();
 
-	JRadioButton soundDefaultRB = new JRadioButton();
+    BorderLayout borderLayout3 = new BorderLayout();
 
-	BorderLayout borderLayout3 = new BorderLayout();
+    JPanel jPanel3 = new JPanel();
 
-	JPanel jPanel3 = new JPanel();
+    JRadioButton soundCustomRB = new JRadioButton();
 
-	JRadioButton soundCustomRB = new JRadioButton();
+    BorderLayout borderLayout2 = new BorderLayout();
 
-	BorderLayout borderLayout2 = new BorderLayout();
-	
-	JPanel editorConfigPanel = new JPanel(new BorderLayout());
-	JPanel econfPanel = new JPanel(new GridLayout(5, 2));
-	Vector fontnames = getFontNames();
-	JComboBox normalFontCB = new JComboBox(fontnames);
-	JComboBox headerFontCB = new JComboBox(fontnames);
-	JComboBox monoFontCB = new JComboBox(fontnames);
-	JSpinner baseFontSize = new JSpinner();
-	JCheckBox antialiasChB = new JCheckBox();
-	JLabel normalFontLabel = new JLabel();
-	JLabel headerFontLabel = new JLabel();
-	JLabel monoFontLabel = new JLabel();
-	JLabel baseFontSizeLabel = new JLabel();
-
-	public PreferencesDialog(Frame frame) {
-		super(frame, Local.getString("Preferences"), true);
-		try {
-			jbInit();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
-
-	public PreferencesDialog() {
-		this(null);
-	}
-
-	void jbInit() throws Exception {
-		titledBorder1 = new TitledBorder(BorderFactory.createEtchedBorder(
-				Color.white, new Color(156, 156, 158)), Local
-				.getString("Sound"));
-		this.setResizable(false);
-		// Build Tab1
-		jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);
-		jLabel1.setText(Local.getString("Window minimize action:"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0;
-		gbc.gridy = 0;
-		gbc.insets = new Insets(10, 10, 0, 15);
-		gbc.anchor = GridBagConstraints.EAST;
-		enableSoundCB.setText(Local.getString("Enable sound notifications"));
-		enableSoundCB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				enableSoundCB_actionPerformed(e);
-			}
-		});
-		soundPanel.setLayout(borderLayout1);
-		soundFileBrowseB.setText(Local.getString("Browse"));
-		soundFileBrowseB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				soundFileBrowseB_actionPerformed(e);
-			}
-		});
-		gridLayout1.setRows(4);
-		jPanel1.setBorder(titledBorder1);
-		jPanel1.setLayout(gridLayout1);
-		soundBeepRB.setText(Local.getString("System beep"));
-		soundBeepRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				soundBeepRB_actionPerformed(e);
-			}
-		});
-		jLabel6.setText(Local.getString("Sound file") + ":");
-		soundDefaultRB.setText(Local.getString("Default"));
-		soundDefaultRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				soundDefaultRB_actionPerformed(e);
-			}
-		});
-		jPanel3.setLayout(borderLayout3);
-		soundCustomRB.setText(Local.getString("Custom"));
-		soundCustomRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				soundCustomRB_actionPerformed(e);
-			}
-		});
-		jPanel2.setLayout(borderLayout2);
-		soundPanel.add(jPanel2, BorderLayout.CENTER);
-		jPanel2.add(jPanel1, BorderLayout.NORTH);
-		jPanel1.add(soundDefaultRB, null);
-		jPanel1.add(soundBeepRB, null);
-		jPanel1.add(soundCustomRB, null);
-		this.soundGroup.add(soundDefaultRB);
-		this.soundGroup.add(soundBeepRB);
-		this.soundGroup.add(soundCustomRB);
-		jPanel1.add(jPanel3, null);
-		jPanel3.add(soundFile, BorderLayout.CENTER);
-		jPanel3.add(soundFileBrowseB, BorderLayout.EAST);
-		jPanel3.add(jLabel6, BorderLayout.WEST);
-		GeneralPanel.add(jLabel1, gbc);
-		minGroup.add(minTaskbarRB);
-		minTaskbarRB.setSelected(true);
-		minTaskbarRB.setText(Local.getString("Minimize to taskbar"));
-		minTaskbarRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				minTaskbarRB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 0;
-		gbc.insets = new Insets(10, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(minTaskbarRB, gbc);
-		minGroup.add(minHideRB);
-		minHideRB.setText(Local.getString("Hide"));
-		minHideRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				minHideRB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 1;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(minHideRB, gbc);
-		jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
-		jLabel2.setText(Local.getString("Window close action:"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0;
-		gbc.gridy = 2;
-		gbc.insets = new Insets(2, 10, 0, 15);
-		gbc.anchor = GridBagConstraints.EAST;
-		GeneralPanel.add(jLabel2, gbc);
-		closeGroup.add(closeExitRB);
-		closeExitRB.setSelected(true);
-		closeExitRB.setText(Local.getString("Close and exit"));
-		closeExitRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				closeExitRB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 2;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(closeExitRB, gbc);
-
-		closeGroup.add(closeHideRB);
-		closeHideRB.setText(Local.getString("Hide"));
-		closeHideRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				closeHideRB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 3;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(closeHideRB, gbc);
-		jLabel3.setHorizontalAlignment(SwingConstants.RIGHT);
-		jLabel3.setText(Local.getString("Look and feel:"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0;
-		gbc.gridy = 4;
-		gbc.insets = new Insets(2, 10, 0, 15);
-		gbc.anchor = GridBagConstraints.EAST;
-		GeneralPanel.add(jLabel3, gbc);
-
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 4;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 5;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(lfSystemRB, gbc);
-
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 6;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(lfJavaRB, gbc);
-		lfGroup.add(lfCustomRB);
-		lfCustomRB.setText(Local.getString("Custom"));
-		lfCustomRB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				lfCustomRB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 7;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(lfCustomRB, gbc);
-		classNameLabel.setEnabled(false);
-		classNameLabel.setText(Local.getString("L&F class name:"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 8;
-		gbc.insets = new Insets(2, 20, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(classNameLabel, gbc);
-		lfClassName.setEnabled(false);
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 9;
-		gbc.insets = new Insets(7, 20, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.fill = GridBagConstraints.HORIZONTAL;
-		GeneralPanel.add(lfClassName, gbc);
-		jLabel4.setHorizontalAlignment(SwingConstants.RIGHT);
-		jLabel4.setText(Local.getString("Startup:"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0;
-		gbc.gridy = 10;
-		gbc.insets = new Insets(2, 10, 0, 15);
-		gbc.anchor = GridBagConstraints.EAST;
-		GeneralPanel.add(jLabel4, gbc);
-		enSystrayChB.setText(Local.getString("Enable system tray icon"));
-		enSystrayChB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				enSystrayChB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 10;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(enSystrayChB, gbc);
-		startMinimizedChB.setText(Local.getString("Start minimized"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 11;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(startMinimizedChB, gbc);
-		enSplashChB.setText(Local.getString("Show splash screen"));
-		enSplashChB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				enSplashChB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 12;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(enSplashChB, gbc);
-		enL10nChB.setText(Local.getString("Enable localization"));
-		enL10nChB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				enL10nChB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 13;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(enL10nChB, gbc);
-		firstdow.setText(Local.getString("First day of week - Monday"));
-		firstdow.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 14;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(firstdow, gbc);
-		lblExit.setHorizontalAlignment(SwingConstants.RIGHT);
-		lblExit.setText(Local.getString("Exit") + ":");
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0;
-		gbc.gridy = 15;
-		gbc.insets = new Insets(2, 10, 10, 15);
-		gbc.anchor = GridBagConstraints.EAST;
-		GeneralPanel.add(lblExit, gbc);
-		askConfirmChB.setSelected(true);
-		askConfirmChB.setText(Local.getString("Ask confirmation"));
-		askConfirmChB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				askConfirmChB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 15;
-		gbc.insets = new Insets(2, 0, 10, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		GeneralPanel.add(askConfirmChB, gbc);
-
-		// Build Tab2
-		rstPanelBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);
-		resourceTypePanel.setBorder(rstPanelBorder);
-		resourcePanel.add(resourceTypePanel, BorderLayout.CENTER);
-		rsbpBorder = new TitledBorder(BorderFactory.createEmptyBorder(5, 5, 5,
-				5), Local.getString("Web browser executable"));
-		rsBottomPanel.setBorder(rsbpBorder);
-		jLabel5.setText(Local.getString("Path") + ":");
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0;
-		gbc.gridy = 0;
-		gbc.insets = new Insets(0, 5, 0, 5);
-		gbc.anchor = GridBagConstraints.WEST;
-		rsBottomPanel.add(jLabel5, gbc);
-		browserPath.setPreferredSize(new Dimension(250, 25));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 0;
-		gbc.insets = new Insets(0, 5, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.fill = GridBagConstraints.HORIZONTAL;
-		rsBottomPanel.add(browserPath, gbc);
-		browseB.setText(Local.getString("Browse"));
-		browseB.setPreferredSize(new Dimension(110, 25));
-		browseB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				browseB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 2;
-		gbc.gridy = 0;
-		// gbc.insets = new Insets(0, 0, 0, 0);
-		gbc.anchor = GridBagConstraints.EAST;
-		rsBottomPanel.add(browseB, gbc);
-
-		resourcePanel.add(rsBottomPanel, BorderLayout.SOUTH);
-		
-		// Build editorConfigPanel
-		normalFontLabel.setText(Local.getString("Normal text font"));
-		normalFontLabel.setHorizontalAlignment(SwingConstants.RIGHT);
-		headerFontLabel.setText(Local.getString("Header font"));
-		headerFontLabel.setHorizontalAlignment(SwingConstants.RIGHT);
-		monoFontLabel.setText(Local.getString("Monospaced font"));
-		monoFontLabel.setHorizontalAlignment(SwingConstants.RIGHT);
-		baseFontSizeLabel.setText(Local.getString("Base font size"));
-		baseFontSizeLabel.setHorizontalAlignment(SwingConstants.RIGHT);
-		antialiasChB.setText(Local.getString("Antialias text"));
-		JPanel bfsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT)); 
-		bfsPanel.add(baseFontSize);
-		econfPanel.add(normalFontLabel);
-		econfPanel.add(normalFontCB);
-		econfPanel.add(headerFontLabel);
-		econfPanel.add(headerFontCB);
-		econfPanel.add(monoFontLabel);
-		econfPanel.add(monoFontCB);
-		econfPanel.add(baseFontSizeLabel);
-		econfPanel.add(bfsPanel);
-		econfPanel.add(antialiasChB);
-		econfPanel.setBorder(BorderFactory.createEmptyBorder(10,5,10,10));
-		((GridLayout)econfPanel.getLayout()).setHgap(10);
-		((GridLayout)econfPanel.getLayout()).setVgap(5);
-		editorConfigPanel.add(econfPanel, BorderLayout.NORTH);
-		// Build TabbedPanel
-		tabbedPanel.add(GeneralPanel, Local.getString("General"));
-		tabbedPanel.add(resourcePanel, Local.getString("Resource types"));
-		tabbedPanel.add(soundPanel, Local.getString("Sound"));
-		tabbedPanel.add(editorConfigPanel, Local.getString("Editor"));
-
-		// Build TopPanel
-		topPanel.add(tabbedPanel, BorderLayout.CENTER);
-
-		// Build BottomPanel
-		okB.setMaximumSize(new Dimension(100, 25));
-		okB.setPreferredSize(new Dimension(100, 25));
-		okB.setText(Local.getString("Ok"));
-		okB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				okB_actionPerformed(e);
-			}
-		});
-		this.getRootPane().setDefaultButton(okB);
-		bottomPanel.add(okB);
-		cancelB.setMaximumSize(new Dimension(100, 25));
-		cancelB.setPreferredSize(new Dimension(100, 25));
-		cancelB.setText(Local.getString("Cancel"));
-		cancelB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				cancelB_actionPerformed(e);
-			}
-		});
-		bottomPanel.add(cancelB);
-
-		// Build Preferences-Dialog
-		getContentPane().add(topPanel, BorderLayout.NORTH);
-		getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-		soundPanel.add(enableSoundCB, BorderLayout.NORTH);
-
-		// set all config-values
-		setValues();
-
-	}
-
-	void setValues() {
-		enL10nChB.setSelected(!Configuration.get("DISABLE_L10N").toString()
-				.equalsIgnoreCase("yes"));
-		enSplashChB.setSelected(!Configuration.get("SHOW_SPLASH").toString()
-				.equalsIgnoreCase("no"));
-		enSystrayChB.setSelected(!Configuration.get("DISABLE_SYSTRAY")
-				.toString().equalsIgnoreCase("yes"));
-		startMinimizedChB.setSelected(Configuration.get("START_MINIMIZED")
-				.toString().equalsIgnoreCase("yes"));
-		firstdow.setSelected(Configuration.get("FIRST_DAY_OF_WEEK").toString()
-				.equalsIgnoreCase("mon"));
-
-		enableCustomLF(false);
-		String lf = Configuration.get("LOOK_AND_FEEL").toString();
-		if (lf.equalsIgnoreCase("system"))
-			lfSystemRB.setSelected(true);
-		else if (lf.equalsIgnoreCase("default"))
-			lfJavaRB.setSelected(true);
-		else if (lf.length() > 0) {
-			lfCustomRB.setSelected(true);
-			enableCustomLF(true);
-			lfClassName.setText(lf);
-		} else
-			lfJavaRB.setSelected(true);
-
-		askConfirmChB.setSelected(!Configuration.get("ASK_ON_EXIT").toString()
-				.equalsIgnoreCase("no"));
-		String onclose = Configuration.get("ON_CLOSE").toString();
-		if (onclose.equals("exit")) {
-			this.closeExitRB.setSelected(true);
-			// this.askConfirmChB.setEnabled(true);
-		} else {
-			this.closeHideRB.setSelected(true);
-			// this.askConfirmChB.setEnabled(false);
-		}
-
-		String onmin = Configuration.get("ON_MINIMIZE").toString();
-		this.minTaskbarRB.setSelected(true);
-
-		if (!System.getProperty("os.name").startsWith("Win"))
-			this.browserPath.setText(MimeTypesList.getAppList()
-					.getBrowserExec());
-		if (Configuration.get("NOTIFY_SOUND").equals("")) {
-			Configuration.put("NOTIFY_SOUND", "DEFAULT");
-		}
-
-		boolean enableSnd = !Configuration.get("NOTIFY_SOUND").toString()
-				.equalsIgnoreCase("DISABLED");
-		enableSoundCB.setSelected(enableSnd);
-		if (Configuration.get("NOTIFY_SOUND").toString().equalsIgnoreCase(
-				"DEFAULT")
-				|| Configuration.get("NOTIFY_SOUND").toString()
-						.equalsIgnoreCase("DISABLED")) {
-			this.soundDefaultRB.setSelected(true);
-			this.enableCustomSound(false);
-		} else if (Configuration.get("NOTIFY_SOUND").toString()
-				.equalsIgnoreCase("BEEP")) {
-			this.soundBeepRB.setSelected(true);
-			this.enableCustomSound(false);
-		} else {
-			System.out.println(Configuration.get("NOTIFY_SOUND").toString());
-			this.soundCustomRB.setSelected(true);
-			this.soundFile
-					.setText(Configuration.get("NOTIFY_SOUND").toString());
-			this.enableCustomSound(true);
-		}
-		this.enableSound(enableSnd);
-		
-		antialiasChB.setSelected(Configuration.get("ANTIALIAS_TEXT")
-				.toString().equalsIgnoreCase("yes"));
-		if (Configuration.get("NORMAL_FONT").toString().length() >0)
-			normalFontCB.setSelectedItem(Configuration.get("NORMAL_FONT").toString());
-		else
-			normalFontCB.setSelectedItem("serif");
-		if (Configuration.get("HEADER_FONT").toString().length() >0)
-			headerFontCB.setSelectedItem(Configuration.get("HEADER_FONT").toString());
-		else
-			headerFontCB.setSelectedItem("sans-serif");
-		if (Configuration.get("MONO_FONT").toString().length() >0)
-			monoFontCB.setSelectedItem(Configuration.get("MONO_FONT").toString());
-		else
-			monoFontCB.setSelectedItem("monospaced");
-		if (Configuration.get("BASE_FONT_SIZE").toString().length() >0)
-			baseFontSize.setValue(Integer.decode(Configuration.get("BASE_FONT_SIZE").toString()));
-		else
-			baseFontSize.setValue(new Integer(16));
-	}
-
-	void apply() {
-		if (this.firstdow.isSelected())
-			Configuration.put("FIRST_DAY_OF_WEEK", "mon");
-		else
-			Configuration.put("FIRST_DAY_OF_WEEK", "sun");
-
-		if (this.enL10nChB.isSelected())
-			Configuration.put("DISABLE_L10N", "no");
-		else
-			Configuration.put("DISABLE_L10N", "yes");
-
-		if (this.enSplashChB.isSelected())
-			Configuration.put("SHOW_SPLASH", "yes");
-		else
-			Configuration.put("SHOW_SPLASH", "no");
-
-		if (this.enSystrayChB.isSelected())
-			Configuration.put("DISABLE_SYSTRAY", "no");
-		else
-			Configuration.put("DISABLE_SYSTRAY", "yes");
-
-		if (this.startMinimizedChB.isSelected())
-			Configuration.put("START_MINIMIZED", "yes");
-		else
-			Configuration.put("START_MINIMIZED", "no");
-
-		if (this.askConfirmChB.isSelected())
-			Configuration.put("ASK_ON_EXIT", "yes");
-		else
-			Configuration.put("ASK_ON_EXIT", "no");
-
-		if (this.closeExitRB.isSelected())
-			Configuration.put("ON_CLOSE", "exit");
-		else
-			Configuration.put("ON_CLOSE", "minimize");
-
-		Configuration.put("ON_MINIMIZE", "normal");
-
-		String lf = Configuration.get("LOOK_AND_FEEL").toString();
-		String newlf = "";
-
-		if (this.lfSystemRB.isSelected())
-			newlf = "system";
-		else if (this.lfJavaRB.isSelected())
-			newlf = "default";
-		else if (this.lfCustomRB.isSelected())
-			newlf = this.lfClassName.getText();
-
-		if (!lf.equalsIgnoreCase(newlf)) {
-			Configuration.put("LOOK_AND_FEEL", newlf);
-			try {
-				if (Configuration.get("LOOK_AND_FEEL").equals("system"))
-					UIManager.setLookAndFeel(UIManager
-							.getSystemLookAndFeelClassName());
-				else if (Configuration.get("LOOK_AND_FEEL").equals("default"))
-					UIManager.setLookAndFeel(UIManager
-							.getCrossPlatformLookAndFeelClassName());
-				else if (Configuration.get("LOOK_AND_FEEL").toString().length() > 0)
-					UIManager.setLookAndFeel(Configuration.get("LOOK_AND_FEEL")
-							.toString());
-
-				SwingUtilities.updateComponentTreeUI(App.getFrame());
-
-			} catch (Exception e) {
-				Configuration.put("LOOK_AND_FEEL", lf);
-				new ExceptionDialog(
-						e,
-						"Error when initializing a pluggable look-and-feel. Default LF will be used.",
-						"Make sure that specified look-and-feel library classes are on the CLASSPATH.");
-			}
-		}
-		String brPath = this.browserPath.getText();
-		if (new java.io.File(brPath).isFile()) {
-			MimeTypesList.getAppList().setBrowserExec(brPath);
-			CurrentStorage.get().storeMimeTypesList();
-		}
-
-		if (!this.enableSoundCB.isSelected())
-			Configuration.put("NOTIFY_SOUND", "DISABLED");
-		else if (this.soundDefaultRB.isSelected())
-			Configuration.put("NOTIFY_SOUND", "DEFAULT");
-		else if (this.soundBeepRB.isSelected())
-			Configuration.put("NOTIFY_SOUND", "BEEP");
-		else if ((this.soundCustomRB.isSelected())
-				&& (this.soundFile.getText().trim().length() > 0))
-			Configuration.put("NOTIFY_SOUND", this.soundFile.getText().trim());
-
-		if (antialiasChB.isSelected())
-			Configuration.put("ANTIALIAS_TEXT", "yes");
-		else
-			Configuration.put("ANTIALIAS_TEXT", "no");
-		
-		Configuration.put("NORMAL_FONT", normalFontCB.getSelectedItem());
-		Configuration.put("HEADER_FONT", headerFontCB.getSelectedItem());
-		Configuration.put("MONO_FONT", monoFontCB.getSelectedItem());
-		Configuration.put("BASE_FONT_SIZE", baseFontSize.getValue());
-		App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.editor.setAntiAlias(antialiasChB.isSelected());
-		App.getFrame().workPanel.dailyItemsPanel.editorPanel.initCSS();
-		App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.repaint();
-		
-		Configuration.saveConfig();
-		AgendaPanel.refresh(CurrentDate.get());
-		
-	}
-
-	void enableCustomLF(boolean is) {
-		this.classNameLabel.setEnabled(is);
-		this.lfClassName.setEnabled(is);
-	}
-
-	void enableCustomSound(boolean is) {
-		this.soundFile.setEnabled(is);
-		this.soundFileBrowseB.setEnabled(is);
-		this.jLabel6.setEnabled(is);
-	}
-
-	void enableSound(boolean is) {
-		this.soundDefaultRB.setEnabled(is);
-		this.soundBeepRB.setEnabled(is);
-		this.soundCustomRB.setEnabled(is);
-		enableCustomSound(is);
-
-		this.soundFileBrowseB.setEnabled(is && soundCustomRB.isSelected());
-		this.soundFile.setEnabled(is && soundCustomRB.isSelected());
-		this.jLabel6.setEnabled(is && soundCustomRB.isSelected());
-
-	}
-
-	void okB_actionPerformed(ActionEvent e) {
-		apply();
-		this.dispose();
-	}
-
-	void cancelB_actionPerformed(ActionEvent e) {
-		this.dispose();
-	}
-
-	void minTaskbarRB_actionPerformed(ActionEvent e) {
-
-	}
-
-	void minHideRB_actionPerformed(ActionEvent e) {
-
-	}
-
-	void closeExitRB_actionPerformed(ActionEvent e) {
-		// this.askConfirmChB.setEnabled(true);
-	}
-
-	void askConfirmChB_actionPerformed(ActionEvent e) {
-
-	}
-
-	void closeHideRB_actionPerformed(ActionEvent e) {
-		// this.askConfirmChB.setEnabled(false);
-	}
-
-	void lfSystemRB_actionPerformed(ActionEvent e) {
-		this.enableCustomLF(false);
-	}
-
-	void lfJavaRB_actionPerformed(ActionEvent e) {
-		this.enableCustomLF(false);
-	}
-
-	void lfCustomRB_actionPerformed(ActionEvent e) {
-		this.enableCustomLF(true);
-	}
-
-	void enSystrayChB_actionPerformed(ActionEvent e) {
-
-	}
-
-	void enSplashChB_actionPerformed(ActionEvent e) {
-
-	}
-
-	void enL10nChB_actionPerformed(ActionEvent e) {
-
-	}
-
-	void browseB_actionPerformed(ActionEvent e) {
-		// Fix until Sun's JVM supports more locales...
-		UIManager.put("FileChooser.lookInLabelText", Local
-				.getString("Look in:"));
-		UIManager.put("FileChooser.upFolderToolTipText", Local
-				.getString("Up One Level"));
-		UIManager.put("FileChooser.newFolderToolTipText", Local
-				.getString("Create New Folder"));
-		UIManager.put("FileChooser.listViewButtonToolTipText", Local
-				.getString("List"));
-		UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
-				.getString("Details"));
-		UIManager.put("FileChooser.fileNameLabelText", Local
-				.getString("File Name:"));
-		UIManager.put("FileChooser.filesOfTypeLabelText", Local
-				.getString("Files of Type:"));
-		UIManager.put("FileChooser.openButtonText", Local.getString("Open"));
-		UIManager.put("FileChooser.openButtonToolTipText", Local
-				.getString("Open selected file"));
-		UIManager
-				.put("FileChooser.cancelButtonText", Local.getString("Cancel"));
-		UIManager.put("FileChooser.cancelButtonToolTipText", Local
-				.getString("Cancel"));
-
-		JFileChooser chooser = new JFileChooser();
-		chooser.setFileHidingEnabled(false);
-		chooser.setDialogTitle(Local
-				.getString("Select the web-browser executable"));
-		chooser.setAcceptAllFileFilterUsed(true);
-		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
-		chooser.setPreferredSize(new Dimension(550, 375));
-		if (System.getProperty("os.name").startsWith("Win")) {
-			chooser.setFileFilter(new AllFilesFilter(AllFilesFilter.EXE));
-			chooser.setCurrentDirectory(new File("C:\\Program Files"));
-		}
-		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
-			this.browserPath.setText(chooser.getSelectedFile().getPath());
-	}
-
-	void enableSoundCB_actionPerformed(ActionEvent e) {
-		enableSound(enableSoundCB.isSelected());
-	}
-
-	void soundFileBrowseB_actionPerformed(ActionEvent e) {
-		// Fix until Sun's JVM supports more locales...
-		UIManager.put("FileChooser.lookInLabelText", Local
-				.getString("Look in:"));
-		UIManager.put("FileChooser.upFolderToolTipText", Local
-				.getString("Up One Level"));
-		UIManager.put("FileChooser.newFolderToolTipText", Local
-				.getString("Create New Folder"));
-		UIManager.put("FileChooser.listViewButtonToolTipText", Local
-				.getString("List"));
-		UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
-				.getString("Details"));
-		UIManager.put("FileChooser.fileNameLabelText", Local
-				.getString("File Name:"));
-		UIManager.put("FileChooser.filesOfTypeLabelText", Local
-				.getString("Files of Type:"));
-		UIManager.put("FileChooser.openButtonText", Local.getString("Open"));
-		UIManager.put("FileChooser.openButtonToolTipText", Local
-				.getString("Open selected file"));
-		UIManager
-				.put("FileChooser.cancelButtonText", Local.getString("Cancel"));
-		UIManager.put("FileChooser.cancelButtonToolTipText", Local
-				.getString("Cancel"));
-
-		JFileChooser chooser = new JFileChooser();
-		chooser.setFileHidingEnabled(false);
-		chooser.setDialogTitle(Local.getString("Select the sound file"));
-		chooser.setAcceptAllFileFilterUsed(true);
-		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
-		chooser.setPreferredSize(new Dimension(550, 375));
-		chooser.setFileFilter(new AllFilesFilter(AllFilesFilter.WAV));
-		if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
-			this.soundFile.setText(chooser.getSelectedFile().getPath());
-	}
-
-	void soundDefaultRB_actionPerformed(ActionEvent e) {
-		this.enableCustomSound(false);
-	}
-
-	void soundBeepRB_actionPerformed(ActionEvent e) {
-		this.enableCustomSound(false);
-	}
-
-	void soundCustomRB_actionPerformed(ActionEvent e) {
-		this.enableCustomSound(true);
-	}
-	
-	Vector getFontNames() {
-		GraphicsEnvironment gEnv = 
-        	GraphicsEnvironment.getLocalGraphicsEnvironment();
+    JPanel editorConfigPanel = new JPanel(new BorderLayout());
+    JPanel econfPanel = new JPanel(new GridLayout(5, 2));
+    Vector fontnames = getFontNames();
+    JComboBox normalFontCB = new JComboBox(fontnames);
+    JComboBox headerFontCB = new JComboBox(fontnames);
+    JComboBox monoFontCB = new JComboBox(fontnames);
+    JSpinner baseFontSize = new JSpinner();
+    JCheckBox antialiasChB = new JCheckBox();
+    JLabel normalFontLabel = new JLabel();
+    JLabel headerFontLabel = new JLabel();
+    JLabel monoFontLabel = new JLabel();
+    JLabel baseFontSizeLabel = new JLabel();
+
+    public PreferencesDialog(Frame frame) {
+        super(frame, Local.getString("Preferences"), true);
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
+
+    public PreferencesDialog() {
+        this(null);
+    }
+
+    void jbInit() throws Exception {
+        titledBorder1 = new TitledBorder(BorderFactory.createEtchedBorder(
+                Color.white, new Color(156, 156, 158)), Local
+                .getString("Sound"));
+        this.setResizable(false);
+        // Build Tab1
+        jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);
+        jLabel1.setText(Local.getString("Window minimize action:"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 0;
+        gbc.insets = new Insets(10, 10, 0, 15);
+        gbc.anchor = GridBagConstraints.EAST;
+        enableSoundCB.setText(Local.getString("Enable sound notifications"));
+        enableSoundCB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                enableSoundCB_actionPerformed(e);
+            }
+        });
+        soundPanel.setLayout(borderLayout1);
+        soundFileBrowseB.setText(Local.getString("Browse"));
+        soundFileBrowseB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                soundFileBrowseB_actionPerformed(e);
+            }
+        });
+        gridLayout1.setRows(4);
+        jPanel1.setBorder(titledBorder1);
+        jPanel1.setLayout(gridLayout1);
+        soundBeepRB.setText(Local.getString("System beep"));
+        soundBeepRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                soundBeepRB_actionPerformed(e);
+            }
+        });
+        jLabel6.setText(Local.getString("Sound file") + ":");
+        soundDefaultRB.setText(Local.getString("Default"));
+        soundDefaultRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                soundDefaultRB_actionPerformed(e);
+            }
+        });
+        jPanel3.setLayout(borderLayout3);
+        soundCustomRB.setText(Local.getString("Custom"));
+        soundCustomRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                soundCustomRB_actionPerformed(e);
+            }
+        });
+        jPanel2.setLayout(borderLayout2);
+        soundPanel.add(jPanel2, BorderLayout.CENTER);
+        jPanel2.add(jPanel1, BorderLayout.NORTH);
+        jPanel1.add(soundDefaultRB, null);
+        jPanel1.add(soundBeepRB, null);
+        jPanel1.add(soundCustomRB, null);
+        this.soundGroup.add(soundDefaultRB);
+        this.soundGroup.add(soundBeepRB);
+        this.soundGroup.add(soundCustomRB);
+        jPanel1.add(jPanel3, null);
+        jPanel3.add(soundFile, BorderLayout.CENTER);
+        jPanel3.add(soundFileBrowseB, BorderLayout.EAST);
+        jPanel3.add(jLabel6, BorderLayout.WEST);
+        GeneralPanel.add(jLabel1, gbc);
+        minGroup.add(minTaskbarRB);
+        minTaskbarRB.setSelected(true);
+        minTaskbarRB.setText(Local.getString("Minimize to taskbar"));
+        minTaskbarRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                minTaskbarRB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 0;
+        gbc.insets = new Insets(10, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(minTaskbarRB, gbc);
+        minGroup.add(minHideRB);
+        minHideRB.setText(Local.getString("Hide"));
+        minHideRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                minHideRB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 1;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(minHideRB, gbc);
+        jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
+        jLabel2.setText(Local.getString("Window close action:"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 2;
+        gbc.insets = new Insets(2, 10, 0, 15);
+        gbc.anchor = GridBagConstraints.EAST;
+        GeneralPanel.add(jLabel2, gbc);
+        closeGroup.add(closeExitRB);
+        closeExitRB.setSelected(true);
+        closeExitRB.setText(Local.getString("Close and exit"));
+        closeExitRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                closeExitRB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 2;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(closeExitRB, gbc);
+
+        closeGroup.add(closeHideRB);
+        closeHideRB.setText(Local.getString("Hide"));
+        closeHideRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                closeHideRB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 3;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(closeHideRB, gbc);
+        jLabel3.setHorizontalAlignment(SwingConstants.RIGHT);
+        jLabel3.setText(Local.getString("Look and feel:"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 4;
+        gbc.insets = new Insets(2, 10, 0, 15);
+        gbc.anchor = GridBagConstraints.EAST;
+        GeneralPanel.add(jLabel3, gbc);
+
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 4;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 5;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(lfSystemRB, gbc);
+
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 6;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(lfJavaRB, gbc);
+        lfGroup.add(lfCustomRB);
+        lfCustomRB.setText(Local.getString("Custom"));
+        lfCustomRB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                lfCustomRB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 7;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(lfCustomRB, gbc);
+        classNameLabel.setEnabled(false);
+        classNameLabel.setText(Local.getString("L&F class name:"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 8;
+        gbc.insets = new Insets(2, 20, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(classNameLabel, gbc);
+        lfClassName.setEnabled(false);
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 9;
+        gbc.insets = new Insets(7, 20, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.fill = GridBagConstraints.HORIZONTAL;
+        GeneralPanel.add(lfClassName, gbc);
+        jLabel4.setHorizontalAlignment(SwingConstants.RIGHT);
+        jLabel4.setText(Local.getString("Startup:"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 10;
+        gbc.insets = new Insets(2, 10, 0, 15);
+        gbc.anchor = GridBagConstraints.EAST;
+        GeneralPanel.add(jLabel4, gbc);
+        enSystrayChB.setText(Local.getString("Enable system tray icon"));
+        enSystrayChB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                enSystrayChB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 10;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(enSystrayChB, gbc);
+        startMinimizedChB.setText(Local.getString("Start minimized"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 11;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(startMinimizedChB, gbc);
+        enSplashChB.setText(Local.getString("Show splash screen"));
+        enSplashChB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                enSplashChB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 12;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(enSplashChB, gbc);
+        enL10nChB.setText(Local.getString("Enable localization"));
+        enL10nChB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                enL10nChB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 13;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(enL10nChB, gbc);
+        firstdow.setText(Local.getString("First day of week - Monday"));
+        firstdow.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 14;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(firstdow, gbc);
+        lblExit.setHorizontalAlignment(SwingConstants.RIGHT);
+        lblExit.setText(Local.getString("Exit") + ":");
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 15;
+        gbc.insets = new Insets(2, 10, 10, 15);
+        gbc.anchor = GridBagConstraints.EAST;
+        GeneralPanel.add(lblExit, gbc);
+        askConfirmChB.setSelected(true);
+        askConfirmChB.setText(Local.getString("Ask confirmation"));
+        askConfirmChB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                askConfirmChB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 15;
+        gbc.insets = new Insets(2, 0, 10, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        GeneralPanel.add(askConfirmChB, gbc);
+
+        // Build Tab2
+        rstPanelBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);
+        resourceTypePanel.setBorder(rstPanelBorder);
+        resourcePanel.add(resourceTypePanel, BorderLayout.CENTER);
+        rsbpBorder = new TitledBorder(BorderFactory.createEmptyBorder(5, 5, 5,
+                5), Local.getString("Web browser executable"));
+        rsBottomPanel.setBorder(rsbpBorder);
+        jLabel5.setText(Local.getString("Path") + ":");
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 0;
+        gbc.insets = new Insets(0, 5, 0, 5);
+        gbc.anchor = GridBagConstraints.WEST;
+        rsBottomPanel.add(jLabel5, gbc);
+        browserPath.setPreferredSize(new Dimension(250, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 0;
+        gbc.insets = new Insets(0, 5, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.fill = GridBagConstraints.HORIZONTAL;
+        rsBottomPanel.add(browserPath, gbc);
+        browseB.setText(Local.getString("Browse"));
+        browseB.setPreferredSize(new Dimension(110, 25));
+        browseB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                browseB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 2;
+        gbc.gridy = 0;
+        // gbc.insets = new Insets(0, 0, 0, 0);
+        gbc.anchor = GridBagConstraints.EAST;
+        rsBottomPanel.add(browseB, gbc);
+
+        resourcePanel.add(rsBottomPanel, BorderLayout.SOUTH);
+
+        // Build editorConfigPanel
+        normalFontLabel.setText(Local.getString("Normal text font"));
+        normalFontLabel.setHorizontalAlignment(SwingConstants.RIGHT);
+        headerFontLabel.setText(Local.getString("Header font"));
+        headerFontLabel.setHorizontalAlignment(SwingConstants.RIGHT);
+        monoFontLabel.setText(Local.getString("Monospaced font"));
+        monoFontLabel.setHorizontalAlignment(SwingConstants.RIGHT);
+        baseFontSizeLabel.setText(Local.getString("Base font size"));
+        baseFontSizeLabel.setHorizontalAlignment(SwingConstants.RIGHT);
+        antialiasChB.setText(Local.getString("Antialias text"));
+        JPanel bfsPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+        bfsPanel.add(baseFontSize);
+        econfPanel.add(normalFontLabel);
+        econfPanel.add(normalFontCB);
+        econfPanel.add(headerFontLabel);
+        econfPanel.add(headerFontCB);
+        econfPanel.add(monoFontLabel);
+        econfPanel.add(monoFontCB);
+        econfPanel.add(baseFontSizeLabel);
+        econfPanel.add(bfsPanel);
+        econfPanel.add(antialiasChB);
+        econfPanel.setBorder(BorderFactory.createEmptyBorder(10, 5, 10, 10));
+        ((GridLayout) econfPanel.getLayout()).setHgap(10);
+        ((GridLayout) econfPanel.getLayout()).setVgap(5);
+        editorConfigPanel.add(econfPanel, BorderLayout.NORTH);
+        // Build TabbedPanel
+        tabbedPanel.add(GeneralPanel, Local.getString("General"));
+        tabbedPanel.add(resourcePanel, Local.getString("Resource types"));
+        tabbedPanel.add(soundPanel, Local.getString("Sound"));
+        tabbedPanel.add(editorConfigPanel, Local.getString("Editor"));
+
+        // Build TopPanel
+        topPanel.add(tabbedPanel, BorderLayout.CENTER);
+
+        // Build BottomPanel
+        okB.setMaximumSize(new Dimension(100, 25));
+        okB.setPreferredSize(new Dimension(100, 25));
+        okB.setText(Local.getString("Ok"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okB);
+        bottomPanel.add(okB);
+        cancelB.setMaximumSize(new Dimension(100, 25));
+        cancelB.setPreferredSize(new Dimension(100, 25));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        bottomPanel.add(cancelB);
+
+        // Build Preferences-Dialog
+        getContentPane().add(topPanel, BorderLayout.NORTH);
+        getContentPane().add(bottomPanel, BorderLayout.SOUTH);
+        soundPanel.add(enableSoundCB, BorderLayout.NORTH);
+
+        // set all config-values
+        setValues();
+
+    }
+
+    void setValues() {
+        enL10nChB.setSelected(!Configuration.get("DISABLE_L10N").toString()
+                .equalsIgnoreCase("yes"));
+        enSplashChB.setSelected(!Configuration.get("SHOW_SPLASH").toString()
+                .equalsIgnoreCase("no"));
+        enSystrayChB.setSelected(!Configuration.get("DISABLE_SYSTRAY")
+                .toString().equalsIgnoreCase("yes"));
+        startMinimizedChB.setSelected(Configuration.get("START_MINIMIZED")
+                .toString().equalsIgnoreCase("yes"));
+        firstdow.setSelected(Configuration.get("FIRST_DAY_OF_WEEK").toString()
+                .equalsIgnoreCase("mon"));
+
+        enableCustomLF(false);
+        String lf = Configuration.get("LOOK_AND_FEEL").toString();
+        if (lf.equalsIgnoreCase("system")) {
+            lfSystemRB.setSelected(true);
+        } else if (lf.equalsIgnoreCase("default")) {
+            lfJavaRB.setSelected(true);
+        } else if (lf.length() > 0) {
+            lfCustomRB.setSelected(true);
+            enableCustomLF(true);
+            lfClassName.setText(lf);
+        } else {
+            lfJavaRB.setSelected(true);
+        }
+
+        askConfirmChB.setSelected(!Configuration.get("ASK_ON_EXIT").toString()
+                .equalsIgnoreCase("no"));
+        String onclose = Configuration.get("ON_CLOSE").toString();
+        if (onclose.equals("exit")) {
+            this.closeExitRB.setSelected(true);
+            // this.askConfirmChB.setEnabled(true);
+        } else {
+            this.closeHideRB.setSelected(true);
+            // this.askConfirmChB.setEnabled(false);
+        }
+
+        String onmin = Configuration.get("ON_MINIMIZE").toString();
+        this.minTaskbarRB.setSelected(true);
+
+        if (!System.getProperty("os.name").startsWith("Win")) {
+            this.browserPath.setText(MimeTypesList.getAppList()
+                    .getBrowserExec());
+        }
+        if (Configuration.get("NOTIFY_SOUND").equals("")) {
+            Configuration.put("NOTIFY_SOUND", "DEFAULT");
+        }
+
+        boolean enableSnd = !Configuration.get("NOTIFY_SOUND").toString()
+                .equalsIgnoreCase("DISABLED");
+        enableSoundCB.setSelected(enableSnd);
+        if (Configuration.get("NOTIFY_SOUND").toString().equalsIgnoreCase(
+                "DEFAULT")
+                || Configuration.get("NOTIFY_SOUND").toString()
+                .equalsIgnoreCase("DISABLED")) {
+            this.soundDefaultRB.setSelected(true);
+            this.enableCustomSound(false);
+        } else if (Configuration.get("NOTIFY_SOUND").toString()
+                .equalsIgnoreCase("BEEP")) {
+            this.soundBeepRB.setSelected(true);
+            this.enableCustomSound(false);
+        } else {
+            System.out.println(Configuration.get("NOTIFY_SOUND").toString());
+            this.soundCustomRB.setSelected(true);
+            this.soundFile
+                    .setText(Configuration.get("NOTIFY_SOUND").toString());
+            this.enableCustomSound(true);
+        }
+        this.enableSound(enableSnd);
+
+        antialiasChB.setSelected(Configuration.get("ANTIALIAS_TEXT")
+                .toString().equalsIgnoreCase("yes"));
+        if (Configuration.get("NORMAL_FONT").toString().length() > 0) {
+            normalFontCB.setSelectedItem(Configuration.get("NORMAL_FONT").toString());
+        } else {
+            normalFontCB.setSelectedItem("serif");
+        }
+        if (Configuration.get("HEADER_FONT").toString().length() > 0) {
+            headerFontCB.setSelectedItem(Configuration.get("HEADER_FONT").toString());
+        } else {
+            headerFontCB.setSelectedItem("sans-serif");
+        }
+        if (Configuration.get("MONO_FONT").toString().length() > 0) {
+            monoFontCB.setSelectedItem(Configuration.get("MONO_FONT").toString());
+        } else {
+            monoFontCB.setSelectedItem("monospaced");
+        }
+        if (Configuration.get("BASE_FONT_SIZE").toString().length() > 0) {
+            baseFontSize.setValue(Integer.decode(Configuration.get("BASE_FONT_SIZE").toString()));
+        } else {
+            baseFontSize.setValue(new Integer(16));
+        }
+    }
+
+    void apply() {
+        if (this.firstdow.isSelected()) {
+            Configuration.put("FIRST_DAY_OF_WEEK", "mon");
+        } else {
+            Configuration.put("FIRST_DAY_OF_WEEK", "sun");
+        }
+
+        if (this.enL10nChB.isSelected()) {
+            Configuration.put("DISABLE_L10N", "no");
+        } else {
+            Configuration.put("DISABLE_L10N", "yes");
+        }
+
+        if (this.enSplashChB.isSelected()) {
+            Configuration.put("SHOW_SPLASH", "yes");
+        } else {
+            Configuration.put("SHOW_SPLASH", "no");
+        }
+
+        if (this.enSystrayChB.isSelected()) {
+            Configuration.put("DISABLE_SYSTRAY", "no");
+        } else {
+            Configuration.put("DISABLE_SYSTRAY", "yes");
+        }
+
+        if (this.startMinimizedChB.isSelected()) {
+            Configuration.put("START_MINIMIZED", "yes");
+        } else {
+            Configuration.put("START_MINIMIZED", "no");
+        }
+
+        if (this.askConfirmChB.isSelected()) {
+            Configuration.put("ASK_ON_EXIT", "yes");
+        } else {
+            Configuration.put("ASK_ON_EXIT", "no");
+        }
+
+        if (this.closeExitRB.isSelected()) {
+            Configuration.put("ON_CLOSE", "exit");
+        } else {
+            Configuration.put("ON_CLOSE", "minimize");
+        }
+
+        Configuration.put("ON_MINIMIZE", "normal");
+
+        String lf = Configuration.get("LOOK_AND_FEEL").toString();
+        String newlf = "";
+
+        if (this.lfSystemRB.isSelected()) {
+            newlf = "system";
+        } else if (this.lfJavaRB.isSelected()) {
+            newlf = "default";
+        } else if (this.lfCustomRB.isSelected()) {
+            newlf = this.lfClassName.getText();
+        }
+
+        if (!lf.equalsIgnoreCase(newlf)) {
+            Configuration.put("LOOK_AND_FEEL", newlf);
+            try {
+                if (Configuration.get("LOOK_AND_FEEL").equals("system")) {
+                    UIManager.setLookAndFeel(UIManager
+                            .getSystemLookAndFeelClassName());
+                } else if (Configuration.get("LOOK_AND_FEEL").equals("default")) {
+                    UIManager.setLookAndFeel(UIManager
+                            .getCrossPlatformLookAndFeelClassName());
+                } else if (Configuration.get("LOOK_AND_FEEL").toString().length() > 0) {
+                    UIManager.setLookAndFeel(Configuration.get("LOOK_AND_FEEL")
+                            .toString());
+                }
+
+                SwingUtilities.updateComponentTreeUI(App.getFrame());
+
+            } catch (Exception e) {
+                Configuration.put("LOOK_AND_FEEL", lf);
+                new ExceptionDialog(
+                        e,
+                        "Error when initializing a pluggable look-and-feel. Default LF will be used.",
+                        "Make sure that specified look-and-feel library classes are on the CLASSPATH.");
+            }
+        }
+        String brPath = this.browserPath.getText();
+        if (new java.io.File(brPath).isFile()) {
+            MimeTypesList.getAppList().setBrowserExec(brPath);
+            CurrentStorage.get().storeMimeTypesList();
+        }
+
+        if (!this.enableSoundCB.isSelected()) {
+            Configuration.put("NOTIFY_SOUND", "DISABLED");
+        } else if (this.soundDefaultRB.isSelected()) {
+            Configuration.put("NOTIFY_SOUND", "DEFAULT");
+        } else if (this.soundBeepRB.isSelected()) {
+            Configuration.put("NOTIFY_SOUND", "BEEP");
+        } else if ((this.soundCustomRB.isSelected())
+                && (this.soundFile.getText().trim().length() > 0)) {
+            Configuration.put("NOTIFY_SOUND", this.soundFile.getText().trim());
+        }
+
+        if (antialiasChB.isSelected()) {
+            Configuration.put("ANTIALIAS_TEXT", "yes");
+        } else {
+            Configuration.put("ANTIALIAS_TEXT", "no");
+        }
+
+        Configuration.put("NORMAL_FONT", normalFontCB.getSelectedItem());
+        Configuration.put("HEADER_FONT", headerFontCB.getSelectedItem());
+        Configuration.put("MONO_FONT", monoFontCB.getSelectedItem());
+        Configuration.put("BASE_FONT_SIZE", baseFontSize.getValue());
+        App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.editor.setAntiAlias(antialiasChB.isSelected());
+        App.getFrame().workPanel.dailyItemsPanel.editorPanel.initCSS();
+        App.getFrame().workPanel.dailyItemsPanel.editorPanel.editor.repaint();
+
+        Configuration.saveConfig();
+        AgendaPanel.refresh(CurrentDate.get());
+
+    }
+
+    void enableCustomLF(boolean is) {
+        this.classNameLabel.setEnabled(is);
+        this.lfClassName.setEnabled(is);
+    }
+
+    void enableCustomSound(boolean is) {
+        this.soundFile.setEnabled(is);
+        this.soundFileBrowseB.setEnabled(is);
+        this.jLabel6.setEnabled(is);
+    }
+
+    void enableSound(boolean is) {
+        this.soundDefaultRB.setEnabled(is);
+        this.soundBeepRB.setEnabled(is);
+        this.soundCustomRB.setEnabled(is);
+        enableCustomSound(is);
+
+        this.soundFileBrowseB.setEnabled(is && soundCustomRB.isSelected());
+        this.soundFile.setEnabled(is && soundCustomRB.isSelected());
+        this.jLabel6.setEnabled(is && soundCustomRB.isSelected());
+
+    }
+
+    void okB_actionPerformed(ActionEvent e) {
+        apply();
+        this.dispose();
+    }
+
+    void cancelB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
+
+    void minTaskbarRB_actionPerformed(ActionEvent e) {
+
+    }
+
+    void minHideRB_actionPerformed(ActionEvent e) {
+
+    }
+
+    void closeExitRB_actionPerformed(ActionEvent e) {
+        // this.askConfirmChB.setEnabled(true);
+    }
+
+    void askConfirmChB_actionPerformed(ActionEvent e) {
+
+    }
+
+    void closeHideRB_actionPerformed(ActionEvent e) {
+        // this.askConfirmChB.setEnabled(false);
+    }
+
+    void lfSystemRB_actionPerformed(ActionEvent e) {
+        this.enableCustomLF(false);
+    }
+
+    void lfJavaRB_actionPerformed(ActionEvent e) {
+        this.enableCustomLF(false);
+    }
+
+    void lfCustomRB_actionPerformed(ActionEvent e) {
+        this.enableCustomLF(true);
+    }
+
+    void enSystrayChB_actionPerformed(ActionEvent e) {
+
+    }
+
+    void enSplashChB_actionPerformed(ActionEvent e) {
+
+    }
+
+    void enL10nChB_actionPerformed(ActionEvent e) {
+
+    }
+
+    void browseB_actionPerformed(ActionEvent e) {
+        // Fix until Sun's JVM supports more locales...
+        UIManager.put("FileChooser.lookInLabelText", Local
+                .getString("Look in:"));
+        UIManager.put("FileChooser.upFolderToolTipText", Local
+                .getString("Up One Level"));
+        UIManager.put("FileChooser.newFolderToolTipText", Local
+                .getString("Create New Folder"));
+        UIManager.put("FileChooser.listViewButtonToolTipText", Local
+                .getString("List"));
+        UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
+                .getString("Details"));
+        UIManager.put("FileChooser.fileNameLabelText", Local
+                .getString("File Name:"));
+        UIManager.put("FileChooser.filesOfTypeLabelText", Local
+                .getString("Files of Type:"));
+        UIManager.put("FileChooser.openButtonText", Local.getString("Open"));
+        UIManager.put("FileChooser.openButtonToolTipText", Local
+                .getString("Open selected file"));
+        UIManager
+                .put("FileChooser.cancelButtonText", Local.getString("Cancel"));
+        UIManager.put("FileChooser.cancelButtonToolTipText", Local
+                .getString("Cancel"));
+
+        JFileChooser chooser = new JFileChooser();
+        chooser.setFileHidingEnabled(false);
+        chooser.setDialogTitle(Local
+                .getString("Select the web-browser executable"));
+        chooser.setAcceptAllFileFilterUsed(true);
+        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
+        chooser.setPreferredSize(new Dimension(550, 375));
+        if (System.getProperty("os.name").startsWith("Win")) {
+            chooser.setFileFilter(new AllFilesFilter(AllFilesFilter.EXE));
+            chooser.setCurrentDirectory(new File("C:\\Program Files"));
+        }
+        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
+            this.browserPath.setText(chooser.getSelectedFile().getPath());
+        }
+    }
+
+    void enableSoundCB_actionPerformed(ActionEvent e) {
+        enableSound(enableSoundCB.isSelected());
+    }
+
+    void soundFileBrowseB_actionPerformed(ActionEvent e) {
+        // Fix until Sun's JVM supports more locales...
+        UIManager.put("FileChooser.lookInLabelText", Local
+                .getString("Look in:"));
+        UIManager.put("FileChooser.upFolderToolTipText", Local
+                .getString("Up One Level"));
+        UIManager.put("FileChooser.newFolderToolTipText", Local
+                .getString("Create New Folder"));
+        UIManager.put("FileChooser.listViewButtonToolTipText", Local
+                .getString("List"));
+        UIManager.put("FileChooser.detailsViewButtonToolTipText", Local
+                .getString("Details"));
+        UIManager.put("FileChooser.fileNameLabelText", Local
+                .getString("File Name:"));
+        UIManager.put("FileChooser.filesOfTypeLabelText", Local
+                .getString("Files of Type:"));
+        UIManager.put("FileChooser.openButtonText", Local.getString("Open"));
+        UIManager.put("FileChooser.openButtonToolTipText", Local
+                .getString("Open selected file"));
+        UIManager
+                .put("FileChooser.cancelButtonText", Local.getString("Cancel"));
+        UIManager.put("FileChooser.cancelButtonToolTipText", Local
+                .getString("Cancel"));
+
+        JFileChooser chooser = new JFileChooser();
+        chooser.setFileHidingEnabled(false);
+        chooser.setDialogTitle(Local.getString("Select the sound file"));
+        chooser.setAcceptAllFileFilterUsed(true);
+        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
+        chooser.setPreferredSize(new Dimension(550, 375));
+        chooser.setFileFilter(new AllFilesFilter(AllFilesFilter.WAV));
+        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
+            this.soundFile.setText(chooser.getSelectedFile().getPath());
+        }
+    }
+
+    void soundDefaultRB_actionPerformed(ActionEvent e) {
+        this.enableCustomSound(false);
+    }
+
+    void soundBeepRB_actionPerformed(ActionEvent e) {
+        this.enableCustomSound(false);
+    }
+
+    void soundCustomRB_actionPerformed(ActionEvent e) {
+        this.enableCustomSound(true);
+    }
+
+    Vector getFontNames() {
+        GraphicsEnvironment gEnv =
+                GraphicsEnvironment.getLocalGraphicsEnvironment();
         String envfonts[] = gEnv.getAvailableFontFamilyNames();
         Vector fonts = new Vector();
         fonts.add("serif");
         fonts.add("sans-serif");
         fonts.add("monospaced");
-        for (int i = 0; i < envfonts.length; i++)
+        for (int i = 0; i < envfonts.length; i++) {
             fonts.add(envfonts[i]);
-		return fonts;
-	}
+        }
+        return fonts;
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/ProjectDialog.java b/src/net/sf/memoranda/ui/ProjectDialog.java
index 87b8cc1..7231157 100755
--- a/src/net/sf/memoranda/ui/ProjectDialog.java
+++ b/src/net/sf/memoranda/ui/ProjectDialog.java
@@ -1,39 +1,23 @@
 package net.sf.memoranda.ui;
 
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.Point;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JSpinner;
-import javax.swing.JTextField;
-import javax.swing.SpinnerDateModel;
-import javax.swing.border.EmptyBorder;
-import javax.swing.border.EtchedBorder;
-import javax.swing.event.ChangeEvent;
-import javax.swing.event.ChangeListener;
-
 import net.sf.memoranda.Project;
 import net.sf.memoranda.ProjectManager;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
+import javax.swing.border.EmptyBorder;
+import javax.swing.border.EtchedBorder;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
 /*$Id: ProjectDialog.java,v 1.26 2004/10/18 19:09:10 ivanrise Exp $*/
 public class ProjectDialog extends JDialog {
     public boolean CANCELLED = true;
@@ -57,90 +41,95 @@ public class ProjectDialog extends JDialog {
     JPanel bottomPanel = new JPanel();
     JButton okButton = new JButton();
     JButton cancelButton = new JButton();
-    
+
     public ProjectDialog(Frame frame, String title) {
         super(frame, title, true);
         try {
             jbInit();
             pack();
-        }
-        catch(Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
 
     void jbInit() throws Exception {
-	this.setResizable(false);
+        this.setResizable(false);
         getContentPane().setLayout(new GridBagLayout());
         topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
-        topPanel.setBackground(Color.WHITE);        
+        topPanel.setBackground(Color.WHITE);
         header.setFont(new java.awt.Font("Dialog", 0, 20));
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("Project"));
         //header.setHorizontalAlignment(SwingConstants.CENTER);
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.ProjectDialog.class.getResource(
-            "resources/icons/project48.png")));
+                "resources/icons/project48.png")));
         topPanel.add(header);
-        
+
         centerPanel.setBorder(new EtchedBorder());
         titleLabel.setText(Local.getString("Title"));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.gridwidth = 5;
         gbc.insets = new Insets(5, 10, 5, 10);
         //gbc.anchor = GridBagConstraints.WEST;
         gbc.anchor = GridBagConstraints.NORTHWEST;
         centerPanel.add(titleLabel, gbc);
-        
+
         //prTitleField.setPreferredSize(new Dimension(270, 20));
         gbc = new GridBagConstraints();
         gbc.gridwidth = 5;
-        gbc.gridx = 0; gbc.gridy = 1;
+        gbc.gridx = 0;
+        gbc.gridy = 1;
         gbc.fill = GridBagConstraints.HORIZONTAL;
         gbc.insets = new Insets(0, 10, 5, 0);
         //gbc.anchor = GridBagConstraints.EAST;
         gbc.anchor = GridBagConstraints.CENTER;
         centerPanel.add(prTitleField, gbc);
-        
+
         sdLabel.setText(Local.getString("Start date"));
         sdLabel.setPreferredSize(new Dimension(70, 20));
         sdLabel.setMinimumSize(new Dimension(70, 20));
         sdLabel.setMaximumSize(new Dimension(70, 20));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 2;
+        gbc.gridx = 0;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 10, 10, 10);
         centerPanel.add(sdLabel, gbc);
 
         startDate.setPreferredSize(new Dimension(80, 20));
         startDate.setLocale(Local.getCurrentLocale());
-		//Added by (jcscoobyrs) on 17-Nov-2003 at 14:24:43 PM
-		//---------------------------------------------------
-		SimpleDateFormat sdf = new SimpleDateFormat();
-		sdf = (SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT);
-		startDate.setEditor(new JSpinner.DateEditor(startDate, 
-			sdf.toPattern()));
-		//---------------------------------------------------
+        //Added by (jcscoobyrs) on 17-Nov-2003 at 14:24:43 PM
+        //---------------------------------------------------
+        SimpleDateFormat sdf = new SimpleDateFormat();
+        sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.SHORT);
+        startDate.setEditor(new JSpinner.DateEditor(startDate,
+                sdf.toPattern()));
+        //---------------------------------------------------
         startDate.addChangeListener(new ChangeListener() {
             public void stateChanged(ChangeEvent e) {
-                if (ignoreStartChanged) return;
+                if (ignoreStartChanged) {
+                    return;
+                }
                 ignoreStartChanged = true;
                 Date sd = (Date) startDate.getModel().getValue();
                 if (endDate.isEnabled()) {
-                  Date ed = (Date) endDate.getModel().getValue();
-                  if (sd.after(ed)) {
-                    startDate.getModel().setValue(ed);
-                    sd = ed;
-                  }
+                    Date ed = (Date) endDate.getModel().getValue();
+                    if (sd.after(ed)) {
+                        startDate.getModel().setValue(ed);
+                        sd = ed;
+                    }
                 }
                 startCalFrame.cal.set(new CalendarDate(sd));
                 ignoreStartChanged = false;
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 2;
+        gbc.gridx = 1;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 0, 10, 5);
         centerPanel.add(startDate, gbc);
-        
+
         sdButton.setMinimumSize(new Dimension(20, 20));
         sdButton.setPreferredSize(new Dimension(20, 20));
         sdButton.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
@@ -150,11 +139,12 @@ public class ProjectDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 2; gbc.gridy = 2;
+        gbc.gridx = 2;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 0, 10, 25);
         gbc.anchor = GridBagConstraints.WEST;
         centerPanel.add(sdButton, gbc);
-        
+
         endDateChB.setForeground(Color.gray);
         endDateChB.setText(Local.getString("End date"));
         endDateChB.addActionListener(new java.awt.event.ActionListener() {
@@ -163,22 +153,25 @@ public class ProjectDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 3; gbc.gridy = 2;
+        gbc.gridx = 3;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 0, 10, 5);
         gbc.anchor = GridBagConstraints.WEST;
         centerPanel.add(endDateChB, gbc);
-        
+
         endDate.setEnabled(false);
         endDate.setPreferredSize(new Dimension(80, 20));
         endDate.setLocale(Local.getCurrentLocale());
-		//Added by (jcscoobyrs) on 17-Nov-2003 at 14:24:43 PM
-		//---------------------------------------------------
-		endDate.setEditor(new JSpinner.DateEditor(endDate, 
-			sdf.toPattern()));
-		//---------------------------------------------------
+        //Added by (jcscoobyrs) on 17-Nov-2003 at 14:24:43 PM
+        //---------------------------------------------------
+        endDate.setEditor(new JSpinner.DateEditor(endDate,
+                sdf.toPattern()));
+        //---------------------------------------------------
         endDate.addChangeListener(new ChangeListener() {
             public void stateChanged(ChangeEvent e) {
-                if (ignoreEndChanged) return;
+                if (ignoreEndChanged) {
+                    return;
+                }
                 ignoreEndChanged = true;
                 Date sd = (Date) startDate.getModel().getValue();
                 Date ed = (Date) endDate.getModel().getValue();
@@ -192,11 +185,12 @@ public class ProjectDialog extends JDialog {
         });
         //((JSpinner.DateEditor) endDate.getEditor()).setLocale(Local.getCurrentLocale());
         gbc = new GridBagConstraints();
-        gbc.gridx = 4; gbc.gridy = 2;
+        gbc.gridx = 4;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 0, 10, 5);
         gbc.anchor = GridBagConstraints.WEST;
         centerPanel.add(endDate, gbc);
-        
+
         edButton.setEnabled(false);
         edButton.setMinimumSize(new Dimension(20, 20));
         edButton.setMaximumSize(new Dimension(20, 20));
@@ -208,11 +202,12 @@ public class ProjectDialog extends JDialog {
             }
         });
         gbc = new GridBagConstraints();
-        gbc.gridx = 5; gbc.gridy = 2;
+        gbc.gridx = 5;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 0, 10, 10);
         gbc.anchor = GridBagConstraints.WEST;
         centerPanel.add(edButton, gbc);
-        
+
         bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
         okButton.setMaximumSize(new Dimension(100, 25));
         okButton.setMinimumSize(new Dimension(100, 25));
@@ -235,93 +230,101 @@ public class ProjectDialog extends JDialog {
         });
         bottomPanel.add(okButton);
         bottomPanel.add(cancelButton);
-        
+
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.fill = GridBagConstraints.HORIZONTAL;
         getContentPane().add(topPanel, gbc);
-        
+
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 1;
+        gbc.gridx = 0;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 5, 5, 5);
         getContentPane().add(centerPanel, gbc);
-        
+
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 2;
+        gbc.gridx = 0;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 0, 5, 5);
         gbc.anchor = GridBagConstraints.EAST;
         getContentPane().add(bottomPanel, gbc);
-    
+
         startCalFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreStartChanged)
+                if (ignoreStartChanged) {
                     return;
+                }
                 startDate.getModel().setValue(startCalFrame.cal.get().getCalendar().getTime());
             }
         });
         endCalFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreEndChanged)
+                if (ignoreEndChanged) {
                     return;
+                }
                 endDate.getModel().setValue(endCalFrame.cal.get().getCalendar().getTime());
             }
         });
     }
-    
+
     void okButton_actionPerformed(ActionEvent e) {
         CANCELLED = false;
         this.dispose();
     }
-    
+
     void cancelButton_actionPerformed(ActionEvent e) {
         this.dispose();
     }
-    
+
     void endDateChB_actionPerformed(ActionEvent e) {
         endDate.setEnabled(endDateChB.isSelected());
         edButton.setEnabled(endDateChB.isSelected());
         if (endDateChB.isSelected()) {
             endDateChB.setForeground(Color.BLACK);
             endDate.getModel().setValue(startDate.getModel().getValue());
+        } else {
+            endDateChB.setForeground(Color.GRAY);
         }
-        else endDateChB.setForeground(Color.GRAY);
     }
-    
+
     void sdButton_actionPerformed(ActionEvent e) {
         //startCalFrame.setLocation(sdButton.getLocation());
         startCalFrame.setLocation(0, 0);
-        startCalFrame.setSize((this.getContentPane().getWidth() / 2), 
-            this.getContentPane().getHeight());
+        startCalFrame.setSize((this.getContentPane().getWidth() / 2),
+                this.getContentPane().getHeight());
         this.getLayeredPane().add(startCalFrame);
         startCalFrame.setTitle(Local.getString("Start date"));
         startCalFrame.show();
     }
-    
+
     void edButton_actionPerformed(ActionEvent e) {
-        endCalFrame.setLocation((this.getContentPane().getWidth() / 2),0);
-        endCalFrame.setSize((this.getContentPane().getWidth() / 2), 
-            this.getContentPane().getHeight());
+        endCalFrame.setLocation((this.getContentPane().getWidth() / 2), 0);
+        endCalFrame.setSize((this.getContentPane().getWidth() / 2),
+                this.getContentPane().getHeight());
         this.getLayeredPane().add(endCalFrame);
         endCalFrame.setTitle(Local.getString("End date"));
         endCalFrame.show();
     }
-    
+
     public static void newProject() {
         ProjectDialog dlg = new ProjectDialog(null, Local.getString("New project"));
-        
+
         Dimension dlgSize = dlg.getSize();
         //dlg.setSize(dlgSize);
         Dimension frmSize = App.getFrame().getSize();
         Point loc = App.getFrame().getLocation();
         dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         String title = dlg.prTitleField.getText();
         CalendarDate startD = new CalendarDate((Date) dlg.startDate.getModel().getValue());
         CalendarDate endD = null;
-        if (dlg.endDateChB.isSelected())
+        if (dlg.endDateChB.isSelected()) {
             endD = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        }
         Project prj = ProjectManager.createProject(title, startD, endD);
         /*if (dlg.freezeChB.isSelected())
             prj.freeze();*/
diff --git a/src/net/sf/memoranda/ui/ProjectExportDialog.java b/src/net/sf/memoranda/ui/ProjectExportDialog.java
index 0558a61..b4c0ffd 100755
--- a/src/net/sf/memoranda/ui/ProjectExportDialog.java
+++ b/src/net/sf/memoranda/ui/ProjectExportDialog.java
@@ -1,113 +1,112 @@
 package net.sf.memoranda.ui;
 
-import java.awt.event.ActionEvent;
+import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.plaf.basic.BasicFileChooserUI;
-
-import net.sf.memoranda.util.Local;
-import javax.swing.*;
 import java.awt.*;
+import java.awt.event.ActionEvent;
 
 /*$Id: ProjectExportDialog.java,v 1.3 2004/04/05 10:05:44 alexeya Exp $*/
 public class ProjectExportDialog extends JDialog {
 
-  BorderLayout borderLayout1 = new BorderLayout();
-  JPanel jPanel2 = new JPanel();
-  public JFileChooser fileChooser = null;
-  BorderLayout borderLayout3 = new BorderLayout();
-  JPanel jPanel3 = new JPanel();
-  JButton okB = new JButton();
-  JButton cancelB = new JButton();
-  FlowLayout flowLayout1 = new FlowLayout();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JPanel jPanel2 = new JPanel();
+    public JFileChooser fileChooser = null;
+    BorderLayout borderLayout3 = new BorderLayout();
+    JPanel jPanel3 = new JPanel();
+    JButton okB = new JButton();
+    JButton cancelB = new JButton();
+    FlowLayout flowLayout1 = new FlowLayout();
 
-  public boolean CANCELLED = true;
-  Border border1;
-  Border border2;
-  JPanel jPanel4 = new JPanel();
-  JPanel jPanel1 = new JPanel();
-  BorderLayout borderLayout2 = new BorderLayout();
-  JComboBox encCB = new JComboBox(new String[]{Local.getString("System default"), "UTF-8", "ANSI"});
-  JLabel jLabel1 = new JLabel();
-  GridLayout gridLayout1 = new GridLayout();
-  JCheckBox splitChB = new JCheckBox();
-  JCheckBox titlesAsHeadersChB = new JCheckBox();
+    public boolean CANCELLED = true;
+    Border border1;
+    Border border2;
+    JPanel jPanel4 = new JPanel();
+    JPanel jPanel1 = new JPanel();
+    BorderLayout borderLayout2 = new BorderLayout();
+    JComboBox encCB = new JComboBox(new String[]{Local.getString("System default"), "UTF-8", "ANSI"});
+    JLabel jLabel1 = new JLabel();
+    GridLayout gridLayout1 = new GridLayout();
+    JCheckBox splitChB = new JCheckBox();
+    JCheckBox titlesAsHeadersChB = new JCheckBox();
 
-  public ProjectExportDialog(Frame frame, String title, JFileChooser chooser) {
-    super(frame, title, true);
-    try {
-      fileChooser = chooser;
-      jbInit();
-      pack();
+    public ProjectExportDialog(Frame frame, String title, JFileChooser chooser) {
+        super(frame, title, true);
+        try {
+            fileChooser = chooser;
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
     }
-    catch(Exception ex) {
-      new ExceptionDialog(ex);
-    }
-  }
 
 
-  void jbInit() throws Exception {
-    this.setResizable(false);
+    void jbInit() throws Exception {
+        this.setResizable(false);
 
-    border1 = BorderFactory.createEmptyBorder(10,10,0,10);
-    border2 = BorderFactory.createEmptyBorder(5,10,5,5);
-    fileChooser.setBorder(null);
-    fileChooser.setControlButtonsAreShown(false);
-    jPanel2.setLayout(borderLayout3);
-    okB.setMaximumSize(new Dimension(100, 26));
-    okB.setPreferredSize(new Dimension(100, 26));
-    okB.setText(Local.getString("Save"));
-    okB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        okB_actionPerformed(e);
-		if (fileChooser.getUI() instanceof BasicFileChooserUI) //Added to fix problem with export note
-		//jcscoobyrs 17-Nov-2003 at 08:36:14 AM
-		{//Added to fix problem with export note jcscoobyrs 17-Nov-2003 at 08:36:14 AM
-			BasicFileChooserUI ui = (BasicFileChooserUI)fileChooser.getUI();//Added to fix problem with export note
-			//jcscoobyrs 17-Nov-2003 at 08:36:14 AM
-			ui.getApproveSelectionAction().actionPerformed(e);//Added to fix problem with export note
-			//jcscoobyrs 17-Nov-2003 at 08:36:14 AM
-		}//Added to fix problem with export note jcscoobyrs 17-Nov-2003 at 08:36:14 AM
-      }
-    });
-    this.getRootPane().setDefaultButton(okB);
-    cancelB.setMaximumSize(new Dimension(100, 26));
-    cancelB.setPreferredSize(new Dimension(100, 26));
-    cancelB.setText(Local.getString("Cancel"));
-    cancelB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        cancelB_actionPerformed(e);
-      }
-    });
-    jPanel3.setLayout(flowLayout1);
-    flowLayout1.setAlignment(FlowLayout.RIGHT);
-    borderLayout3.setHgap(5);
-    borderLayout3.setVgap(5);
-    jPanel2.setBorder(border1);
-    jPanel3.setBorder(border2);
-    jPanel1.setLayout(borderLayout2);
-    jLabel1.setMaximumSize(new Dimension(155, 16));
-    jLabel1.setPreferredSize(new Dimension(80, 16));
-    jLabel1.setText(Local.getString("Encoding")+":");
-    jPanel4.setLayout(gridLayout1);
-    splitChB.setText(Local.getString("Split notes into separate files"));
-    gridLayout1.setColumns(1);
-    gridLayout1.setRows(3);
-    titlesAsHeadersChB.setText(Local.getString("Notes titles as headers"));
-    this.getContentPane().add(jPanel2,  BorderLayout.CENTER);
-    jPanel2.add(jPanel4,  BorderLayout.SOUTH);
-    jPanel4.add(jPanel1, null);
-    jPanel1.add(encCB, BorderLayout.CENTER);
-    jPanel1.add(jLabel1, BorderLayout.WEST);
-    jPanel4.add(splitChB, null);
-    jPanel2.add(fileChooser, BorderLayout.NORTH);
-    this.getContentPane().add(jPanel3,  BorderLayout.SOUTH);
-    jPanel3.add(okB, null);
-    jPanel3.add(cancelB, null);
-    jPanel4.add(titlesAsHeadersChB, null);
-  }
+        border1 = BorderFactory.createEmptyBorder(10, 10, 0, 10);
+        border2 = BorderFactory.createEmptyBorder(5, 10, 5, 5);
+        fileChooser.setBorder(null);
+        fileChooser.setControlButtonsAreShown(false);
+        jPanel2.setLayout(borderLayout3);
+        okB.setMaximumSize(new Dimension(100, 26));
+        okB.setPreferredSize(new Dimension(100, 26));
+        okB.setText(Local.getString("Save"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+                if (fileChooser.getUI() instanceof BasicFileChooserUI) { //Added to fix problem with export note
+                    // jcscoobyrs 17-Nov-2003 at 08:36:14 AM
+                    // Added to fix problem with export note jcscoobyrs 17-Nov-2003 at 08:36:14 AM
+                    BasicFileChooserUI ui = (BasicFileChooserUI) fileChooser.getUI();//Added to fix problem with export note
+                    // jcscoobyrs 17-Nov-2003 at 08:36:14 AM
+                    // jcscoobyrs 17-Nov-2003 at 08:36:14 AM
+                    //Added to fix problem with export note jcscoobyrs 17-Nov-2003 at 08:36:14 AM
+                    ui.getApproveSelectionAction().actionPerformed(e);//Added to fix problem with export note
+                }
+            }
+        });
+        this.getRootPane().setDefaultButton(okB);
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        jPanel3.setLayout(flowLayout1);
+        flowLayout1.setAlignment(FlowLayout.RIGHT);
+        borderLayout3.setHgap(5);
+        borderLayout3.setVgap(5);
+        jPanel2.setBorder(border1);
+        jPanel3.setBorder(border2);
+        jPanel1.setLayout(borderLayout2);
+        jLabel1.setMaximumSize(new Dimension(155, 16));
+        jLabel1.setPreferredSize(new Dimension(80, 16));
+        jLabel1.setText(Local.getString("Encoding") + ":");
+        jPanel4.setLayout(gridLayout1);
+        splitChB.setText(Local.getString("Split notes into separate files"));
+        gridLayout1.setColumns(1);
+        gridLayout1.setRows(3);
+        titlesAsHeadersChB.setText(Local.getString("Notes titles as headers"));
+        this.getContentPane().add(jPanel2, BorderLayout.CENTER);
+        jPanel2.add(jPanel4, BorderLayout.SOUTH);
+        jPanel4.add(jPanel1, null);
+        jPanel1.add(encCB, BorderLayout.CENTER);
+        jPanel1.add(jLabel1, BorderLayout.WEST);
+        jPanel4.add(splitChB, null);
+        jPanel2.add(fileChooser, BorderLayout.NORTH);
+        this.getContentPane().add(jPanel3, BorderLayout.SOUTH);
+        jPanel3.add(okB, null);
+        jPanel3.add(cancelB, null);
+        jPanel4.add(titlesAsHeadersChB, null);
+    }
 
-   void cancelB_actionPerformed(ActionEvent e) {
+    void cancelB_actionPerformed(ActionEvent e) {
         this.dispose();
     }
 
diff --git a/src/net/sf/memoranda/ui/ProjectsPanel.java b/src/net/sf/memoranda/ui/ProjectsPanel.java
index 5b76471..bed2651 100755
--- a/src/net/sf/memoranda/ui/ProjectsPanel.java
+++ b/src/net/sf/memoranda/ui/ProjectsPanel.java
@@ -1,493 +1,477 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Insets;
-import java.awt.Point;
-import java.awt.SystemColor;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.KeyEvent;
-import java.util.Date;
-import java.util.Vector;
-
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.Box;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBoxMenuItem;
-import javax.swing.JLabel;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JPopupMenu;
-import javax.swing.JToolBar;
-import javax.swing.SwingConstants;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ProjectManager;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.TaskList;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
-import net.sf.memoranda.util.*;
+import net.sf.memoranda.util.Context;
+import net.sf.memoranda.util.CurrentStorage;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import java.awt.*;
+import java.awt.event.*;
+import java.util.Date;
+import java.util.Vector;
 
 /*$Id: ProjectsPanel.java,v 1.14 2005/01/04 09:59:22 pbielen Exp $*/
 public class ProjectsPanel extends JPanel implements ExpandablePanel {
-	BorderLayout borderLayout1 = new BorderLayout();
-	JToolBar topBar = new JToolBar();
-	JPanel toolbarPanel = new JPanel();
-	BorderLayout borderLayout2 = new BorderLayout();
-	JPanel buttonsPanel = new JPanel();
-	JButton toggleButton = new JButton();
-	FlowLayout flowLayout1 = new FlowLayout();
-	Vector expListeners = new Vector();
-	boolean expanded = false;
-	ImageIcon expIcon =
-		new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class.getResource(
-				"resources/icons/exp_panel.png"));
-	ImageIcon collIcon =
-		new ImageIcon(
-			net.sf.memoranda.ui.AppFrame.class.getResource(
-				"resources/icons/coll_panel.png"));
-	JLabel curProjectTitle = new JLabel();
-	Component component1;
-	JPopupMenu projectsPPMenu = new JPopupMenu();
-	JMenuItem ppNewProject = new JMenuItem();
-	JMenuItem ppProperties = new JMenuItem();
-	JMenuItem ppDeleteProject = new JMenuItem();
-	JMenuItem ppOpenProject = new JMenuItem();	
-	JCheckBoxMenuItem ppShowActiveOnlyChB = new JCheckBoxMenuItem();
-	JButton ppOpenB = new JButton();
-	ProjectsTablePanel prjTablePanel = new ProjectsTablePanel();
-
-	public Action newProjectAction =
-		new AbstractAction(
-			Local.getString("New project") + "...",
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/newproject.png"))) {
-
-		public void actionPerformed(ActionEvent e) {
-			ppNewProject_actionPerformed(e);
-		}
-	};
-
-	
-	public ProjectsPanel() {
-		try {
-			jbInit();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
-
-	void jbInit() throws Exception {
-		component1 = Box.createHorizontalStrut(20);
-		this.setLayout(borderLayout1);
-		topBar.setBackground(new Color(215, 225, 250));
-		topBar.setAlignmentX((float) 0.0);
-		topBar.setFloatable(false);
-		toolbarPanel.setLayout(borderLayout2);
-		toggleButton.setMaximumSize(new Dimension(20, 20));
-		toggleButton.setMinimumSize(new Dimension(20, 20));
-		toggleButton.setOpaque(false);
-		toggleButton.setPreferredSize(new Dimension(20, 20));
-		toggleButton.setBorderPainted(false);
-		toggleButton.setContentAreaFilled(false);
-		toggleButton.setFocusPainted(false);
-		toggleButton.setVerticalAlignment(SwingConstants.TOP);
-		toggleButton.setVerticalTextPosition(SwingConstants.BOTTOM);
-		toggleButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				toggleButton_actionPerformed(null);
-			}
-		});
-
-		toggleButton.setIcon(expIcon);
-		toggleButton.setMargin(new Insets(0, 0, 0, 0));
-		buttonsPanel.setMinimumSize(new Dimension(70, 22));
-		buttonsPanel.setOpaque(false);
-		buttonsPanel.setPreferredSize(new Dimension(80, 22));
-		buttonsPanel.setRequestFocusEnabled(false);
-		buttonsPanel.setLayout(flowLayout1);
-		toolbarPanel.setBackground(SystemColor.textHighlight);
-		toolbarPanel.setMinimumSize(new Dimension(91, 22));
-		toolbarPanel.setOpaque(false);
-		toolbarPanel.setPreferredSize(new Dimension(91, 22));
-		flowLayout1.setAlignment(FlowLayout.RIGHT);
-		flowLayout1.setHgap(0);
-		flowLayout1.setVgap(0);
-
-		curProjectTitle.setFont(new java.awt.Font("Dialog", 1, 11));
-		curProjectTitle.setForeground(new Color(64, 70, 128));
-		curProjectTitle.setMaximumSize(new Dimension(32767, 22));
-		curProjectTitle.setPreferredSize(new Dimension(32767, 22));
-		curProjectTitle.setText(CurrentProject.get().getTitle());
-		curProjectTitle.addMouseListener(new MouseAdapter() {
-			public void mouseClicked(MouseEvent e) {
-				toggleButton_actionPerformed(null);
-			}
-		});
-
-		/*
-		 * buttonsPanel.add(newProjectB, null); buttonsPanel.add(editProjectB,
-		 * null);
-		 */
-		ppNewProject.setFont(new java.awt.Font("Dialog", 1, 11));
-		ppNewProject.setAction(newProjectAction);
-
-		ppProperties.setFont(new java.awt.Font("Dialog", 1, 11));
-		ppProperties.setText(Local.getString("Project properties"));
-		ppProperties.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppProperties_actionPerformed(e);
-			}
-		});
-		ppProperties.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/editproject.png")));
-		ppProperties.setEnabled(false);
-		ppDeleteProject.setFont(new java.awt.Font("Dialog", 1, 11));
-		ppDeleteProject.setText(Local.getString("Delete project"));
-		ppDeleteProject.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppDeleteProject_actionPerformed(e);
-			}
-		});
-		ppDeleteProject.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/removeproject.png")));
-		ppDeleteProject.setEnabled(false);
-
-		ppOpenProject.setFont(new java.awt.Font("Dialog", 1, 11));
-
-		ppOpenProject.setText(" " + Local.getString("Open project"));
-
-		ppOpenProject.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppOpenProject_actionPerformed(e);
-			}
-		});
-		ppOpenProject.setEnabled(false);
-
-		ppShowActiveOnlyChB.setFont(new java.awt.Font("Dialog", 1, 11));
-		ppShowActiveOnlyChB.setText(
-			Local.getString("Show active projects only"));
-		ppShowActiveOnlyChB
-			.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppShowActiveOnlyChB_actionPerformed(e);
-			}
-		});
-		boolean isShao =
-			(Context.get("SHOW_ACTIVE_PROJECTS_ONLY") != null)
-				&& (Context.get("SHOW_ACTIVE_PROJECTS_ONLY").equals("true"));
-		ppShowActiveOnlyChB.setSelected(isShao);
-		ppShowActiveOnlyChB_actionPerformed(null);
-
-		projectsPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
-		ppOpenB.setMaximumSize(new Dimension(34, 20));
-		ppOpenB.setMinimumSize(new Dimension(24, 10));
-		ppOpenB.setOpaque(false);
-		ppOpenB.setPreferredSize(new Dimension(24, 20));
-		ppOpenB.setBorderPainted(false);
-		ppOpenB.setFocusPainted(false);
-		ppOpenB.setMargin(new Insets(0, 0, 0, 0));
-		ppOpenB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppOpenB_actionPerformed(e);
-			}
-		});
-		ppOpenB.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/ppopen.png")));
-		buttonsPanel.add(ppOpenB, null);
-		buttonsPanel.add(component1, null);
-		this.add(topBar, BorderLayout.NORTH);
-		this.add(prjTablePanel, BorderLayout.CENTER);
-		topBar.add(toolbarPanel, null);
-		toolbarPanel.add(buttonsPanel, BorderLayout.EAST);
-		buttonsPanel.add(toggleButton, null);
-		toolbarPanel.add(curProjectTitle, BorderLayout.CENTER);
-		projectsPPMenu.add(ppOpenProject);
-		projectsPPMenu.addSeparator();
-		projectsPPMenu.add(ppNewProject);
-		projectsPPMenu.add(ppDeleteProject);
-		projectsPPMenu.addSeparator();
-		projectsPPMenu.add(ppProperties);
-		projectsPPMenu.addSeparator();
-		projectsPPMenu.add(ppShowActiveOnlyChB);
-		CurrentProject.addProjectListener(new ProjectListener() {
-			public void projectChange(
-				Project p,
-				NoteList nl,
-				TaskList tl,
-				ResourcesList rl) {
-			}
-			public void projectWasChanged() {
-				curProjectTitle.setText(CurrentProject.get().getTitle());
-				prjTablePanel.updateUI();
-			}
-		});
-		CurrentDate.addDateListener(new DateListener() {
-			public void dateChange(CalendarDate d) {
-				prjTablePanel.updateUI();
-			}
-		});
-		prjTablePanel.projectsTable.addMouseListener(new PopupListener());
-		prjTablePanel
-			.projectsTable
-			.getSelectionModel()
-			.addListSelectionListener(new ListSelectionListener() {
-			public void valueChanged(ListSelectionEvent e) {
-				boolean enabled =
-					!prjTablePanel
-						.projectsTable
-						.getModel()
-						.getValueAt(
-							prjTablePanel.projectsTable.getSelectedRow(),
-							ProjectsTablePanel.PROJECT_ID)
-						.toString()
-						.equals(CurrentProject.get().getID());
-				ppDeleteProject.setEnabled(enabled);
-				ppOpenProject.setEnabled(enabled);				
-				ppProperties.setEnabled(true);
-			}
-		});
-		prjTablePanel.projectsTable.setToolTipText(
-			Local.getString("Double-click to set a current project"));
-
-			// delete projects using the DEL kew
-			prjTablePanel.projectsTable.addKeyListener(new KeyListener() {
-				public void keyPressed(KeyEvent e){
-					if(prjTablePanel.projectsTable.getSelectedRows().length>0 
-						&& e.getKeyCode()==KeyEvent.VK_DELETE)
-						ppDeleteProject_actionPerformed(null);
-				}
-				public void	keyReleased(KeyEvent e){}
-				public void keyTyped(KeyEvent e){} 
-			});
-	}
-
-	class PopupListener extends MouseAdapter {
-
-		public void mouseClicked(MouseEvent e) {
-			if (e.getClickCount() == 2)
-				ppOpenProject_actionPerformed(null);
-		}
-
-		public void mousePressed(MouseEvent e) {
-			maybeShowPopup(e);
-		}
-
-		public void mouseReleased(MouseEvent e) {
-			maybeShowPopup(e);
-		}
-
-		private void maybeShowPopup(MouseEvent e) {
-			if (e.isPopupTrigger()) {
-				projectsPPMenu.show(e.getComponent(), e.getX(), e.getY());
-			}
-		}
-	}
-
-	void toggleButton_actionPerformed(ActionEvent e) {
-		for (int i = 0; i < expListeners.size(); i++)
-			((ActionListener) expListeners.get(i)).actionPerformed(
-				new ActionEvent(this, 0, "Panel expanded (collapsed)"));
-		if (expanded) {
-			expanded = false;
-			toggleButton.setIcon(expIcon);
-		} else {
-			expanded = true;
-			toggleButton.setIcon(collIcon);
-		}
-	}
-
-	public void AddExpandListener(ActionListener al) {
-		expListeners.add(al);
-	}
-
-	void ppOpenB_actionPerformed(ActionEvent e) {
-		projectsPPMenu.show(
-			buttonsPanel,
-			(int) (ppOpenB.getLocation().getX() + 24)
-				- projectsPPMenu.getWidth(),
-			(int) ppOpenB.getLocation().getY() + 24);
-	}
-
-	void ppOpenProject_actionPerformed(ActionEvent e) {
-		CurrentProject.set(prjTablePanel.getSelectedProject());
-		prjTablePanel.updateUI();
-		ppDeleteProject.setEnabled(false);
-		ppOpenProject.setEnabled(false);
-	}
-
-	void ppNewProject_actionPerformed(ActionEvent e) {
-		ProjectDialog.newProject();
-		prjTablePanel.updateUI();
-		AgendaPanel.refresh(CalendarDate.today());
-	}
-
-	void ppDeleteProject_actionPerformed(ActionEvent e) {
-		String msg;
-		Project prj;
-		Vector toremove = new Vector();
-		if (prjTablePanel.projectsTable.getSelectedRows().length > 1)
-			msg =
-				Local.getString("Delete")
-					+ " "
-					+ prjTablePanel.projectsTable.getSelectedRows().length
-					+ " "
-					+ Local.getString("projects")
-					+ "\n"
-					+ Local.getString("Are you sure?");
-		else {
-			prj = prjTablePanel.getSelectedProject();
-			msg =
-				Local.getString("Delete project")
-					+ " '"
-					+ prj.getTitle()
-					+ "'.\n"
-					+ Local.getString("Are you sure?");
-		}
-
-		int n =
-			JOptionPane.showConfirmDialog(
-				App.getFrame(),
-				msg,
-				Local.getString("Delete project"),
-				JOptionPane.YES_NO_OPTION);
-		if (n != JOptionPane.YES_OPTION)
-			return;
-
-		for (int i = 0;
-			i < prjTablePanel.projectsTable.getSelectedRows().length;
-			i++) {
-			prj =
-				(net.sf.memoranda.Project) prjTablePanel
-					.projectsTable
-					.getModel()
-					.getValueAt(
-					prjTablePanel.projectsTable.getSelectedRows()[i],
-					ProjectsTablePanel.PROJECT);
-			toremove.add(prj.getID());
-		}
-		for (int i = 0; i < toremove.size(); i++) {
-			ProjectManager.removeProject((String) toremove.get(i));
-		}
-		CurrentStorage.get().storeProjectManager();
-		prjTablePanel.projectsTable.clearSelection();
-		prjTablePanel.updateUI();
-		setMenuEnabled(false);
-		AgendaPanel.refresh(CalendarDate.today());
-	}
-
-	void ppProperties_actionPerformed(ActionEvent e) {
-		Project prj = prjTablePanel.getSelectedProject();
-		ProjectDialog dlg =
-			new ProjectDialog(null, Local.getString("Project properties"));
-		Dimension dlgSize = dlg.getSize();
-		Dimension frmSize = App.getFrame().getSize();
-		Point loc = App.getFrame().getLocation();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-		dlg.prTitleField.setText(prj.getTitle());
-		dlg.startDate.getModel().setValue(
-			prj.getStartDate().getCalendar().getTime());
-		if (prj.getEndDate() != null) {
-			dlg.edButton.setEnabled(true);
+    BorderLayout borderLayout1 = new BorderLayout();
+    JToolBar topBar = new JToolBar();
+    JPanel toolbarPanel = new JPanel();
+    BorderLayout borderLayout2 = new BorderLayout();
+    JPanel buttonsPanel = new JPanel();
+    JButton toggleButton = new JButton();
+    FlowLayout flowLayout1 = new FlowLayout();
+    Vector expListeners = new Vector();
+    boolean expanded = false;
+    ImageIcon expIcon =
+            new ImageIcon(
+                    net.sf.memoranda.ui.AppFrame.class.getResource(
+                            "resources/icons/exp_panel.png"));
+    ImageIcon collIcon =
+            new ImageIcon(
+                    net.sf.memoranda.ui.AppFrame.class.getResource(
+                            "resources/icons/coll_panel.png"));
+    JLabel curProjectTitle = new JLabel();
+    Component component1;
+    JPopupMenu projectsPPMenu = new JPopupMenu();
+    JMenuItem ppNewProject = new JMenuItem();
+    JMenuItem ppProperties = new JMenuItem();
+    JMenuItem ppDeleteProject = new JMenuItem();
+    JMenuItem ppOpenProject = new JMenuItem();
+    JCheckBoxMenuItem ppShowActiveOnlyChB = new JCheckBoxMenuItem();
+    JButton ppOpenB = new JButton();
+    ProjectsTablePanel prjTablePanel = new ProjectsTablePanel();
+
+    public Action newProjectAction = new AbstractAction(
+            Local.getString("New project") + "...",
+            new ImageIcon(
+                    net.sf.memoranda.ui.AppFrame.class.getResource(
+                            "resources/icons/newproject.png"))) {
+
+        public void actionPerformed(ActionEvent e) {
+            ppNewProject_actionPerformed(e);
+        }
+    };
+
+
+    public ProjectsPanel() {
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
+
+    void jbInit() throws Exception {
+        component1 = Box.createHorizontalStrut(20);
+        this.setLayout(borderLayout1);
+        topBar.setBackground(new Color(215, 225, 250));
+        topBar.setAlignmentX((float) 0.0);
+        topBar.setFloatable(false);
+        toolbarPanel.setLayout(borderLayout2);
+        toggleButton.setMaximumSize(new Dimension(20, 20));
+        toggleButton.setMinimumSize(new Dimension(20, 20));
+        toggleButton.setOpaque(false);
+        toggleButton.setPreferredSize(new Dimension(20, 20));
+        toggleButton.setBorderPainted(false);
+        toggleButton.setContentAreaFilled(false);
+        toggleButton.setFocusPainted(false);
+        toggleButton.setVerticalAlignment(SwingConstants.TOP);
+        toggleButton.setVerticalTextPosition(SwingConstants.BOTTOM);
+        toggleButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                toggleButton_actionPerformed(null);
+            }
+        });
+
+        toggleButton.setIcon(expIcon);
+        toggleButton.setMargin(new Insets(0, 0, 0, 0));
+        buttonsPanel.setMinimumSize(new Dimension(70, 22));
+        buttonsPanel.setOpaque(false);
+        buttonsPanel.setPreferredSize(new Dimension(80, 22));
+        buttonsPanel.setRequestFocusEnabled(false);
+        buttonsPanel.setLayout(flowLayout1);
+        toolbarPanel.setBackground(SystemColor.textHighlight);
+        toolbarPanel.setMinimumSize(new Dimension(91, 22));
+        toolbarPanel.setOpaque(false);
+        toolbarPanel.setPreferredSize(new Dimension(91, 22));
+        flowLayout1.setAlignment(FlowLayout.RIGHT);
+        flowLayout1.setHgap(0);
+        flowLayout1.setVgap(0);
+
+        curProjectTitle.setFont(new java.awt.Font("Dialog", 1, 11));
+        curProjectTitle.setForeground(new Color(64, 70, 128));
+        curProjectTitle.setMaximumSize(new Dimension(32767, 22));
+        curProjectTitle.setPreferredSize(new Dimension(32767, 22));
+        curProjectTitle.setText(CurrentProject.get().getTitle());
+        curProjectTitle.addMouseListener(new MouseAdapter() {
+            public void mouseClicked(MouseEvent e) {
+                toggleButton_actionPerformed(null);
+            }
+        });
+
+        /*
+         * buttonsPanel.add(newProjectB, null); buttonsPanel.add(editProjectB,
+         * null);
+         */
+        ppNewProject.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppNewProject.setAction(newProjectAction);
+
+        ppProperties.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppProperties.setText(Local.getString("Project properties"));
+        ppProperties.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                ppProperties_actionPerformed(e);
+            }
+        });
+        ppProperties.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/editproject.png")));
+        ppProperties.setEnabled(false);
+        ppDeleteProject.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppDeleteProject.setText(Local.getString("Delete project"));
+        ppDeleteProject.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                ppDeleteProject_actionPerformed(e);
+            }
+        });
+        ppDeleteProject.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/removeproject.png")));
+        ppDeleteProject.setEnabled(false);
+
+        ppOpenProject.setFont(new java.awt.Font("Dialog", 1, 11));
+
+        ppOpenProject.setText(" " + Local.getString("Open project"));
+
+        ppOpenProject.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                ppOpenProject_actionPerformed(e);
+            }
+        });
+        ppOpenProject.setEnabled(false);
+
+        ppShowActiveOnlyChB.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppShowActiveOnlyChB.setText(
+                Local.getString("Show active projects only"));
+        ppShowActiveOnlyChB
+                .addActionListener(new java.awt.event.ActionListener() {
+                    public void actionPerformed(ActionEvent e) {
+                        ppShowActiveOnlyChB_actionPerformed(e);
+                    }
+                });
+        boolean isShao =
+                (Context.get("SHOW_ACTIVE_PROJECTS_ONLY") != null)
+                        && (Context.get("SHOW_ACTIVE_PROJECTS_ONLY").equals("true"));
+        ppShowActiveOnlyChB.setSelected(isShao);
+        ppShowActiveOnlyChB_actionPerformed(null);
+
+        projectsPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
+        ppOpenB.setMaximumSize(new Dimension(34, 20));
+        ppOpenB.setMinimumSize(new Dimension(24, 10));
+        ppOpenB.setOpaque(false);
+        ppOpenB.setPreferredSize(new Dimension(24, 20));
+        ppOpenB.setBorderPainted(false);
+        ppOpenB.setFocusPainted(false);
+        ppOpenB.setMargin(new Insets(0, 0, 0, 0));
+        ppOpenB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                ppOpenB_actionPerformed(e);
+            }
+        });
+        ppOpenB.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/ppopen.png")));
+        buttonsPanel.add(ppOpenB, null);
+        buttonsPanel.add(component1, null);
+        this.add(topBar, BorderLayout.NORTH);
+        this.add(prjTablePanel, BorderLayout.CENTER);
+        topBar.add(toolbarPanel, null);
+        toolbarPanel.add(buttonsPanel, BorderLayout.EAST);
+        buttonsPanel.add(toggleButton, null);
+        toolbarPanel.add(curProjectTitle, BorderLayout.CENTER);
+        projectsPPMenu.add(ppOpenProject);
+        projectsPPMenu.addSeparator();
+        projectsPPMenu.add(ppNewProject);
+        projectsPPMenu.add(ppDeleteProject);
+        projectsPPMenu.addSeparator();
+        projectsPPMenu.add(ppProperties);
+        projectsPPMenu.addSeparator();
+        projectsPPMenu.add(ppShowActiveOnlyChB);
+        CurrentProject.addProjectListener(new ProjectListener() {
+            public void projectChange(
+                    Project p,
+                    NoteList nl,
+                    TaskList tl,
+                    ResourcesList rl) {
+            }
+
+            public void projectWasChanged() {
+                curProjectTitle.setText(CurrentProject.get().getTitle());
+                prjTablePanel.updateUI();
+            }
+        });
+        CurrentDate.addDateListener(new DateListener() {
+            public void dateChange(CalendarDate d) {
+                prjTablePanel.updateUI();
+            }
+        });
+        prjTablePanel.projectsTable.addMouseListener(new PopupListener());
+        prjTablePanel
+                .projectsTable
+                .getSelectionModel()
+                .addListSelectionListener(new ListSelectionListener() {
+                    public void valueChanged(ListSelectionEvent e) {
+                        boolean enabled =
+                                !prjTablePanel
+                                        .projectsTable
+                                        .getModel()
+                                        .getValueAt(
+                                                prjTablePanel.projectsTable.getSelectedRow(),
+                                                ProjectsTablePanel.PROJECT_ID)
+                                        .toString()
+                                        .equals(CurrentProject.get().getID());
+                        ppDeleteProject.setEnabled(enabled);
+                        ppOpenProject.setEnabled(enabled);
+                        ppProperties.setEnabled(true);
+                    }
+                });
+        prjTablePanel.projectsTable.setToolTipText(
+                Local.getString("Double-click to set a current project"));
+
+        // delete projects using the DEL kew
+        prjTablePanel.projectsTable.addKeyListener(new KeyListener() {
+            public void keyPressed(KeyEvent e) {
+                if (prjTablePanel.projectsTable.getSelectedRows().length > 0
+                        && e.getKeyCode() == KeyEvent.VK_DELETE) {
+                    ppDeleteProject_actionPerformed(null);
+                }
+            }
+
+            public void keyReleased(KeyEvent e) {
+            }
+
+            public void keyTyped(KeyEvent e) {
+            }
+        });
+    }
+
+    class PopupListener extends MouseAdapter {
+
+        public void mouseClicked(MouseEvent e) {
+            if (e.getClickCount() == 2) {
+                ppOpenProject_actionPerformed(null);
+            }
+        }
+
+        public void mousePressed(MouseEvent e) {
+            maybeShowPopup(e);
+        }
+
+        public void mouseReleased(MouseEvent e) {
+            maybeShowPopup(e);
+        }
+
+        private void maybeShowPopup(MouseEvent e) {
+            if (e.isPopupTrigger()) {
+                projectsPPMenu.show(e.getComponent(), e.getX(), e.getY());
+            }
+        }
+    }
+
+    void toggleButton_actionPerformed(ActionEvent e) {
+        for (int i = 0; i < expListeners.size(); i++) {
+            ((ActionListener) expListeners.get(i)).actionPerformed(
+                    new ActionEvent(this, 0, "Panel expanded (collapsed)"));
+        }
+        if (expanded) {
+            expanded = false;
+            toggleButton.setIcon(expIcon);
+        } else {
+            expanded = true;
+            toggleButton.setIcon(collIcon);
+        }
+    }
+
+    public void AddExpandListener(ActionListener al) {
+        expListeners.add(al);
+    }
+
+    void ppOpenB_actionPerformed(ActionEvent e) {
+        projectsPPMenu.show(
+                buttonsPanel,
+                (int) (ppOpenB.getLocation().getX() + 24)
+                        - projectsPPMenu.getWidth(),
+                (int) ppOpenB.getLocation().getY() + 24);
+    }
+
+    void ppOpenProject_actionPerformed(ActionEvent e) {
+        CurrentProject.set(prjTablePanel.getSelectedProject());
+        prjTablePanel.updateUI();
+        ppDeleteProject.setEnabled(false);
+        ppOpenProject.setEnabled(false);
+    }
+
+    void ppNewProject_actionPerformed(ActionEvent e) {
+        ProjectDialog.newProject();
+        prjTablePanel.updateUI();
+        AgendaPanel.refresh(CalendarDate.today());
+    }
+
+    void ppDeleteProject_actionPerformed(ActionEvent e) {
+        String msg;
+        Project prj;
+        Vector toremove = new Vector();
+        if (prjTablePanel.projectsTable.getSelectedRows().length > 1) {
+            msg =
+                    Local.getString("Delete")
+                            + " "
+                            + prjTablePanel.projectsTable.getSelectedRows().length
+                            + " "
+                            + Local.getString("projects")
+                            + "\n"
+                            + Local.getString("Are you sure?");
+        } else {
+            prj = prjTablePanel.getSelectedProject();
+            msg =
+                    Local.getString("Delete project")
+                            + " '"
+                            + prj.getTitle()
+                            + "'.\n"
+                            + Local.getString("Are you sure?");
+        }
+
+        int n =
+                JOptionPane.showConfirmDialog(
+                        App.getFrame(),
+                        msg,
+                        Local.getString("Delete project"),
+                        JOptionPane.YES_NO_OPTION);
+        if (n != JOptionPane.YES_OPTION) {
+            return;
+        }
+
+        for (int i = 0;
+             i < prjTablePanel.projectsTable.getSelectedRows().length;
+             i++) {
+            prj =
+                    (net.sf.memoranda.Project) prjTablePanel
+                            .projectsTable
+                            .getModel()
+                            .getValueAt(
+                                    prjTablePanel.projectsTable.getSelectedRows()[i],
+                                    ProjectsTablePanel.PROJECT);
+            toremove.add(prj.getID());
+        }
+        for (int i = 0; i < toremove.size(); i++) {
+            ProjectManager.removeProject((String) toremove.get(i));
+        }
+        CurrentStorage.get().storeProjectManager();
+        prjTablePanel.projectsTable.clearSelection();
+        prjTablePanel.updateUI();
+        setMenuEnabled(false);
+        AgendaPanel.refresh(CalendarDate.today());
+    }
+
+    void ppProperties_actionPerformed(ActionEvent e) {
+        Project prj = prjTablePanel.getSelectedProject();
+        ProjectDialog dlg =
+                new ProjectDialog(null, Local.getString("Project properties"));
+        Dimension dlgSize = dlg.getSize();
+        Dimension frmSize = App.getFrame().getSize();
+        Point loc = App.getFrame().getLocation();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        dlg.prTitleField.setText(prj.getTitle());
+        dlg.startDate.getModel().setValue(
+                prj.getStartDate().getCalendar().getTime());
+        if (prj.getEndDate() != null) {
+            dlg.edButton.setEnabled(true);
             dlg.endDateChB.setForeground(Color.BLACK);
 
-			dlg.endDateChB.setSelected(true);
-			dlg.endDate.setEnabled(true);
-			dlg.endDate.getModel().setValue(
-				prj.getEndDate().getCalendar().getTime());
-		}
-		/*if (prj.getStatus() == Project.FROZEN)
-			dlg.freezeChB.setSelected(true);*/
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		prj.setTitle(dlg.prTitleField.getText());
-		prj.setStartDate(
-			new CalendarDate((Date) dlg.startDate.getModel().getValue()));
-
-		if (dlg.endDateChB.isSelected())
-			prj.setEndDate(
-				new CalendarDate((Date) dlg.endDate.getModel().getValue()));
-		else
-			prj.setEndDate(null);
-		prjTablePanel.updateUI();
-		/*
-		 * if (dlg.freezeChB.isSelected()) prj.freeze(); else
-		 */
-	}
-
-	void ppShowActiveOnlyChB_actionPerformed(ActionEvent e) {
-		prjTablePanel.setShowActiveOnly(ppShowActiveOnlyChB.isSelected());
-		Context.put(
-			"SHOW_ACTIVE_PROJECTS_ONLY",
-			new Boolean(ppShowActiveOnlyChB.isSelected()));
-	}
-
-	void setMenuEnabled(boolean enabled) {
-		ppDeleteProject.setEnabled(enabled);
-		ppOpenProject.setEnabled(enabled);
-		ppProperties.setEnabled(enabled);		
-	}
-
-	public void BDeleteProject_actionPerformed(ActionEvent e) {
-		String msg;
-		Project prj;
-		prj = CurrentProject.get();
-		msg = Local.getString("Delete project")
-					+ " '"
-					+ prj.getTitle()
-					+ "'.\n"
-					+ Local.getString("Are you sure?");
-
-		int n =
-			JOptionPane.showConfirmDialog(
-				App.getFrame(),
-				msg,
-				Local.getString("Delete project"),
-				JOptionPane.YES_NO_OPTION);
-		if (n != JOptionPane.YES_OPTION)
-			return;
-		
-		if(ProjectManager.getActiveProjectsNumber() > 1) 
-			if(((Project)ProjectManager.getActiveProjects().toArray()[1]).equals(prj))
-				CurrentProject.set((Project)(ProjectManager.getActiveProjects().toArray()[0]));
-			else
-				CurrentProject.set((Project)(ProjectManager.getActiveProjects().toArray()[1]));
-		else
-			CurrentProject.set(ProjectManager.createProject("Default Project", CalendarDate.today(), null));
-		ProjectManager.removeProject(prj.getID());
-		CurrentProject.set(CurrentProject.get());
-		CurrentStorage.get().storeProjectManager();
-		prjTablePanel.projectsTable.clearSelection();
-		prjTablePanel.updateUI();
-		setMenuEnabled(false);
-		AgendaPanel.refresh(CalendarDate.today());
-	}
+            dlg.endDateChB.setSelected(true);
+            dlg.endDate.setEnabled(true);
+            dlg.endDate.getModel().setValue(
+                    prj.getEndDate().getCalendar().getTime());
+        }
+        /*if (prj.getStatus() == Project.FROZEN)
+            dlg.freezeChB.setSelected(true);*/
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        prj.setTitle(dlg.prTitleField.getText());
+        prj.setStartDate(
+                new CalendarDate((Date) dlg.startDate.getModel().getValue()));
+
+        if (dlg.endDateChB.isSelected()) {
+            prj.setEndDate(
+                    new CalendarDate((Date) dlg.endDate.getModel().getValue()));
+        } else {
+            prj.setEndDate(null);
+        }
+        prjTablePanel.updateUI();
+        /*
+         * if (dlg.freezeChB.isSelected()) prj.freeze(); else
+         */
+    }
+
+    void ppShowActiveOnlyChB_actionPerformed(ActionEvent e) {
+        prjTablePanel.setShowActiveOnly(ppShowActiveOnlyChB.isSelected());
+        Context.put(
+                "SHOW_ACTIVE_PROJECTS_ONLY",
+                new Boolean(ppShowActiveOnlyChB.isSelected()));
+    }
+
+    void setMenuEnabled(boolean enabled) {
+        ppDeleteProject.setEnabled(enabled);
+        ppOpenProject.setEnabled(enabled);
+        ppProperties.setEnabled(enabled);
+    }
+
+    public void BDeleteProject_actionPerformed(ActionEvent e) {
+        String msg;
+        Project prj;
+        prj = CurrentProject.get();
+        msg = Local.getString("Delete project")
+                + " '"
+                + prj.getTitle()
+                + "'.\n"
+                + Local.getString("Are you sure?");
+
+        int n =
+                JOptionPane.showConfirmDialog(
+                        App.getFrame(),
+                        msg,
+                        Local.getString("Delete project"),
+                        JOptionPane.YES_NO_OPTION);
+        if (n != JOptionPane.YES_OPTION) {
+            return;
+        }
+
+        if (ProjectManager.getActiveProjectsNumber() > 1) {
+            if (((Project) ProjectManager.getActiveProjects().toArray()[1]).equals(prj)) {
+                CurrentProject.set((Project) (ProjectManager.getActiveProjects().toArray()[0]));
+            } else {
+                CurrentProject.set((Project) (ProjectManager.getActiveProjects().toArray()[1]));
+            }
+        } else {
+            CurrentProject.set(ProjectManager.createProject("Default Project", CalendarDate.today(), null));
+        }
+        ProjectManager.removeProject(prj.getID());
+        CurrentProject.set(CurrentProject.get());
+        CurrentStorage.get().storeProjectManager();
+        prjTablePanel.projectsTable.clearSelection();
+        prjTablePanel.updateUI();
+        setMenuEnabled(false);
+        AgendaPanel.refresh(CalendarDate.today());
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/ProjectsTablePanel.java b/src/net/sf/memoranda/ui/ProjectsTablePanel.java
index e914a6b..1446a17 100755
--- a/src/net/sf/memoranda/ui/ProjectsTablePanel.java
+++ b/src/net/sf/memoranda/ui/ProjectsTablePanel.java
@@ -1,23 +1,17 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTable;
-import javax.swing.table.AbstractTableModel;
-import javax.swing.table.TableCellRenderer;
-import javax.swing.table.TableColumn;
-
 import net.sf.memoranda.CurrentProject;
 import net.sf.memoranda.Project;
 import net.sf.memoranda.ProjectManager;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
+import javax.swing.table.AbstractTableModel;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.table.TableColumn;
+import java.awt.*;
+
 /*$Id: ProjectsTablePanel.java,v 1.6 2004/04/05 10:05:44 alexeya Exp $*/
 public class ProjectsTablePanel extends JPanel {
     BorderLayout borderLayout1 = new BorderLayout();
@@ -27,17 +21,18 @@ public class ProjectsTablePanel extends JPanel {
             if (((String) getModel().getValueAt(row, PROJECT_ID)).equals(CurrentProject.get().getID())) {
                 return new javax.swing.table.DefaultTableCellRenderer() {
                     public Component getTableCellRendererComponent(
-                        JTable table,
-                        Object value,
-                        boolean isSelected,
-                        boolean hasFocus,
-                        int row,
-                        int column) {
+                            JTable table,
+                            Object value,
+                            boolean isSelected,
+                            boolean hasFocus,
+                            int row,
+                            int column) {
                         Component comp =
-                            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
+                                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                         comp.setFont(new java.awt.Font("Dialog", 1, 11));
-                        if (((row % 2) > 0) && (!isSelected))
+                        if (((row % 2) > 0) && (!isSelected)) {
                             comp.setBackground(new Color(230, 240, 255));
+                        }
                         return comp;
                     }
                 };
@@ -45,16 +40,17 @@ public class ProjectsTablePanel extends JPanel {
             if ((row % 2) > 0) {
                 return new javax.swing.table.DefaultTableCellRenderer() {
                     public Component getTableCellRendererComponent(
-                        JTable table,
-                        Object value,
-                        boolean isSelected,
-                        boolean hasFocus,
-                        int row,
-                        int column) {
+                            JTable table,
+                            Object value,
+                            boolean isSelected,
+                            boolean hasFocus,
+                            int row,
+                            int column) {
                         Component comp =
-                            super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
-                        if (isSelected)
+                                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
+                        if (isSelected) {
                             return comp;
+                        }
                         comp.setBackground(new Color(230, 240, 255));
                         return comp;
                     }
@@ -67,18 +63,20 @@ public class ProjectsTablePanel extends JPanel {
     boolean activeOnly = false;
 
     public void updateUI() {
-		if(projectsTable!=null) projectsTable.updateUI();
-		super.updateUI();
+        if (projectsTable != null) {
+            projectsTable.updateUI();
+        }
+        super.updateUI();
     }
 
     public ProjectsTablePanel() {
         try {
             jbInit();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
+
     void jbInit() throws Exception {
         projectsTable.getTableHeader().setFont(new java.awt.Font("Dialog", 1, 10));
         projectsTable.setFont(new java.awt.Font("Dialog", 0, 11));
@@ -102,10 +100,9 @@ public class ProjectsTablePanel extends JPanel {
             TableColumn column = projectsTable.getColumnModel().getColumn(i);
             if (i == 0) {
                 column.setPreferredWidth(32767);
-            }
-            else {
+            } else {
                 column.setMinWidth(80);
-                column.setPreferredWidth(80);                
+                column.setPreferredWidth(80);
             }
         }
     }
@@ -129,13 +126,13 @@ public class ProjectsTablePanel extends JPanel {
 
     class PrjTableModel extends AbstractTableModel {
 
-        String[] columnNames =
-            {
+        String[] columnNames = {
                 Local.getString("Project title"),
                 Local.getString("Start date"),
                 Local.getString("End date"),
                 //Local.getString("Execution"),
-                Local.getString("Status")};
+                Local.getString("Status")
+        };
 
         PrjTableModel() {
             super();
@@ -146,37 +143,41 @@ public class ProjectsTablePanel extends JPanel {
         }
 
         public Object getValueAt(int row, int col) {
-			if(row==-1) return "";
-			Project pr;
-			if (activeOnly)
-				pr = (Project) ProjectManager.getActiveProjects().get(row);
-			else
-				pr = (Project) ProjectManager.getAllProjects().get(row);
+            if (row == -1) {
+                return "";
+            }
+            Project pr;
+            if (activeOnly) {
+                pr = (Project) ProjectManager.getActiveProjects().get(row);
+            } else {
+                pr = (Project) ProjectManager.getAllProjects().get(row);
+            }
             switch (col) {
-                case 0 :
+                case 0:
                     return pr.getTitle();
-                case 1 :
+                case 1:
                     return pr.getStartDate().getShortDateString();
-                case 2 :
+                case 2:
                     CalendarDate d = pr.getEndDate();
-                    if (d == null)
+                    if (d == null) {
                         return "-";
-                    else
+                    } else {
                         return d.getShortDateString();
-                //case 3 :   return pr.getProgress() + "%";
-                case 3 :
+                    }
+                case 3:
                     return getStatusString(pr.getStatus());
-                case 100 :
+                case 100:
                     return pr.getID();
-                case 101 :
+                case 101:
                     return pr;
             }
             return "";
         }
 
         public int getRowCount() {
-            if (activeOnly)
+            if (activeOnly) {
                 return ProjectManager.getActiveProjectsNumber();
+            }
             return ProjectManager.getAllProjectsNumber();
         }
 
@@ -187,15 +188,15 @@ public class ProjectsTablePanel extends JPanel {
 
     String getStatusString(int status) {
         switch (status) {
-            case Project.ACTIVE :
+            case Project.ACTIVE:
                 return Local.getString("Active");
-            case Project.COMPLETED :
+            case Project.COMPLETED:
                 return Local.getString("Completed");
-            case Project.FAILED :
+            case Project.FAILED:
                 return Local.getString("Failed");
-            case Project.FROZEN :
+            case Project.FROZEN:
                 return Local.getString("Frozen");
-            case Project.SCHEDULED :
+            case Project.SCHEDULED:
                 return Local.getString("Scheduled");
         }
         return "";
diff --git a/src/net/sf/memoranda/ui/ResourceTypeDialog.java b/src/net/sf/memoranda/ui/ResourceTypeDialog.java
index 31795e1..f981efb 100755
--- a/src/net/sf/memoranda/ui/ResourceTypeDialog.java
+++ b/src/net/sf/memoranda/ui/ResourceTypeDialog.java
@@ -1,23 +1,12 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.event.ActionEvent;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JList;
-import javax.swing.JPanel;
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.TitledBorder;
-
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
 
 /*$Id: ResourceTypeDialog.java,v 1.11 2004/07/01 14:44:10 pbielen Exp $*/
 public class ResourceTypeDialog extends JDialog {
@@ -39,27 +28,26 @@ public class ResourceTypeDialog extends JDialog {
         try {
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
 
     void jbInit() throws Exception {
-	this.setResizable(false);
+        this.setResizable(false);
         dialogTitlePanel.setBackground(Color.WHITE);
         dialogTitlePanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 5));
         header.setFont(new java.awt.Font("Dialog", 0, 20));
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("Resource type"));
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.ResourceTypeDialog.class.getResource(
-            "resources/icons/resource48.png")));        
+                "resources/icons/resource48.png")));
         dialogTitlePanel.add(header);
         this.getContentPane().add(dialogTitlePanel, BorderLayout.NORTH);
-        
+
         //mPanel.add(areaPanel, BorderLayout.CENTER);
         this.getContentPane().add(areaPanel, BorderLayout.CENTER);
-        
+
         cancelB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 cancelB_actionPerformed(e);
@@ -70,7 +58,7 @@ public class ResourceTypeDialog extends JDialog {
         cancelB.setMinimumSize(new Dimension(100, 26));
         cancelB.setMaximumSize(new Dimension(100, 26));
 
-        
+
         okB.setMaximumSize(new Dimension(100, 26));
         okB.setMinimumSize(new Dimension(100, 26));
         okB.setPreferredSize(new Dimension(100, 26));
@@ -83,24 +71,23 @@ public class ResourceTypeDialog extends JDialog {
         this.getRootPane().setDefaultButton(okB);
         buttonsPanel.add(okB, null);
         buttonsPanel.add(cancelB, null);
-        
+
         this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
     }
 
 
-
     void cancelB_actionPerformed(ActionEvent e) {
         this.dispose();
     }
+
     void okB_actionPerformed(ActionEvent e) {
         CANCELLED = false;
         this.dispose();
     }
 
     public JList getTypesList() {
-      return areaPanel.typesList;
+        return areaPanel.typesList;
     }
 
 
-
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/ResourceTypePanel.java b/src/net/sf/memoranda/ui/ResourceTypePanel.java
index 244c603..705e230 100755
--- a/src/net/sf/memoranda/ui/ResourceTypePanel.java
+++ b/src/net/sf/memoranda/ui/ResourceTypePanel.java
@@ -1,34 +1,14 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.Point;
-import java.awt.SystemColor;
-import java.awt.event.ActionEvent;
-import java.io.File;
+import net.sf.memoranda.util.*;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JLabel;
-import javax.swing.JList;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.ListCellRenderer;
-import javax.swing.ListSelectionModel;
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.TitledBorder;
 import javax.swing.event.ListSelectionEvent;
-
-import net.sf.memoranda.util.AppList;
-import net.sf.memoranda.util.CurrentStorage;
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.MimeType;
-import net.sf.memoranda.util.MimeTypesList;
-import net.sf.memoranda.util.Util;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.File;
 
 /*$Id: ResourceTypePanel.java,v 1.8 2004/10/18 19:09:10 ivanrise Exp $*/
 public class ResourceTypePanel extends JPanel {
@@ -39,92 +19,91 @@ public class ResourceTypePanel extends JPanel {
     TitledBorder titledBorder2;
     public String ext = "";
     boolean CANCELLED = true;
-  JPanel jPanel1 = new JPanel();
-  JButton newTypeB = new JButton();
-  JScrollPane jScrollPane1 = new JScrollPane();
-  BorderLayout borderLayout2 = new BorderLayout();
-  JPanel areaPanel = new JPanel();
-  JPanel jPanel2 = new JPanel();
-  JButton editB = new JButton();
-  JButton deleteB = new JButton();
-  BorderLayout borderLayout1 = new BorderLayout();
-  public JList typesList = new JList();
-  BorderLayout borderLayout3 = new BorderLayout();
-  Border border3;
+    JPanel jPanel1 = new JPanel();
+    JButton newTypeB = new JButton();
+    JScrollPane jScrollPane1 = new JScrollPane();
+    BorderLayout borderLayout2 = new BorderLayout();
+    JPanel areaPanel = new JPanel();
+    JPanel jPanel2 = new JPanel();
+    JButton editB = new JButton();
+    JButton deleteB = new JButton();
+    BorderLayout borderLayout1 = new BorderLayout();
+    public JList typesList = new JList();
+    BorderLayout borderLayout3 = new BorderLayout();
+    Border border3;
 
     public ResourceTypePanel() {
         super();
         try {
             jbInit();
 
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 
     void jbInit() throws Exception {
         border1 = BorderFactory.createLineBorder(SystemColor.controlText, 2);
-        titledBorder1 = new TitledBorder(BorderFactory.createEmptyBorder(),Local.getString("Registered types"));
+        titledBorder1 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("Registered types"));
         border2 = BorderFactory.createLineBorder(Color.gray, 1);
         titledBorder2 = new TitledBorder(BorderFactory.createLineBorder(Color.gray, 1), Local.getString("Details"));
         border3 = BorderFactory.createEmptyBorder(0, 10, 0, 0);
 
 
         jPanel1.setBorder(titledBorder1);
-    jPanel1.setLayout(borderLayout1);
-    newTypeB.setMaximumSize(new Dimension(110, 25));
-    newTypeB.setPreferredSize(new Dimension(110, 25));
-    newTypeB.setText(Local.getString("New"));
-    newTypeB.addActionListener(new java.awt.event.ActionListener() {
+        jPanel1.setLayout(borderLayout1);
+        newTypeB.setMaximumSize(new Dimension(110, 25));
+        newTypeB.setPreferredSize(new Dimension(110, 25));
+        newTypeB.setText(Local.getString("New"));
+        newTypeB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 newTypeB_actionPerformed(e);
             }
         });
-    areaPanel.setLayout(borderLayout2);
-    jPanel2.setMaximumSize(new Dimension(120, 32767));
-    jPanel2.setMinimumSize(new Dimension(120, 36));
-    jPanel2.setPreferredSize(new Dimension(120, 36));
-    jPanel2.setBorder(border3);
-    editB.setText(Local.getString("Edit"));
-    editB.addActionListener(new java.awt.event.ActionListener() {
+        areaPanel.setLayout(borderLayout2);
+        jPanel2.setMaximumSize(new Dimension(120, 32767));
+        jPanel2.setMinimumSize(new Dimension(120, 36));
+        jPanel2.setPreferredSize(new Dimension(120, 36));
+        jPanel2.setBorder(border3);
+        editB.setText(Local.getString("Edit"));
+        editB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 editB_actionPerformed(e);
             }
         });
-    editB.setEnabled(false);
-    editB.setMaximumSize(new Dimension(110, 25));
-    editB.setPreferredSize(new Dimension(110, 25));
-    deleteB.setEnabled(false);
-    deleteB.setMaximumSize(new Dimension(110, 25));
-    deleteB.setPreferredSize(new Dimension(110, 25));
-    deleteB.setText(Local.getString("Delete"));
-    deleteB.addActionListener(new java.awt.event.ActionListener() {
+        editB.setEnabled(false);
+        editB.setMaximumSize(new Dimension(110, 25));
+        editB.setPreferredSize(new Dimension(110, 25));
+        deleteB.setEnabled(false);
+        deleteB.setMaximumSize(new Dimension(110, 25));
+        deleteB.setPreferredSize(new Dimension(110, 25));
+        deleteB.setText(Local.getString("Delete"));
+        deleteB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 deleteB_actionPerformed(e);
             }
         });
-    typesList.setCellRenderer(new TypesListRenderer());
-    typesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
-    typesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
-      public void valueChanged(ListSelectionEvent e) {
-        typesList_valueChanged(e);
-      }
-    });
+        typesList.setCellRenderer(new TypesListRenderer());
+        typesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+        typesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
+            public void valueChanged(ListSelectionEvent e) {
+                typesList_valueChanged(e);
+            }
+        });
         initTypesList();
 
         //typesList.setCellRenderer(new TypesListRenderer());
-    this.setLayout(borderLayout3);
-    this.add(areaPanel, BorderLayout.CENTER);
-    areaPanel.add(jPanel1, BorderLayout.CENTER);
-    jPanel1.add(jScrollPane1, BorderLayout.CENTER);
-    jScrollPane1.getViewport().add(typesList, null);
-    jPanel1.add(jPanel2, BorderLayout.EAST);
-    jPanel2.add(newTypeB, null);
-    jPanel2.add(editB, null);
-    jPanel2.add(deleteB, null);
-    typesList.setListData(MimeTypesList.getAllMimeTypes());
-    //typesList.updateUI();
+        this.setLayout(borderLayout3);
+        this.add(areaPanel, BorderLayout.CENTER);
+        areaPanel.add(jPanel1, BorderLayout.CENTER);
+        jPanel1.add(jScrollPane1, BorderLayout.CENTER);
+        jScrollPane1.getViewport().add(typesList, null);
+        jPanel1.add(jPanel2, BorderLayout.EAST);
+        jPanel2.add(newTypeB, null);
+        jPanel2.add(editB, null);
+        jPanel2.add(deleteB, null);
+        typesList.setListData(MimeTypesList.getAllMimeTypes());
+        //typesList.updateUI();
 
     }
 
@@ -153,30 +132,33 @@ public class ResourceTypePanel extends JPanel {
         dlg.descField.setText(ext);
         dlg.appPanel.argumentsField.setText("$1");
         dlg.iconLabel.setIcon(
-            new ImageIcon(
-                net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/default.png")));
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/default.png")));
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         String typeId = Util.generateId();
         MimeType mt = MimeTypesList.addMimeType(typeId);
         String[] exts = dlg.extField.getText().trim().split(" ");
-        for (int i = 0; i < exts.length; i++)
+        for (int i = 0; i < exts.length; i++) {
             mt.addExtension(exts[i]);
+        }
         mt.setLabel(dlg.descField.getText());
         AppList appList = MimeTypesList.getAppList();
         if (dlg.appPanel.applicationField.getText().length() > 0) {
             File f = new File(dlg.appPanel.applicationField.getText());
             String appId = Util.generateId();
             appList.addApp(
-                appId,
-                f.getParent().replace('\\', '/'),
-                f.getName().replace('\\', '/'),
-                dlg.appPanel.argumentsField.getText());
+                    appId,
+                    f.getParent().replace('\\', '/'),
+                    f.getName().replace('\\', '/'),
+                    dlg.appPanel.argumentsField.getText());
             mt.setApp(appId);
         }
-        if (dlg.iconPath.length() > 0)
+        if (dlg.iconPath.length() > 0) {
             mt.setIconPath(dlg.iconPath);
+        }
         CurrentStorage.get().storeMimeTypesList();
         this.initTypesList();
         typesList.setSelectedValue(mt, true);
@@ -185,17 +167,18 @@ public class ResourceTypePanel extends JPanel {
     void deleteB_actionPerformed(ActionEvent e) {
         MimeType mt = (MimeType) typesList.getSelectedValue();
         int n =
-            JOptionPane.showConfirmDialog(
-                App.getFrame(),
-                Local.getString("Delete resource type")
-                    + "\n'"
-                    + mt.getLabel()
-                    + "'\n"
-                    + Local.getString("Are you sure?"),
-                Local.getString("Delete resource type"),
-                JOptionPane.YES_NO_OPTION);
-        if (n != JOptionPane.YES_OPTION)
+                JOptionPane.showConfirmDialog(
+                        App.getFrame(),
+                        Local.getString("Delete resource type")
+                                + "\n'"
+                                + mt.getLabel()
+                                + "'\n"
+                                + Local.getString("Are you sure?"),
+                        Local.getString("Delete resource type"),
+                        JOptionPane.YES_NO_OPTION);
+        if (n != JOptionPane.YES_OPTION) {
             return;
+        }
         MimeTypesList.removeMimeType(mt.getMimeTypeId());
         CurrentStorage.get().storeMimeTypesList();
         this.initTypesList();
@@ -211,37 +194,41 @@ public class ResourceTypePanel extends JPanel {
         MimeType mt = (MimeType) typesList.getSelectedValue();
         String[] exts = mt.getExtensions();
         String extss = "";
-        for (int i = 0; i < exts.length; i++)
+        for (int i = 0; i < exts.length; i++) {
             extss += exts[i] + " ";
+        }
         dlg.extField.setText(extss);
         dlg.descField.setText(mt.getLabel());
         dlg.iconLabel.setIcon(mt.getIcon());
         AppList appList = MimeTypesList.getAppList();
         dlg.appPanel.applicationField.setText(
-            appList.getFindPath(mt.getAppId()) + "/" + appList.getExec(mt.getAppId()));
+                appList.getFindPath(mt.getAppId()) + "/" + appList.getExec(mt.getAppId()));
         dlg.appPanel.argumentsField.setText(appList.getCommandLinePattern(mt.getAppId()));
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         String typeId = mt.getMimeTypeId();
         MimeTypesList.removeMimeType(typeId);
         mt = MimeTypesList.addMimeType(typeId);
         exts = dlg.extField.getText().trim().split(" ");
-        for (int i = 0; i < exts.length; i++)
+        for (int i = 0; i < exts.length; i++) {
             mt.addExtension(exts[i]);
+        }
         mt.setLabel(dlg.descField.getText());
         if (dlg.appPanel.applicationField.getText().length() > 0) {
             File f = new File(dlg.appPanel.applicationField.getText());
             String appId = Util.generateId();
             appList.addApp(
-                appId,
-                f.getParent().replace('\\', '/'),
-                f.getName().replace('\\', '/'),
-                dlg.appPanel.argumentsField.getText());
+                    appId,
+                    f.getParent().replace('\\', '/'),
+                    f.getName().replace('\\', '/'),
+                    dlg.appPanel.argumentsField.getText());
             mt.setApp(appId);
         }
-        if (dlg.iconPath.length() > 0)
+        if (dlg.iconPath.length() > 0) {
             mt.setIconPath(dlg.iconPath);
+        }
         CurrentStorage.get().storeMimeTypesList();
         this.initTypesList();
         typesList.setSelectedValue(mt, true);
@@ -256,19 +243,20 @@ public class ResourceTypePanel extends JPanel {
         }
 
         public Component getListCellRendererComponent(
-            JList list,
-            Object value,
-            int index,
-            boolean isSelected,
-            boolean cellHasFocus) {
+                JList list,
+                Object value,
+                int index,
+                boolean isSelected,
+                boolean cellHasFocus) {
 
             MimeType mt = (MimeType) value;
             String[] exts = mt.getExtensions();
             String extstr = "";
             for (int j = 0; j < exts.length; j++) {
                 extstr += "*." + exts[j];
-                if (j != exts.length - 1)
+                if (j != exts.length - 1) {
                     extstr += ", ";
+                }
             }
 
             setOpaque(true);
@@ -277,8 +265,7 @@ public class ResourceTypePanel extends JPanel {
             if (isSelected) {
                 setBackground(list.getSelectionBackground());
                 setForeground(list.getSelectionForeground());
-            }
-            else {
+            } else {
                 setBackground(list.getBackground());
                 setForeground(list.getForeground());
             }
@@ -287,11 +274,10 @@ public class ResourceTypePanel extends JPanel {
     }
 
     void typesList_valueChanged(ListSelectionEvent e) {
-      boolean en = typesList.getSelectedValue() != null;
-      this.editB.setEnabled(en);
-      this.deleteB.setEnabled(en);
+        boolean en = typesList.getSelectedValue() != null;
+        this.editB.setEnabled(en);
+        this.deleteB.setEnabled(en);
     }
 
 
-
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/ResourcesPanel.java b/src/net/sf/memoranda/ui/ResourcesPanel.java
index 4f464f1..15d3adc 100755
--- a/src/net/sf/memoranda/ui/ResourcesPanel.java
+++ b/src/net/sf/memoranda/ui/ResourcesPanel.java
@@ -1,37 +1,18 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Point;
-import java.awt.event.ActionEvent;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.KeyEvent;
-import java.io.File;
-
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JPopupMenu;
-import javax.swing.JScrollPane;
-import javax.swing.JToolBar;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
-
 import net.sf.memoranda.CurrentProject;
 import net.sf.memoranda.Resource;
-import net.sf.memoranda.util.AppList;
-import net.sf.memoranda.util.CurrentStorage;
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.util.MimeType;
-import net.sf.memoranda.util.MimeTypesList;
-import net.sf.memoranda.util.Util;
+import net.sf.memoranda.util.*;
 
-import java.io.*;
+import javax.swing.*;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import java.awt.*;
+import java.awt.event.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
 
 /*$Id: ResourcesPanel.java,v 1.13 2007/03/20 08:22:41 alexeya Exp $*/
 public class ResourcesPanel extends JPanel {
@@ -42,25 +23,25 @@ public class ResourcesPanel extends JPanel {
     JButton removeResB = new JButton();
     JScrollPane scrollPane = new JScrollPane();
     JButton refreshB = new JButton();
-  JPopupMenu resPPMenu = new JPopupMenu();
-  JMenuItem ppRun = new JMenuItem();
-  JMenuItem ppRemoveRes = new JMenuItem();
-  JMenuItem ppNewRes = new JMenuItem();
-  JMenuItem ppRefresh = new JMenuItem();
+    JPopupMenu resPPMenu = new JPopupMenu();
+    JMenuItem ppRun = new JMenuItem();
+    JMenuItem ppRemoveRes = new JMenuItem();
+    JMenuItem ppNewRes = new JMenuItem();
+    JMenuItem ppRefresh = new JMenuItem();
 
     public ResourcesPanel() {
         try {
             jbInit();
-        }
-        catch (Exception ex) {
-           new ExceptionDialog(ex);
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
         }
     }
+
     void jbInit() throws Exception {
         toolBar.setFloatable(false);
         this.setLayout(borderLayout1);
         newResB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/addresource.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/addresource.png")));
         newResB.setEnabled(true);
         newResB.setMaximumSize(new Dimension(24, 24));
         newResB.setMinimumSize(new Dimension(24, 24));
@@ -89,8 +70,8 @@ public class ResourcesPanel extends JPanel {
         removeResB.setMinimumSize(new Dimension(24, 24));
         removeResB.setMaximumSize(new Dimension(24, 24));
         removeResB.setIcon(
-            new ImageIcon(
-                net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/removeresource.png")));
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/removeresource.png")));
         removeResB.setEnabled(false);
         scrollPane.getViewport().setBackground(Color.white);
         toolBar.addSeparator(new Dimension(8, 24));
@@ -105,7 +86,8 @@ public class ResourcesPanel extends JPanel {
             public void valueChanged(ListSelectionEvent e) {
                 boolean enbl = (resourcesTable.getRowCount() > 0) && (resourcesTable.getSelectedRow() > -1);
 
-                removeResB.setEnabled(enbl); ppRemoveRes.setEnabled(enbl);
+                removeResB.setEnabled(enbl);
+                ppRemoveRes.setEnabled(enbl);
                 ppRun.setEnabled(enbl);
             }
         });
@@ -123,68 +105,73 @@ public class ResourcesPanel extends JPanel {
         refreshB.setMaximumSize(new Dimension(24, 24));
         refreshB.setEnabled(true);
         refreshB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/refreshres.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/refreshres.png")));
         resPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
-    ppRun.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppRun.setText(Local.getString("Open resource")+"...");
-    ppRun.addActionListener(new java.awt.event.ActionListener() {
+        ppRun.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppRun.setText(Local.getString("Open resource") + "...");
+        ppRun.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppRun_actionPerformed(e);
             }
         });
-    ppRun.setEnabled(false);
+        ppRun.setEnabled(false);
 
-    ppRemoveRes.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppRemoveRes.setText(Local.getString("Remove resource"));
-    ppRemoveRes.addActionListener(new java.awt.event.ActionListener() {
+        ppRemoveRes.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppRemoveRes.setText(Local.getString("Remove resource"));
+        ppRemoveRes.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppRemoveRes_actionPerformed(e);
             }
         });
-    ppRemoveRes.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/removeresource.png")));
-    ppRemoveRes.setEnabled(false);
-    ppNewRes.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppNewRes.setText(Local.getString("New resource")+"...");
-    ppNewRes.addActionListener(new java.awt.event.ActionListener() {
+        ppRemoveRes.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/removeresource.png")));
+        ppRemoveRes.setEnabled(false);
+        ppNewRes.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppNewRes.setText(Local.getString("New resource") + "...");
+        ppNewRes.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppNewRes_actionPerformed(e);
             }
         });
-    ppNewRes.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/addresource.png")));
-
-    ppRefresh.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppRefresh.setText(Local.getString("Refresh"));
-    ppRefresh.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        ppRefresh_actionPerformed(e);
-      }
-    });
-    ppRefresh.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/refreshres.png")));
-
-    toolBar.add(newResB, null);
+        ppNewRes.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/addresource.png")));
+
+        ppRefresh.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppRefresh.setText(Local.getString("Refresh"));
+        ppRefresh.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                ppRefresh_actionPerformed(e);
+            }
+        });
+        ppRefresh.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/refreshres.png")));
+
+        toolBar.add(newResB, null);
         toolBar.add(removeResB, null);
         toolBar.addSeparator();
         toolBar.add(refreshB, null);
         this.add(scrollPane, BorderLayout.CENTER);
         scrollPane.getViewport().add(resourcesTable, null);
         this.add(toolBar, BorderLayout.NORTH);
-    resPPMenu.add(ppRun);
-    resPPMenu.addSeparator();
-    resPPMenu.add(ppNewRes);
-    resPPMenu.add(ppRemoveRes);
-    resPPMenu.addSeparator();
-    resPPMenu.add(ppRefresh);
-	
-		// remove resources using the DEL key
-		resourcesTable.addKeyListener(new KeyListener() {
-			public void keyPressed(KeyEvent e){
-				if(resourcesTable.getSelectedRows().length>0 
-					&& e.getKeyCode()==KeyEvent.VK_DELETE)
-					ppRemoveRes_actionPerformed(null);
-			}
-			public void	keyReleased(KeyEvent e){}
-			public void keyTyped(KeyEvent e){} 
-		});
+        resPPMenu.add(ppRun);
+        resPPMenu.addSeparator();
+        resPPMenu.add(ppNewRes);
+        resPPMenu.add(ppRemoveRes);
+        resPPMenu.addSeparator();
+        resPPMenu.add(ppRefresh);
+
+        // remove resources using the DEL key
+        resourcesTable.addKeyListener(new KeyListener() {
+            public void keyPressed(KeyEvent e) {
+                if (resourcesTable.getSelectedRows().length > 0
+                        && e.getKeyCode() == KeyEvent.VK_DELETE) {
+                    ppRemoveRes_actionPerformed(null);
+                }
+            }
+
+            public void keyReleased(KeyEvent e) {
+            }
+
+            public void keyTyped(KeyEvent e) {
+            }
+        });
     }
 
     void newResB_actionPerformed(ActionEvent e) {
@@ -193,31 +180,34 @@ public class ResourcesPanel extends JPanel {
         Point loc = App.getFrame().getLocation();
         dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         if (dlg.localFileRB.isSelected()) {
             String fpath = dlg.pathField.getText();
             MimeType mt = MimeTypesList.getMimeTypeForFile(fpath);
             if (mt.getMimeTypeId().equals("__UNKNOWN")) {
                 mt = addResourceType(fpath);
-                if (mt == null)
+                if (mt == null) {
                     return;
+                }
             }
-            if (!checkApp(mt))
+            if (!checkApp(mt)) {
                 return;
+            }
             // if file if projectFile, than copy the file and change url.
             if (dlg.projectFileCB.isSelected()) {
-            	fpath = copyFileToProjectDir(fpath);
-            	CurrentProject.getResourcesList().addResource(fpath, false, true);
+                fpath = copyFileToProjectDir(fpath);
+                CurrentProject.getResourcesList().addResource(fpath, false, true);
+            } else {
+                CurrentProject.getResourcesList().addResource(fpath);
             }
-            else
-            	CurrentProject.getResourcesList().addResource(fpath);            	     	
-            
+
             resourcesTable.tableChanged();
-        }
-        else {
-            if (!Util.checkBrowser())
+        } else {
+            if (!Util.checkBrowser()) {
                 return;
+            }
             CurrentProject.getResourcesList().addResource(dlg.urlField.getText(), true, false);
             resourcesTable.tableChanged();
         }
@@ -226,29 +216,30 @@ public class ResourcesPanel extends JPanel {
     void removeResB_actionPerformed(ActionEvent e) {
         int[] toRemove = resourcesTable.getSelectedRows();
         String msg = "";
-        if (toRemove.length == 1)
+        if (toRemove.length == 1) {
             msg =
-                Local.getString("Remove the shortcut to resource")
-                    + "\n'"
-                    + resourcesTable.getModel().getValueAt(toRemove[0], 0)
-                    + "'";
-
-        else
+                    Local.getString("Remove the shortcut to resource")
+                            + "\n'"
+                            + resourcesTable.getModel().getValueAt(toRemove[0], 0)
+                            + "'";
+        } else {
             msg = Local.getString("Remove") + " " + toRemove.length + " " + Local.getString("shortcuts");
+        }
         msg +=
-            "\n"
-            + Local.getString("Are you sure?");
+                "\n"
+                        + Local.getString("Are you sure?");
         int n =
-            JOptionPane.showConfirmDialog(
-                App.getFrame(),
-                msg,
-                Local.getString("Remove resource"),
-                JOptionPane.YES_NO_OPTION);
-        if (n != JOptionPane.YES_OPTION)
+                JOptionPane.showConfirmDialog(
+                        App.getFrame(),
+                        msg,
+                        Local.getString("Remove resource"),
+                        JOptionPane.YES_NO_OPTION);
+        if (n != JOptionPane.YES_OPTION) {
             return;
-        for (int i = 0; i < toRemove.length; i++) {        	
-        		CurrentProject.getResourcesList().removeResource(
-                        ((Resource) resourcesTable.getModel().getValueAt(toRemove[i], ResourcesTable._RESOURCE)).getPath());
+        }
+        for (int i = 0; i < toRemove.length; i++) {
+            CurrentProject.getResourcesList().removeResource(
+                    ((Resource) resourcesTable.getModel().getValueAt(toRemove[i], ResourcesTable._RESOURCE)).getPath());
         }
         resourcesTable.tableChanged();
     }
@@ -262,8 +253,9 @@ public class ResourcesPanel extends JPanel {
         dlg.setLocation((frmSize.width - dlgSize.width) / 2 + loc.x, (frmSize.height - dlgSize.height) / 2 + loc.y);
         dlg.ext = MimeTypesList.getExtension(fpath);
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return null;
+        }
         int ix = dlg.getTypesList().getSelectedIndex();
         MimeType mt = (MimeType) MimeTypesList.getAllMimeTypes().toArray()[ix];
         mt.addExtension(MimeTypesList.getExtension(fpath));
@@ -278,19 +270,20 @@ public class ResourcesPanel extends JPanel {
         if (appId == null) {
             appId = Util.generateId();
             d = new File("/");
-        }
-        else {
+        } else {
             File exe = new File(appList.getFindPath(appId) + "/" + appList.getExec(appId));
-            if (exe.isFile())
+            if (exe.isFile()) {
                 return true;
+            }
             d = new File(exe.getParent());
-            while (!d.exists())
+            while (!d.exists()) {
                 d = new File(d.getParent());
+            }
         }
         SetAppDialog dlg =
-            new SetAppDialog(
-                App.getFrame(),
-                Local.getString(Local.getString("Select the application to open files of type")+" '" + mt.getLabel() + "'"));
+                new SetAppDialog(
+                        App.getFrame(),
+                        Local.getString(Local.getString("Select the application to open files of type") + " '" + mt.getLabel() + "'"));
         Dimension dlgSize = new Dimension(420, 300);
         dlg.setSize(dlgSize);
         Dimension frmSize = App.getFrame().getSize();
@@ -299,44 +292,47 @@ public class ResourcesPanel extends JPanel {
         dlg.setDirectory(d);
         dlg.appPanel.argumentsField.setText("$1");
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return false;
+        }
         File f = new File(dlg.appPanel.applicationField.getText());
 
         appList.addOrReplaceApp(
-            appId,
-            f.getParent().replace('\\', '/'),
-            f.getName().replace('\\', '/'),
-            dlg.appPanel.argumentsField.getText());
+                appId,
+                f.getParent().replace('\\', '/'),
+                f.getName().replace('\\', '/'),
+                dlg.appPanel.argumentsField.getText());
         mt.setApp(appId);
         /*appList.setFindPath(appId, chooser.getSelectedFile().getParent().replace('\\','/'));
         appList.setExec(appId, chooser.getSelectedFile().getName().replace('\\','/'));*/
         CurrentStorage.get().storeMimeTypesList();
         return true;
     }
-    
+
 
     void runApp(String fpath) {
         MimeType mt = MimeTypesList.getMimeTypeForFile(fpath);
         if (mt.getMimeTypeId().equals("__UNKNOWN")) {
             mt = addResourceType(fpath);
-            if (mt == null)
+            if (mt == null) {
                 return;
+            }
         }
-        if (!checkApp(mt))
+        if (!checkApp(mt)) {
             return;
+        }
         String[] command = MimeTypesList.getAppList().getCommand(mt.getAppId(), fpath);
-        if (command == null)
+        if (command == null) {
             return;
+        }
         /*DEBUG*/
         System.out.println("Run: " + command[0]);
         try {
             Runtime.getRuntime().exec(command);
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex, "Failed to run an external application <br><code>"
-                    +command[0]+"</code>", "Check the application path and command line parameters for this resource type " +
-                    		"(File-&gt;Preferences-&gt;Resource types).");
+                    + command[0] + "</code>", "Check the application path and command line parameters for this resource type " +
+                    "(File-&gt;Preferences-&gt;Resource types).");
         }
     }
 
@@ -349,92 +345,98 @@ public class ResourcesPanel extends JPanel {
         public void mouseClicked(MouseEvent e) {
             if ((e.getClickCount() == 2) && (resourcesTable.getSelectedRow() > -1)) {
                 String path = (String) resourcesTable.getValueAt(resourcesTable.getSelectedRow(), 3);
-                if (path.length() >0)
+                if (path.length() > 0) {
                     runApp(path);
-                else
+                } else {
                     runBrowser((String) resourcesTable.getValueAt(resourcesTable.getSelectedRow(), 0));
+                }
             }
             //editTaskB_actionPerformed(null);
         }
 
-                public void mousePressed(MouseEvent e) {
-                    maybeShowPopup(e);
-                }
+        public void mousePressed(MouseEvent e) {
+            maybeShowPopup(e);
+        }
 
-                public void mouseReleased(MouseEvent e) {
-                    maybeShowPopup(e);
-                }
+        public void mouseReleased(MouseEvent e) {
+            maybeShowPopup(e);
+        }
 
-                private void maybeShowPopup(MouseEvent e) {
-                    if (e.isPopupTrigger()) {
-                        resPPMenu.show(e.getComponent(), e.getX(), e.getY());
-                    }
-                }
+        private void maybeShowPopup(MouseEvent e) {
+            if (e.isPopupTrigger()) {
+                resPPMenu.show(e.getComponent(), e.getX(), e.getY());
+            }
+        }
 
     }
+
     void refreshB_actionPerformed(ActionEvent e) {
         resourcesTable.tableChanged();
     }
 
-  void ppRun_actionPerformed(ActionEvent e) {
-    String path = (String) resourcesTable.getValueAt(resourcesTable.getSelectedRow(), 3);
-                if (path.length() >0)
-                    runApp(path);
-                else
-                    runBrowser((String) resourcesTable.getValueAt(resourcesTable.getSelectedRow(), 0));
-  }
-  void ppRemoveRes_actionPerformed(ActionEvent e) {
-    removeResB_actionPerformed(e);
-  }
-  void ppNewRes_actionPerformed(ActionEvent e) {
-    newResB_actionPerformed(e);
-  }
-
-  void ppRefresh_actionPerformed(ActionEvent e) {
-     resourcesTable.tableChanged();
-  }
-  
-  /**
-   * Copy a file to the directory of the current project
-   * @param srcStr The path of the source file.
-   * @param destStr The destination path.
-   * @return The new path of the file.
-   */
-  String copyFileToProjectDir(String srcStr) {
-	  
-	  String JN_DOCPATH = Util.getEnvDir();	    
-	  
-	  String baseName;
-	  int i = srcStr.lastIndexOf( File.separator );
-		if ( i != -1 ) {
-			baseName = srcStr.substring(i+1);
-		} else
-			baseName = srcStr;
-		
-	  String destStr = JN_DOCPATH + CurrentProject.get().getID() 
-	  				   + File.separator + "_projectFiles" + File.separator + baseName;
-	  
-	  File f = new File(JN_DOCPATH + CurrentProject.get().getID() + File.separator + "_projectFiles");
-	  if (!f.exists()) {
-		  f.mkdirs();
-	  }	  
-	  System.out.println("[DEBUG] Copy file from: "+srcStr+" to: "+destStr);
-	  
-	  try {
-         FileInputStream in = new FileInputStream(srcStr);
-         FileOutputStream out = new FileOutputStream(destStr);
-         byte[] buf = new byte[4096];
-         int len;
-         while ((len = in.read(buf)) > 0) {
-           out.write(buf, 0, len);
-         }
-         out.close();
-         in.close();
-       } 
-	   catch (IOException e) {
-         System.err.println(e.toString());
-       }
-		     
-  return destStr;
-  }
+    void ppRun_actionPerformed(ActionEvent e) {
+        String path = (String) resourcesTable.getValueAt(resourcesTable.getSelectedRow(), 3);
+        if (path.length() > 0) {
+            runApp(path);
+        } else {
+            runBrowser((String) resourcesTable.getValueAt(resourcesTable.getSelectedRow(), 0));
+        }
+    }
+
+    void ppRemoveRes_actionPerformed(ActionEvent e) {
+        removeResB_actionPerformed(e);
+    }
+
+    void ppNewRes_actionPerformed(ActionEvent e) {
+        newResB_actionPerformed(e);
+    }
+
+    void ppRefresh_actionPerformed(ActionEvent e) {
+        resourcesTable.tableChanged();
+    }
+
+    /**
+     * Copy a file to the directory of the current project
+     *
+     * @param srcStr  The path of the source file.
+     * @param destStr The destination path.
+     * @return The new path of the file.
+     */
+    String copyFileToProjectDir(String srcStr) {
+
+        String JN_DOCPATH = Util.getEnvDir();
+
+        String baseName;
+        int i = srcStr.lastIndexOf(File.separator);
+        if (i != -1) {
+            baseName = srcStr.substring(i + 1);
+        } else {
+            baseName = srcStr;
+        }
+
+        String destStr = JN_DOCPATH + CurrentProject.get().getID()
+                + File.separator + "_projectFiles" + File.separator + baseName;
+
+        File f = new File(JN_DOCPATH + CurrentProject.get().getID() + File.separator + "_projectFiles");
+        if (!f.exists()) {
+            f.mkdirs();
+        }
+        System.out.println("[DEBUG] Copy file from: " + srcStr + " to: " + destStr);
+
+        try {
+            FileInputStream in = new FileInputStream(srcStr);
+            FileOutputStream out = new FileOutputStream(destStr);
+            byte[] buf = new byte[4096];
+            int len;
+            while ((len = in.read(buf)) > 0) {
+                out.write(buf, 0, len);
+            }
+            out.close();
+            in.close();
+        } catch (IOException e) {
+            System.err.println(e.toString());
+        }
+
+        return destStr;
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/ResourcesTable.java b/src/net/sf/memoranda/ui/ResourcesTable.java
index 45d6fc9..7d9afe7 100755
--- a/src/net/sf/memoranda/ui/ResourcesTable.java
+++ b/src/net/sf/memoranda/ui/ResourcesTable.java
@@ -1,36 +1,26 @@
 package net.sf.memoranda.ui;
 
-import java.awt.Component;
-import java.awt.Font;
-import java.io.File;
-import java.util.Date;
-import java.util.Vector;
-
-import javax.swing.ImageIcon;
-import javax.swing.JLabel;
-import javax.swing.JTable;
-import javax.swing.table.AbstractTableModel;
-import javax.swing.table.TableCellRenderer;
-import javax.swing.table.TableColumn;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.Resource;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.TaskList;
+import net.sf.memoranda.*;
 import net.sf.memoranda.ui.table.TableSorter;
 import net.sf.memoranda.util.Local;
 import net.sf.memoranda.util.MimeType;
 import net.sf.memoranda.util.MimeTypesList;
 
+import javax.swing.*;
+import javax.swing.table.AbstractTableModel;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.table.TableColumn;
+import java.awt.*;
+import java.io.File;
+import java.util.Date;
+import java.util.Vector;
+
 /*$Id: ResourcesTable.java,v 1.4 2004/04/05 10:05:44 alexeya Exp $*/
 public class ResourcesTable extends JTable {
 
     Vector files = null;
     TableSorter sorter = null;
-    
+
     ImageIcon inetIcon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/inetshortcut.png"));
 
     public ResourcesTable() {
@@ -40,15 +30,16 @@ public class ResourcesTable extends JTable {
         sorter.addMouseListenerToHeaderInTable(this);
         setModel(sorter);
         this.setShowGrid(false);
-        this.setFont(new Font("Dialog",0,11));
+        this.setFont(new Font("Dialog", 0, 11));
         initColumsWidth();
         //this.setModel(new ResourcesTableModel());
         CurrentProject.addProjectListener(new ProjectListener() {
-            public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {                
-               
+            public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {
+
             }
+
             public void projectWasChanged() {
-                 tableChanged();
+                tableChanged();
             }
         });
     }
@@ -58,8 +49,7 @@ public class ResourcesTable extends JTable {
             TableColumn column = getColumnModel().getColumn(i);
             if (i == 0) {
                 column.setPreferredWidth(32767);
-            }
-            else {
+            } else {
                 column.setMinWidth(100);
                 column.setPreferredWidth(100);
             }
@@ -77,39 +67,41 @@ public class ResourcesTable extends JTable {
         Vector v = CurrentProject.getResourcesList().getAllResources();
         files = new Vector();
         for (int i = 0; i < v.size(); i++) {
-            Resource r = (Resource)v.get(i);
+            Resource r = (Resource) v.get(i);
             if (!r.isInetShortcut()) {
                 File f = new File(r.getPath());
-                if (f.isFile())
+                if (f.isFile()) {
                     files.add(r);
-            }
-            else 
+                }
+            } else {
                 files.add(r);
+            }
         }
 
     }
-    
-     public static final int _RESOURCE = 100;
+
+    public static final int _RESOURCE = 100;
 
     public TableCellRenderer getCellRenderer(int row, int column) {
         return new javax.swing.table.DefaultTableCellRenderer() {
 
             public Component getTableCellRendererComponent(
-                JTable table,
-                Object value,
-                boolean isSelected,
-                boolean hasFocus,
-                int row,
-                int column) {
+                    JTable table,
+                    Object value,
+                    boolean isSelected,
+                    boolean hasFocus,
+                    int row,
+                    int column) {
                 JLabel comp;
 
-                comp = (JLabel)super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
+                comp = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                 if (column == 0) {
-                  Resource r = (Resource)getModel().getValueAt(row, _RESOURCE);
-                  if (!r.isInetShortcut())  
-                    comp.setIcon(MimeTypesList.getMimeTypeForFile((String)value).getIcon());
-                  else 
-                    comp.setIcon(inetIcon);
+                    Resource r = (Resource) getModel().getValueAt(row, _RESOURCE);
+                    if (!r.isInetShortcut()) {
+                        comp.setIcon(MimeTypesList.getMimeTypeForFile((String) value).getIcon());
+                    } else {
+                        comp.setIcon(inetIcon);
+                    }
                 }
                 return comp;
             }
@@ -136,50 +128,58 @@ public class ResourcesTable extends JTable {
         public int getRowCount() {
             return files.size();
         }
-        
-       
-        
+
+
         public Object getValueAt(int row, int col) {
-            Resource r = (Resource)files.get(row);
-            if (col == _RESOURCE)
+            Resource r = (Resource) files.get(row);
+            if (col == _RESOURCE) {
                 return r;
-            if (!r.isInetShortcut())  {
+            }
+            if (!r.isInetShortcut()) {
                 File f = new File(r.getPath());
                 switch (col) {
-                    case 0: return f.getName();
-                    case 1: MimeType mt = MimeTypesList.getMimeTypeForFile(f.getName());
-                            if (mt != null) return mt.getLabel();
-                            else return "unknown";
-                    case 2: Date d = new Date(f.lastModified());
-                            return d;/*Local.getDateString(d, java.text.DateFormat.SHORT) +" "+
+                    case 0:
+                        return f.getName();
+                    case 1:
+                        MimeType mt = MimeTypesList.getMimeTypeForFile(f.getName());
+                        if (mt != null) {
+                            return mt.getLabel();
+                        } else {
+                            return "unknown";
+                        }
+                    case 2:
+                        Date d = new Date(f.lastModified());
+                        return d;/*Local.getDateString(d, java.text.DateFormat.SHORT) +" "+
                                    Local.getTimeString(d);*/
-                    case 3:return f.getPath();
+                    case 3:
+                        return f.getPath();
                 }
-            }
-            else {
-                if (col == 0)
+            } else {
+                if (col == 0) {
                     return r.getPath();
-                else if (col == 1)
+                } else if (col == 1) {
                     return Local.getString("Internet shortcut");
-                else
-                    return "";                
+                } else {
+                    return "";
+                }
             }
             return null;
         }
 
-        
-public Class getColumnClass(int col) {
+
+        public Class getColumnClass(int col) {
             try {
-            switch (col) {
-                case 0 :
-                case 1 :
-                case 3 :
-                    return Class.forName("java.lang.String");
-                case 2 :
-                    return Class.forName("java.util.Date");
-            }
+                switch (col) {
+                    case 0:
+                    case 1:
+                    case 3:
+                        return Class.forName("java.lang.String");
+                    case 2:
+                        return Class.forName("java.util.Date");
+                }
+            } catch (Exception ex) {
+                new ExceptionDialog(ex);
             }
-            catch (Exception ex) {new ExceptionDialog(ex);}
             return null;
         }
     }
diff --git a/src/net/sf/memoranda/ui/SearchPanel.java b/src/net/sf/memoranda/ui/SearchPanel.java
index fd6123e..129c69d 100755
--- a/src/net/sf/memoranda/ui/SearchPanel.java
+++ b/src/net/sf/memoranda/ui/SearchPanel.java
@@ -1,35 +1,19 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Cursor;
-import java.awt.Dimension;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.util.Vector;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
+import net.sf.memoranda.*;
+import net.sf.memoranda.util.CurrentStorage;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JPanel;
-import javax.swing.JProgressBar;
-import javax.swing.JScrollPane;
-import javax.swing.JTextField;
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.TitledBorder;
 import javax.swing.event.CaretEvent;
 import javax.swing.text.Document;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.Note;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.TaskList;
-import net.sf.memoranda.util.CurrentStorage;
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.util.Vector;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
 
 /*$Id: SearchPanel.java,v 1.5 2004/04/05 10:05:44 alexeya Exp $*/
 public class SearchPanel extends JPanel {
@@ -56,11 +40,11 @@ public class SearchPanel extends JPanel {
     public SearchPanel() {
         try {
             jbInit();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
+
     void jbInit() throws Exception {
         border1 = BorderFactory.createEmptyBorder(2, 2, 2, 2);
 
@@ -117,7 +101,9 @@ public class SearchPanel extends JPanel {
             public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {
                 notesList.update(new Vector());
             }
-            public void projectWasChanged() {}
+
+            public void projectWasChanged() {
+            }
         });
         //notesList.update(new Vector());
 
@@ -135,23 +121,25 @@ public class SearchPanel extends JPanel {
     void searchField_caretUpdate(CaretEvent e) {
         searchB.setEnabled(searchField.getText().length() > 0);
     }
-    
-    
+
+
     void doSearch() {
         Pattern pattern;
         //this.add(progressBar, BorderLayout.SOUTH);
         int flags = Pattern.DOTALL;
-        if (!caseSensCB.isSelected())
+        if (!caseSensCB.isSelected()) {
             flags = flags + Pattern.CASE_INSENSITIVE + Pattern.UNICODE_CASE;
+        }
         String _find = searchField.getText();
-        if (!regexpCB.isSelected())
+        if (!regexpCB.isSelected()) {
             _find = "\\Q" + _find + "\\E";
-        if (wholeWCB.isSelected())
+        }
+        if (wholeWCB.isSelected()) {
             _find = "[\\s\\p{Punct}]" + _find + "[\\s\\p{Punct}]";
+        }
         try {
             pattern = Pattern.compile(_find, flags);
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex, "Error in regular expression", "Check the regular expression syntax");
             return;
         }
@@ -169,10 +157,10 @@ public class SearchPanel extends JPanel {
             try {
                 String txt = doc.getText(0, doc.getLength());
                 Matcher matcher = pattern.matcher(txt);
-                if (matcher.find())
+                if (matcher.find()) {
                     found.add(note);
-            }
-            catch (Exception ex) {
+                }
+            } catch (Exception ex) {
                 ex.printStackTrace();
             }
         }
diff --git a/src/net/sf/memoranda/ui/SetAppDialog.java b/src/net/sf/memoranda/ui/SetAppDialog.java
index 2b68629..83ae379 100755
--- a/src/net/sf/memoranda/ui/SetAppDialog.java
+++ b/src/net/sf/memoranda/ui/SetAppDialog.java
@@ -1,109 +1,100 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.event.ActionEvent;
-import java.io.File;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
+import javax.swing.*;
 import javax.swing.event.CaretEvent;
-
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.File;
 
 /*$Id: SetAppDialog.java,v 1.6 2004/04/05 10:05:44 alexeya Exp $*/
 public class SetAppDialog extends JDialog {
-  FlowLayout flowLayout1 = new FlowLayout();
-  JButton cancelB = new JButton();
-  BorderLayout borderLayout2 = new BorderLayout();
-  BorderLayout borderLayout3 = new BorderLayout();
-  JPanel buttonsPanel = new JPanel();
-  public SetApplicationPanel appPanel = new SetApplicationPanel();
-  JPanel mPanel = new JPanel();
-  JButton okB = new JButton();
-  public boolean CANCELLED = true;
+    FlowLayout flowLayout1 = new FlowLayout();
+    JButton cancelB = new JButton();
+    BorderLayout borderLayout2 = new BorderLayout();
+    BorderLayout borderLayout3 = new BorderLayout();
+    JPanel buttonsPanel = new JPanel();
+    public SetApplicationPanel appPanel = new SetApplicationPanel();
+    JPanel mPanel = new JPanel();
+    JButton okB = new JButton();
+    public boolean CANCELLED = true;
 
-  public SetAppDialog(Frame frame, String title) {
-    super(frame, title, true);
-    try {
-      jbInit();
-      pack();
-    }
-    catch(Exception ex) {
-      new ExceptionDialog(ex);
+    public SetAppDialog(Frame frame, String title) {
+        super(frame, title, true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
     }
-  }
 
 
-  void jbInit() throws Exception {
-    this.setResizable(false);
-    cancelB.setMaximumSize(new Dimension(100, 26));
-    cancelB.setMinimumSize(new Dimension(100, 26));
-    cancelB.setPreferredSize(new Dimension(100, 26));
-    cancelB.setText(Local.getString("Cancel"));
-    cancelB.addActionListener(new java.awt.event.ActionListener() {
+    void jbInit() throws Exception {
+        this.setResizable(false);
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setMinimumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 cancelB_actionPerformed(e);
             }
         });
-    flowLayout1.setAlignment(FlowLayout.RIGHT);
-    borderLayout3.setHgap(5);
-    buttonsPanel.setLayout(flowLayout1);
-    appPanel.applicationField.addCaretListener(new javax.swing.event.CaretListener() {
-      public void caretUpdate(CaretEvent e) {
-        applicationField_caretUpdate(e);
-      }
-    });
+        flowLayout1.setAlignment(FlowLayout.RIGHT);
+        borderLayout3.setHgap(5);
+        buttonsPanel.setLayout(flowLayout1);
+        appPanel.applicationField.addCaretListener(new javax.swing.event.CaretListener() {
+            public void caretUpdate(CaretEvent e) {
+                applicationField_caretUpdate(e);
+            }
+        });
 
-    mPanel.setLayout(borderLayout3);
-    okB.setEnabled(false);
-    okB.setMaximumSize(new Dimension(100, 26));
-    okB.setMinimumSize(new Dimension(100, 26));
-    okB.setPreferredSize(new Dimension(100, 26));
-    okB.setText(Local.getString("Ok"));
-    okB.addActionListener(new java.awt.event.ActionListener() {
+        mPanel.setLayout(borderLayout3);
+        okB.setEnabled(false);
+        okB.setMaximumSize(new Dimension(100, 26));
+        okB.setMinimumSize(new Dimension(100, 26));
+        okB.setPreferredSize(new Dimension(100, 26));
+        okB.setText(Local.getString("Ok"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 okB_actionPerformed(e);
             }
         });
-    this.getRootPane().setDefaultButton(okB);
-    buttonsPanel.add(okB, null);
-    buttonsPanel.add(cancelB, null);
-    mPanel.add(appPanel,  BorderLayout.NORTH);
-    mPanel.add(buttonsPanel, BorderLayout.SOUTH);
-    this.getContentPane().add(mPanel,  BorderLayout.CENTER);
-  }
-
-  public void setDirectory(File dir) {
-    appPanel.d = dir;
-  }
+        this.getRootPane().setDefaultButton(okB);
+        buttonsPanel.add(okB, null);
+        buttonsPanel.add(cancelB, null);
+        mPanel.add(appPanel, BorderLayout.NORTH);
+        mPanel.add(buttonsPanel, BorderLayout.SOUTH);
+        this.getContentPane().add(mPanel, BorderLayout.CENTER);
+    }
 
-  void cancelB_actionPerformed(ActionEvent e) {
-    this.dispose();
-  }
+    public void setDirectory(File dir) {
+        appPanel.d = dir;
+    }
 
-  void okB_actionPerformed(ActionEvent e) {
-    File f = new File(appPanel.applicationField.getText());
-    if (f.isFile()) {
-      CANCELLED = false;
-      this.dispose();
+    void cancelB_actionPerformed(ActionEvent e) {
+        this.dispose();
     }
-    else {
-      JOptionPane.showMessageDialog(App.getFrame(), Local.getString("File not found!"), "", JOptionPane.ERROR_MESSAGE);
-      this.appPanel.applicationField.setText("");
-      checkOkEnabled();
+
+    void okB_actionPerformed(ActionEvent e) {
+        File f = new File(appPanel.applicationField.getText());
+        if (f.isFile()) {
+            CANCELLED = false;
+            this.dispose();
+        } else {
+            JOptionPane.showMessageDialog(App.getFrame(), Local.getString("File not found!"), "", JOptionPane.ERROR_MESSAGE);
+            this.appPanel.applicationField.setText("");
+            checkOkEnabled();
+        }
     }
-  }
 
-  void applicationField_caretUpdate(CaretEvent e) {
-    checkOkEnabled();
-  }
+    void applicationField_caretUpdate(CaretEvent e) {
+        checkOkEnabled();
+    }
 
-  void checkOkEnabled() {
-    okB.setEnabled(appPanel.applicationField.getText().length() > 0);
-  }
+    void checkOkEnabled() {
+        okB.setEnabled(appPanel.applicationField.getText().length() > 0);
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/SetApplicationPanel.java b/src/net/sf/memoranda/ui/SetApplicationPanel.java
index 63712da..793a9b2 100755
--- a/src/net/sf/memoranda/ui/SetApplicationPanel.java
+++ b/src/net/sf/memoranda/ui/SetApplicationPanel.java
@@ -1,23 +1,14 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.event.ActionEvent;
-import java.io.File;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.JButton;
-import javax.swing.JFileChooser;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-import javax.swing.SwingConstants;
-import javax.swing.UIManager;
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.TitledBorder;
 import javax.swing.event.CaretEvent;
-
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.io.File;
 
 /*$Id: SetApplicationPanel.java,v 1.6 2004/04/05 10:05:44 alexeya Exp $*/
 public class SetApplicationPanel extends JPanel {
@@ -35,18 +26,18 @@ public class SetApplicationPanel extends JPanel {
     TitledBorder titledBorder2;
     JLabel argHelpLabel = new JLabel();
     public File d = null;
-    
+
     public SetApplicationPanel() {
         try {
             jbInit();
-        }
-        catch(Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
+
     void jbInit() throws Exception {
         border1 = BorderFactory.createEmptyBorder();
-        titledBorder1 = new TitledBorder(BorderFactory.createEmptyBorder(),Local.getString("Path to executable"));
+        titledBorder1 = new TitledBorder(BorderFactory.createEmptyBorder(), Local.getString("Path to executable"));
         border2 = BorderFactory.createEmptyBorder();
         titledBorder2 = new TitledBorder(border2, Local.getString("Arguments"));
         jPanel3.setLayout(borderLayout5);
@@ -80,16 +71,16 @@ public class SetApplicationPanel extends JPanel {
         argHelpLabel.setText(Local.getString("Use $1 as an alias of the file to open"));
         jPanel3.add(applicationField, BorderLayout.CENTER);
         jPanel3.add(selectAppBrowseB, BorderLayout.EAST);
-        this.add(jPanel4,  BorderLayout.SOUTH);
+        this.add(jPanel4, BorderLayout.SOUTH);
         jPanel4.add(argumentsField, BorderLayout.CENTER);
-        jPanel4.add(argHelpLabel,  BorderLayout.SOUTH);
-        this.add(jPanel3,  BorderLayout.NORTH);
+        jPanel4.add(argHelpLabel, BorderLayout.SOUTH);
+        this.add(jPanel3, BorderLayout.NORTH);
     }
-    
+
     void applicationField_caretUpdate(CaretEvent e) {
-        
+
     }
-    
+
     void selectAppBrowseB_actionPerformed(ActionEvent e) {
         // Fix until Sun's JVM supports more locales...
         UIManager.put("FileChooser.lookInLabelText", Local.getString("Look in:"));
@@ -104,7 +95,7 @@ public class SetApplicationPanel extends JPanel {
         UIManager.put("FileChooser.cancelButtonText", Local.getString("Cancel"));
         UIManager.put("FileChooser.cancelButtonToolTipText", Local.getString("Cancel"));
         UIManager.put("FileChooser.acceptAllFileFilterText", Local.getString("All Files") + " (*.*)");
-        
+
         JFileChooser chooser = new JFileChooser();
         chooser.setDialogTitle(Local.getString("Path to executable"));
         chooser.setFileHidingEnabled(false);
@@ -120,11 +111,12 @@ public class SetApplicationPanel extends JPanel {
             if (lastSel != null)
                 chooser.setCurrentDirectory(lastSel);
         */
-        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
+        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
             applicationField.setText(chooser.getSelectedFile().getPath());
         }
-        
-        void argumentsField_caretUpdate(CaretEvent e) {
-            
-        }
+    }
+
+    void argumentsField_caretUpdate(CaretEvent e) {
+
+    }
 }
diff --git a/src/net/sf/memoranda/ui/StickerConfirmation.java b/src/net/sf/memoranda/ui/StickerConfirmation.java
index ba1c8b2..d92ff16 100755
--- a/src/net/sf/memoranda/ui/StickerConfirmation.java
+++ b/src/net/sf/memoranda/ui/StickerConfirmation.java
@@ -1,130 +1,109 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.text.DateFormat;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JColorChooser;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JList;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
-import javax.swing.ListCellRenderer;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.EmptyBorder;
-
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.util.Context;
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
 
 
 public class StickerConfirmation extends JDialog {
-        public boolean CANCELLED = true;
-        JPanel panel1 = new JPanel();
-        BorderLayout borderLayout1 = new BorderLayout();
-        BorderLayout borderLayout2 = new BorderLayout();
-        JButton cancelButton = new JButton();
-        JButton okButton = new JButton();
-        JPanel bottomPanel = new JPanel();
-        JPanel topPanel = new JPanel();
-        JLabel header = new JLabel();
-        JPanel jPanel1 = new JPanel();
-        JLabel jLabel1 = new JLabel();
-        
-        Border border1;
-        Border border2;
-        
-        public StickerConfirmation(Frame frame) {
-                super(frame, Local.getString("Sticker"), true);
-                try {
-                        jbInit();
-                        pack();
-                } catch (Exception ex) {
-                        new ExceptionDialog(ex);
-                }
-        }
+    public boolean CANCELLED = true;
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    BorderLayout borderLayout2 = new BorderLayout();
+    JButton cancelButton = new JButton();
+    JButton okButton = new JButton();
+    JPanel bottomPanel = new JPanel();
+    JPanel topPanel = new JPanel();
+    JLabel header = new JLabel();
+    JPanel jPanel1 = new JPanel();
+    JLabel jLabel1 = new JLabel();
 
-        public StickerConfirmation() {
-                this(null);
-        }
-        void jbInit() throws Exception {
-                border1 =
-                        BorderFactory.createCompoundBorder(
-                                BorderFactory.createEtchedBorder(
-                                        Color.white,
-                                        new Color(156, 156, 158)),
-                                BorderFactory.createEmptyBorder(5, 5, 5, 5));
-                border2 = BorderFactory.createEmptyBorder(5, 0, 5, 0);
-                panel1.setLayout(borderLayout1);
-                this.getContentPane().setLayout(borderLayout2);
-                cancelButton.setMaximumSize(new Dimension(100, 25));
-                cancelButton.setMinimumSize(new Dimension(100, 25));
-                cancelButton.setPreferredSize(new Dimension(100, 25));
-                cancelButton.setText(Local.getString("Cancel"));
-                cancelButton.addActionListener(new java.awt.event.ActionListener() {
-                        public void actionPerformed(ActionEvent e) {
-                                cancelButton_actionPerformed(e);
-                        }
-                });
-                okButton.setMaximumSize(new Dimension(100, 25));
-                okButton.setMinimumSize(new Dimension(100, 25));
-                okButton.setPreferredSize(new Dimension(100, 25));
-                okButton.setText(Local.getString("Ok"));
-                okButton.addActionListener(new java.awt.event.ActionListener() {
-                        public void actionPerformed(ActionEvent e) {
-                                okButton_actionPerformed(e);
-                        }
-                });
-                this.getRootPane().setDefaultButton(okButton);
-                
-                bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
-                topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
-                topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
-                topPanel.setBackground(Color.WHITE);
-
-                header.setFont(new java.awt.Font("Dialog", 0, 20));
-                header.setForeground(new Color(0, 0, 124));
-                header.setText(Local.getString("Sticker"));
-                header.setIcon(new ImageIcon(net.sf.memoranda.ui.StickerDialog.class.getResource(
-            "resources/icons/sticker48.png")));
-
-
-                jLabel1.setText(Local.getString("DELETE THIS STICKER?"));
-                panel1.setBorder(border1);
-                jPanel1.setBorder(border2);
-                getContentPane().add(panel1, BorderLayout.CENTER);
-                panel1.add(jPanel1, BorderLayout.SOUTH);
-                this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-                bottomPanel.add(okButton);
-                bottomPanel.add(cancelButton);
-                this.getContentPane().add(topPanel, BorderLayout.NORTH);
-                topPanel.add(header);
-                jPanel1.add(jLabel1, BorderLayout.WEST);
-                
-        }
-        
-        
-        
-        void cancelButton_actionPerformed(ActionEvent e) {
-                this.dispose();
-        }
+    Border border1;
+    Border border2;
 
-        void okButton_actionPerformed(ActionEvent e) {
-                CANCELLED = false;
-                this.dispose();
+    public StickerConfirmation(Frame frame) {
+        super(frame, Local.getString("Sticker"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
         }
+    }
+
+    public StickerConfirmation() {
+        this(null);
+    }
+
+    void jbInit() throws Exception {
+        border1 =
+                BorderFactory.createCompoundBorder(
+                        BorderFactory.createEtchedBorder(
+                                Color.white,
+                                new Color(156, 156, 158)),
+                        BorderFactory.createEmptyBorder(5, 5, 5, 5));
+        border2 = BorderFactory.createEmptyBorder(5, 0, 5, 0);
+        panel1.setLayout(borderLayout1);
+        this.getContentPane().setLayout(borderLayout2);
+        cancelButton.setMaximumSize(new Dimension(100, 25));
+        cancelButton.setMinimumSize(new Dimension(100, 25));
+        cancelButton.setPreferredSize(new Dimension(100, 25));
+        cancelButton.setText(Local.getString("Cancel"));
+        cancelButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelButton_actionPerformed(e);
+            }
+        });
+        okButton.setMaximumSize(new Dimension(100, 25));
+        okButton.setMinimumSize(new Dimension(100, 25));
+        okButton.setPreferredSize(new Dimension(100, 25));
+        okButton.setText(Local.getString("Ok"));
+        okButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okButton_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okButton);
+
+        bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
+        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
+        topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
+        topPanel.setBackground(Color.WHITE);
+
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Sticker"));
+        header.setIcon(new ImageIcon(net.sf.memoranda.ui.StickerDialog.class.getResource(
+                "resources/icons/sticker48.png")));
+
+
+        jLabel1.setText(Local.getString("DELETE THIS STICKER?"));
+        panel1.setBorder(border1);
+        jPanel1.setBorder(border2);
+        getContentPane().add(panel1, BorderLayout.CENTER);
+        panel1.add(jPanel1, BorderLayout.SOUTH);
+        this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
+        bottomPanel.add(okButton);
+        bottomPanel.add(cancelButton);
+        this.getContentPane().add(topPanel, BorderLayout.NORTH);
+        topPanel.add(header);
+        jPanel1.add(jLabel1, BorderLayout.WEST);
+
+    }
+
+
+    void cancelButton_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
+
+    void okButton_actionPerformed(ActionEvent e) {
+        CANCELLED = false;
+        this.dispose();
+    }
+
 
-        
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/StickerDialog.java b/src/net/sf/memoranda/ui/StickerDialog.java
index 6f48ff9..fd34488 100755
--- a/src/net/sf/memoranda/ui/StickerDialog.java
+++ b/src/net/sf/memoranda/ui/StickerDialog.java
@@ -1,491 +1,499 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Font;
-import java.awt.Frame;
-import java.awt.GridLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.text.DateFormat;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JColorChooser;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JList;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
-import javax.swing.ListCellRenderer;
-import javax.swing.border.Border;
-import javax.swing.border.EmptyBorder;
-
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.util.Context;
 import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
+import javax.swing.border.Border;
+import javax.swing.border.EmptyBorder;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.text.DateFormat;
+
 /*$Id: StickerDialog.java,v 1.5 2004/10/07 21:31:33 ivanrise Exp $*/
 public class StickerDialog extends JDialog {
-	public boolean CANCELLED = true;
-	JPanel panel1 = new JPanel();
-	BorderLayout borderLayout1 = new BorderLayout();
-	BorderLayout borderLayout2 = new BorderLayout();
-	
-	JButton cancelButton = new JButton();
-	JButton okButton = new JButton();
-	JButton boldButton= new JButton();
-	JButton italicButton= new JButton();
-	JButton underlineButton= new JButton();
-	JButton unorderedListButton= new JButton();
-	
-	JPanel bottomPanel = new JPanel();
-	JPanel topPanel = new JPanel();
-	JLabel header = new JLabel();
-	JScrollPane jScrollPane1 = new JScrollPane();
-	JPanel jPanel1 = new JPanel();
-	JTextArea stickerText = new JTextArea();
-	JLabel jLabel1 = new JLabel();
-	JLabel jLabel2 = new JLabel();
-	JLabel jLabel3 = new JLabel();
-	JLabel jLabel4 = new JLabel();
-	GridLayout gridLayout1 = new GridLayout(6,2);
-
-	Border border1;
-	Border border2;
-	Color[] colors =
-		{
-			Color.YELLOW,
-			Color.ORANGE,
-			Color.RED,
-			Color.BLUE,
-			Color.GREEN,
-			Color.CYAN,
-			Color.MAGENTA,
-			Color.BLACK,
-			Color.WHITE,
-			Color.PINK };
-	String[] colorLabels =
-		{
-			Local.getString("Yellow"),
-			Local.getString("Orange"),
-			Local.getString("Red"),
-			Local.getString("Blue"),
-			Local.getString("Green"),
-			Local.getString("Cyan"),
-			Local.getString("Magenta"),
-			Local.getString("Black"),
-			Local.getString("White"),
-			Local.getString("Pink"),
-			Local.getString("Custom")+"..."};
-	String[] priorities = {
-			Local.getString("HIGHEST"),
-			Local.getString("HIGH"),
-			Local.getString("NORMAL"),
-			Local.getString("LOW"),
-			Local.getString("LOWEST")};
-	int[] font={10,15,20};
-	String[] fontLabels= {"10px","15px","20px"};
-	JComboBox stickerColor = new JComboBox(colorLabels);
-	JComboBox textColor = new JComboBox(colorLabels);
-	JComboBox fontSize = new JComboBox(fontLabels);
-	JComboBox priorityList = new JComboBox(priorities);
-	
-
-	public StickerDialog(Frame frame) {
-		super(frame, Local.getString("Sticker"), true);
-		try {
-			jbInit();
-			pack();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
-	public StickerDialog(Frame frame, String text, String backcolor, String forecolor, int sP, int size){
-		super(frame, Local.getString("Sticker"), true);
-		try {
-			jbInit();
-			pack();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-		stickerText.setText(text);
-		Color back = Color.decode(backcolor);
-		Color front = Color.decode(forecolor);
-		int i = findColorIndex(back);
-		if (i > -1)
-			stickerColor.setSelectedIndex(i);
-		else
-			stickerColor.setSelectedIndex(10);
-		i = findColorIndex(front);
-		if (i > -1)
-			textColor.setSelectedIndex(i);
-		else
-			textColor.setSelectedIndex(stickerColor.getSelectedIndex()+1);
-		if (sP > -1 && sP < 5)
-			priorityList.setSelectedIndex(sP);
-		else
-			priorityList.setSelectedIndex(2);
-		if(size==10)
-			fontSize.setSelectedIndex(0);
-		else if(size == 20)
-			fontSize.setSelectedIndex(2);
-		else fontSize.setSelectedIndex(1);
-	}
-
-	public StickerDialog() {
-		this(null);
-	}
-	void jbInit() throws Exception {
-		stickerColor.setRenderer(new ComboBoxRenderer());
-		stickerColor.setMaximumRowCount(11);
-		textColor.setRenderer(new ComboBoxRenderer2());
-		textColor.setMaximumRowCount(11);
-		priorityList.setSelectedIndex(2);
-		border1 =
-			BorderFactory.createCompoundBorder(
-				BorderFactory.createEtchedBorder(
-					Color.white,
-					new Color(156, 156, 158)),
-				BorderFactory.createEmptyBorder(5, 5, 5, 5));
-		border2 = BorderFactory.createEmptyBorder(5, 0, 5, 0);
-		panel1.setLayout(borderLayout1);
-		this.getContentPane().setLayout(borderLayout2);
-		cancelButton.setMaximumSize(new Dimension(100, 25));
-		cancelButton.setMinimumSize(new Dimension(100, 25));
-		cancelButton.setPreferredSize(new Dimension(100, 25));
-		cancelButton.setText(Local.getString("Cancel"));
-		cancelButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				cancelButton_actionPerformed(e);
-			}
-		});
-		okButton.setMaximumSize(new Dimension(100, 25));
-		okButton.setMinimumSize(new Dimension(100, 25));
-		okButton.setPreferredSize(new Dimension(100, 25));
-		okButton.setText(Local.getString("Ok"));
-		okButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				okButton_actionPerformed(e);
-			}
-		});
-		this.getRootPane().setDefaultButton(okButton);
-		
-		boldButton.setText(Local.getString("Bold"));
-		boldButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				boldButton_actionPerformed(e);
-			}
-		});
-		italicButton.setText(Local.getString("Italic"));
-		italicButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				italicButton_actionPerformed(e);
-			}
-		});
-		underlineButton.setText(Local.getString("Underline"));
-		underlineButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				underlineButton_actionPerformed(e);
-			}
-		});
-		unorderedListButton.setText("* "+Local.getString("List"));
-		unorderedListButton.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				unorderedListButton_actionPerformed(e);
-			}
-		});
-		bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
-		topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
-		topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
-		topPanel.setBackground(Color.WHITE);
-		//topPanel.setBackground(new Color(215, 225, 250));
-		header.setFont(new java.awt.Font("Dialog", 0, 20));
-		header.setForeground(new Color(0, 0, 124));
-		header.setText(Local.getString("Sticker"));
-		header.setIcon(new ImageIcon(net.sf.memoranda.ui.StickerDialog.class.getResource(
-            "resources/icons/sticker48.png")));
-		//header.setHorizontalAlignment(SwingConstants.LEFT);
-
-		jLabel1.setText(Local.getString("Sticker color")+": ");
-		jLabel2.setText(Local.getString("Font color")+": ");
-		jLabel3.setText(Local.getString("Font Size")+": ");
-		jLabel4.setText(Local.getString("Priority")+": ");
-		jPanel1.setLayout(gridLayout1);
-		panel1.setBorder(border1);
-		jPanel1.setBorder(border2);
-		
-		getContentPane().add(panel1, BorderLayout.CENTER);
-		panel1.add(jScrollPane1, BorderLayout.CENTER);
-		jScrollPane1.getViewport().add(stickerText, null);
-		panel1.add(jPanel1, BorderLayout.SOUTH);
-		this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-		bottomPanel.add(okButton);
-		bottomPanel.add(cancelButton);
-		this.getContentPane().add(topPanel, BorderLayout.NORTH);
-		topPanel.add(header);
-		
-		jPanel1.add(jLabel1);
-		jPanel1.add(stickerColor);
-		jPanel1.add(jLabel2);
-		jPanel1.add(textColor);
-		jPanel1.add(jLabel3);
-		jPanel1.add(fontSize);
-		
-		jPanel1.add(boldButton);
-		jPanel1.add(italicButton);
-		jPanel1.add(underlineButton);
-		jPanel1.add(unorderedListButton);
-		jPanel1.add(jLabel4);
-		jPanel1.add(priorityList);
-		
-		if (Context.get("STICKER_COLOR") != null) {
-			Color c = new Color(new Integer(Context.get("STICKER_COLOR").toString()).intValue());
-			stickerText.setBackground(c);
-			int i = findColorIndex(c);
-			if (i > -1)
-				stickerColor.setSelectedIndex(i);
-			else
-				stickerColor.setSelectedIndex(10);
-		}
-		else{
-			stickerText.setBackground(Color.YELLOW);
-			stickerColor.setSelectedIndex(0);
-		}
-		stickerText.setWrapStyleWord(true);
-		stickerText.setText(
-			CalendarDate.today().getLongDateString()
-				+ " "
-				+ DateFormat.getTimeInstance(
-					DateFormat.SHORT,
-					Local.getCurrentLocale()).format(
-					new java.util.Date())+"\n");
-		stickerColor.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				stickerColor_actionPerformed(e);
-			}
-		});
-		if (Context.get("TEXT_COLOR") != null) {
-			Color d = new Color(new Integer(Context.get("TEXT_COLOR").toString()).intValue());
-			stickerText.setForeground(d);
-			int i = findColorIndex(d);
-			if (i > -1){
-				if(i!=stickerColor.getSelectedIndex()){
-					textColor.setSelectedIndex(i);
-				}
-				else{
-					textColor.setSelectedIndex(i+1);
-					stickerText.setForeground(colors[i]);
-				}
-			}
-			else
-				textColor.setSelectedIndex(10);
-		}
-		else{
-			stickerText.setForeground(Color.BLACK);
-			textColor.setSelectedIndex(7);
-		}
-		textColor.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				textColor_actionPerformed(e);
-			}
-		});
-		Font f= stickerText.getFont();
-		if (Context.get("TEXT_SIZE") != null) {
-			int h= (fontSize.getSelectedIndex()*5)+10;
-			if (h!=10 && h!=15 && h!=20) h=15;
-			stickerText.setFont(new Font(f.getFontName(), f.PLAIN, h));
-		}
-		else{
-			stickerText.setFont(new Font(f.getFontName(), f.PLAIN, 15));
-			fontSize.setSelectedIndex(1);
-		}
-		fontSize.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				fontSize_actionPerformed(e);
-			}
-		});
-	}
-
-	int findColorIndex(Color c) {		
-		for (int i = 0; i < colors.length; i++)
-			if (c.equals(colors[i]))
-				return i;
-		return -1;
-	}
-
-	public String getStickerText() {
-		return stickerText.getText();
-	}
-	public String getStickerTextSize() {
-		return ""+stickerText.getFont().getSize();
-	}
-	public String getStickerTextColor(){
-		return "#"
-				+ Integer
-					.toHexString(stickerText.getForeground().getRGB() - 0xFF000000)
-					.toUpperCase();	
-		}
-	public String getStickerColor() {
-		return "#"
-			+ Integer
-				.toHexString(stickerText.getBackground().getRGB() - 0xFF000000)
-				.toUpperCase();
-	}
-	int getPriority(){
-		return priorityList.getSelectedIndex();
-	}
-
-	void cancelButton_actionPerformed(ActionEvent e) {
-		this.dispose();
-	}
-
-	void okButton_actionPerformed(ActionEvent e) {
-		CANCELLED = false;
-		this.dispose();
-	}
-	void boldButton_actionPerformed(ActionEvent e) {
-		int pos=stickerText.getCaretPosition();
-		stickerText.insert("<b></b>", pos);
-		stickerText.requestFocusInWindow();
-		stickerText.setCaretPosition(pos+3);
-	}
-	void italicButton_actionPerformed(ActionEvent e) {
-		int pos=stickerText.getCaretPosition();
-		stickerText.insert("<i></i>", pos);
-		stickerText.requestFocusInWindow();
-		stickerText.setCaretPosition(pos+3);
-	}
-	protected void underlineButton_actionPerformed(ActionEvent e) {
-		int pos=stickerText.getCaretPosition();
-		stickerText.insert("<u></u>", pos);
-		stickerText.requestFocusInWindow();
-		stickerText.setCaretPosition(pos+3);
-	}
-	void unorderedListButton_actionPerformed(ActionEvent e) {
-		int pos=stickerText.getCaretPosition();
-		stickerText.insert("<li></li>", pos);
-		stickerText.requestFocusInWindow();
-		stickerText.setCaretPosition(pos+4);
-	}
-	void stickerColor_actionPerformed(ActionEvent e) {
-		int i=stickerColor.getSelectedIndex();
-		if (i< colors.length){
-			if(i!=textColor.getSelectedIndex()){
-				stickerText.setBackground(colors[i]);
-				stickerColor.setSelectedIndex(i);
-			}
-			else{
-				stickerColor.setSelectedIndex(i+1);
-				stickerText.setBackground(colors[i+1]);
-				JOptionPane.showMessageDialog(this, Local.getString("SAME BACKGROUND COLOR"), "Error", 0);
-			}
-			stickerText.setForeground(colors[textColor.getSelectedIndex()]);
-		}
-		else {
-			Color c =
-				JColorChooser.showDialog(
-					this,
-					Local.getString("Sticker color"),
-					stickerText.getBackground());
-			if (c != null)
-				stickerText.setBackground(c);
-		}
-		Context.put("STICKER_COLOR", new Integer(stickerText.getBackground().getRGB()));
-	}
-	void textColor_actionPerformed(ActionEvent e) {
-		int i=textColor.getSelectedIndex();
-		if (i < colors.length){
-			if(i!=stickerColor.getSelectedIndex()){
-				stickerText.setForeground(colors[i]);
-				textColor.setSelectedIndex(i);
-			}
-			else{
-				textColor.setSelectedIndex(i+1);
-				stickerText.setForeground(colors[i+1]);
-				JOptionPane.showMessageDialog(this, Local.getString("SAME FOREGROUND COLOR"), "Error", 0);
-			}
-			stickerText.setForeground(colors[textColor.getSelectedIndex()]);
-		}
-		else {
-			Color c =
-				JColorChooser.showDialog(
-					this,
-					Local.getString("Text color"),
-					stickerText.getForeground());
-			if (c != null)
-				stickerText.setForeground(c);
-		}
-		Context.put("TEXT_COLOR", new Integer(stickerText.getForeground().getRGB()));		
-	}
-	protected void fontSize_actionPerformed(ActionEvent e) {
-		int i=fontSize.getSelectedIndex();
-		if (i < fontLabels.length){
-			Font f= stickerText.getFont();
-			stickerText.setFont(new Font(f.getFontName(), f.PLAIN, (i*5)+10));
-		}
-		fontSize.setSelectedIndex(i);
-		Context.put("TEXT_SIZE", new Integer(stickerText.getFont().getSize()));		
-		}
-	class ComboBoxRenderer extends JLabel implements ListCellRenderer {
-		public ComboBoxRenderer() {
-			setOpaque(true);
-
-		}
-		public Component getListCellRendererComponent(
-			JList list,
-			Object value,
-			int index,
-			boolean isSelected,
-			boolean cellHasFocus) {
-			/*
-			 * if (isSelected) { setBackground(list.getSelectionBackground());
-			 * setForeground(list.getSelectionForeground());
-			 */
-			if(index==7){
-				this.setForeground(Color.WHITE);
-			}
-			else setForeground(list.getForeground());
-			if ((index > -1) && (index < colors.length))
-				setBackground(colors[index]);
-			else
-				setBackground(list.getBackground());
-			//}
-			setText(value.toString());
-			return this;
-		}
-	}
-	class ComboBoxRenderer2 extends JLabel implements ListCellRenderer {
-		public ComboBoxRenderer2() {
-			setOpaque(true);
-
-		}
-		public Component getListCellRendererComponent(
-			JList list,
-			Object value,
-			int index,
-			boolean isSelected,
-			boolean cellHasFocus) {
-			/*
-			 * if (isSelected) { setBackground(list.getSelectionBackground());
-			 * setForeground(list.getSelectionForeground());
-			 */
-			if ((index > -1) && (index < colors.length))
-				setForeground(colors[index]);
-			else
-				setForeground(list.getForeground());
-			setBackground(list.getBackground());
-			//}
-			setText(value.toString());
-			return this;
-		}
-	}
+    public boolean CANCELLED = true;
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    BorderLayout borderLayout2 = new BorderLayout();
+
+    JButton cancelButton = new JButton();
+    JButton okButton = new JButton();
+    JButton boldButton = new JButton();
+    JButton italicButton = new JButton();
+    JButton underlineButton = new JButton();
+    JButton unorderedListButton = new JButton();
+
+    JPanel bottomPanel = new JPanel();
+    JPanel topPanel = new JPanel();
+    JLabel header = new JLabel();
+    JScrollPane jScrollPane1 = new JScrollPane();
+    JPanel jPanel1 = new JPanel();
+    JTextArea stickerText = new JTextArea();
+    JLabel jLabel1 = new JLabel();
+    JLabel jLabel2 = new JLabel();
+    JLabel jLabel3 = new JLabel();
+    JLabel jLabel4 = new JLabel();
+    GridLayout gridLayout1 = new GridLayout(6, 2);
+
+    Border border1;
+    Border border2;
+    Color[] colors = {
+            Color.YELLOW,
+            Color.ORANGE,
+            Color.RED,
+            Color.BLUE,
+            Color.GREEN,
+            Color.CYAN,
+            Color.MAGENTA,
+            Color.BLACK,
+            Color.WHITE,
+            Color.PINK
+    };
+
+    String[] colorLabels = {
+            Local.getString("Yellow"),
+            Local.getString("Orange"),
+            Local.getString("Red"),
+            Local.getString("Blue"),
+            Local.getString("Green"),
+            Local.getString("Cyan"),
+            Local.getString("Magenta"),
+            Local.getString("Black"),
+            Local.getString("White"),
+            Local.getString("Pink"),
+            Local.getString("Custom") + "..."
+    };
+
+    String[] priorities = {
+            Local.getString("HIGHEST"),
+            Local.getString("HIGH"),
+            Local.getString("NORMAL"),
+            Local.getString("LOW"),
+            Local.getString("LOWEST")
+    };
+
+    int[] font = {10, 15, 20};
+    String[] fontLabels = {"10px", "15px", "20px"};
+    JComboBox stickerColor = new JComboBox(colorLabels);
+    JComboBox textColor = new JComboBox(colorLabels);
+    JComboBox fontSize = new JComboBox(fontLabels);
+    JComboBox priorityList = new JComboBox(priorities);
+
+
+    public StickerDialog(Frame frame) {
+        super(frame, Local.getString("Sticker"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
+
+    public StickerDialog(Frame frame, String text, String backcolor, String forecolor, int sP, int size) {
+        super(frame, Local.getString("Sticker"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+        stickerText.setText(text);
+        Color back = Color.decode(backcolor);
+        Color front = Color.decode(forecolor);
+        int i = findColorIndex(back);
+        if (i > -1) {
+            stickerColor.setSelectedIndex(i);
+        } else {
+            stickerColor.setSelectedIndex(10);
+        }
+        i = findColorIndex(front);
+        if (i > -1) {
+            textColor.setSelectedIndex(i);
+        } else {
+            textColor.setSelectedIndex(stickerColor.getSelectedIndex() + 1);
+        }
+        if (sP > -1 && sP < 5) {
+            priorityList.setSelectedIndex(sP);
+        } else {
+            priorityList.setSelectedIndex(2);
+        }
+        if (size == 10) {
+            fontSize.setSelectedIndex(0);
+        } else if (size == 20) {
+            fontSize.setSelectedIndex(2);
+        } else {
+            fontSize.setSelectedIndex(1);
+        }
+    }
+
+    public StickerDialog() {
+        this(null);
+    }
+
+    void jbInit() throws Exception {
+        stickerColor.setRenderer(new ComboBoxRenderer());
+        stickerColor.setMaximumRowCount(11);
+        textColor.setRenderer(new ComboBoxRenderer2());
+        textColor.setMaximumRowCount(11);
+        priorityList.setSelectedIndex(2);
+        border1 =
+                BorderFactory.createCompoundBorder(
+                        BorderFactory.createEtchedBorder(
+                                Color.white,
+                                new Color(156, 156, 158)),
+                        BorderFactory.createEmptyBorder(5, 5, 5, 5));
+        border2 = BorderFactory.createEmptyBorder(5, 0, 5, 0);
+        panel1.setLayout(borderLayout1);
+        this.getContentPane().setLayout(borderLayout2);
+        cancelButton.setMaximumSize(new Dimension(100, 25));
+        cancelButton.setMinimumSize(new Dimension(100, 25));
+        cancelButton.setPreferredSize(new Dimension(100, 25));
+        cancelButton.setText(Local.getString("Cancel"));
+        cancelButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelButton_actionPerformed(e);
+            }
+        });
+        okButton.setMaximumSize(new Dimension(100, 25));
+        okButton.setMinimumSize(new Dimension(100, 25));
+        okButton.setPreferredSize(new Dimension(100, 25));
+        okButton.setText(Local.getString("Ok"));
+        okButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okButton_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okButton);
+
+        boldButton.setText(Local.getString("Bold"));
+        boldButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                boldButton_actionPerformed(e);
+            }
+        });
+        italicButton.setText(Local.getString("Italic"));
+        italicButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                italicButton_actionPerformed(e);
+            }
+        });
+        underlineButton.setText(Local.getString("Underline"));
+        underlineButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                underlineButton_actionPerformed(e);
+            }
+        });
+        unorderedListButton.setText("* " + Local.getString("List"));
+        unorderedListButton.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                unorderedListButton_actionPerformed(e);
+            }
+        });
+        bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
+        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
+        topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
+        topPanel.setBackground(Color.WHITE);
+        //topPanel.setBackground(new Color(215, 225, 250));
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Sticker"));
+        header.setIcon(new ImageIcon(net.sf.memoranda.ui.StickerDialog.class.getResource(
+                "resources/icons/sticker48.png")));
+        //header.setHorizontalAlignment(SwingConstants.LEFT);
+
+        jLabel1.setText(Local.getString("Sticker color") + ": ");
+        jLabel2.setText(Local.getString("Font color") + ": ");
+        jLabel3.setText(Local.getString("Font Size") + ": ");
+        jLabel4.setText(Local.getString("Priority") + ": ");
+        jPanel1.setLayout(gridLayout1);
+        panel1.setBorder(border1);
+        jPanel1.setBorder(border2);
+
+        getContentPane().add(panel1, BorderLayout.CENTER);
+        panel1.add(jScrollPane1, BorderLayout.CENTER);
+        jScrollPane1.getViewport().add(stickerText, null);
+        panel1.add(jPanel1, BorderLayout.SOUTH);
+        this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
+        bottomPanel.add(okButton);
+        bottomPanel.add(cancelButton);
+        this.getContentPane().add(topPanel, BorderLayout.NORTH);
+        topPanel.add(header);
+
+        jPanel1.add(jLabel1);
+        jPanel1.add(stickerColor);
+        jPanel1.add(jLabel2);
+        jPanel1.add(textColor);
+        jPanel1.add(jLabel3);
+        jPanel1.add(fontSize);
+
+        jPanel1.add(boldButton);
+        jPanel1.add(italicButton);
+        jPanel1.add(underlineButton);
+        jPanel1.add(unorderedListButton);
+        jPanel1.add(jLabel4);
+        jPanel1.add(priorityList);
+        ;
+        ;
+        if (Context.get("STICKER_COLOR") != null) {
+            Color c = new Color(new Integer(Context.get("STICKER_COLOR").toString()).intValue());
+            stickerText.setBackground(c);
+            int i = findColorIndex(c);
+            if (i > -1) {
+                stickerColor.setSelectedIndex(i);
+            } else {
+                stickerColor.setSelectedIndex(10);
+            }
+        } else {
+            stickerText.setBackground(Color.YELLOW);
+            stickerColor.setSelectedIndex(0);
+        }
+        stickerText.setWrapStyleWord(true);
+        stickerText.setText(
+                CalendarDate.today().getLongDateString()
+                        + " "
+                        + DateFormat.getTimeInstance(
+                        DateFormat.SHORT,
+                        Local.getCurrentLocale()).format(
+                        new java.util.Date()) + "\n");
+        stickerColor.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                stickerColor_actionPerformed(e);
+            }
+        });
+        if (Context.get("TEXT_COLOR") != null) {
+            Color d = new Color(new Integer(Context.get("TEXT_COLOR").toString()).intValue());
+            stickerText.setForeground(d);
+            int i = findColorIndex(d);
+            if (i > -1) {
+                if (i != stickerColor.getSelectedIndex()) {
+                    textColor.setSelectedIndex(i);
+                } else {
+                    textColor.setSelectedIndex(i + 1);
+                    stickerText.setForeground(colors[i]);
+                }
+            } else {
+                textColor.setSelectedIndex(10);
+            }
+        } else {
+            stickerText.setForeground(Color.BLACK);
+            textColor.setSelectedIndex(7);
+        }
+        textColor.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                textColor_actionPerformed(e);
+            }
+        });
+        Font f = stickerText.getFont();
+        if (Context.get("TEXT_SIZE") != null) {
+            int h = (fontSize.getSelectedIndex() * 5) + 10;
+            if (h != 10 && h != 15 && h != 20) {
+                h = 15;
+            }
+            stickerText.setFont(new Font(f.getFontName(), f.PLAIN, h));
+        } else {
+            stickerText.setFont(new Font(f.getFontName(), f.PLAIN, 15));
+            fontSize.setSelectedIndex(1);
+        }
+        fontSize.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                fontSize_actionPerformed(e);
+            }
+        });
+    }
+
+    int findColorIndex(Color c) {
+        for (int i = 0; i < colors.length; i++) {
+            if (c.equals(colors[i])) {
+                return i;
+            }
+        }
+        return -1;
+    }
+
+    public String getStickerText() {
+        return stickerText.getText();
+    }
+
+    public String getStickerTextSize() {
+        return "" + stickerText.getFont().getSize();
+    }
+
+    public String getStickerTextColor() {
+        return "#"
+                + Integer
+                .toHexString(stickerText.getForeground().getRGB() - 0xFF000000)
+                .toUpperCase();
+    }
+
+    public String getStickerColor() {
+        return "#"
+                + Integer
+                .toHexString(stickerText.getBackground().getRGB() - 0xFF000000)
+                .toUpperCase();
+    }
+
+    int getPriority() {
+        return priorityList.getSelectedIndex();
+    }
+
+    void cancelButton_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
+
+    void okButton_actionPerformed(ActionEvent e) {
+        CANCELLED = false;
+        this.dispose();
+    }
+
+    void boldButton_actionPerformed(ActionEvent e) {
+        int pos = stickerText.getCaretPosition();
+        stickerText.insert("<b></b>", pos);
+        stickerText.requestFocusInWindow();
+        stickerText.setCaretPosition(pos + 3);
+    }
+
+    void italicButton_actionPerformed(ActionEvent e) {
+        int pos = stickerText.getCaretPosition();
+        stickerText.insert("<i></i>", pos);
+        stickerText.requestFocusInWindow();
+        stickerText.setCaretPosition(pos + 3);
+    }
+
+    protected void underlineButton_actionPerformed(ActionEvent e) {
+        int pos = stickerText.getCaretPosition();
+        stickerText.insert("<u></u>", pos);
+        stickerText.requestFocusInWindow();
+        stickerText.setCaretPosition(pos + 3);
+    }
+
+    void unorderedListButton_actionPerformed(ActionEvent e) {
+        int pos = stickerText.getCaretPosition();
+        stickerText.insert("<li></li>", pos);
+        stickerText.requestFocusInWindow();
+        stickerText.setCaretPosition(pos + 4);
+    }
+
+    void stickerColor_actionPerformed(ActionEvent e) {
+        int i = stickerColor.getSelectedIndex();
+        if (i < colors.length) {
+            if (i != textColor.getSelectedIndex()) {
+                stickerText.setBackground(colors[i]);
+                stickerColor.setSelectedIndex(i);
+            } else {
+                stickerColor.setSelectedIndex(i + 1);
+                stickerText.setBackground(colors[i + 1]);
+                JOptionPane.showMessageDialog(this, Local.getString("SAME BACKGROUND COLOR"), "Error", 0);
+            }
+            stickerText.setForeground(colors[textColor.getSelectedIndex()]);
+        } else {
+            Color c =
+                    JColorChooser.showDialog(
+                            this,
+                            Local.getString("Sticker color"),
+                            stickerText.getBackground());
+            if (c != null) {
+                stickerText.setBackground(c);
+            }
+        }
+        Context.put("STICKER_COLOR", new Integer(stickerText.getBackground().getRGB()));
+    }
+
+    void textColor_actionPerformed(ActionEvent e) {
+        int i = textColor.getSelectedIndex();
+        if (i < colors.length) {
+            if (i != stickerColor.getSelectedIndex()) {
+                stickerText.setForeground(colors[i]);
+                textColor.setSelectedIndex(i);
+            } else {
+                textColor.setSelectedIndex(i + 1);
+                stickerText.setForeground(colors[i + 1]);
+                JOptionPane.showMessageDialog(this, Local.getString("SAME FOREGROUND COLOR"), "Error", 0);
+            }
+            stickerText.setForeground(colors[textColor.getSelectedIndex()]);
+        } else {
+            Color c =
+                    JColorChooser.showDialog(
+                            this,
+                            Local.getString("Text color"),
+                            stickerText.getForeground());
+            if (c != null) {
+                stickerText.setForeground(c);
+            }
+        }
+        Context.put("TEXT_COLOR", new Integer(stickerText.getForeground().getRGB()));
+    }
+
+    protected void fontSize_actionPerformed(ActionEvent e) {
+        int i = fontSize.getSelectedIndex();
+        if (i < fontLabels.length) {
+            Font f = stickerText.getFont();
+            stickerText.setFont(new Font(f.getFontName(), f.PLAIN, (i * 5) + 10));
+        }
+        fontSize.setSelectedIndex(i);
+        Context.put("TEXT_SIZE", new Integer(stickerText.getFont().getSize()));
+    }
+
+    class ComboBoxRenderer extends JLabel implements ListCellRenderer {
+        public ComboBoxRenderer() {
+            setOpaque(true);
+
+        }
+
+        public Component getListCellRendererComponent(
+                JList list,
+                Object value,
+                int index,
+                boolean isSelected,
+                boolean cellHasFocus) {
+            /*
+             * if (isSelected) { setBackground(list.getSelectionBackground());
+             * setForeground(list.getSelectionForeground());
+             */
+            if (index == 7) {
+                this.setForeground(Color.WHITE);
+            } else {
+                setForeground(list.getForeground());
+            }
+            if ((index > -1) && (index < colors.length)) {
+                setBackground(colors[index]);
+            } else {
+                setBackground(list.getBackground());
+            }
+            //}
+            setText(value.toString());
+            return this;
+        }
+    }
+
+    class ComboBoxRenderer2 extends JLabel implements ListCellRenderer {
+        public ComboBoxRenderer2() {
+            setOpaque(true);
+
+        }
+
+        public Component getListCellRendererComponent(
+                JList list,
+                Object value,
+                int index,
+                boolean isSelected,
+                boolean cellHasFocus) {
+            /*
+             * if (isSelected) { setBackground(list.getSelectionBackground());
+             * setForeground(list.getSelectionForeground());
+             */
+            if ((index > -1) && (index < colors.length)) {
+                setForeground(colors[index]);
+            } else {
+                setForeground(list.getForeground());
+            }
+            setBackground(list.getBackground());
+            //}
+            setText(value.toString());
+            return this;
+        }
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/StickerExpand.java b/src/net/sf/memoranda/ui/StickerExpand.java
index 9e1a422..155bb0b 100755
--- a/src/net/sf/memoranda/ui/StickerExpand.java
+++ b/src/net/sf/memoranda/ui/StickerExpand.java
@@ -1,90 +1,74 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.text.DateFormat;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
+import javax.swing.*;
 import javax.swing.border.Border;
 import javax.swing.border.EmptyBorder;
+import java.awt.*;
 
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.ui.StickerDialog.ComboBoxRenderer;
-import net.sf.memoranda.util.Context;
-import net.sf.memoranda.util.Local;
+public class StickerExpand extends JDialog {
+    String txt;
+    Color backGroundColor, foreGroundColor;
+    public boolean CANCELLED = true;
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    BorderLayout borderLayout2 = new BorderLayout();
+    JPanel bottomPanel = new JPanel();
+    JPanel topPanel = new JPanel();
+    JLabel header = new JLabel();
+    JScrollPane jScrollPane1 = new JScrollPane();
+    JPanel jPanel1 = new JPanel();
+    JLabel stickerText = new JLabel();
+    JLabel jLabel1 = new JLabel();
+    BorderLayout borderLayout3 = new BorderLayout();
+
+    Border border1;
+    Border border2;
 
-public class StickerExpand extends JDialog{
-	String txt;
-	Color backGroundColor, foreGroundColor;
-	public boolean CANCELLED = true;
-	JPanel panel1 = new JPanel();
-	BorderLayout borderLayout1 = new BorderLayout();
-	BorderLayout borderLayout2 = new BorderLayout();
-	JPanel bottomPanel = new JPanel();
-	JPanel topPanel = new JPanel();
-	JLabel header = new JLabel();
-	JScrollPane jScrollPane1 = new JScrollPane();
-	JPanel jPanel1 = new JPanel();
-	JLabel stickerText = new JLabel();
-	JLabel jLabel1 = new JLabel();
-	BorderLayout borderLayout3 = new BorderLayout();
+    public StickerExpand(Frame frame, String txt, String backcolor, String fontcolor, String priority) {
+        super(frame, Local.getString("Sticker") + " [" + priority + "]", true);
+        this.txt = txt;
+        this.backGroundColor = Color.decode(backcolor);
+        this.foreGroundColor = Color.decode(fontcolor);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
 
-	Border border1;
-	Border border2;
-	public StickerExpand(Frame frame,String txt, String backcolor, String fontcolor, String priority) {
-		super(frame, Local.getString("Sticker")+" ["+priority+"]" , true);
-		this.txt=txt;
-		this.backGroundColor=Color.decode(backcolor);
-		this.foreGroundColor=Color.decode(fontcolor);
-		try {
-			jbInit();
-			pack();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
-	void jbInit() throws Exception {
-		border1 =
-				BorderFactory.createCompoundBorder(
-						BorderFactory.createEtchedBorder(
-								Color.white,
-								new Color(156, 156, 158)),
-								BorderFactory.createEmptyBorder(5, 5, 5, 5));
-		border2 = BorderFactory.createEmptyBorder(5, 0, 5, 0);
-		panel1.setLayout(borderLayout1);
-		this.getContentPane().setLayout(borderLayout2);
+    void jbInit() throws Exception {
+        border1 =
+                BorderFactory.createCompoundBorder(
+                        BorderFactory.createEtchedBorder(
+                                Color.white,
+                                new Color(156, 156, 158)),
+                        BorderFactory.createEmptyBorder(5, 5, 5, 5));
+        border2 = BorderFactory.createEmptyBorder(5, 0, 5, 0);
+        panel1.setLayout(borderLayout1);
+        this.getContentPane().setLayout(borderLayout2);
 
-		bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
-		topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
-		topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
-		topPanel.setBackground(Color.WHITE);
+        bottomPanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
+        topPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
+        topPanel.setBorder(new EmptyBorder(new Insets(0, 5, 0, 5)));
+        topPanel.setBackground(Color.WHITE);
 
-		jPanel1.setLayout(borderLayout3);
-		panel1.setBorder(border1);
-		jPanel1.setBorder(border2);
+        jPanel1.setLayout(borderLayout3);
+        panel1.setBorder(border1);
+        jPanel1.setBorder(border2);
 
-		getContentPane().add(panel1, BorderLayout.CENTER);
-		panel1.add(jScrollPane1, BorderLayout.CENTER);
-		jScrollPane1.getViewport().add(stickerText, null);
-		panel1.add(jPanel1, BorderLayout.SOUTH);
-		this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-		this.getContentPane().add(topPanel, BorderLayout.NORTH);
+        getContentPane().add(panel1, BorderLayout.CENTER);
+        panel1.add(jScrollPane1, BorderLayout.CENTER);
+        jScrollPane1.getViewport().add(stickerText, null);
+        panel1.add(jPanel1, BorderLayout.SOUTH);
+        this.getContentPane().add(bottomPanel, BorderLayout.SOUTH);
+        this.getContentPane().add(topPanel, BorderLayout.NORTH);
 
-		stickerText.setText(txt);
-		stickerText.setOpaque(true);
-		stickerText.setBackground(backGroundColor);
-		stickerText.setForeground(foreGroundColor);
-	}
+        stickerText.setText(txt);
+        stickerText.setOpaque(true);
+        stickerText.setBackground(backGroundColor);
+        stickerText.setForeground(foreGroundColor);
+    }
 }
diff --git a/src/net/sf/memoranda/ui/TaskCalcDialog.java b/src/net/sf/memoranda/ui/TaskCalcDialog.java
index 378e844..a977ef0 100755
--- a/src/net/sf/memoranda/ui/TaskCalcDialog.java
+++ b/src/net/sf/memoranda/ui/TaskCalcDialog.java
@@ -1,154 +1,143 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-
-import javax.swing.ButtonGroup;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.SwingConstants;
-
 import net.sf.memoranda.util.Local;
 
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 /*$Id: TaskCalcDialog.java,v 1.3 2005/06/10 18:36:24 velhonoja Exp $*/
 public class TaskCalcDialog extends JDialog {
-	JPanel topPanel = new JPanel(new BorderLayout());
-	JPanel generalPanel = new JPanel(new GridBagLayout());
-	GridBagConstraints gbc;
+    JPanel topPanel = new JPanel(new BorderLayout());
+    JPanel generalPanel = new JPanel(new GridBagLayout());
+    GridBagConstraints gbc;
     public boolean CANCELLED = true;
 
-	ButtonGroup closeGroup = new ButtonGroup();
-	JCheckBox compactDatesChB = new JCheckBox();
-	JCheckBox calcEffortChB = new JCheckBox();
-	JCheckBox calcCompletionChB = new JCheckBox();
-	JButton okB = new JButton();
-	JButton cancelB = new JButton();
-	JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
-	JLabel label1 = new JLabel();
-	JLabel label2 = new JLabel();
-
-	public TaskCalcDialog(Frame frame) {
-		super(frame, Local.getString("Preferences"), true);
-		try {
-			jbInit();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
-
-	public TaskCalcDialog() {
-		this(null);
-	}
-	void jbInit() throws Exception {
-	    this.setResizable(false);
-		label1.setHorizontalAlignment(SwingConstants.RIGHT);
-		label1.setText(Local.getString("Calculate and update data for this task using data from sub tasks."));
-		
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 1;
-		gbc.insets = new Insets(2, 10, 10, 15);
-		gbc.anchor = GridBagConstraints.WEST;
-		generalPanel.add(label1, gbc);
-
-		label2.setHorizontalAlignment(SwingConstants.RIGHT);
-		label2.setText(Local.getString("Please select data fields to update") + ":");
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 2;
-		gbc.insets = new Insets(2, 10, 10, 15);
-		gbc.anchor = GridBagConstraints.WEST;
-		generalPanel.add(label2, gbc);
-
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1; gbc.gridy = 3;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		compactDatesChB.setText(Local.getString("Compact task dates based on sub task dates"));
-//		compactDatesChB.addActionListener(new java.awt.event.ActionListener() {
-//			public void actionPerformed(ActionEvent e) {
-//				enSystrayChB_actionPerformed(e);
-//			}
-//		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 10;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		generalPanel.add(compactDatesChB, gbc);
-		calcEffortChB.setText(Local.getString("Calculate task effort based on sub task efforts"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 11;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		generalPanel.add(calcEffortChB, gbc);
-		calcCompletionChB.setText(Local.getString("Calculate task completion based on sub task completion"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1;
-		gbc.gridy = 12;
-		gbc.insets = new Insets(2, 0, 0, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		generalPanel.add(calcCompletionChB, gbc);
-//		calcCompletionChB.addActionListener(new java.awt.event.ActionListener() {
-//			public void actionPerformed(ActionEvent e) {
-//				enSplashChB_actionPerformed(e);
-//			}
-//		});
-		// Build TopPanel
-		topPanel.add(generalPanel, BorderLayout.CENTER);
-
-		// Build BottomPanel
-		okB.setMaximumSize(new Dimension(100, 25));
-		okB.setPreferredSize(new Dimension(100, 25));
-		okB.setText(Local.getString("Ok"));
-		okB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				okB_actionPerformed(e);
-			}
-		});
-		this.getRootPane().setDefaultButton(okB);
-		bottomPanel.add(okB);
-		cancelB.setMaximumSize(new Dimension(100, 25));
-		cancelB.setPreferredSize(new Dimension(100, 25));
-		cancelB.setText(Local.getString("Cancel"));
-		cancelB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				cancelB_actionPerformed(e);
-			}
-		});
-		bottomPanel.add(cancelB);
-
-		// Build Preferences-Dialog
-		getContentPane().add(topPanel, BorderLayout.NORTH);
-		getContentPane().add(bottomPanel, BorderLayout.SOUTH);
-
-		// set all config-values
-		setValues();
-
-	}
-
-	void setValues() {
-		calcCompletionChB.setSelected(true);
-		compactDatesChB.setSelected(true);
-		calcEffortChB.setSelected(true);
-	}
-
-	void okB_actionPerformed(ActionEvent e) {
-		CANCELLED = false;
-		this.dispose();
-	}
-
-	void cancelB_actionPerformed(ActionEvent e) {
-		this.dispose();
-	}
+    ButtonGroup closeGroup = new ButtonGroup();
+    JCheckBox compactDatesChB = new JCheckBox();
+    JCheckBox calcEffortChB = new JCheckBox();
+    JCheckBox calcCompletionChB = new JCheckBox();
+    JButton okB = new JButton();
+    JButton cancelB = new JButton();
+    JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
+    JLabel label1 = new JLabel();
+    JLabel label2 = new JLabel();
+
+    public TaskCalcDialog(Frame frame) {
+        super(frame, Local.getString("Preferences"), true);
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
+
+    public TaskCalcDialog() {
+        this(null);
+    }
+
+    void jbInit() throws Exception {
+        this.setResizable(false);
+        label1.setHorizontalAlignment(SwingConstants.RIGHT);
+        label1.setText(Local.getString("Calculate and update data for this task using data from sub tasks."));
+
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 1;
+        gbc.insets = new Insets(2, 10, 10, 15);
+        gbc.anchor = GridBagConstraints.WEST;
+        generalPanel.add(label1, gbc);
+
+        label2.setHorizontalAlignment(SwingConstants.RIGHT);
+        label2.setText(Local.getString("Please select data fields to update") + ":");
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 2;
+        gbc.insets = new Insets(2, 10, 10, 15);
+        gbc.anchor = GridBagConstraints.WEST;
+        generalPanel.add(label2, gbc);
+
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 3;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        compactDatesChB.setText(Local.getString("Compact task dates based on sub task dates"));
+        //        compactDatesChB.addActionListener(new java.awt.event.ActionListener() {
+        //            public void actionPerformed(ActionEvent e) {
+        //                enSystrayChB_actionPerformed(e);
+        //            }
+        //        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 10;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        generalPanel.add(compactDatesChB, gbc);
+        calcEffortChB.setText(Local.getString("Calculate task effort based on sub task efforts"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 11;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        generalPanel.add(calcEffortChB, gbc);
+        calcCompletionChB.setText(Local.getString("Calculate task completion based on sub task completion"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 12;
+        gbc.insets = new Insets(2, 0, 0, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        generalPanel.add(calcCompletionChB, gbc);
+        //        calcCompletionChB.addActionListener(new java.awt.event.ActionListener() {
+        //            public void actionPerformed(ActionEvent e) {
+        //                enSplashChB_actionPerformed(e);
+        //            }
+        //        });
+        // Build TopPanel
+        topPanel.add(generalPanel, BorderLayout.CENTER);
+
+        // Build BottomPanel
+        okB.setMaximumSize(new Dimension(100, 25));
+        okB.setPreferredSize(new Dimension(100, 25));
+        okB.setText(Local.getString("Ok"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okB);
+        bottomPanel.add(okB);
+        cancelB.setMaximumSize(new Dimension(100, 25));
+        cancelB.setPreferredSize(new Dimension(100, 25));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        bottomPanel.add(cancelB);
+
+        // Build Preferences-Dialog
+        getContentPane().add(topPanel, BorderLayout.NORTH);
+        getContentPane().add(bottomPanel, BorderLayout.SOUTH);
+
+        // set all config-values
+        setValues();
+
+    }
+
+    void setValues() {
+        calcCompletionChB.setSelected(true);
+        compactDatesChB.setSelected(true);
+        calcEffortChB.setSelected(true);
+    }
+
+    void okB_actionPerformed(ActionEvent e) {
+        CANCELLED = false;
+        this.dispose();
+    }
+
+    void cancelB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/TaskDialog.java b/src/net/sf/memoranda/ui/TaskDialog.java
index 8b00895..d98619f 100755
--- a/src/net/sf/memoranda/ui/TaskDialog.java
+++ b/src/net/sf/memoranda/ui/TaskDialog.java
@@ -1,13 +1,16 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.GridLayout;
+import net.sf.memoranda.CurrentProject;
+import net.sf.memoranda.Task;
+import net.sf.memoranda.date.CalendarDate;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.border.Border;
+import javax.swing.border.TitledBorder;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.text.DateFormat;
@@ -15,35 +18,7 @@ import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Date;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JSpinner;
-import javax.swing.JTextArea;
-import javax.swing.JTextField;
-import javax.swing.SpinnerDateModel;
-import javax.swing.SpinnerNumberModel;
-import javax.swing.SwingConstants;
 //import javax.swing.border.BevelBorder;
-import javax.swing.border.Border;
-import javax.swing.border.TitledBorder;
-import javax.swing.event.ChangeEvent;
-import javax.swing.event.ChangeListener;
-import javax.swing.JCheckBox;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.util.Local;
-import net.sf.memoranda.Task;
-import javax.swing.JSplitPane;
-import java.awt.Component;
-import javax.swing.Box;
-import javax.swing.SpinnerModel;
 
 /*$Id: TaskDialog.java,v 1.25 2005/12/01 08:12:26 alexeya Exp $*/
 public class TaskDialog extends JDialog {
@@ -61,7 +36,7 @@ public class TaskDialog extends JDialog {
     Border border4;
     JPanel jPanel2 = new JPanel(new GridLayout(2, 2));
     JTextField todoField = new JTextField();
-    
+
     JTextField txtEffort = new JTextField();
     JTextArea descriptionField = new JTextArea();
     JScrollPane descriptionScrollPane = new JScrollPane(descriptionField);
@@ -70,89 +45,88 @@ public class TaskDialog extends JDialog {
     CalendarFrame endCalFrame = new CalendarFrame();
     CalendarFrame endCalRptFrame = new CalendarFrame();
     String[] priority = {Local.getString("Lowest"), Local.getString("Low"),
-        Local.getString("Normal"), Local.getString("High"),
-        Local.getString("Highest")};
+            Local.getString("Normal"), Local.getString("High"),
+            Local.getString("Highest")};
     boolean ignoreStartChanged = false;
     boolean ignoreEndChanged = false;
     boolean ignoreRptEndChanged = false;
-        JPanel jPanel4 = new JPanel(new FlowLayout(FlowLayout.CENTER));
+    JPanel jPanel4 = new JPanel(new FlowLayout(FlowLayout.CENTER));
     JPanel jPanel6 = new JPanel();
     JLabel jLabel6 = new JLabel();
     JButton setStartDateB = new JButton();
     JPanel jPanel1 = new JPanel(new FlowLayout(FlowLayout.CENTER));
-    JPanel jPanelRepeatToggle = new JPanel(new GridLayout(0,1));
+    JPanel jPanelRepeatToggle = new JPanel(new GridLayout(0, 1));
     JLabel jLabel2 = new JLabel();
     JSpinner startDate;
     JSpinner endDate;
     JSpinner endDateRpt;
     JButton setEndDateB = new JButton();
     JPanel jPanelRepeat = new JPanel();
-    
+
     JButton setNotifB = new JButton();
     JComboBox<?> priorityCB = new JComboBox<Object>(priority);
     JLabel jLabel7 = new JLabel();
     // added by rawsushi
     JLabel jLabelEffort = new JLabel();
     JLabel jLabelDescription = new JLabel();
-	JCheckBox chkEndDate;
-	
-
-	JComboBox<?> cbRepeatType = new JComboBox<Object>(Task.REPEAT_FREQUENCIES_LIST);
-	public JCheckBox chkWorkingDays = new JCheckBox();
-	JCheckBox chkEndDateRpt = new JCheckBox();
-	JLabel jLabelProgress = new JLabel();
-	JSpinner progress = new JSpinner(new SpinnerNumberModel(0, 0, 100, 5));
-	
-	//Forbid to set dates outside the bounds
-	CalendarDate startDateMin = CurrentProject.get().getStartDate();
-	CalendarDate startDateMax = CurrentProject.get().getEndDate();
-	CalendarDate endDateMin = startDateMin;
-	CalendarDate endDateMax = startDateMax;
-	private final JPanel panel = new JPanel();
-	private final JLabel lblEndRepeat = new JLabel();
-	private final JButton setEndDateRptB = new JButton();
-	private final JPanel panel_1 = new JPanel();
-	private final JPanel panel_3 = new JPanel();
-	private final JPanel panel_4 = new JPanel();
-	private final JPanel panel_5 = new JPanel();
-	private final JPanel panel_6 = new JPanel();
-	private final JPanel panel_7 = new JPanel();
-	private final JPanel panel_8 = new JPanel();
-	private final JLabel lblTaskName = new JLabel();
-	private final JPanel panel_9 = new JPanel();
-	private final JPanel panel_2 = new JPanel();
-	private final JPanel panel_10 = new JPanel();
-	private final JLabel lblTaskTrackingTag = new JLabel();
-	private final JTextField txtTag = new JTextField();
-	
-    
+    JCheckBox chkEndDate;
+
+
+    JComboBox<?> cbRepeatType = new JComboBox<Object>(Task.REPEAT_FREQUENCIES_LIST);
+    public JCheckBox chkWorkingDays = new JCheckBox();
+    JCheckBox chkEndDateRpt = new JCheckBox();
+    JLabel jLabelProgress = new JLabel();
+    JSpinner progress = new JSpinner(new SpinnerNumberModel(0, 0, 100, 5));
+
+    //Forbid to set dates outside the bounds
+    CalendarDate startDateMin = CurrentProject.get().getStartDate();
+    CalendarDate startDateMax = CurrentProject.get().getEndDate();
+    CalendarDate endDateMin = startDateMin;
+    CalendarDate endDateMax = startDateMax;
+    private final JPanel panel = new JPanel();
+    private final JLabel lblEndRepeat = new JLabel();
+    private final JButton setEndDateRptB = new JButton();
+    private final JPanel panel_1 = new JPanel();
+    private final JPanel panel_3 = new JPanel();
+    private final JPanel panel_4 = new JPanel();
+    private final JPanel panel_5 = new JPanel();
+    private final JPanel panel_6 = new JPanel();
+    private final JPanel panel_7 = new JPanel();
+    private final JPanel panel_8 = new JPanel();
+    private final JLabel lblTaskName = new JLabel();
+    private final JPanel panel_9 = new JPanel();
+    private final JPanel panel_2 = new JPanel();
+    private final JPanel panel_10 = new JPanel();
+    private final JLabel lblTaskTrackingTag = new JLabel();
+    private final JTextField txtTag = new JTextField();
+
+
     public TaskDialog(Frame frame, String title) {
         super(frame, title, true);
         try {
-            jbInit();            
+            jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
     }
-    
+
     void jbInit() throws Exception {
-	this.setResizable(false);
-	this.setSize(new Dimension(430,300));
+        this.setResizable(false);
+        this.setSize(new Dimension(430, 300));
         border1 = BorderFactory.createEmptyBorder(5, 5, 5, 5);
-        border2 = BorderFactory.createEtchedBorder(Color.white, 
-            new Color(142, 142, 142));
-        border3 = new TitledBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0), 
-        Local.getString("To Do"), TitledBorder.LEFT, TitledBorder.BELOW_TOP);
+        border2 = BorderFactory.createEtchedBorder(Color.white,
+                new Color(142, 142, 142));
+        border3 = new TitledBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0),
+                Local.getString("To Do"), TitledBorder.LEFT, TitledBorder.BELOW_TOP);
         border4 = BorderFactory.createEmptyBorder(0, 5, 0, 5);
-//        border5 = BorderFactory.createEmptyBorder();
-//        border6 = BorderFactory.createBevelBorder(BevelBorder.LOWERED,
-//            Color.white, Color.white, new Color(178, 178, 178),
-//            new Color(124, 124, 124));
-//        border7 = BorderFactory.createLineBorder(Color.white, 2);
-        border8 = BorderFactory.createEtchedBorder(Color.white, 
-            new Color(178, 178, 178));
+        //        border5 = BorderFactory.createEmptyBorder();
+        //        border6 = BorderFactory.createBevelBorder(BevelBorder.LOWERED,
+        //            Color.white, Color.white, new Color(178, 178, 178),
+        //            new Color(124, 124, 124));
+        //        border7 = BorderFactory.createLineBorder(Color.white, 2);
+        border8 = BorderFactory.createEtchedBorder(Color.white,
+                new Color(178, 178, 178));
         cancelB.setMaximumSize(new Dimension(100, 26));
         cancelB.setMinimumSize(new Dimension(100, 26));
         cancelB.setPreferredSize(new Dimension(100, 26));
@@ -162,8 +136,8 @@ public class TaskDialog extends JDialog {
                 cancelB_actionPerformed(e);
             }
         });
-		cmboRepeatType_actionPerformed(null);
-		
+        cmboRepeatType_actionPerformed(null);
+
         okB.setMaximumSize(new Dimension(100, 26));
         okB.setMinimumSize(new Dimension(100, 26));
         okB.setPreferredSize(new Dimension(100, 26));
@@ -173,7 +147,7 @@ public class TaskDialog extends JDialog {
                 okB_actionPerformed(e);
             }
         });
-        
+
         this.getRootPane().setDefaultButton(okB);
         mPanel.setBorder(border1);
         areaPanel.setBorder(border2);
@@ -185,7 +159,7 @@ public class TaskDialog extends JDialog {
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("To do"));
         header.setIcon(new ImageIcon(net.sf.memoranda.ui.TaskDialog.class.getResource(
-            "resources/icons/task48.png")));
+                "resources/icons/task48.png")));
         GridBagConstraints gbCon = new GridBagConstraints();
         gbCon.gridwidth = GridBagConstraints.REMAINDER;
         gbCon.weighty = 1;
@@ -196,8 +170,8 @@ public class TaskDialog extends JDialog {
         gbCon = new GridBagConstraints();
         gbCon.gridwidth = GridBagConstraints.REMAINDER;
         gbCon.weighty = 3;
-		SimpleDateFormat sdf = new SimpleDateFormat();
-		sdf = (SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT);
+        SimpleDateFormat sdf = new SimpleDateFormat();
+        sdf = (SimpleDateFormat) DateFormat.getDateInstance(DateFormat.SHORT);
         getContentPane().add(mPanel);
         mPanel.add(areaPanel, BorderLayout.CENTER);
         mPanel.add(buttonsPanel, BorderLayout.SOUTH);
@@ -205,188 +179,191 @@ public class TaskDialog extends JDialog {
         buttonsPanel.add(cancelB, null);
         this.getContentPane().add(dialogTitlePanel, BorderLayout.NORTH);
         dialogTitlePanel.add(header, null);
-        
+
         areaPanel.add(panel_4, BorderLayout.NORTH);
-                panel_4.setLayout(new GridLayout(2, 1, 0, 0));
-                
-                panel_4.add(panel_5);
-                panel_5.setLayout(new GridLayout(3, 1, 0, 0));
-                FlowLayout flowLayout_2 = (FlowLayout) panel_8.getLayout();
-                flowLayout_2.setVgap(10);
-                flowLayout_2.setAlignment(FlowLayout.LEFT);
-                
-                panel_5.add(panel_8);
-                lblTaskName.setVerticalAlignment(SwingConstants.BOTTOM);
-                lblTaskName.setText("Task Name");
-                lblTaskName.setMinimumSize(new Dimension(60, 12));
-                lblTaskName.setMaximumSize(new Dimension(100, 12));
-                
-                panel_8.add(lblTaskName);
-                
-                panel_5.add(panel_6);
-                panel_6.add(todoField);
-                
+        panel_4.setLayout(new GridLayout(2, 1, 0, 0));
+
+        panel_4.add(panel_5);
+        panel_5.setLayout(new GridLayout(3, 1, 0, 0));
+        FlowLayout flowLayout_2 = (FlowLayout) panel_8.getLayout();
+        flowLayout_2.setVgap(10);
+        flowLayout_2.setAlignment(FlowLayout.LEFT);
+
+        panel_5.add(panel_8);
+        lblTaskName.setVerticalAlignment(SwingConstants.BOTTOM);
+        lblTaskName.setText("Task Name");
+        lblTaskName.setMinimumSize(new Dimension(60, 12));
+        lblTaskName.setMaximumSize(new Dimension(100, 12));
+
+        panel_8.add(lblTaskName);
+
+        panel_5.add(panel_6);
+        panel_6.add(todoField);
+
         todoField.setBorder(border8);
         todoField.setPreferredSize(new Dimension(375, 24));
-                FlowLayout flowLayout_1 = (FlowLayout) panel_7.getLayout();
-                flowLayout_1.setVgap(10);
-                flowLayout_1.setAlignment(FlowLayout.LEFT);
-                
-                panel_5.add(panel_7);
-                jLabelDescription.setVerticalAlignment(SwingConstants.BOTTOM);
-                panel_7.add(jLabelDescription);
-                
-                jLabelDescription.setMaximumSize(new Dimension(100, 12));
-                jLabelDescription.setMinimumSize(new Dimension(60, 12));
-                jLabelDescription.setText(Local.getString("Description"));
-        
-                descriptionField.setBorder(border8);
-                descriptionField.setPreferredSize(new Dimension(375, 387)); // 3 additional pixels from 384 so that the last line is not cut off
-                descriptionField.setLineWrap(true);
-                descriptionField.setWrapStyleWord(true);
-                panel_4.add(descriptionScrollPane);
-                descriptionScrollPane.setPreferredSize(new Dimension(375,96));
+        FlowLayout flowLayout_1 = (FlowLayout) panel_7.getLayout();
+        flowLayout_1.setVgap(10);
+        flowLayout_1.setAlignment(FlowLayout.LEFT);
+
+        panel_5.add(panel_7);
+        jLabelDescription.setVerticalAlignment(SwingConstants.BOTTOM);
+        panel_7.add(jLabelDescription);
+
+        jLabelDescription.setMaximumSize(new Dimension(100, 12));
+        jLabelDescription.setMinimumSize(new Dimension(60, 12));
+        jLabelDescription.setText(Local.getString("Description"));
+
+        descriptionField.setBorder(border8);
+        descriptionField.setPreferredSize(new Dimension(375, 387)); // 3 additional pixels from 384 so that the last line is not cut off
+        descriptionField.setLineWrap(true);
+        descriptionField.setWrapStyleWord(true);
+        panel_4.add(descriptionScrollPane);
+        descriptionScrollPane.setPreferredSize(new Dimension(375, 96));
         areaPanel.add(jPanel2, BorderLayout.CENTER);
         jPanel2.add(jPanel6, null);
         jPanel6.setLayout(new GridLayout(0, 1, 0, 0));
 
-        
+
         jPanel6.add(panel_3);
-                panel_3.add(jLabel6);
-        
-                jLabel6.setText(Local.getString("Start date"));
-                //jLabel6.setPreferredSize(new Dimension(60, 16));
-                jLabel6.setMinimumSize(new Dimension(60, 16));
-                jLabel6.setMaximumSize(new Dimension(100, 16));
-                
-                        startDate = new JSpinner(new SpinnerDateModel(new Date(),null,null,Calendar.DAY_OF_WEEK));
-                        panel_3.add(startDate);
-                        
-                                startDate.setBorder(border8);
-                                startDate.setPreferredSize(new Dimension(80, 24));                
-                                // //Added by (jcscoobyrs) on 14-Nov-2003 at 10:45:16 PM
-                                startDate.setEditor(new JSpinner.DateEditor(startDate, sdf.toPattern()));
-                                panel_3.add(setStartDateB);
-                                setStartDateB.setMinimumSize(new Dimension(24, 24));
-                                setStartDateB.setPreferredSize(new Dimension(24, 24));
-                                setStartDateB.setText("");
-                                setStartDateB.setIcon(
-                                    new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
-                                setStartDateB.addActionListener(new java.awt.event.ActionListener() {
-                                    public void actionPerformed(ActionEvent e) {
-                                        setStartDateB_actionPerformed(e);
-                                    }
-                                });
-                                
-                                        startDate.addChangeListener(new ChangeListener() {
-                                            public void stateChanged(ChangeEvent e) {
-                                            	// it's an ugly hack so that the spinner can increase day by day
-                                            	SpinnerDateModel sdm = new SpinnerDateModel((Date)startDate.getModel().getValue(),null,null,Calendar.DAY_OF_WEEK);
-                                            	startDate.setModel(sdm);
-                                
-                                                if (ignoreStartChanged)
-                                                    return;
-                                                ignoreStartChanged = true;
-                                                Date sd = (Date) startDate.getModel().getValue();
-                                                Date ed = (Date) endDate.getModel().getValue();
-                                                if (sd.after(ed) && chkEndDate.isSelected()) {
-                                                    startDate.getModel().setValue(ed);
-                                                    sd = ed;
-                                                }
-                                				if ((startDateMax != null) && sd.after(startDateMax.getDate())) {
-                                					startDate.getModel().setValue(startDateMax.getDate());
-                                                    sd = startDateMax.getDate();
-                                				}
-                                                if ((startDateMin != null) && sd.before(startDateMin.getDate())) {
-                                                    startDate.getModel().setValue(startDateMin.getDate());
-                                                    sd = startDateMin.getDate();
-                                                }
-                                                startCalFrame.cal.set(new CalendarDate(sd));
-                                                ignoreStartChanged = false;
-                                            }
-                                        });
-        endDate = new JSpinner(new SpinnerDateModel(new Date(),null,null,Calendar.DAY_OF_WEEK));
-        endDateRpt = new JSpinner(new SpinnerDateModel(new Date(),null,null,Calendar.DAY_OF_WEEK));
-        
+        panel_3.add(jLabel6);
+
+        jLabel6.setText(Local.getString("Start date"));
+        //jLabel6.setPreferredSize(new Dimension(60, 16));
+        jLabel6.setMinimumSize(new Dimension(60, 16));
+        jLabel6.setMaximumSize(new Dimension(100, 16));
+
+        startDate = new JSpinner(new SpinnerDateModel(new Date(), null, null, Calendar.DAY_OF_WEEK));
+        panel_3.add(startDate);
+
+        startDate.setBorder(border8);
+        startDate.setPreferredSize(new Dimension(80, 24));
+        // //Added by (jcscoobyrs) on 14-Nov-2003 at 10:45:16 PM
+        startDate.setEditor(new JSpinner.DateEditor(startDate, sdf.toPattern()));
+        panel_3.add(setStartDateB);
+        setStartDateB.setMinimumSize(new Dimension(24, 24));
+        setStartDateB.setPreferredSize(new Dimension(24, 24));
+        setStartDateB.setText("");
+        setStartDateB.setIcon(
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
+        setStartDateB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                setStartDateB_actionPerformed(e);
+            }
+        });
+
+        startDate.addChangeListener(new ChangeListener() {
+            public void stateChanged(ChangeEvent e) {
+                // it's an ugly hack so that the spinner can increase day by day
+                SpinnerDateModel sdm = new SpinnerDateModel((Date) startDate.getModel().getValue(), null, null, Calendar.DAY_OF_WEEK);
+                startDate.setModel(sdm);
+
+                if (ignoreStartChanged) {
+                    return;
+                }
+                ignoreStartChanged = true;
+                Date sd = (Date) startDate.getModel().getValue();
+                Date ed = (Date) endDate.getModel().getValue();
+                if (sd.after(ed) && chkEndDate.isSelected()) {
+                    startDate.getModel().setValue(ed);
+                    sd = ed;
+                }
+                if ((startDateMax != null) && sd.after(startDateMax.getDate())) {
+                    startDate.getModel().setValue(startDateMax.getDate());
+                    sd = startDateMax.getDate();
+                }
+                if ((startDateMin != null) && sd.before(startDateMin.getDate())) {
+                    startDate.getModel().setValue(startDateMin.getDate());
+                    sd = startDateMin.getDate();
+                }
+                startCalFrame.cal.set(new CalendarDate(sd));
+                ignoreStartChanged = false;
+            }
+        });
+        endDate = new JSpinner(new SpinnerDateModel(new Date(), null, null, Calendar.DAY_OF_WEEK));
+        endDateRpt = new JSpinner(new SpinnerDateModel(new Date(), null, null, Calendar.DAY_OF_WEEK));
+
         jLabel2.setMaximumSize(new Dimension(270, 16));
         //jLabel2.setPreferredSize(new Dimension(60, 16));
         jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);
         jLabel2.setText(Local.getString("End date"));
         endDate.setBorder(border8);
         endDate.setPreferredSize(new Dimension(80, 24));
-        
-		endDate.setEditor(new JSpinner.DateEditor(endDate, sdf.toPattern()));
+
+        endDate.setEditor(new JSpinner.DateEditor(endDate, sdf.toPattern()));
         chkEndDate = new JCheckBox();
         chkEndDate.setSelected(false);
         chkEndDate.addActionListener(new java.awt.event.ActionListener() {
-        	public void actionPerformed(ActionEvent e) {
-        		chkEndDate_actionPerformed(e);
-        	}
+            public void actionPerformed(ActionEvent e) {
+                chkEndDate_actionPerformed(e);
+            }
         });
         chkEndDateRpt.addActionListener(new java.awt.event.ActionListener() {
-        	public void actionPerformed(ActionEvent e) {
-        		chkEndDateRpt_actionPerformed(e);
-        	}
+            public void actionPerformed(ActionEvent e) {
+                chkEndDateRpt_actionPerformed(e);
+            }
         });
         endDateRpt.setEditor(new JSpinner.DateEditor(endDateRpt, sdf.toPattern()));
         chkEndDate_actionPerformed(null);
-		chkEndDateRpt_actionPerformed(null);
+        chkEndDateRpt_actionPerformed(null);
         endDate.addChangeListener(new ChangeListener() {
             public void stateChanged(ChangeEvent e) {
-            	// it's an ugly hack so that the spinner can increase day by day
-            	SpinnerDateModel sdm = new SpinnerDateModel((Date)endDate.getModel().getValue(),null,null,Calendar.DAY_OF_WEEK);
-            	endDate.setModel(sdm);
-            	
-                if (ignoreEndChanged)
+                // it's an ugly hack so that the spinner can increase day by day
+                SpinnerDateModel sdm = new SpinnerDateModel((Date) endDate.getModel().getValue(), null, null, Calendar.DAY_OF_WEEK);
+                endDate.setModel(sdm);
+
+                if (ignoreEndChanged) {
                     return;
+                }
                 ignoreEndChanged = true;
                 Date sd = (Date) startDate.getModel().getValue();
-                Date ed = (Date) endDate.getModel().getValue();				
-				if (ed.before(sd)) {
+                Date ed = (Date) endDate.getModel().getValue();
+                if (ed.before(sd)) {
                     endDate.getModel().setValue(ed);
                     ed = sd;
                 }
-				if ((endDateMax != null) && ed.after(endDateMax.getDate())) {
-					endDate.getModel().setValue(endDateMax.getDate());
+                if ((endDateMax != null) && ed.after(endDateMax.getDate())) {
+                    endDate.getModel().setValue(endDateMax.getDate());
                     ed = endDateMax.getDate();
-				}
+                }
                 if ((endDateMin != null) && ed.before(endDateMin.getDate())) {
                     endDate.getModel().setValue(endDateMin.getDate());
                     ed = endDateMin.getDate();
                 }
-				endCalFrame.cal.set(new CalendarDate(ed));
+                endCalFrame.cal.set(new CalendarDate(ed));
                 ignoreEndChanged = false;
             }
         });
-        
+
         endDateRpt.addChangeListener(new ChangeListener() {
             public void stateChanged(ChangeEvent e) {
-            	// it's an ugly hack so that the spinner can increase day by day
-            	SpinnerDateModel sdm = new SpinnerDateModel((Date)endDateRpt.getModel().getValue(),null,null,Calendar.DAY_OF_WEEK);
-            	endDateRpt.setModel(sdm);
-            	
-                if (ignoreRptEndChanged )
+                // it's an ugly hack so that the spinner can increase day by day
+                SpinnerDateModel sdm = new SpinnerDateModel((Date) endDateRpt.getModel().getValue(), null, null, Calendar.DAY_OF_WEEK);
+                endDateRpt.setModel(sdm);
+
+                if (ignoreRptEndChanged) {
                     return;
-                ignoreRptEndChanged  = true;
+                }
+                ignoreRptEndChanged = true;
                 Date sd = (Date) startDate.getModel().getValue();
-                Date ed = (Date) endDateRpt.getModel().getValue();				
-				if (ed.before(sd)) {
+                Date ed = (Date) endDateRpt.getModel().getValue();
+                if (ed.before(sd)) {
                     endDateRpt.getModel().setValue(ed);
                     ed = sd;
                 }
-				if ((startDateMin != null) && ed.before(startDateMin.getDate())) {
+                if ((startDateMin != null) && ed.before(startDateMin.getDate())) {
                     startDate.getModel().setValue(startDateMin.getDate());
                     ed = startDateMin.getDate();
                 }
-				endCalRptFrame.cal.set(new CalendarDate(ed));
-				ignoreRptEndChanged  = false;
+                endCalRptFrame.cal.set(new CalendarDate(ed));
+                ignoreRptEndChanged = false;
             }
         });
         setEndDateB.setMinimumSize(new Dimension(24, 24));
         setEndDateB.setPreferredSize(new Dimension(24, 24));
         setEndDateB.setText("");
         setEndDateB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
         setEndDateB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 setEndDateB_actionPerformed(e);
@@ -396,81 +373,81 @@ public class TaskDialog extends JDialog {
         setEndDateRptB.setPreferredSize(new Dimension(24, 24));
         setEndDateRptB.setText("");
         setEndDateRptB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/calendar.png")));
         setEndDateRptB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
-            	setEndDateRptB_actionPerformed(e);
+                setEndDateRptB_actionPerformed(e);
             }
         });
-		jPanel6.add(jPanel1);
-		jPanel1.add(chkEndDate, null);
+        jPanel6.add(jPanel1);
+        jPanel1.add(chkEndDate, null);
         jPanel1.add(jLabel2, null);
         jPanel1.add(endDate, null);
         jPanel1.add(setEndDateB, null);
-        
+
 
         jPanel2.add(jPanelRepeat, null);
         jPanelRepeat.setLayout(new GridLayout(0, 1, 0, 0));
-        
+
         jPanelRepeat.add(panel_2);
         lblTaskTrackingTag.setText("Task Tracking Tag:");
         lblTaskTrackingTag.setMinimumSize(new Dimension(60, 16));
         lblTaskTrackingTag.setMaximumSize(new Dimension(100, 16));
-        
+
         panel_2.add(lblTaskTrackingTag);
         txtTag.setPreferredSize(new Dimension(90, 24));
         txtTag.setBorder(border8);
-        
+
         panel_2.add(txtTag);
-        
+
         jPanelRepeat.add(panel_10);
         panel_10.add(cbRepeatType);
         cbRepeatType.setSelectedIndex(0);
         cbRepeatType.setEnabled(true);
         cbRepeatType.addActionListener(new java.awt.event.ActionListener() {
-        	public void actionPerformed(ActionEvent e) {
-        		cmboRepeatType_actionPerformed(e);
-        	}
+            public void actionPerformed(ActionEvent e) {
+                cmboRepeatType_actionPerformed(e);
+            }
         });
-        
+
         jPanel2.add(panel_1);
-                panel_1.setLayout(new GridLayout(2, 1, 0, 0));
-                
-                panel_1.add(panel_9);
-                panel_9.add(jLabelEffort);
-        
-                jLabelEffort.setMaximumSize(new Dimension(100, 16));
-                jLabelEffort.setMinimumSize(new Dimension(60, 16));
-                jLabelEffort.setText(Local.getString("Est Effort(hrs)"));
-                panel_9.add(txtEffort);
-                txtEffort.setBorder(border8);
-                txtEffort.setPreferredSize(new Dimension(30, 24));
-                panel_9.add(jLabelProgress);
-                
-                jLabelProgress.setText("Progress(hrs)");
-                panel_9.add(progress);
-                
-                setNotifB.setText(Local.getString("Set notification"));
-                setNotifB.setIcon(
-                    new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/notify.png")));
-                setNotifB.addActionListener(new java.awt.event.ActionListener() {
-                    public void actionPerformed(ActionEvent e) {
-                        setNotifB_actionPerformed(e);
-                    }
-                });
-                
-                        priorityCB.setFont(new java.awt.Font("Dialog", 0, 11));
-                        panel_1.add(jPanel4);
-                        jPanel4.add(jLabel7);
-                        jLabel7.setMaximumSize(new Dimension(100, 16));
-                        jLabel7.setMinimumSize(new Dimension(60, 16));
-                        //jLabel7.setPreferredSize(new Dimension(60, 16));
-                        jLabel7.setText(Local.getString("Priority"));
-                        jPanel4.add(priorityCB, null);
-                        
-                        jPanel4.add(setNotifB, null);
-                        
-                        priorityCB.setSelectedItem(Local.getString("Normal"));
+        panel_1.setLayout(new GridLayout(2, 1, 0, 0));
+
+        panel_1.add(panel_9);
+        panel_9.add(jLabelEffort);
+
+        jLabelEffort.setMaximumSize(new Dimension(100, 16));
+        jLabelEffort.setMinimumSize(new Dimension(60, 16));
+        jLabelEffort.setText(Local.getString("Est Effort(hrs)"));
+        panel_9.add(txtEffort);
+        txtEffort.setBorder(border8);
+        txtEffort.setPreferredSize(new Dimension(30, 24));
+        panel_9.add(jLabelProgress);
+
+        jLabelProgress.setText("Progress(hrs)");
+        panel_9.add(progress);
+
+        setNotifB.setText(Local.getString("Set notification"));
+        setNotifB.setIcon(
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/notify.png")));
+        setNotifB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                setNotifB_actionPerformed(e);
+            }
+        });
+
+        priorityCB.setFont(new java.awt.Font("Dialog", 0, 11));
+        panel_1.add(jPanel4);
+        jPanel4.add(jLabel7);
+        jLabel7.setMaximumSize(new Dimension(100, 16));
+        jLabel7.setMinimumSize(new Dimension(60, 16));
+        //jLabel7.setPreferredSize(new Dimension(60, 16));
+        jLabel7.setText(Local.getString("Priority"));
+        jPanel4.add(priorityCB, null);
+
+        jPanel4.add(setNotifB, null);
+
+        priorityCB.setSelectedItem(Local.getString("Normal"));
         jPanel2.add(jPanelRepeatToggle);
         jPanelRepeatToggle.setEnabled(false);
         chkWorkingDays.setHorizontalAlignment(SwingConstants.CENTER);
@@ -482,112 +459,118 @@ public class TaskDialog extends JDialog {
         chkEndDateRpt.setSelected(false);
         chkEndDateRpt.setEnabled(false);
         jPanelRepeatToggle.add(panel);
-        
+
         panel.add(chkEndDateRpt);
         lblEndRepeat.setText("End Repeat");
         lblEndRepeat.setMaximumSize(new Dimension(270, 16));
         lblEndRepeat.setHorizontalAlignment(SwingConstants.RIGHT);
         lblEndRepeat.setEnabled(false);
-        
+
         panel.add(lblEndRepeat);
         endDateRpt.setPreferredSize(new Dimension(80, 24));
         endDateRpt.setBorder(border8);
         endDateRpt.setEnabled(false);
-        
-        panel.add(endDateRpt);         
+
+        panel.add(endDateRpt);
         setEndDateRptB.setText("");
         setEndDateRptB.setPreferredSize(new Dimension(24, 24));
         setEndDateRptB.setMinimumSize(new Dimension(24, 24));
         setEndDateRptB.setEnabled(false);
-        
+
         panel.add(setEndDateRptB);
         startCalFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreStartChanged)
+                if (ignoreStartChanged) {
                     return;
+                }
                 startDate.getModel().setValue(startCalFrame.cal.get().getCalendar().getTime());
             }
         });
-        
+
         endCalFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreEndChanged)
+                if (ignoreEndChanged) {
                     return;
+                }
                 endDate.getModel().setValue(endCalFrame.cal.get().getCalendar().getTime());
             }
         });
-        
+
         endCalRptFrame.cal.addSelectionListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                if (ignoreEndChanged)
+                if (ignoreEndChanged) {
                     return;
+                }
                 endDateRpt.getModel().setValue(endCalRptFrame.cal.get().getCalendar().getTime());
             }
         });
     }
 
-	public void setStartDate(CalendarDate d) {
-		this.startDate.getModel().setValue(d.getDate());
-	}
-	
-	public void setEndDate(CalendarDate d) {		
-		if (d != null) 
-			this.endDate.getModel().setValue(d.getDate());
-	}
-	
-	public void setStartDateLimit(CalendarDate min, CalendarDate max) {
-		this.startDateMin = min;
-		this.startDateMax = max;
-	}
-	
-	public void setEndDateLimit(CalendarDate min, CalendarDate max) {
-		this.endDateMin = min;
-		this.endDateMax = max;
-	}
-	
+    public void setStartDate(CalendarDate d) {
+        this.startDate.getModel().setValue(d.getDate());
+    }
+
+    public void setEndDate(CalendarDate d) {
+        if (d != null) {
+            this.endDate.getModel().setValue(d.getDate());
+        }
+    }
+
+    public void setStartDateLimit(CalendarDate min, CalendarDate max) {
+        this.startDateMin = min;
+        this.startDateMax = max;
+    }
+
+    public void setEndDateLimit(CalendarDate min, CalendarDate max) {
+        this.endDateMin = min;
+        this.endDateMax = max;
+    }
+
     void okB_actionPerformed(ActionEvent e) {
-	CANCELLED = false;
+        CANCELLED = false;
         this.dispose();
     }
 
     void cancelB_actionPerformed(ActionEvent e) {
         this.dispose();
     }
-	
+
     void chkEndDate_actionPerformed(ActionEvent e) {
-		endDate.setEnabled(chkEndDate.isSelected());
-		setEndDateB.setEnabled(chkEndDate.isSelected());
-		jLabel2.setEnabled(chkEndDate.isSelected());
-		if(chkEndDate.isSelected()) {
-			Date currentEndDate = (Date) endDate.getModel().getValue();
-			Date currentStartDate = (Date) startDate.getModel().getValue();
-			if(currentEndDate.getTime() < currentStartDate.getTime()) {
-				endDate.getModel().setValue(currentStartDate);
-			}
-		}
-	}
+        endDate.setEnabled(chkEndDate.isSelected());
+        setEndDateB.setEnabled(chkEndDate.isSelected());
+        jLabel2.setEnabled(chkEndDate.isSelected());
+        if (chkEndDate.isSelected()) {
+            Date currentEndDate = (Date) endDate.getModel().getValue();
+            Date currentStartDate = (Date) startDate.getModel().getValue();
+            if (currentEndDate.getTime() < currentStartDate.getTime()) {
+                endDate.getModel().setValue(currentStartDate);
+            }
+        }
+    }
+
     void chkEndDateRpt_actionPerformed(ActionEvent e) {
-		endDateRpt.setEnabled(chkEndDateRpt.isSelected());
-		setEndDateRptB.setEnabled(chkEndDateRpt.isSelected());
-		lblEndRepeat.setEnabled(chkEndDateRpt.isSelected());
-		if(chkEndDateRpt.isSelected()) {
-			Date currentEndDate = (Date) endDate.getModel().getValue();
-			Date currentStartDate = (Date) startDate.getModel().getValue();
-			if(currentEndDate.getTime() < currentStartDate.getTime()) {
-				endDate.getModel().setValue(currentStartDate);
-			}
-		}
-	}
-	void cmboRepeatType_actionPerformed(ActionEvent e) {
-		jPanelRepeatToggle.setEnabled(cbRepeatType.getSelectedIndex()!=0);
-		chkWorkingDays.setEnabled(cbRepeatType.getSelectedIndex()!=0);
-		chkEndDateRpt.setEnabled(cbRepeatType.getSelectedIndex()!=0);
-	}
-
-	
+        endDateRpt.setEnabled(chkEndDateRpt.isSelected());
+        setEndDateRptB.setEnabled(chkEndDateRpt.isSelected());
+        lblEndRepeat.setEnabled(chkEndDateRpt.isSelected());
+        if (chkEndDateRpt.isSelected()) {
+            Date currentEndDate = (Date) endDate.getModel().getValue();
+            Date currentStartDate = (Date) startDate.getModel().getValue();
+            if (currentEndDate.getTime() < currentStartDate.getTime()) {
+                endDate.getModel().setValue(currentStartDate);
+            }
+        }
+    }
+
+    void cmboRepeatType_actionPerformed(ActionEvent e) {
+        jPanelRepeatToggle.setEnabled(cbRepeatType.getSelectedIndex() != 0);
+        chkWorkingDays.setEnabled(cbRepeatType.getSelectedIndex() != 0);
+        chkEndDateRpt.setEnabled(cbRepeatType.getSelectedIndex() != 0);
+    }
+
+
     void setStartDateB_actionPerformed(ActionEvent e) {
-    	startCalFrame.hide();
-    	startCalFrame.setLocation(setStartDateB.getLocation());
+        startCalFrame.hide();
+        startCalFrame.setLocation(setStartDateB.getLocation());
         startCalFrame.setSize(200, 200);
         this.getLayeredPane().add(startCalFrame);
         startCalFrame.show();
@@ -595,24 +578,24 @@ public class TaskDialog extends JDialog {
     }
 
     void setEndDateB_actionPerformed(ActionEvent e) {
-    	endCalFrame.hide();
-    	endCalFrame.setLocation(setEndDateB.getLocation());
+        endCalFrame.hide();
+        endCalFrame.setLocation(setEndDateB.getLocation());
         endCalFrame.setSize(200, 200);
         this.getLayeredPane().add(endCalFrame);
         endCalFrame.show();
     }
-    
+
     void setEndDateRptB_actionPerformed(ActionEvent e) {
-    	endCalRptFrame.hide();
-    	endCalRptFrame.setLocation(setEndDateRptB.getLocation());
-    	endCalRptFrame.setSize(200, 200);
+        endCalRptFrame.hide();
+        endCalRptFrame.setLocation(setEndDateRptB.getLocation());
+        endCalRptFrame.setSize(200, 200);
         this.getLayeredPane().add(endCalRptFrame);
         endCalRptFrame.show();
     }
-    
+
     void setNotifB_actionPerformed(ActionEvent e) {
-    	((AppFrame)App.getFrame()).workPanel.dailyItemsPanel.eventsPanel.newEventB_actionPerformed(e, 
-			this.todoField.getText(), (Date)startDate.getModel().getValue(),(Date)endDate.getModel().getValue());
+        ((AppFrame) App.getFrame()).workPanel.dailyItemsPanel.eventsPanel.newEventB_actionPerformed(e,
+                this.todoField.getText(), (Date) startDate.getModel().getValue(), (Date) endDate.getModel().getValue());
     }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/TaskPanel.java b/src/net/sf/memoranda/ui/TaskPanel.java
index f21f955..e292c7e 100755
--- a/src/net/sf/memoranda/ui/TaskPanel.java
+++ b/src/net/sf/memoranda/ui/TaskPanel.java
@@ -1,39 +1,6 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Point;
-import java.awt.event.ActionEvent;
-import java.awt.event.KeyEvent;
-import java.awt.event.KeyListener;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.util.Date;
-import java.util.Stack;
-import java.util.Vector;
-
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JCheckBoxMenuItem;
-import javax.swing.JMenuItem;
-import javax.swing.JOptionPane;
-import javax.swing.JPanel;
-import javax.swing.JPopupMenu;
-import javax.swing.JScrollPane;
-import javax.swing.JToolBar;
-import javax.swing.event.ListSelectionEvent;
-import javax.swing.event.ListSelectionListener;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.History;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectListener;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.Task;
-import net.sf.memoranda.TaskList;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
@@ -42,6 +9,15 @@ import net.sf.memoranda.util.CurrentStorage;
 import net.sf.memoranda.util.Local;
 import net.sf.memoranda.util.Util;
 
+import javax.swing.*;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import java.awt.*;
+import java.awt.event.*;
+import java.util.Date;
+import java.util.Stack;
+import java.util.Vector;
+
 /*$Id: TaskPanel.java,v 1.27 2007/01/17 20:49:12 killerjoe Exp $*/
 public class TaskPanel extends JPanel {
     BorderLayout borderLayout1 = new BorderLayout();
@@ -53,31 +29,31 @@ public class TaskPanel extends JPanel {
     JButton editTaskB = new JButton();
     JButton removeTaskB = new JButton();
     JButton completeTaskB = new JButton();
-    
-	JCheckBoxMenuItem ppShowActiveOnlyChB = new JCheckBoxMenuItem();
-		
+
+    JCheckBoxMenuItem ppShowActiveOnlyChB = new JCheckBoxMenuItem();
+
     JScrollPane scrollPane = new JScrollPane();
     TaskTable taskTable = new TaskTable();
-	JMenuItem ppEditTask = new JMenuItem();
-	JPopupMenu taskPPMenu = new JPopupMenu();
-	JMenuItem ppRemoveTask = new JMenuItem();
-	JMenuItem ppNewTask = new JMenuItem();
-	JMenuItem ppCompleteTask = new JMenuItem();
-	//JMenuItem ppSubTasks = new JMenuItem();
-	//JMenuItem ppParentTask = new JMenuItem();
-	JMenuItem ppAddSubTask = new JMenuItem();
-	JMenuItem ppCalcTask = new JMenuItem();
-	DailyItemsPanel parentPanel = null;
+    JMenuItem ppEditTask = new JMenuItem();
+    JPopupMenu taskPPMenu = new JPopupMenu();
+    JMenuItem ppRemoveTask = new JMenuItem();
+    JMenuItem ppNewTask = new JMenuItem();
+    JMenuItem ppCompleteTask = new JMenuItem();
+    //JMenuItem ppSubTasks = new JMenuItem();
+    //JMenuItem ppParentTask = new JMenuItem();
+    JMenuItem ppAddSubTask = new JMenuItem();
+    JMenuItem ppCalcTask = new JMenuItem();
+    DailyItemsPanel parentPanel = null;
 
     public TaskPanel(DailyItemsPanel _parentPanel) {
         try {
             parentPanel = _parentPanel;
             jbInit();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
+
     void jbInit() throws Exception {
         tasksToolBar.setFloatable(false);
 
@@ -102,7 +78,7 @@ public class TaskPanel extends JPanel {
         historyForwardB.setText("");
 
         newTaskB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
         newTaskB.setEnabled(true);
         newTaskB.setMaximumSize(new Dimension(24, 24));
         newTaskB.setMinimumSize(new Dimension(24, 24));
@@ -118,9 +94,9 @@ public class TaskPanel extends JPanel {
             }
         });
         newTaskB.setBorderPainted(false);
-        
+
         subTaskB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new_sub.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new_sub.png")));
         subTaskB.setEnabled(true);
         subTaskB.setMaximumSize(new Dimension(24, 24));
         subTaskB.setMinimumSize(new Dimension(24, 24));
@@ -147,9 +123,9 @@ public class TaskPanel extends JPanel {
         editTaskB.setToolTipText(Local.getString("Edit task"));
         editTaskB.setMinimumSize(new Dimension(24, 24));
         editTaskB.setMaximumSize(new Dimension(24, 24));
-//        editTaskB.setEnabled(true);
+        //        editTaskB.setEnabled(true);
         editTaskB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_edit.png")));
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_edit.png")));
 
         removeTaskB.setBorderPainted(false);
         removeTaskB.setFocusable(false);
@@ -164,8 +140,8 @@ public class TaskPanel extends JPanel {
         removeTaskB.setMinimumSize(new Dimension(24, 24));
         removeTaskB.setMaximumSize(new Dimension(24, 24));
         removeTaskB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_remove.png")));
-        
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_remove.png")));
+
         completeTaskB.setBorderPainted(false);
         completeTaskB.setFocusable(false);
         completeTaskB.addActionListener(new java.awt.event.ActionListener() {
@@ -179,58 +155,58 @@ public class TaskPanel extends JPanel {
         completeTaskB.setMinimumSize(new Dimension(24, 24));
         completeTaskB.setMaximumSize(new Dimension(24, 24));
         completeTaskB.setIcon(
-            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_complete.png")));
-
-		// added by rawsushi
-//		showActiveOnly.setBorderPainted(false);
-//		showActiveOnly.setFocusable(false);
-//		showActiveOnly.addActionListener(new java.awt.event.ActionListener() {
-//			public void actionPerformed(ActionEvent e) {
-//				toggleShowActiveOnly_actionPerformed(e);
-//			}
-//		});
-//		showActiveOnly.setPreferredSize(new Dimension(24, 24));
-//		showActiveOnly.setRequestFocusEnabled(false);
-//		if (taskTable.isShowActiveOnly()) {
-//			showActiveOnly.setToolTipText(Local.getString("Show All"));			
-//		}
-//		else {
-//			showActiveOnly.setToolTipText(Local.getString("Show Active Only"));			
-//		}
-//		showActiveOnly.setMinimumSize(new Dimension(24, 24));
-//		showActiveOnly.setMaximumSize(new Dimension(24, 24));
-//		showActiveOnly.setIcon(
-//			new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_remove.png")));
-		// added by rawsushi
-		
-		ppShowActiveOnlyChB.setFont(new java.awt.Font("Dialog", 1, 11));
-		ppShowActiveOnlyChB.setText(
-			Local.getString("Show Active only"));
-		ppShowActiveOnlyChB
-			.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				toggleShowActiveOnly_actionPerformed(e);
-			}
-		});		
-		boolean isShao =
-			(Context.get("SHOW_ACTIVE_TASKS_ONLY") != null)
-				&& (Context.get("SHOW_ACTIVE_TASKS_ONLY").equals("true"));
-		ppShowActiveOnlyChB.setSelected(isShao);
-		toggleShowActiveOnly_actionPerformed(null);
-
-		/*showActiveOnly.setPreferredSize(new Dimension(24, 24));
-		showActiveOnly.setRequestFocusEnabled(false);
-		if (taskTable.isShowActiveOnly()) {
-			showActiveOnly.setToolTipText(Local.getString("Show All"));			
-		}
-		else {
-			showActiveOnly.setToolTipText(Local.getString("Show Active Only"));			
-		}
-		showActiveOnly.setMinimumSize(new Dimension(24, 24));
-		showActiveOnly.setMaximumSize(new Dimension(24, 24));
-		showActiveOnly.setIcon(
-			new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_active.png")));*/
-		// added by rawsushi
+                new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_complete.png")));
+
+        // added by rawsushi
+        //        showActiveOnly.setBorderPainted(false);
+        //        showActiveOnly.setFocusable(false);
+        //        showActiveOnly.addActionListener(new java.awt.event.ActionListener() {
+        //            public void actionPerformed(ActionEvent e) {
+        //                toggleShowActiveOnly_actionPerformed(e);
+        //            }
+        //        });
+        //        showActiveOnly.setPreferredSize(new Dimension(24, 24));
+        //        showActiveOnly.setRequestFocusEnabled(false);
+        //        if (taskTable.isShowActiveOnly()) {
+        //            showActiveOnly.setToolTipText(Local.getString("Show All"));
+        //        }
+        //        else {
+        //            showActiveOnly.setToolTipText(Local.getString("Show Active Only"));
+        //        }
+        //        showActiveOnly.setMinimumSize(new Dimension(24, 24));
+        //        showActiveOnly.setMaximumSize(new Dimension(24, 24));
+        //        showActiveOnly.setIcon(
+        //            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_remove.png")));
+        // added by rawsushi
+
+        ppShowActiveOnlyChB.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppShowActiveOnlyChB.setText(
+                Local.getString("Show Active only"));
+        ppShowActiveOnlyChB
+                .addActionListener(new java.awt.event.ActionListener() {
+                    public void actionPerformed(ActionEvent e) {
+                        toggleShowActiveOnly_actionPerformed(e);
+                    }
+                });
+        boolean isShao =
+                (Context.get("SHOW_ACTIVE_TASKS_ONLY") != null)
+                        && (Context.get("SHOW_ACTIVE_TASKS_ONLY").equals("true"));
+        ppShowActiveOnlyChB.setSelected(isShao);
+        toggleShowActiveOnly_actionPerformed(null);
+
+        /*showActiveOnly.setPreferredSize(new Dimension(24, 24));
+        showActiveOnly.setRequestFocusEnabled(false);
+        if (taskTable.isShowActiveOnly()) {
+            showActiveOnly.setToolTipText(Local.getString("Show All"));            
+        }
+        else {
+            showActiveOnly.setToolTipText(Local.getString("Show Active Only"));            
+        }
+        showActiveOnly.setMinimumSize(new Dimension(24, 24));
+        showActiveOnly.setMaximumSize(new Dimension(24, 24));
+        showActiveOnly.setIcon(
+            new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_active.png")));*/
+        // added by rawsushi
 
 
         this.setLayout(borderLayout1);
@@ -238,82 +214,82 @@ public class TaskPanel extends JPanel {
         /*taskTable.setMaximumSize(new Dimension(32767, 32767));
         taskTable.setRowHeight(24);*/
         ppEditTask.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppEditTask.setText(Local.getString("Edit task")+"...");
-    ppEditTask.addActionListener(new java.awt.event.ActionListener() {
+        ppEditTask.setText(Local.getString("Edit task") + "...");
+        ppEditTask.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppEditTask_actionPerformed(e);
             }
         });
-    ppEditTask.setEnabled(false);
-    ppEditTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_edit.png")));
-    taskPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
-    ppRemoveTask.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppRemoveTask.setText(Local.getString("Remove task"));
-    ppRemoveTask.addActionListener(new java.awt.event.ActionListener() {
+        ppEditTask.setEnabled(false);
+        ppEditTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_edit.png")));
+        taskPPMenu.setFont(new java.awt.Font("Dialog", 1, 10));
+        ppRemoveTask.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppRemoveTask.setText(Local.getString("Remove task"));
+        ppRemoveTask.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppRemoveTask_actionPerformed(e);
             }
         });
-    ppRemoveTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_remove.png")));
-    ppRemoveTask.setEnabled(false);
-    ppNewTask.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppNewTask.setText(Local.getString("New task")+"...");
-    ppNewTask.addActionListener(new java.awt.event.ActionListener() {
+        ppRemoveTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_remove.png")));
+        ppRemoveTask.setEnabled(false);
+        ppNewTask.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppNewTask.setText(Local.getString("New task") + "...");
+        ppNewTask.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppNewTask_actionPerformed(e);
             }
         });
-    ppNewTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
+        ppNewTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
 
-    ppAddSubTask.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppAddSubTask.setText(Local.getString("Add subtask"));
-    ppAddSubTask.addActionListener(new java.awt.event.ActionListener() {
+        ppAddSubTask.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppAddSubTask.setText(Local.getString("Add subtask"));
+        ppAddSubTask.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 ppAddSubTask_actionPerformed(e);
             }
         });
-    ppAddSubTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new_sub.png")));
+        ppAddSubTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new_sub.png")));
+
+        /*
+        ppSubTasks.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppSubTasks.setText(Local.getString("List sub tasks"));
+        ppSubTasks.addActionListener(new java.awt.event.ActionListener() {
+                public void actionPerformed(ActionEvent e) {
+                    ppListSubTasks_actionPerformed(e);
+                }
+            });
+        ppSubTasks.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
+        ppParentTask.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppParentTask.setText(Local.getString("Parent Task"));
+        ppParentTask.addActionListener(new java.awt.event.ActionListener() {
+                public void actionPerformed(ActionEvent e) {
+                    ppParentTask_actionPerformed(e);
+                }
+            });
+        ppParentTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
+        */
 
-    /*
-    ppSubTasks.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppSubTasks.setText(Local.getString("List sub tasks"));
-    ppSubTasks.addActionListener(new java.awt.event.ActionListener() {
+        ppCompleteTask.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppCompleteTask.setText(Local.getString("Complete task"));
+        ppCompleteTask.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                ppListSubTasks_actionPerformed(e);
+                ppCompleteTask_actionPerformed(e);
             }
         });
-    ppSubTasks.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
-    ppParentTask.setFont(new java.awt.Font("Dialog", 1, 11));
-    ppParentTask.setText(Local.getString("Parent Task"));
-    ppParentTask.addActionListener(new java.awt.event.ActionListener() {
+        ppCompleteTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_complete.png")));
+        ppCompleteTask.setEnabled(false);
+
+        ppCalcTask.setFont(new java.awt.Font("Dialog", 1, 11));
+        ppCalcTask.setText(Local.getString("Calculate task data"));
+        ppCalcTask.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
-                ppParentTask_actionPerformed(e);
+                ppCalcTask_actionPerformed(e);
             }
         });
-    ppParentTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_new.png")));
-    */
-
-	ppCompleteTask.setFont(new java.awt.Font("Dialog", 1, 11));
-	ppCompleteTask.setText(Local.getString("Complete task"));
-	ppCompleteTask.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppCompleteTask_actionPerformed(e);
-			}
-		});
-	ppCompleteTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_complete.png")));
-	ppCompleteTask.setEnabled(false);
-
-	ppCalcTask.setFont(new java.awt.Font("Dialog", 1, 11));
-	ppCalcTask.setText(Local.getString("Calculate task data"));
-	ppCalcTask.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				ppCalcTask_actionPerformed(e);
-			}
-		});
-	ppCalcTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_complete.png")));
-	ppCalcTask.setEnabled(false);
-
-    scrollPane.getViewport().add(taskTable, null);
+        ppCalcTask.setIcon(new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/todo_complete.png")));
+        ppCalcTask.setEnabled(false);
+
+        scrollPane.getViewport().add(taskTable, null);
         this.add(scrollPane, BorderLayout.CENTER);
         tasksToolBar.add(historyBackB, null);
         tasksToolBar.add(historyForwardB, null);
@@ -326,8 +302,8 @@ public class TaskPanel extends JPanel {
         tasksToolBar.add(editTaskB, null);
         tasksToolBar.add(completeTaskB, null);
 
-		//tasksToolBar.add(showActiveOnly, null);
-        
+        //tasksToolBar.add(showActiveOnly, null);
+
 
         this.add(tasksToolBar, BorderLayout.NORTH);
 
@@ -336,7 +312,6 @@ public class TaskPanel extends JPanel {
         taskTable.addMouseListener(ppListener);
 
 
-
         CurrentDate.addDateListener(new DateListener() {
             public void dateChange(CalendarDate d) {
                 newTaskB.setEnabled(d.inPeriod(CurrentProject.get().getStartDate(), CurrentProject.get().getEndDate()));
@@ -345,42 +320,44 @@ public class TaskPanel extends JPanel {
         CurrentProject.addProjectListener(new ProjectListener() {
             public void projectChange(Project p, NoteList nl, TaskList tl, ResourcesList rl) {
                 newTaskB.setEnabled(
-                    CurrentDate.get().inPeriod(p.getStartDate(), p.getEndDate()));
+                        CurrentDate.get().inPeriod(p.getStartDate(), p.getEndDate()));
             }
+
             public void projectWasChanged() {
-            	//taskTable.setCurrentRootTask(null); //XXX
+                //taskTable.setCurrentRootTask(null); //XXX
             }
         });
         taskTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
             public void valueChanged(ListSelectionEvent e) {
-                boolean enbl = (taskTable.getRowCount() > 0)&&(taskTable.getSelectedRow() > -1);
-                editTaskB.setEnabled(enbl);ppEditTask.setEnabled(enbl);
-                removeTaskB.setEnabled(enbl);ppRemoveTask.setEnabled(enbl);
-				
-				ppCompleteTask.setEnabled(enbl);
-				completeTaskB.setEnabled(enbl);
-				ppAddSubTask.setEnabled(enbl);
-				//ppSubTasks.setEnabled(enbl); // default value to be over-written later depending on whether it has sub tasks
-				ppCalcTask.setEnabled(enbl); // default value to be over-written later depending on whether it has sub tasks
-				
-				/*if (taskTable.getCurrentRootTask() == null) {
-					ppParentTask.setEnabled(false);
-				}
-				else {
-					ppParentTask.setEnabled(true);
-				}XXX*/
-				
-                if (enbl) {   
-    				String thisTaskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
-    				
-    				boolean hasSubTasks = CurrentProject.getTaskList().hasSubTasks(thisTaskId);
-    				//ppSubTasks.setEnabled(hasSubTasks);
-    				ppCalcTask.setEnabled(hasSubTasks);
-    				Task t = CurrentProject.getTaskList().getTask(thisTaskId);
+                boolean enbl = (taskTable.getRowCount() > 0) && (taskTable.getSelectedRow() > -1);
+                editTaskB.setEnabled(enbl);
+                ppEditTask.setEnabled(enbl);
+                removeTaskB.setEnabled(enbl);
+                ppRemoveTask.setEnabled(enbl);
+
+                ppCompleteTask.setEnabled(enbl);
+                completeTaskB.setEnabled(enbl);
+                ppAddSubTask.setEnabled(enbl);
+                //ppSubTasks.setEnabled(enbl); // default value to be over-written later depending on whether it has sub tasks
+                ppCalcTask.setEnabled(enbl); // default value to be over-written later depending on whether it has sub tasks
+                
+                /*if (taskTable.getCurrentRootTask() == null) {
+                    ppParentTask.setEnabled(false);
+                }
+                else {
+                    ppParentTask.setEnabled(true);
+                }XXX*/
+
+                if (enbl) {
+                    String thisTaskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
+
+                    boolean hasSubTasks = CurrentProject.getTaskList().hasSubTasks(thisTaskId);
+                    //ppSubTasks.setEnabled(hasSubTasks);
+                    ppCalcTask.setEnabled(hasSubTasks);
+                    Task t = CurrentProject.getTaskList().getTask(thisTaskId);
                     parentPanel.calendar.jnCalendar.renderer.setTask(t);
                     parentPanel.calendar.jnCalendar.updateUI();
-                }    
-                else {
+                } else {
                     parentPanel.calendar.jnCalendar.renderer.setTask(null);
                     parentPanel.calendar.jnCalendar.updateUI();
                 }
@@ -388,67 +365,67 @@ public class TaskPanel extends JPanel {
         });
         editTaskB.setEnabled(false);
         removeTaskB.setEnabled(false);
-		completeTaskB.setEnabled(false);
-		ppAddSubTask.setEnabled(false);
-		//ppSubTasks.setEnabled(false);
-		//ppParentTask.setEnabled(false);
-    taskPPMenu.add(ppEditTask);
-    
-    taskPPMenu.addSeparator();
-    taskPPMenu.add(ppNewTask);
-    taskPPMenu.add(ppAddSubTask);
-    taskPPMenu.add(ppRemoveTask);
-    
-    taskPPMenu.addSeparator();
-	taskPPMenu.add(ppCompleteTask);
-	taskPPMenu.add(ppCalcTask);
-	
-    //taskPPMenu.addSeparator();
-    
-    //taskPPMenu.add(ppSubTasks);
-    
-    //taskPPMenu.addSeparator();
-    //taskPPMenu.add(ppParentTask);
-    
-    taskPPMenu.addSeparator();
-	taskPPMenu.add(ppShowActiveOnlyChB);
-
-	
-		// define key actions in TaskPanel:
-		// - KEY:DELETE => delete tasks (recursivly).
-		// - KEY:INTERT => insert new Subtask if another is selected.
-		// - KEY:INSERT => insert new Task if nothing is selected.
-		// - KEY:SPACE => finish Task.
-		taskTable.addKeyListener(new KeyListener() {
-			public void keyPressed(KeyEvent e){
-				if(taskTable.getSelectedRows().length>0 
-					&& e.getKeyCode()==KeyEvent.VK_DELETE)
-					ppRemoveTask_actionPerformed(null);
-				
-				else if(e.getKeyCode()==KeyEvent.VK_INSERT) {
-					if(taskTable.getSelectedRows().length>0) {
-						ppAddSubTask_actionPerformed(null);
-					}
-					else {
-						ppNewTask_actionPerformed(null);						
-					}
-				}
-				
-				else if(e.getKeyCode()==KeyEvent.VK_SPACE
-						&& taskTable.getSelectedRows().length>0) {
-					ppCompleteTask_actionPerformed(null);
-				}
-			}
-			public void	keyReleased(KeyEvent e){}
-			public void keyTyped(KeyEvent e){} 
-		});	
+        completeTaskB.setEnabled(false);
+        ppAddSubTask.setEnabled(false);
+        //ppSubTasks.setEnabled(false);
+        //ppParentTask.setEnabled(false);
+        taskPPMenu.add(ppEditTask);
+
+        taskPPMenu.addSeparator();
+        taskPPMenu.add(ppNewTask);
+        taskPPMenu.add(ppAddSubTask);
+        taskPPMenu.add(ppRemoveTask);
+
+        taskPPMenu.addSeparator();
+        taskPPMenu.add(ppCompleteTask);
+        taskPPMenu.add(ppCalcTask);
+
+        //taskPPMenu.addSeparator();
+
+        //taskPPMenu.add(ppSubTasks);
+
+        //taskPPMenu.addSeparator();
+        //taskPPMenu.add(ppParentTask);
+
+        taskPPMenu.addSeparator();
+        taskPPMenu.add(ppShowActiveOnlyChB);
+
+
+        // define key actions in TaskPanel:
+        // - KEY:DELETE => delete tasks (recursivly).
+        // - KEY:INTERT => insert new Subtask if another is selected.
+        // - KEY:INSERT => insert new Task if nothing is selected.
+        // - KEY:SPACE => finish Task.
+        taskTable.addKeyListener(new KeyListener() {
+            public void keyPressed(KeyEvent e) {
+                if (taskTable.getSelectedRows().length > 0
+                        && e.getKeyCode() == KeyEvent.VK_DELETE) {
+                    ppRemoveTask_actionPerformed(null);
+                } else if (e.getKeyCode() == KeyEvent.VK_INSERT) {
+                    if (taskTable.getSelectedRows().length > 0) {
+                        ppAddSubTask_actionPerformed(null);
+                    } else {
+                        ppNewTask_actionPerformed(null);
+                    }
+                } else if (e.getKeyCode() == KeyEvent.VK_SPACE
+                        && taskTable.getSelectedRows().length > 0) {
+                    ppCompleteTask_actionPerformed(null);
+                }
+            }
+
+            public void keyReleased(KeyEvent e) {
+            }
+
+            public void keyTyped(KeyEvent e) {
+            }
+        });
 
     }
 
     void editTaskB_actionPerformed(ActionEvent e) {
         Task t =
-            CurrentProject.getTaskList().getTask(
-                taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString());
+                CurrentProject.getTaskList().getTask(
+                        taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString());
         TaskDialog dlg = new TaskDialog(App.getFrame(), Local.getString("Edit task"));
         Dimension frmSize = App.getFrame().getSize();
         Point loc = App.getFrame().getLocation();
@@ -457,33 +434,36 @@ public class TaskPanel extends JPanel {
         dlg.descriptionField.setText(t.getDescription());
         dlg.startDate.getModel().setValue(t.getStartDate().getDate());
         dlg.endDate.getModel().setValue(t.getEndDate().getDate());
-        dlg.priorityCB.setSelectedIndex(t.getPriority());                
+        dlg.priorityCB.setSelectedIndex(t.getPriority());
         dlg.txtEffort.setText(Util.getHoursFromMillis(t.getEffort()));
-	if((t.getStartDate().getDate()).after(t.getEndDate().getDate()))
-		dlg.chkEndDate.setSelected(false);
-	else
-		dlg.chkEndDate.setSelected(true);
-		dlg.progress.setValue(new Integer(t.getProgress()));
- 	dlg.chkEndDate_actionPerformed(null);	
+        if ((t.getStartDate().getDate()).after(t.getEndDate().getDate())) {
+            dlg.chkEndDate.setSelected(false);
+        } else {
+            dlg.chkEndDate.setSelected(true);
+        }
+        dlg.progress.setValue(new Integer(t.getProgress()));
+        dlg.chkEndDate_actionPerformed(null);
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
-//        CalendarDate ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
-         CalendarDate ed;
- 		if(dlg.chkEndDate.isSelected())
- 			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
- 		else
- 			ed = null;
+        //        CalendarDate ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        CalendarDate ed;
+        if (dlg.chkEndDate.isSelected()) {
+            ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        } else {
+            ed = null;
+        }
         t.setStartDate(sd);
         t.setEndDate(ed);
         t.setText(dlg.todoField.getText());
         t.setDescription(dlg.descriptionField.getText());
         t.setPriority(dlg.priorityCB.getSelectedIndex());
         t.setEffort(Util.getMillisFromHours(dlg.txtEffort.getText()));
-        t.setProgress(((Integer)dlg.progress.getValue()).intValue());
-        
-//		CurrentProject.getTaskList().adjustParentTasks(t);
+        t.setProgress(((Integer) dlg.progress.getValue()).intValue());
+
+        //        CurrentProject.getTaskList().adjustParentTasks(t);
 
         CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
         taskTable.tableChanged();
@@ -493,47 +473,48 @@ public class TaskPanel extends JPanel {
 
     void newTaskB_actionPerformed(ActionEvent e) {
         TaskDialog dlg = new TaskDialog(App.getFrame(), Local.getString("New task"));
-        
+
         //XXX String parentTaskId = taskTable.getCurrentRootTask();
-        
+
         Dimension frmSize = App.getFrame().getSize();
         Point loc = App.getFrame().getLocation();
         dlg.startDate.getModel().setValue(CurrentDate.get().getDate());
         dlg.endDate.getModel().setValue(CurrentDate.get().getDate());
         dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
         CalendarDate ed;
- 		if(dlg.chkEndDate.isSelected()) {
- 			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
- 		} else {
- 			ed = null;
- 		}
- 		CalendarDate repEnd;
- 		if(dlg.chkEndDateRpt.isSelected()) {
- 			repEnd = new CalendarDate((Date) dlg.endDateRpt.getModel().getValue());
- 		} else {
- 			repEnd = null;
- 		}
- 		Task newTask;
- 		long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
- 		Stack<Object> taskCreationParams = new Stack<Object>();
-    	taskCreationParams.add(sd);
-    	taskCreationParams.add(ed); 
-    	taskCreationParams.add(dlg.todoField.getText());  
-    	taskCreationParams.add(dlg.priorityCB.getSelectedIndex());
-    	taskCreationParams.add(effort); 
-    	taskCreationParams.add(dlg.descriptionField.getText());
-    	taskCreationParams.add(null);
-    	taskCreationParams.add(dlg.chkWorkingDays.isSelected()); 
-    	taskCreationParams.add(((Integer)dlg.progress.getValue()).intValue());
-    	taskCreationParams.add(dlg.cbRepeatType.getSelectedIndex());
-    	taskCreationParams.add(dlg.chkEndDate.isSelected());
-    	taskCreationParams.add(repEnd);
-    	newTask = CurrentProject.getTaskList().createTask(taskCreationParams);
-    	newTask.setProgress(((Integer)dlg.progress.getValue()).intValue());
+        if (dlg.chkEndDate.isSelected()) {
+            ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        } else {
+            ed = null;
+        }
+        CalendarDate repEnd;
+        if (dlg.chkEndDateRpt.isSelected()) {
+            repEnd = new CalendarDate((Date) dlg.endDateRpt.getModel().getValue());
+        } else {
+            repEnd = null;
+        }
+        Task newTask;
+        long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
+        Stack<Object> taskCreationParams = new Stack<Object>();
+        taskCreationParams.add(sd);
+        taskCreationParams.add(ed);
+        taskCreationParams.add(dlg.todoField.getText());
+        taskCreationParams.add(dlg.priorityCB.getSelectedIndex());
+        taskCreationParams.add(effort);
+        taskCreationParams.add(dlg.descriptionField.getText());
+        taskCreationParams.add(null);
+        taskCreationParams.add(dlg.chkWorkingDays.isSelected());
+        taskCreationParams.add(((Integer) dlg.progress.getValue()).intValue());
+        taskCreationParams.add(dlg.cbRepeatType.getSelectedIndex());
+        taskCreationParams.add(dlg.chkEndDate.isSelected());
+        taskCreationParams.add(repEnd);
+        newTask = CurrentProject.getTaskList().createTask(taskCreationParams);
+        newTask.setProgress(((Integer) dlg.progress.getValue()).intValue());
         CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
         taskTable.tableChanged();
         parentPanel.updateIndicators();
@@ -543,60 +524,63 @@ public class TaskPanel extends JPanel {
     void addSubTask_actionPerformed(ActionEvent e) {
         TaskDialog dlg = new TaskDialog(App.getFrame(), Local.getString("New Task"));
         String parentTaskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
-        
-//        Util.debug("Adding sub task under " + parentTaskId);
-        
+
+        //        Util.debug("Adding sub task under " + parentTaskId);
+
         Dimension frmSize = App.getFrame().getSize();
         Point loc = App.getFrame().getLocation();
-		Task parent = CurrentProject.getTaskList().getTask(parentTaskId);
-		CalendarDate todayD = CurrentDate.get();
-		if (todayD.after(parent.getStartDate()))
-			dlg.setStartDate(todayD);
-		else
-			dlg.setStartDate(parent.getStartDate());
-		if (parent.getEndDate() != null) 
-			dlg.setEndDate(parent.getEndDate());
-		else 
-			dlg.setEndDate(CurrentProject.get().getEndDate());
-		dlg.setStartDateLimit(parent.getStartDate(), parent.getEndDate());
-		dlg.setEndDateLimit(parent.getStartDate(), parent.getEndDate());
+        Task parent = CurrentProject.getTaskList().getTask(parentTaskId);
+        CalendarDate todayD = CurrentDate.get();
+        if (todayD.after(parent.getStartDate())) {
+            dlg.setStartDate(todayD);
+        } else {
+            dlg.setStartDate(parent.getStartDate());
+        }
+        if (parent.getEndDate() != null) {
+            dlg.setEndDate(parent.getEndDate());
+        } else {
+            dlg.setEndDate(CurrentProject.get().getEndDate());
+        }
+        dlg.setStartDateLimit(parent.getStartDate(), parent.getEndDate());
+        dlg.setEndDateLimit(parent.getStartDate(), parent.getEndDate());
         dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
         dlg.setVisible(true);
-        if (dlg.CANCELLED)
+        if (dlg.CANCELLED) {
             return;
+        }
         CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
         CalendarDate ed;
- 		if(dlg.chkEndDate.isSelected()) {
- 			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
- 		} else {
- 			ed = null;
- 		}
- 		CalendarDate repEnd;
- 		if(dlg.chkEndDateRpt.isSelected()) {
- 			repEnd = new CalendarDate((Date) dlg.endDateRpt.getModel().getValue());
- 		} else {
- 			repEnd = null;
- 		}
+        if (dlg.chkEndDate.isSelected()) {
+            ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        } else {
+            ed = null;
+        }
+        CalendarDate repEnd;
+        if (dlg.chkEndDateRpt.isSelected()) {
+            repEnd = new CalendarDate((Date) dlg.endDateRpt.getModel().getValue());
+        } else {
+            repEnd = null;
+        }
         long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
         Task newTask;
         Stack<Object> taskCreationParams = new Stack<Object>();
-    	taskCreationParams.add(sd);
-    	taskCreationParams.add(ed); 
-    	taskCreationParams.add(dlg.todoField.getText());  
-    	taskCreationParams.add(dlg.priorityCB.getSelectedIndex());
-    	taskCreationParams.add(effort); 
-    	taskCreationParams.add(dlg.descriptionField.getText());
-    	taskCreationParams.add(null);
-    	taskCreationParams.add(dlg.chkWorkingDays.isSelected()); 
-    	taskCreationParams.add(((Integer)dlg.progress.getValue()).intValue());
-    	taskCreationParams.add(dlg.cbRepeatType.getSelectedIndex());
-    	taskCreationParams.add(dlg.chkEndDate.isSelected());
-    	taskCreationParams.add(repEnd);
-    	newTask = CurrentProject.getTaskList().createTask(taskCreationParams);
-        newTask.setProgress(((Integer)dlg.progress.getValue()).intValue());
-//		CurrentProject.getTaskList().adjustParentTasks(newTask);
-
-		CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
+        taskCreationParams.add(sd);
+        taskCreationParams.add(ed);
+        taskCreationParams.add(dlg.todoField.getText());
+        taskCreationParams.add(dlg.priorityCB.getSelectedIndex());
+        taskCreationParams.add(effort);
+        taskCreationParams.add(dlg.descriptionField.getText());
+        taskCreationParams.add(null);
+        taskCreationParams.add(dlg.chkWorkingDays.isSelected());
+        taskCreationParams.add(((Integer) dlg.progress.getValue()).intValue());
+        taskCreationParams.add(dlg.cbRepeatType.getSelectedIndex());
+        taskCreationParams.add(dlg.chkEndDate.isSelected());
+        taskCreationParams.add(repEnd);
+        newTask = CurrentProject.getTaskList().createTask(taskCreationParams);
+        newTask.setProgress(((Integer) dlg.progress.getValue()).intValue());
+        //        CurrentProject.getTaskList().adjustParentTasks(newTask);
+
+        CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
         taskTable.tableChanged();
         parentPanel.updateIndicators();
         //taskTable.updateUI();
@@ -606,147 +590,147 @@ public class TaskPanel extends JPanel {
         TaskCalcDialog dlg = new TaskCalcDialog(App.getFrame());
         dlg.pack();
         Task t = CurrentProject.getTaskList().getTask(
-        		taskTable.getModel().getValueAt(taskTable.getSelectedRow(), 
-        				TaskTable.TASK_ID).toString());
-        
+                taskTable.getModel().getValueAt(taskTable.getSelectedRow(),
+                        TaskTable.TASK_ID).toString());
+
         Dimension frmSize = App.getFrame().getSize();
         Point loc = App.getFrame().getLocation();
-        
+
         dlg.setLocation((frmSize.width - dlg.getSize().width) / 2 + loc.x, (frmSize.height - dlg.getSize().height) / 2 + loc.y);
         dlg.setVisible(true);
         if (dlg.CANCELLED) {
-            return;            
+            return;
         }
-        
+
         TaskList tl = CurrentProject.getTaskList();
-        if(dlg.calcEffortChB.isSelected()) {
+        if (dlg.calcEffortChB.isSelected()) {
             t.setEffort(tl.calculateTotalEffortFromSubTasks(t));
         }
-        
-        if(dlg.compactDatesChB.isSelected()) {
+
+        if (dlg.compactDatesChB.isSelected()) {
             t.setStartDate(tl.getEarliestStartDateFromSubTasks(t));
             t.setEndDate(tl.getLatestEndDateFromSubTasks(t));
         }
-        
-        if(dlg.calcCompletionChB.isSelected()) {
+
+        if (dlg.calcCompletionChB.isSelected()) {
             long[] res = tl.calculateCompletionFromSubTasks(t);
-            int thisProgress = (int) Math.round((((double)res[0] / (double)res[1]) * 100));
+            int thisProgress = (int) Math.round((((double) res[0] / (double) res[1]) * 100));
             t.setProgress(thisProgress);
         }
-        
-//        CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
-////        CalendarDate ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
-//          CalendarDate ed;
-// 		if(dlg.chkEndDate.isSelected())
-// 			ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
-// 		else
-// 			ed = new CalendarDate(0,0,0);
-//        long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
-//		Task newTask = CurrentProject.getTaskList().createTask(sd, ed, dlg.todoField.getText(), dlg.priorityCB.getSelectedIndex(),effort, dlg.descriptionField.getText(),parentTaskId);
-//		
-		
+
+        //        CalendarDate sd = new CalendarDate((Date) dlg.startDate.getModel().getValue());
+        ////        CalendarDate ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        //          CalendarDate ed;
+        //         if(dlg.chkEndDate.isSelected())
+        //             ed = new CalendarDate((Date) dlg.endDate.getModel().getValue());
+        //         else
+        //             ed = new CalendarDate(0,0,0);
+        //        long effort = Util.getMillisFromHours(dlg.txtEffort.getText());
+        //        Task newTask = CurrentProject.getTaskList().createTask(sd, ed, dlg.todoField.getText(), dlg.priorityCB.getSelectedIndex(),effort, dlg.descriptionField.getText(),parentTaskId);
+        //
+
         CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
         taskTable.tableChanged();
-//        parentPanel.updateIndicators();
+        //        parentPanel.updateIndicators();
         //taskTable.updateUI();
     }
 
     void listSubTasks_actionPerformed(ActionEvent e) {
         String parentTaskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
-        
+
         //XXX taskTable.setCurrentRootTask(parentTaskId); 
-		taskTable.tableChanged();
+        taskTable.tableChanged();
 
-//        parentPanel.updateIndicators();
-//        //taskTable.updateUI();
+        //        parentPanel.updateIndicators();
+        //        //taskTable.updateUI();
     }
 
     void parentTask_actionPerformed(ActionEvent e) {
-//    	String taskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
-//      
-//    	Task t = CurrentProject.getTaskList().getTask(taskId);
-    	/*XXX Task t2 = CurrentProject.getTaskList().getTask(taskTable.getCurrentRootTask());
-    	
-    	String parentTaskId = t2.getParent();
-    	if((parentTaskId == null) || (parentTaskId.equals(""))) {
-    		parentTaskId = null;
-    	}
-    	taskTable.setCurrentRootTask(parentTaskId); 
-    	taskTable.tableChanged();*/
-
-//      parentPanel.updateIndicators();
-//      //taskTable.updateUI();
-  }
+        //        String taskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
+        //
+        //        Task t = CurrentProject.getTaskList().getTask(taskId);
+        /*XXX Task t2 = CurrentProject.getTaskList().getTask(taskTable.getCurrentRootTask());
+        
+        String parentTaskId = t2.getParent();
+        if((parentTaskId == null) || (parentTaskId.equals(""))) {
+            parentTaskId = null;
+        }
+        taskTable.setCurrentRootTask(parentTaskId); 
+        taskTable.tableChanged();*/
+
+        //      parentPanel.updateIndicators();
+        //      //taskTable.updateUI();
+    }
 
     void removeTaskB_actionPerformed(ActionEvent e) {
         String msg;
         String thisTaskId = taskTable.getModel().getValueAt(taskTable.getSelectedRow(), TaskTable.TASK_ID).toString();
-        
-        if (taskTable.getSelectedRows().length > 1)
-            msg = Local.getString("Remove")+" "+taskTable.getSelectedRows().length +" "+Local.getString("tasks")+"?"
-             + "\n"+Local.getString("Are you sure?");
-        else {        	
-        	Task t = CurrentProject.getTaskList().getTask(thisTaskId);
-        	// check if there are subtasks
-			if(CurrentProject.getTaskList().hasSubTasks(thisTaskId)) {
-				msg = Local.getString("Remove task")+"\n'" + t.getText() + Local.getString("' and all subtasks") +"\n"+Local.getString("Are you sure?");
-			}
-			else {		            
-				msg = Local.getString("Remove task")+"\n'" + t.getText() + "'\n"+Local.getString("Are you sure?");
-			}
+
+        if (taskTable.getSelectedRows().length > 1) {
+            msg = Local.getString("Remove") + " " + taskTable.getSelectedRows().length + " " + Local.getString("tasks") + "?"
+                    + "\n" + Local.getString("Are you sure?");
+        } else {
+            Task t = CurrentProject.getTaskList().getTask(thisTaskId);
+            // check if there are subtasks
+            if (CurrentProject.getTaskList().hasSubTasks(thisTaskId)) {
+                msg = Local.getString("Remove task") + "\n'" + t.getText() + Local.getString("' and all subtasks") + "\n" + Local.getString("Are you sure?");
+            } else {
+                msg = Local.getString("Remove task") + "\n'" + t.getText() + "'\n" + Local.getString("Are you sure?");
+            }
         }
         //creates checkBox
-        JCheckBox checkBox= new JCheckBox("Do you want to remove all instances of this task");
-        Object[] params={msg, checkBox};
-        msg= "remove this";
+        JCheckBox checkBox = new JCheckBox("Do you want to remove all instances of this task");
+        Object[] params = {msg, checkBox};
+        msg = "remove this";
         int n =
-            JOptionPane.showConfirmDialog(
-                App.getFrame(),
-                params,
-                Local.getString("Remove task"),
-                JOptionPane.YES_NO_OPTION);
-        boolean boxSelected= checkBox.isSelected();
-        if (n != JOptionPane.YES_OPTION && boxSelected==false)
+                JOptionPane.showConfirmDialog(
+                        App.getFrame(),
+                        params,
+                        Local.getString("Remove task"),
+                        JOptionPane.YES_NO_OPTION);
+        boolean boxSelected = checkBox.isSelected();
+        if (n != JOptionPane.YES_OPTION && boxSelected == false) {
             return;
+        }
         Vector toremove = new Vector();
-        
+
         for (int i = 0; i < taskTable.getSelectedRows().length; i++) {
             Task t = CurrentProject.getTaskList().getTask(
-                taskTable.getModel().getValueAt(taskTable.getSelectedRows()[i], TaskTable.TASK_ID).toString());
-            if (t != null)
+                    taskTable.getModel().getValueAt(taskTable.getSelectedRows()[i], TaskTable.TASK_ID).toString());
+            if (t != null) {
                 toremove.add(t);
+            }
         }
         //if check box is selected
-        if(n == JOptionPane.YES_OPTION && boxSelected){
-//        	Vector sameTask= new Vector();
-//        	Vector multi= new Vector();
-        	int removeCount = 0;
-	        for(int i = 0; i < toremove.size(); i++) {
-        		for(int j = 0; j < taskTable.getRowCount(); j++) {
-        			Task t = CurrentProject.getTaskList().getTask(
-	        					taskTable.getModel().getValueAt(j, TaskTable.TASK_ID).toString());
-	        		if(((Task) toremove.get(i)).getText().equals(t.getText())) {
-	        			CurrentProject.getTaskList().removeTask(t);
-	        			removeCount++;
-	        		}
-	        	}
-	       }
-        	
-//        	for(int i = 0; i < taskTable.getSelectedRows().length; i++) {
-//        		Task same = CurrentProject.getTaskList().getTask(taskTable.getModel().getValueAt(
-//        				taskTable.getSelectedRows()[i], TaskTable.TASK_ID).toString());
-//        		multi = (Vector) CurrentProject.getTaskList().getDuplicateTasks(same.getId(), same.getEndDate());
-//        	}
-        	JOptionPane.showMessageDialog(App.getFrame(), Integer.toString(removeCount));
-        	
-//        	for(int i = 0; i < toremove.size(); i++) {
-//        		CurrentProject.getTaskList().removeTask((Task) multi.get(i));
-//        	}
-    	}
-        else if(n == JOptionPane.YES_OPTION && !boxSelected){
-	        for (int i = 0; i < toremove.size(); i++) {
-	            CurrentProject.getTaskList().removeTask((Task) toremove.get(i));
-	        }
+        if (n == JOptionPane.YES_OPTION && boxSelected) {
+            //            Vector sameTask= new Vector();
+            //            Vector multi= new Vector();
+            int removeCount = 0;
+            for (int i = 0; i < toremove.size(); i++) {
+                for (int j = 0; j < taskTable.getRowCount(); j++) {
+                    Task t = CurrentProject.getTaskList().getTask(
+                            taskTable.getModel().getValueAt(j, TaskTable.TASK_ID).toString());
+                    if (((Task) toremove.get(i)).getText().equals(t.getText())) {
+                        CurrentProject.getTaskList().removeTask(t);
+                        removeCount++;
+                    }
+                }
+            }
+
+            //            for(int i = 0; i < taskTable.getSelectedRows().length; i++) {
+            //                Task same = CurrentProject.getTaskList().getTask(taskTable.getModel().getValueAt(
+            //                        taskTable.getSelectedRows()[i], TaskTable.TASK_ID).toString());
+            //                multi = (Vector) CurrentProject.getTaskList().getDuplicateTasks(same.getId(), same.getEndDate());
+            //            }
+            JOptionPane.showMessageDialog(App.getFrame(), Integer.toString(removeCount));
+
+            //            for(int i = 0; i < toremove.size(); i++) {
+            //                CurrentProject.getTaskList().removeTask((Task) multi.get(i));
+            //            }
+        } else if (n == JOptionPane.YES_OPTION && !boxSelected) {
+            for (int i = 0; i < toremove.size(); i++) {
+                CurrentProject.getTaskList().removeTask((Task) toremove.get(i));
+            }
         }
         taskTable.tableChanged();
         CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
@@ -755,85 +739,88 @@ public class TaskPanel extends JPanel {
 
     }
 
-	void ppCompleteTask_actionPerformed(ActionEvent e) {
-		String msg;
-		Vector tocomplete = new Vector();
-		for (int i = 0; i < taskTable.getSelectedRows().length; i++) {
-			Task t =
-			CurrentProject.getTaskList().getTask(
-				taskTable.getModel().getValueAt(taskTable.getSelectedRows()[i], TaskTable.TASK_ID).toString());
-			if (t != null)
-				tocomplete.add(t);
-		}
-		for (int i = 0; i < tocomplete.size(); i++) {
-			Task t = (Task)tocomplete.get(i);
-			t.setProgress(100);
-		}
-		taskTable.tableChanged();
-		CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
-		parentPanel.updateIndicators();
-		//taskTable.updateUI();
-	}
-
-	// toggle "show active only"
-	void toggleShowActiveOnly_actionPerformed(ActionEvent e) {
-		Context.put(
-			"SHOW_ACTIVE_TASKS_ONLY",
-			new Boolean(ppShowActiveOnlyChB.isSelected()));
-		taskTable.tableChanged();
-	}
+    void ppCompleteTask_actionPerformed(ActionEvent e) {
+        String msg;
+        Vector tocomplete = new Vector();
+        for (int i = 0; i < taskTable.getSelectedRows().length; i++) {
+            Task t =
+                    CurrentProject.getTaskList().getTask(
+                            taskTable.getModel().getValueAt(taskTable.getSelectedRows()[i], TaskTable.TASK_ID).toString());
+            if (t != null) {
+                tocomplete.add(t);
+            }
+        }
+        for (int i = 0; i < tocomplete.size(); i++) {
+            Task t = (Task) tocomplete.get(i);
+            t.setProgress(100);
+        }
+        taskTable.tableChanged();
+        CurrentStorage.get().storeTaskList(CurrentProject.getTaskList(), CurrentProject.get());
+        parentPanel.updateIndicators();
+        //taskTable.updateUI();
+    }
+
+    // toggle "show active only"
+    void toggleShowActiveOnly_actionPerformed(ActionEvent e) {
+        Context.put(
+                "SHOW_ACTIVE_TASKS_ONLY",
+                new Boolean(ppShowActiveOnlyChB.isSelected()));
+        taskTable.tableChanged();
+    }
 
     class PopupListener extends MouseAdapter {
 
         public void mouseClicked(MouseEvent e) {
-		if ((e.getClickCount() == 2) && (taskTable.getSelectedRow() > -1)){
-			// ignore "tree" column
-			//if(taskTable.getSelectedColumn() == 1) return;
-			
-			editTaskB_actionPerformed(null);
-		}
+            if ((e.getClickCount() == 2) && (taskTable.getSelectedRow() > -1)) {
+                // ignore "tree" column
+                //if(taskTable.getSelectedColumn() == 1) return;
+
+                editTaskB_actionPerformed(null);
+            }
         }
 
-                public void mousePressed(MouseEvent e) {
-                    maybeShowPopup(e);
-                }
+        public void mousePressed(MouseEvent e) {
+            maybeShowPopup(e);
+        }
 
-                public void mouseReleased(MouseEvent e) {
-                    maybeShowPopup(e);
-                }
+        public void mouseReleased(MouseEvent e) {
+            maybeShowPopup(e);
+        }
 
-                private void maybeShowPopup(MouseEvent e) {
-                    if (e.isPopupTrigger()) {
-                        taskPPMenu.show(e.getComponent(), e.getX(), e.getY());
-                    }
-                }
+        private void maybeShowPopup(MouseEvent e) {
+            if (e.isPopupTrigger()) {
+                taskPPMenu.show(e.getComponent(), e.getX(), e.getY());
+            }
+        }
+
+    }
+
+    void ppEditTask_actionPerformed(ActionEvent e) {
+        editTaskB_actionPerformed(e);
+    }
 
+    void ppRemoveTask_actionPerformed(ActionEvent e) {
+        removeTaskB_actionPerformed(e);
     }
 
-  void ppEditTask_actionPerformed(ActionEvent e) {
-    editTaskB_actionPerformed(e);
-  }
-  void ppRemoveTask_actionPerformed(ActionEvent e) {
-    removeTaskB_actionPerformed(e);
-  }
-  void ppNewTask_actionPerformed(ActionEvent e) {
-    newTaskB_actionPerformed(e);
-  }
-
-  void ppAddSubTask_actionPerformed(ActionEvent e) {
-  	addSubTask_actionPerformed(e);
-  }
-
-  void ppListSubTasks_actionPerformed(ActionEvent e) {
-  	listSubTasks_actionPerformed(e);
-  }
-
-  void ppParentTask_actionPerformed(ActionEvent e) {
-  	parentTask_actionPerformed(e);
-  }
-
-  void ppCalcTask_actionPerformed(ActionEvent e) {
-      calcTask_actionPerformed(e);
-  }
+    void ppNewTask_actionPerformed(ActionEvent e) {
+        newTaskB_actionPerformed(e);
+    }
+
+    void ppAddSubTask_actionPerformed(ActionEvent e) {
+        addSubTask_actionPerformed(e);
+    }
+
+    void ppListSubTasks_actionPerformed(ActionEvent e) {
+        listSubTasks_actionPerformed(e);
+    }
+
+    void ppParentTask_actionPerformed(ActionEvent e) {
+        parentTask_actionPerformed(e);
+    }
+
+    void ppCalcTask_actionPerformed(ActionEvent e) {
+        calcTask_actionPerformed(e);
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/TaskProgressEditor.java b/src/net/sf/memoranda/ui/TaskProgressEditor.java
index 04efc18..beb5f57 100755
--- a/src/net/sf/memoranda/ui/TaskProgressEditor.java
+++ b/src/net/sf/memoranda/ui/TaskProgressEditor.java
@@ -1,106 +1,120 @@
 package net.sf.memoranda.ui;
 
-import net.sf.memoranda.*;
-import net.sf.memoranda.util.*;
+import net.sf.memoranda.Task;
 
 import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.table.*;
-
+import javax.swing.event.CellEditorListener;
+import javax.swing.table.TableCellEditor;
+import javax.swing.table.TableCellRenderer;
 import java.awt.*;
-import java.awt.event.*;
+import java.awt.event.MouseEvent;
 
 /**
  * Editor for task progress
  */
-public class TaskProgressEditor extends JPanel implements TableCellEditor{
-	
-	JTable table;
-	Task current;
-	boolean isSelected;
-	int row;
-	int column;
-	
-	java.util.List listeners = new java.util.ArrayList();
-	
-	JLabel label = new JLabel();
-	
-	public TaskProgressEditor(){
-		addMouseListener(new java.awt.event.MouseAdapter(){
-			public void mousePressed(java.awt.event.MouseEvent e){
-				if(e instanceof MouseEvent){
-					MouseEvent me = (MouseEvent) e;
-					if(me.getButton() != MouseEvent.BUTTON1){
-						stopEditing();
-						return;
-					}
-				}
-				int w = getWidth()/2;
-				if(e.getX() > w){
-					current.setProgress( current.getProgress()+5 );
-				}else{
-					current.setProgress( current.getProgress()-5 );
-				}
-				repaint();
-			}
-		});
-		setLayout(new java.awt.BorderLayout());
-		label.setOpaque(false);
-	}
-	
-	public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int r, int c) { 
-		current = (Task) value;
-		this.table = table;
-		this.isSelected = isSelected;
-		row = r; column = c;
-		return this;
-	}
-	
-	public void paint(Graphics g){
-		paintComponent(g);
-	}
-	
-	public void paintComponent(Graphics g){
-		TableCellRenderer cr = table.getCellRenderer(row, column);
-		((TaskProgressLabel)cr.getTableCellRendererComponent(table, current, isSelected, true, row, column)).paintComponent(g);
-		
-		label.setSize( this.getSize() );
-		
-		label.setText("-");
-		label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
-		label.paint(g);
-		label.setText("+");
-		label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
-		label.paint(g);
-				
-	}
-	
-	private void stopEditing(){
-		for(int i=0; i<listeners.size(); i++){
-			CellEditorListener cel = (CellEditorListener) listeners.get(i);
-			cel.editingStopped(null);
-		}
-	}
-	
-	public void addCellEditorListener(CellEditorListener var0){ listeners.add(var0); }
-	public void removeCellEditorListener(CellEditorListener var0){ listeners.remove(var0); }
-	
-	public void cancelCellEditing(){}
-	public java.lang.Object getCellEditorValue(){
-		return null; // just return null, because model will not use this
-	}
-	public boolean isCellEditable(java.util.EventObject e){
-		if(e instanceof MouseEvent){
-			MouseEvent me = (MouseEvent) e;
-			if(me.getButton() == MouseEvent.BUTTON1){
-				return true;
-			}
-		}
-		return false;
-	}
-	public boolean stopCellEditing(){return true;}
-	public boolean shouldSelectCell(java.util.EventObject var0){return true;}	
-    
+public class TaskProgressEditor extends JPanel implements TableCellEditor {
+
+    JTable table;
+    Task current;
+    boolean isSelected;
+    int row;
+    int column;
+
+    java.util.List listeners = new java.util.ArrayList();
+
+    JLabel label = new JLabel();
+
+    public TaskProgressEditor() {
+        addMouseListener(new java.awt.event.MouseAdapter() {
+            public void mousePressed(java.awt.event.MouseEvent e) {
+                if (e instanceof MouseEvent) {
+                    MouseEvent me = (MouseEvent) e;
+                    if (me.getButton() != MouseEvent.BUTTON1) {
+                        stopEditing();
+                        return;
+                    }
+                }
+                int w = getWidth() / 2;
+                if (e.getX() > w) {
+                    current.setProgress(current.getProgress() + 5);
+                } else {
+                    current.setProgress(current.getProgress() - 5);
+                }
+                repaint();
+            }
+        });
+        setLayout(new java.awt.BorderLayout());
+        label.setOpaque(false);
+    }
+
+    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int r, int c) {
+        current = (Task) value;
+        this.table = table;
+        this.isSelected = isSelected;
+        row = r;
+        column = c;
+        return this;
+    }
+
+    public void paint(Graphics g) {
+        paintComponent(g);
+    }
+
+    public void paintComponent(Graphics g) {
+        TableCellRenderer cr = table.getCellRenderer(row, column);
+        ((TaskProgressLabel) cr.getTableCellRendererComponent(table, current, isSelected, true, row, column)).paintComponent(g);
+
+        label.setSize(this.getSize());
+
+        label.setText("-");
+        label.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
+        label.paint(g);
+        label.setText("+");
+        label.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
+        label.paint(g);
+
+    }
+
+    private void stopEditing() {
+        for (int i = 0; i < listeners.size(); i++) {
+            CellEditorListener cel = (CellEditorListener) listeners.get(i);
+            cel.editingStopped(null);
+        }
+    }
+
+    public void addCellEditorListener(CellEditorListener var0) {
+        listeners.add(var0);
+    }
+
+    public void removeCellEditorListener(CellEditorListener var0) {
+        listeners.remove(var0);
+    }
+
+    public void cancelCellEditing() {
+    }
+
+    public java.lang.Object getCellEditorValue() {
+        return null; // just return null, because model will not use this
+    }
+
+    public boolean isCellEditable(java.util.EventObject e) {
+        if (e instanceof MouseEvent) {
+            MouseEvent me = (MouseEvent) e;
+            if (me.getButton() == MouseEvent.BUTTON1) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public boolean stopCellEditing() {
+        return true;
+    }
+
+    public boolean shouldSelectCell(java.util.EventObject var0) {
+        return true;
+    }
+
 }
 
 
diff --git a/src/net/sf/memoranda/ui/TaskProgressLabel.java b/src/net/sf/memoranda/ui/TaskProgressLabel.java
index 13778c3..5589189 100755
--- a/src/net/sf/memoranda/ui/TaskProgressLabel.java
+++ b/src/net/sf/memoranda/ui/TaskProgressLabel.java
@@ -27,49 +27,54 @@
 package net.sf.memoranda.ui;
 
 import net.sf.memoranda.Task;
-import java.awt.Color;
-import java.awt.Graphics;
-import javax.swing.JLabel;
+
+import javax.swing.*;
+import java.awt.*;
 
 /**
  * <h1>TaskProgressLabel</h1>
- * 
+ * <p>
  * Component showing task progress as colorful bar>
- * 
- * @version $Name:  $ $Revision: 1.1 $
+ *
  * @author Alex Alishevskikh, alexeya(at)gmail.com
- * 
+ * @version $Name:  $ $Revision: 1.1 $
  */
 
-class TaskProgressLabel extends JLabel{
+class TaskProgressLabel extends JLabel {
     TaskTable table;
     int column;
     Task task;
-    public TaskProgressLabel( TaskTable table ){
+
+    public TaskProgressLabel(TaskTable table) {
         this.table = table;
         setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
     }
-    public void setTask(Task t){ task = t;
+
+    public void setTask(Task t) {
+        task = t;
+    }
+
+    public void setColumn(int col) {
+        column = col;
     }
-    public void setColumn(int col){ column = col;}
-    
+
     public void paintComponent(Graphics g) {
         int val = task.getProgress();
         int width = table.getColumnModel().getColumn(column).getWidth();
         int height = table.getRowHeight();
         int p = width * val / 100;
-        
+
         g.setColor(Color.WHITE);
-        g.fillRect(0,0,width, height);
+        g.fillRect(0, 0, width, height);
 
-        g.setColor( TaskTreeTableCellRenderer.getColorForTaskStatus(task, true) );
+        g.setColor(TaskTreeTableCellRenderer.getColorForTaskStatus(task, true));
         g.fillRect(1, 1, p, height - 2);
         g.setColor(Color.LIGHT_GRAY);
         g.drawRect(1, 1, width, height - 2);
-        
+
         setText(val + "%");
         setBounds(0, 0, width, height);
-        
+
         super.paintComponent(g);
     }
 }
diff --git a/src/net/sf/memoranda/ui/TaskReportDialog.java b/src/net/sf/memoranda/ui/TaskReportDialog.java
index 0c215d4..306837d 100644
--- a/src/net/sf/memoranda/ui/TaskReportDialog.java
+++ b/src/net/sf/memoranda/ui/TaskReportDialog.java
@@ -6,29 +6,29 @@
  */
 package net.sf.memoranda.ui;
 
+import net.sf.memoranda.util.Local;
+
 import java.awt.event.ActionEvent;
 
+public class TaskReportDialog extends javax.swing.JDialog {
 
-import net.sf.memoranda.util.Local;
+    public boolean CANCELLED = true;
 
-public class TaskReportDialog extends javax.swing.JDialog{
+    private javax.swing.JPanel panel;
 
-    public boolean CANCELLED = true;
+    public TaskReportDialog(java.awt.Frame parent, String title) {
+        super(parent, title, true);
+        initComponents1();
+    }
+
+    private void initComponents1() {
+        // TODO Auto-generated method stub
+        panel = new javax.swing.JPanel();
+        this.add(panel);
+
+    }
 
-	private javax.swing.JPanel panel;
-	public TaskReportDialog(java.awt.Frame parent, String title){
-		super(parent, title, true);
-		initComponents1();
-	}
-
-	private void initComponents1() {
-		// TODO Auto-generated method stub
-		 panel = new javax.swing.JPanel();
-		 this.add(panel);
-		 
-	}
-	 
-    private void initComponents() {//GEN-BEGIN:initComponents
+    private void initComponents() { //GEN-BEGIN:initComponents
         jPanel2 = new javax.swing.JPanel();
         okB = new javax.swing.JButton();
         cancelB = new javax.swing.JButton();
@@ -64,7 +64,7 @@ public class TaskReportDialog extends javax.swing.JDialog{
         cancelB.setText(Local.getString("Cancel"));
         cancelB.setPreferredSize(new java.awt.Dimension(90, 25));
         cancelB.addActionListener(new java.awt.event.ActionListener() {
-            public void actionPerformed(ActionEvent e) {                
+            public void actionPerformed(ActionEvent e) {
                 dispose();
             }
         });
@@ -74,9 +74,6 @@ public class TaskReportDialog extends javax.swing.JDialog{
 
         filePanel.setLayout(new java.awt.BorderLayout());
 
- 
-        
-        
 
         filePanel.add(fileChooser, java.awt.BorderLayout.CENTER);
 
@@ -85,21 +82,20 @@ public class TaskReportDialog extends javax.swing.JDialog{
         optionsPanel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
         encPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
 
-        jLabel2.setText(Local.getString("Encoding")+":");
+        jLabel2.setText(Local.getString("Encoding") + ":");
         encPanel.add(jLabel2);
 
-   
-        usetemplChB.setText(Local.getString("Use template")+":");
+
+        usetemplChB.setText(Local.getString("Use template") + ":");
         usetemplChB.setMargin(new java.awt.Insets(0, 0, 0, 0));
         usetemplChB.addActionListener(new java.awt.event.ActionListener() {
-            public void actionPerformed(ActionEvent e) {                
+            public void actionPerformed(ActionEvent e) {
                 if (usetemplChB.isSelected()) {
                     templF.setEnabled(true);
                     templBrowseB.setEnabled(true);
-                }
-                else {
+                } else {
                     templF.setEnabled(false);
-                    templBrowseB.setEnabled(false);                    
+                    templBrowseB.setEnabled(false);
                 }
             }
         });
@@ -120,7 +116,7 @@ public class TaskReportDialog extends javax.swing.JDialog{
 
         templBrowseB.setText("Browse");
         templBrowseB.setEnabled(false);
-        
+
         templPanel.add(templBrowseB, java.awt.BorderLayout.EAST);
 
         optionsPanel.add(templPanel);
@@ -137,20 +133,20 @@ public class TaskReportDialog extends javax.swing.JDialog{
         getContentPane().add(filePanel, java.awt.BorderLayout.CENTER);
         getRootPane().setDefaultButton(okB);
         pack();
-    }//GEN-END:initComponents
+    } //GEN-END:initComponents
 
     private void xhtmlChBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xhtmlChBActionPerformed
         // TODO add your handling code here:
     }
 
-    private void chooserActionPerformed() {//GEN-FIRST:event_chooserActionPerformed
-        okB.setEnabled(fileChooser.getSelectedFile() != null);            
+    private void chooserActionPerformed() { //GEN-FIRST:event_chooserActionPerformed
+        okB.setEnabled(fileChooser.getSelectedFile() != null);
     }
-   
-    
+
+
     private javax.swing.JButton cancelB;
     private javax.swing.JFileChooser fileChooser;
-    
+
     private javax.swing.JPanel encPanel;
     private javax.swing.JPanel filePanel;
     private javax.swing.JLabel jLabel2;
@@ -165,5 +161,5 @@ public class TaskReportDialog extends javax.swing.JDialog{
     public javax.swing.JCheckBox usetemplChB;
     public javax.swing.JCheckBox xhtmlChB;
     // End of variables declaration//GEN-END:variables
-    
+
 }
diff --git a/src/net/sf/memoranda/ui/TaskTable.java b/src/net/sf/memoranda/ui/TaskTable.java
index 4a718b2..a49100c 100755
--- a/src/net/sf/memoranda/ui/TaskTable.java
+++ b/src/net/sf/memoranda/ui/TaskTable.java
@@ -1,59 +1,45 @@
 /**
- * TaskTable.java         
+ * TaskTable.java
  * -----------------------------------------------------------------------------
  * Project           Memoranda
  * Package           net.sf.memoranda.ui
  * Original author   Alex V. Alishevskikh
- *                   [alexeya@gmail.com]
+ * [alexeya@gmail.com]
  * Created           18.05.2005 15:12:19
- * Revision info     $RCSfile: TaskTable.java,v $ $Revision: 1.26 $ $State: Exp $  
- *
+ * Revision info     $RCSfile: TaskTable.java,v $ $Revision: 1.26 $ $State: Exp $
+ * <p>
  * Last modified on  $Date: 2007/01/05 10:33:26 $
- *               by  $Author: alexeya $
- * 
- * @VERSION@ 
+ * by  $Author: alexeya $
  *
+ * @VERSION@
  * @COPYRIGHT@
- * 
- * @LICENSE@ 
+ * @LICENSE@
  */
 
 package net.sf.memoranda.ui;
 
-import net.sf.memoranda.util.*;
-
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.Font;
-import java.awt.Graphics;
-import java.awt.event.MouseEvent;
-
-import java.util.EventObject;
-import java.util.Collection;
-import java.util.Vector;
-import java.util.Iterator;
-import java.util.Hashtable;
-import java.util.ArrayList;
-
-import javax.swing.ImageIcon;
-import javax.swing.JPanel;
-import javax.swing.JLabel;
-import javax.swing.JTable;
-import javax.swing.JTree;
-import javax.swing.ListSelectionModel;
-import javax.swing.LookAndFeel;
-import javax.swing.ToolTipManager;
-import javax.swing.UIManager;
-import javax.swing.event.*;
-import javax.swing.table.*;
-import javax.swing.tree.*;
-
 import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.date.DateListener;
-import net.sf.memoranda.ui.treetable.*;
+import net.sf.memoranda.ui.treetable.AbstractCellEditor;
+import net.sf.memoranda.ui.treetable.TreeTableModel;
+import net.sf.memoranda.ui.treetable.TreeTableModelAdapter;
+import net.sf.memoranda.util.Local;
+
+import javax.swing.*;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import javax.swing.event.TreeExpansionEvent;
+import javax.swing.event.TreeExpansionListener;
+import javax.swing.table.TableCellEditor;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.table.TableColumn;
+import javax.swing.tree.*;
+import java.awt.*;
+import java.awt.event.MouseEvent;
+import java.util.EventObject;
+import java.util.Iterator;
 
 /**
  * JAVADOC:
@@ -74,8 +60,8 @@ import net.sf.memoranda.ui.treetable.*;
  * </p>
  *
  * <p>Article about <a href="http://java.sun.com/products/jfc/tsc/articles/treetable1/">treetables</a>.</p>
- * 
- * @see	net.sf.memoranda.ui.TaskTreeTableCellRenderer
+ *
+ * @see    net.sf.memoranda.ui.TaskTreeTableCellRenderer
  * @version $Id: TaskTable.java,v 1.26 2007/01/05 10:33:26 alexeya Exp $
  * @author $Author: alexeya $
  */
@@ -88,13 +74,13 @@ public class TaskTable extends JTable {
     protected static TreeTableCellRenderer tree;
 
     protected static TaskTableModel model;
-    
+
     protected TreeTableModelAdapter modelAdapter;
-    
+
     protected TaskTreeTableCellRenderer renderer;
-	
-	protected static ExpansionHandler expansion; 
-    
+
+    protected static ExpansionHandler expansion;
+
     public TaskTable() {
         super();
         initTable();
@@ -106,86 +92,86 @@ public class TaskTable extends JTable {
         CurrentDate.addDateListener(new DateListener() {
             public void dateChange(CalendarDate d) {
                 //updateUI();
-//        		TaskList tl = CurrentProject.getTaskList();
-//        		//tl.clearTempTasks();
-//        		Vector<Task> rptTaskList =  tl.getRepeatableTaskforDate(d);
-//        		Task t;
-//        		
-//        		//Creates tasks on this date for any recurring tasks that do not already exist.
-//        		for(int i = 0; i < rptTaskList.size(); i++) {
-//        			t = rptTaskList.get(i);
-//        			tl.createRptInstanceTask(d, t.getEndDate(), t.getText(), t.getPriority(), t.getEffort(), t.getDescription(), t.getParentId(), 
-//        					t.getWorkingDaysOnly(), t.getProgress(), t.getRepeatType(), t.getEndRepeat() != null, t.getEndRepeat());
-//        			
-//        		}
-//            	
+                //                TaskList tl = CurrentProject.getTaskList();
+                //                //tl.clearTempTasks();
+                //                Vector<Task> rptTaskList =  tl.getRepeatableTaskforDate(d);
+                //                Task t;
+                //
+                //                //Creates tasks on this date for any recurring tasks that do not already exist.
+                //                for(int i = 0; i < rptTaskList.size(); i++) {
+                //                    t = rptTaskList.get(i);
+                //                    tl.createRptInstanceTask(d, t.getEndDate(), t.getText(), t.getPriority(), t.getEffort(), t.getDescription(), t.getParentId(),
+                //                            t.getWorkingDaysOnly(), t.getProgress(), t.getRepeatType(), t.getEndRepeat() != null, t.getEndRepeat());
+                //
+                //                }
+                //
                 tableChanged();
             }
         });
         CurrentProject.addProjectListener(new ProjectListener() {
             public void projectChange(Project p, NoteList nl, TaskList tl,
-                    ResourcesList rl) {
+                                      ResourcesList rl) {
             }
 
             public void projectWasChanged() {
                 //initTable();
-				tableChanged();
+                tableChanged();
             }
         });
-	
+
     }
 
     private void initTable() {
-	
-		//model = new TaskTableModel();
-		model = new TaskTableSorter( this );
-	
-		// Create the tree. It will be used as a renderer and editor.
-		tree = new TreeTableCellRenderer(model);
-		
-		// store tree expansion status and
-		// restore after sorting/project change etc.
-		expansion = new ExpansionHandler();
-		tree.addTreeExpansionListener(expansion);
-	
-		// Install a tableModel representing the visible rows in the tree.
-		modelAdapter = new TreeTableModelAdapter(model, tree);
-		super.setModel(modelAdapter);
-			
-		// Install the tree editor renderer and editor.
-		renderer = new TaskTreeTableCellRenderer(this);
-		
-		
-		tree.setCellRenderer(renderer);
-		setDefaultRenderer(TreeTableModel.class, tree);
-		setDefaultRenderer(Integer.class, renderer);
-		setDefaultRenderer(TaskTable.class, renderer);
-		setDefaultRenderer(String.class, renderer);
-		setDefaultRenderer(java.util.Date.class, renderer);
-
-		setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
-		
-		// column name is repeated in 2 places, do something about it!
-		getColumn( "% " + Local.getString("done") ).setCellEditor(new TaskProgressEditor());
-		
-		// TODO: editor for task progress
-		
-		
-		//  grid.
-		setShowGrid(false);
-
-		// No intercell spacing
-		setIntercellSpacing(new Dimension(0, 0));
-
-		// And update the height of the trees row to match that of
-		// the table.
-		//if (tree.getRowHeight() < 1) {
-			setRowHeight(18);
-		//}
-		initColumnWidths();
-		
-		// do not allow moving columns
-		getTableHeader().setReorderingAllowed(false);
+
+        //model = new TaskTableModel();
+        model = new TaskTableSorter(this);
+
+        // Create the tree. It will be used as a renderer and editor.
+        tree = new TreeTableCellRenderer(model);
+
+        // store tree expansion status and
+        // restore after sorting/project change etc.
+        expansion = new ExpansionHandler();
+        tree.addTreeExpansionListener(expansion);
+
+        // Install a tableModel representing the visible rows in the tree.
+        modelAdapter = new TreeTableModelAdapter(model, tree);
+        super.setModel(modelAdapter);
+
+        // Install the tree editor renderer and editor.
+        renderer = new TaskTreeTableCellRenderer(this);
+
+
+        tree.setCellRenderer(renderer);
+        setDefaultRenderer(TreeTableModel.class, tree);
+        setDefaultRenderer(Integer.class, renderer);
+        setDefaultRenderer(TaskTable.class, renderer);
+        setDefaultRenderer(String.class, renderer);
+        setDefaultRenderer(java.util.Date.class, renderer);
+
+        setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
+
+        // column name is repeated in 2 places, do something about it!
+        getColumn("% " + Local.getString("done")).setCellEditor(new TaskProgressEditor());
+
+        // TODO: editor for task progress
+
+
+        //  grid.
+        setShowGrid(false);
+
+        // No intercell spacing
+        setIntercellSpacing(new Dimension(0, 0));
+
+        // And update the height of the trees row to match that of
+        // the table.
+        //if (tree.getRowHeight() < 1) {
+        setRowHeight(18);
+        //}
+        initColumnWidths();
+
+        // do not allow moving columns
+        getTableHeader().setReorderingAllowed(false);
     }
 
     void initColumnWidths() {
@@ -193,38 +179,35 @@ public class TaskTable extends JTable {
             TableColumn column = getColumnModel().getColumn(i);
             if (i == 0) {
                 column.setPreferredWidth(8);
-            } 
-            else if (i == 1) {
+            } else if (i == 1) {
                 column.setPreferredWidth(32767);
-            }
-	    else if( i == 6 ){
-		    column.setPreferredWidth(100);
-		    column.setMinWidth(100);
-	    }
-            else {
+            } else if (i == 6) {
+                column.setPreferredWidth(100);
+                column.setMinWidth(100);
+            } else {
                 column.setMinWidth(67); // 65);
                 column.setPreferredWidth(67); //65);
             }
         }
     }
-    
+
     public static void tableChanged() {
-		model.fireUpdateCache();
-		model.fireTreeStructureChanged();
-		expansion.expand(tree);		
-		//updateUI();
+        model.fireUpdateCache();
+        model.fireTreeStructureChanged();
+        expansion.expand(tree);
+        //updateUI();
     }
-    
+
     /**
      * Overridden to message super and forward the method to the tree. Since the
      * tree is not actually in the component hieachy it will never receive this
      * unless we forward it in this manner.
      */
     public void updateUI() {
-		super.updateUI();
-			if (tree != null) { 
-			tree.updateUI();
-			}
+        super.updateUI();
+        if (tree != null) {
+            tree.updateUI();
+        }
 
 
         // Use the tree's default foreground and background colors in the
@@ -265,7 +248,7 @@ public class TaskTable extends JTable {
     /**
      * A TreeCellRenderer that displays a JTree.
      */
-	 public class TreeTableCellRenderer extends JTree implements // {{{
+    public class TreeTableCellRenderer extends JTree implements // {{{
             TableCellRenderer {
         /** Last table/tree row asked to renderer. */
         protected int visibleRow;
@@ -275,7 +258,7 @@ public class TaskTable extends JTable {
             //ToolTipManager.sharedInstance().registerComponent(this);//XXX
             this.setRootVisible(false);
             this.setShowsRootHandles(true);
-			this.setCellRenderer(renderer);                       
+            this.setCellRenderer(renderer);
         }
 
         /**
@@ -284,14 +267,14 @@ public class TaskTable extends JTable {
          */
         public void updateUI() {
             super.updateUI();
-	    
+
             // Make the tree's cell renderer use the table's cell selection
             // colors.
             TreeCellRenderer tcr = getCellRenderer();
             if (tcr instanceof DefaultTreeCellRenderer) {
                 DefaultTreeCellRenderer dtcr = ((DefaultTreeCellRenderer) tcr);
- 
-				dtcr.setBorderSelectionColor(null);
+
+                dtcr.setBorderSelectionColor(null);
                 dtcr.setTextSelectionColor(UIManager
                         .getColor("Table.selectionForeground"));
                 dtcr.setBackgroundSelectionColor(UIManager
@@ -333,24 +316,25 @@ public class TaskTable extends JTable {
          * TreeCellRenderer method. Overridden to update the visible row.
          */
         public Component getTableCellRendererComponent(JTable table,
-                Object value, boolean isSelected, boolean hasFocus, int row,
-                int column) {
-            if (isSelected)
+                                                       Object value, boolean isSelected, boolean hasFocus, int row,
+                                                       int column) {
+            if (isSelected) {
                 setBackground(table.getSelectionBackground());
-            else
+            } else {
                 setBackground(table.getBackground());
+            }
             visibleRow = row;
             return this;
         }
-	} // }}}
+    } // }}}
 
     /**
      * TreeTableCellEditor implementation. Component returned is the JTree.
      */
-	 public class TreeTableCellEditor extends AbstractCellEditor implements //{{{
+    public class TreeTableCellEditor extends AbstractCellEditor implements //{{{
             TableCellEditor {
         public Component getTableCellEditorComponent(JTable table,
-                Object value, boolean isSelected, int r, int c) {
+                                                     Object value, boolean isSelected, int r, int c) {
             return tree;
         }
 
@@ -389,7 +373,7 @@ public class TaskTable extends JTable {
             }
             return false;
         }
-	} // }}}
+    } // }}}
 
     /**
      * ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel to
@@ -397,7 +381,7 @@ public class TaskTable extends JTable {
      * in the ListSelectionModel happens, the paths are updated in the
      * DefaultTreeSelectionModel.
      */
-	 public class ListToTreeSelectionModelWrapper extends // {{{
+    public class ListToTreeSelectionModelWrapper extends // {{{
             DefaultTreeSelectionModel {
         /** Set to true when we are updating the ListSelectionModel. */
         protected boolean updatingListSelectionModel;
@@ -477,69 +461,69 @@ public class TaskTable extends JTable {
             }
         }
 
-	/**
-	 * Class responsible for calling updateSelectedPathsFromSelectedRows
-	 * when the selection of the list changse.
-	 */
-	class ListSelectionHandler implements ListSelectionListener {
+        /**
+         * Class responsible for calling updateSelectedPathsFromSelectedRows
+         * when the selection of the list changse.
+         */
+        class ListSelectionHandler implements ListSelectionListener {
             public void valueChanged(ListSelectionEvent e) {
                 updateSelectedPathsFromSelectedRows();
             }
         }
-	} // }}}
-	
-	
-	/**
-	 * Stores expanded treepaths so that they
-	 * can be restored after treeStructureChanged-method call
-	 * which collapses everything
-	 */
-	 class ExpansionHandler implements TreeExpansionListener { // {{{
-	
-		private java.util.Set expanded = new java.util.HashSet();
-		
-		public void treeExpanded(TreeExpansionEvent e) {
-			expanded.add(e.getPath());
-		}
-		
-		public void treeCollapsed(TreeExpansionEvent e) {
-			TreePath p = e.getPath();
-			int index = p.getPathCount() - 1;
-			Object collapsed = p.getLastPathComponent();
-
-			Object[] components = expanded.toArray();
-			for(int i=0; i<components.length; i++){
-				TreePath epath = (TreePath) components[i];
-				if( (epath.getPathCount() > index) && (epath.getPathComponent(index).equals(collapsed))){
-					expanded.remove(epath);
-				}
-			}
-		}
-		
-		/**
-		 * Expands stored treepaths in JTree
-		 * <p>
-		 * If model has been changed (eg. project change) we
-		 * still try to expand paths whick do not exist.
-		 * We just assume that this is not causing problems,
-		 * and as a side effect it preserved tree expansion status
-		 * even after project has been changed to some other project 
-		 * and then back.
-		 * </p>
-		 * <p>
-		 * It is possible that there will be memory leak
-		 * if expanded paths have been removed from model, but
-		 * effect of this is quite insignificant.
-		 * </p>
-		 */
-		public void expand(JTree tree){
-			Iterator iter = expanded.iterator();
-			while(iter.hasNext()){
-				tree.expandPath( (TreePath) iter.next() );
-			}
-			System.out.println(expanded.size());
-		}
-		
-	} // }}}	
-	
+    } // }}}
+
+
+    /**
+     * Stores expanded treepaths so that they
+     * can be restored after treeStructureChanged-method call
+     * which collapses everything
+     */
+    class ExpansionHandler implements TreeExpansionListener { // {{{
+
+        private java.util.Set expanded = new java.util.HashSet();
+
+        public void treeExpanded(TreeExpansionEvent e) {
+            expanded.add(e.getPath());
+        }
+
+        public void treeCollapsed(TreeExpansionEvent e) {
+            TreePath p = e.getPath();
+            int index = p.getPathCount() - 1;
+            Object collapsed = p.getLastPathComponent();
+
+            Object[] components = expanded.toArray();
+            for (int i = 0; i < components.length; i++) {
+                TreePath epath = (TreePath) components[i];
+                if ((epath.getPathCount() > index) && (epath.getPathComponent(index).equals(collapsed))) {
+                    expanded.remove(epath);
+                }
+            }
+        }
+
+        /**
+         * Expands stored treepaths in JTree
+         * <p>
+         * If model has been changed (eg. project change) we
+         * still try to expand paths whick do not exist.
+         * We just assume that this is not causing problems,
+         * and as a side effect it preserved tree expansion status
+         * even after project has been changed to some other project
+         * and then back.
+         * </p>
+         * <p>
+         * It is possible that there will be memory leak
+         * if expanded paths have been removed from model, but
+         * effect of this is quite insignificant.
+         * </p>
+         */
+        public void expand(JTree tree) {
+            Iterator iter = expanded.iterator();
+            while (iter.hasNext()) {
+                tree.expandPath((TreePath) iter.next());
+            }
+            System.out.println(expanded.size());
+        }
+
+    } // }}}
+
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/TaskTableModel.java b/src/net/sf/memoranda/ui/TaskTableModel.java
index 6cb9114..a4533c7 100755
--- a/src/net/sf/memoranda/ui/TaskTableModel.java
+++ b/src/net/sf/memoranda/ui/TaskTableModel.java
@@ -1,41 +1,38 @@
 /**
- * TaskTableModel.java         
+ * TaskTableModel.java
  * -----------------------------------------------------------------------------
  * Project           Memoranda
  * Package           net.sf.memoranda.ui
  * Original author   Alex V. Alishevskikh
- *                   [alexeya@gmail.com]
+ * [alexeya@gmail.com]
  * Created           18.05.2005 15:16:11
- * Revision info     $RCSfile: TaskTableModel.java,v $ $Revision: 1.7 $ $State: Exp $  
- *
+ * Revision info     $RCSfile: TaskTableModel.java,v $ $Revision: 1.7 $ $State: Exp $
+ * <p>
  * Last modified on  $Date: 2005/12/01 08:12:26 $
- *               by  $Author: alexeya $
- * 
- * @VERSION@ 
+ * by  $Author: alexeya $
  *
+ * @VERSION@
  * @COPYRIGHT@
- * 
- * @LICENSE@ 
+ * @LICENSE@
  */
 
 package net.sf.memoranda.ui;
 
-import javax.swing.event.*;
-import javax.swing.tree.TreePath;
-
-import net.sf.memoranda.*;
+import net.sf.memoranda.CurrentProject;
+import net.sf.memoranda.Project;
+import net.sf.memoranda.Task;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.ui.treetable.AbstractTreeTableModel;
 import net.sf.memoranda.ui.treetable.TreeTableModel;
-import net.sf.memoranda.util.Local;
 import net.sf.memoranda.util.Context;
+import net.sf.memoranda.util.Local;
 
-import java.util.Hashtable;
+import javax.swing.event.EventListenerList;
 
 /**
  * JAVADOC:
  * <h1>TaskTableModel</h1>
- * 
+ *
  * @version $Id: TaskTableModel.java,v 1.7 2005/12/01 08:12:26 alexeya Exp $
  * @author $Author: alexeya $
  */
@@ -44,18 +41,18 @@ public class TaskTableModel extends AbstractTreeTableModel implements TreeTableM
     String[] columnNames = {"", Local.getString("To-do"),
             Local.getString("Start date"), Local.getString("End date"),
             Local.getString("Priority"), Local.getString("Status"),
-            "% " + Local.getString("done") };
+            "% " + Local.getString("done")};
 
     protected EventListenerList listenerList = new EventListenerList();
 
     private boolean activeOnly = check_activeOnly();
-        
+
     /**
      * JAVADOC: Constructor of <code>TaskTableModel</code>
-     * 
+     *
      * @param root
      */
-    public TaskTableModel(){
+    public TaskTableModel() {
         super(CurrentProject.get());
     }
 
@@ -78,68 +75,70 @@ public class TaskTableModel extends AbstractTreeTableModel implements TreeTableM
      *      int)
      */
     public Object getValueAt(Object node, int column) {
-        if (node instanceof Project)
+        if (node instanceof Project) {
             return null;
+        }
         Task t = (Task) node;
         switch (column) {
-        case 0:
-            return "";
-        case 1:
-            return t;
-        case 2:
-            return t.getStartDate().getDate();
-        case 3:
-            if (t.getEndDate() == null)
-                return null;
-            else
-                return t.getEndDate().getDate();        
-        case 4:
-            return getPriorityString(t.getPriority());
-        case 5:
-            return getStatusString(t.getStatus(CurrentDate.get()));
-        case 6:            
-            //return new Integer(t.getProgress());
-			return t;
-        case TaskTable.TASK_ID:
-            return t.getId();
-        case TaskTable.TASK:
-            return t;
+            case 0:
+                return "";
+            case 1:
+                return t;
+            case 2:
+                return t.getStartDate().getDate();
+            case 3:
+                if (t.getEndDate() == null) {
+                    return null;
+                } else {
+                    return t.getEndDate().getDate();
+                }
+            case 4:
+                return getPriorityString(t.getPriority());
+            case 5:
+                return getStatusString(t.getStatus(CurrentDate.get()));
+            case 6:
+                //return new Integer(t.getProgress());
+                return t;
+            case TaskTable.TASK_ID:
+                return t.getId();
+            case TaskTable.TASK:
+                return t;
         }
         return "";
     }
 
     String getStatusString(int status) {
         switch (status) {
-        case Task.ACTIVE:
-            return Local.getString("Active");
-        case Task.DEADLINE:
-            return Local.getString("Deadline");
-        case Task.COMPLETED:
-            return Local.getString("Completed");
-        case Task.FAILED:
-            return Local.getString("Failed");
-        case Task.FROZEN:
-            return Local.getString("Frozen");
-        case Task.LOCKED:
-            return Local.getString("Locked");
-        case Task.SCHEDULED:
-            return Local.getString("Scheduled");
+            case Task.ACTIVE:
+                return Local.getString("Active");
+            case Task.DEADLINE:
+                return Local.getString("Deadline");
+            case Task.COMPLETED:
+                return Local.getString("Completed");
+            case Task.FAILED:
+                return Local.getString("Failed");
+            case Task.FROZEN:
+                return Local.getString("Frozen");
+            case Task.LOCKED:
+                return Local.getString("Locked");
+            case Task.SCHEDULED:
+                return Local.getString("Scheduled");
         }
         return "";
     }
 
     String getPriorityString(int p) {
         switch (p) {
-        case Task.PRIORITY_NORMAL:
-            return Local.getString("Normal");
-        case Task.PRIORITY_LOW:
-            return Local.getString("Low");
-        case Task.PRIORITY_LOWEST:
-            return Local.getString("Lowest");
-        case Task.PRIORITY_HIGH:
-            return Local.getString("High");
-        case Task.PRIORITY_HIGHEST:
-            return Local.getString("Highest");
+            case Task.PRIORITY_NORMAL:
+                return Local.getString("Normal");
+            case Task.PRIORITY_LOW:
+                return Local.getString("Low");
+            case Task.PRIORITY_LOWEST:
+                return Local.getString("Lowest");
+            case Task.PRIORITY_HIGH:
+                return Local.getString("High");
+            case Task.PRIORITY_HIGHEST:
+                return Local.getString("Highest");
         }
         return "";
     }
@@ -149,26 +148,37 @@ public class TaskTableModel extends AbstractTreeTableModel implements TreeTableM
      */
     public int getChildCount(Object parent) {
         if (parent instanceof Project) {
-		if( activeOnly() ){
-			return CurrentProject.getTaskList().getActiveSubTasks(null, CurrentDate.get()).size();
-		}
-		else return CurrentProject.getTaskList().getTopLevelTasks().size();
+            if (activeOnly()) {
+                return CurrentProject.getTaskList().getActiveSubTasks(null, CurrentDate.get()).size();
+            } else {
+                return CurrentProject.getTaskList().getTopLevelTasks().size();
+            }
         }
         Task t = (Task) parent;
-        if(activeOnly()) return CurrentProject.getTaskList().getActiveSubTasks(t.getId(), CurrentDate.get()).size();
-	else return t.getSubTasks().size();
+        if (activeOnly()) {
+            return CurrentProject.getTaskList().getActiveSubTasks(t.getId(), CurrentDate.get()).size();
+        } else {
+            return t.getSubTasks().size();
+        }
     }
 
     /**
      * @see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
      */
     public Object getChild(Object parent, int index) {
-        if (parent instanceof Project)
-            if( activeOnly() ) return CurrentProject.getTaskList().getActiveSubTasks(null, CurrentDate.get()).toArray()[index];
-	    else return CurrentProject.getTaskList().getTopLevelTasks().toArray()[index];
+        if (parent instanceof Project) {
+            if (activeOnly()) {
+                return CurrentProject.getTaskList().getActiveSubTasks(null, CurrentDate.get()).toArray()[index];
+            } else {
+                return CurrentProject.getTaskList().getTopLevelTasks().toArray()[index];
+            }
+        }
         Task t = (Task) parent;
-        if(activeOnly()) return CurrentProject.getTaskList().getActiveSubTasks(t.getId(), CurrentDate.get()).toArray()[index];
-	else return t.getSubTasks().toArray()[index];
+        if (activeOnly()) {
+            return CurrentProject.getTaskList().getActiveSubTasks(t.getId(), CurrentDate.get()).toArray()[index];
+        } else {
+            return t.getSubTasks().toArray()[index];
+        }
     }
 
     /**
@@ -177,54 +187,58 @@ public class TaskTableModel extends AbstractTreeTableModel implements TreeTableM
     public Class getColumnClass(int column) {
         try {
             switch (column) {
-            case 1:
-                return TreeTableModel.class;
-            case 0:
-                return TaskTable.class;
-            case 4:
-            case 5:
-                return Class.forName("java.lang.String");
-            case 2:
-            case 3:
-                return Class.forName("java.util.Date");
-            case 6:
-                return Class.forName("java.lang.Integer");
+                case 1:
+                    return TreeTableModel.class;
+                case 0:
+                    return TaskTable.class;
+                case 4:
+                case 5:
+                    return Class.forName("java.lang.String");
+                case 2:
+                case 3:
+                    return Class.forName("java.util.Date");
+                case 6:
+                    return Class.forName("java.lang.Integer");
             }
         } catch (Exception ex) {
             ex.printStackTrace();
         }
         return null;
     }
-    
-    public void fireTreeStructureChanged(){	    
-	    fireTreeStructureChanged( this,
-	    			new Object[]{getRoot()},
-				new int[0],
-				new Object[0]
-				);
+
+    public void fireTreeStructureChanged() {
+        fireTreeStructureChanged(this,
+                new Object[]{getRoot()},
+                new int[0],
+                new Object[0]
+        );
     }
-    
-    
+
+
     /**
      * Update cached data
      */
-    public void fireUpdateCache(){
-		activeOnly = check_activeOnly();
+    public void fireUpdateCache() {
+        activeOnly = check_activeOnly();
     }
 
-    public static boolean check_activeOnly(){
-		Object o = Context.get("SHOW_ACTIVE_TASKS_ONLY");
-		if(o == null) return false;
-		return o.toString().equals("true");
-	}
+    public static boolean check_activeOnly() {
+        Object o = Context.get("SHOW_ACTIVE_TASKS_ONLY");
+        if (o == null) {
+            return false;
+        }
+        return o.toString().equals("true");
+    }
 
-    public boolean activeOnly(){
-		return activeOnly;
+    public boolean activeOnly() {
+        return activeOnly;
     }
-    
+
     public boolean isCellEditable(Object node, int column) {
-		if(column == 6) return true; 
-        return super.isCellEditable(node, column); 
+        if (column == 6) {
+            return true;
+        }
+        return super.isCellEditable(node, column);
     }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/TaskTableSorter.java b/src/net/sf/memoranda/ui/TaskTableSorter.java
index afa3612..366b7d3 100755
--- a/src/net/sf/memoranda/ui/TaskTableSorter.java
+++ b/src/net/sf/memoranda/ui/TaskTableSorter.java
@@ -1,81 +1,99 @@
 package net.sf.memoranda.ui;
 
-import javax.swing.*;
-import javax.swing.table.*;
-import javax.swing.tree.*;
-import javax.swing.event.*;
+import net.sf.memoranda.CurrentProject;
+import net.sf.memoranda.Project;
+import net.sf.memoranda.Task;
+import net.sf.memoranda.date.CurrentDate;
 
+import javax.swing.*;
+import javax.swing.table.JTableHeader;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.table.TableColumnModel;
 import java.awt.*;
-import java.awt.event.*;
-
-import java.util.*;
-
-import net.sf.memoranda.*;
-import net.sf.memoranda.util.*;
-import net.sf.memoranda.date.*;
-
-public class TaskTableSorter extends TaskTableModel{
-	
-	// -1 == no sorting
-	int sorting_column = -1;
-	
-	// sort opposite direction
-	boolean opposite = false;
-	
-	Comparator comparator = new Comparator(){
-		public int compare(Object o1, Object o2){
-			if(sorting_column == -1) return 0;
-			if( (o1 instanceof Task) == false) return 0;
-			if( (o2 instanceof Task) == false ) return 0;
-			
-			
-			Task task1 = (Task) o1;
-			Task task2 = (Task) o2;
-			
-			// based on TaskTableModel.columnNames
-			switch(sorting_column){
-				case 1: return task1.getText().compareTo(task2.getText());
-				case 2: return task1.getStartDate().getDate().compareTo(task2.getStartDate().getDate());
-				case 3: return task1.getEndDate().getDate().compareTo(task2.getEndDate().getDate());
-				case 0: // task priority, same as 4
-				case 4: return task1.getPriority() - task2.getPriority();
-				case 5: return task1.getStatus( CurrentDate.get() ) - task2.getStatus( CurrentDate.get() );
-				case 6: return task1.getProgress() - task2.getProgress();
-			}
-			
-			return 0;
-		}
-	};
-	
-	public TaskTableSorter( TaskTable table ){
-		JTableHeader tableHeader = table.getTableHeader();
-		tableHeader.addMouseListener( new MouseHandler() );
-		tableHeader.setDefaultRenderer( new SortableHeaderRenderer());
-	}
-	
-	public Object getChild(Object parent, int index) {
-		Collection c = null;
-		
-		if (parent instanceof Project){
-			if( activeOnly() ) c = CurrentProject.getTaskList().getActiveSubTasks(null, CurrentDate.get());
-			else c = CurrentProject.getTaskList().getTopLevelTasks();
-		}
-		else{
-			Task t = (Task) parent;
-			if(activeOnly()) c = CurrentProject.getTaskList().getActiveSubTasks(t.getId(), CurrentDate.get());
-			else c = t.getSubTasks();
-		}
-		
-		Object array[] = c.toArray();
-		Arrays.sort(array, comparator);
-		if(opposite){
-			return array[ array.length - index - 1];
-		}
-		return array[index];
-	}
-
-	
-    
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Comparator;
+
+public class TaskTableSorter extends TaskTableModel {
+
+    // -1 == no sorting
+    int sorting_column = -1;
+
+    // sort opposite direction
+    boolean opposite = false;
+
+    Comparator comparator = new Comparator() {
+        public int compare(Object o1, Object o2) {
+            if (sorting_column == -1) {
+                return 0;
+            }
+            if ((o1 instanceof Task) == false) {
+                return 0;
+            }
+            if ((o2 instanceof Task) == false) {
+                return 0;
+            }
+
+
+            Task task1 = (Task) o1;
+            Task task2 = (Task) o2;
+
+            // based on TaskTableModel.columnNames
+            switch (sorting_column) {
+                case 1:
+                    return task1.getText().compareTo(task2.getText());
+                case 2:
+                    return task1.getStartDate().getDate().compareTo(task2.getStartDate().getDate());
+                case 3:
+                    return task1.getEndDate().getDate().compareTo(task2.getEndDate().getDate());
+                case 0: // task priority, same as 4
+                case 4:
+                    return task1.getPriority() - task2.getPriority();
+                case 5:
+                    return task1.getStatus(CurrentDate.get()) - task2.getStatus(CurrentDate.get());
+                case 6:
+                    return task1.getProgress() - task2.getProgress();
+            }
+
+            return 0;
+        }
+    };
+
+    public TaskTableSorter(TaskTable table) {
+        JTableHeader tableHeader = table.getTableHeader();
+        tableHeader.addMouseListener(new MouseHandler());
+        tableHeader.setDefaultRenderer(new SortableHeaderRenderer());
+    }
+
+    public Object getChild(Object parent, int index) {
+        Collection c = null;
+
+        if (parent instanceof Project) {
+            if (activeOnly()) {
+                c = CurrentProject.getTaskList().getActiveSubTasks(null, CurrentDate.get());
+            } else {
+                c = CurrentProject.getTaskList().getTopLevelTasks();
+            }
+        } else {
+            Task t = (Task) parent;
+            if (activeOnly()) {
+                c = CurrentProject.getTaskList().getActiveSubTasks(t.getId(), CurrentDate.get());
+            } else {
+                c = t.getSubTasks();
+            }
+        }
+
+        Object array[] = c.toArray();
+        Arrays.sort(array, comparator);
+        if (opposite) {
+            return array[array.length - index - 1];
+        }
+        return array[index];
+    }
+
+
     private class MouseHandler extends MouseAdapter {
         public void mouseClicked(MouseEvent e) {
             JTableHeader h = (JTableHeader) e.getSource();
@@ -83,48 +101,53 @@ public class TaskTableSorter extends TaskTableModel{
             int viewColumn = columnModel.getColumnIndexAtX(e.getX());
             int column = columnModel.getColumn(viewColumn).getModelIndex();
             if (column != -1) {
-		sorting_column = column;
-		
-		// 0 == priority icon column
-		// 4 == priority text column
-		if(column == 0) sorting_column = 4;
-		
-		if(e.isControlDown()) sorting_column = -1;
-		else opposite = !opposite;
-		
-		TaskTable treetable = ( (TaskTable) h.getTable());
-		
-		//java.util.Collection expanded = treetable.getExpandedTreeNodes();
-		
-		treetable.tableChanged();
-		//treetable.setExpandedTreeNodes(expanded);
-		//h.updateUI();
-		h.resizeAndRepaint();
+                sorting_column = column;
+
+                // 0 == priority icon column
+                // 4 == priority text column
+                if (column == 0) {
+                    sorting_column = 4;
+                }
+
+                if (e.isControlDown()) {
+                    sorting_column = -1;
+                } else {
+                    opposite = !opposite;
+                }
+
+                TaskTable treetable = ((TaskTable) h.getTable());
+
+                //java.util.Collection expanded = treetable.getExpandedTreeNodes();
+
+                treetable.tableChanged();
+                //treetable.setExpandedTreeNodes(expanded);
+                //h.updateUI();
+                h.resizeAndRepaint();
             }
         }
     }
-    
-	/**
-	* Render sorting header differently
-	*/
-	private class SortableHeaderRenderer implements TableCellRenderer {
-	    
-	    
-	    
-		public Component getTableCellRendererComponent(JTable table, 
-							       Object value,
-							       boolean isSelected, 
-							       boolean hasFocus,
-							       int row, 
-							       int column) {
-			JComponent c = new JLabel(value.toString());
-			if(column == sorting_column){
-				c.setFont(c.getFont().deriveFont(Font.BOLD));
-				//c.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.BLACK));
-			}
-			else c.setFont(c.getFont().deriveFont(Font.PLAIN));
-			return c;
-		}
-	}
-	
+
+    /**
+     * Render sorting header differently
+     */
+    private class SortableHeaderRenderer implements TableCellRenderer {
+
+
+        public Component getTableCellRendererComponent(JTable table,
+                                                       Object value,
+                                                       boolean isSelected,
+                                                       boolean hasFocus,
+                                                       int row,
+                                                       int column) {
+            JComponent c = new JLabel(value.toString());
+            if (column == sorting_column) {
+                c.setFont(c.getFont().deriveFont(Font.BOLD));
+                //c.setBorder(BorderFactory.createMatteBorder(1,1,1,1,Color.BLACK));
+            } else {
+                c.setFont(c.getFont().deriveFont(Font.PLAIN));
+            }
+            return c;
+        }
+    }
+
 }
diff --git a/src/net/sf/memoranda/ui/TaskTreeTableCellRenderer.java b/src/net/sf/memoranda/ui/TaskTreeTableCellRenderer.java
index f55f4df..4d2381e 100755
--- a/src/net/sf/memoranda/ui/TaskTreeTableCellRenderer.java
+++ b/src/net/sf/memoranda/ui/TaskTreeTableCellRenderer.java
@@ -6,26 +6,16 @@ import net.sf.memoranda.Task;
 import net.sf.memoranda.date.CurrentDate;
 import net.sf.memoranda.util.Configuration;
 
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Font;
-import java.text.DateFormat;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JComponent;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTable;
-import javax.swing.JTree;
+import javax.swing.*;
 import javax.swing.table.TableCellRenderer;
 import javax.swing.tree.DefaultTreeCellRenderer;
 import javax.swing.tree.TreeCellRenderer;
-	
+import java.awt.*;
+import java.text.DateFormat;
+import java.util.Date;
+
 /**
- * 
+ *
  */
 public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implements TreeCellRenderer, TableCellRenderer {
     static ImageIcon PR_HIGHEST_ICON = new ImageIcon(net.sf.memoranda.ui.AppFrame.class
@@ -55,7 +45,7 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
     JPanel empty_panel = new JPanel();
     // get Task objects via table (maybe not most elegant solution)
     TaskTable table;
-    
+
     //SimpleDateFormat dateFormat = new SimpleDateFormat("d.M.yyyy");
     //  use localized date format, modified from default locale's short format if possible
     DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.SHORT);//createModifiedShortFormat();
@@ -68,17 +58,19 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
     }
 
     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected,
-            boolean expanded, boolean leaf, int row, boolean hasFocus) {
+                                                  boolean expanded, boolean leaf, int row, boolean hasFocus) {
         // if root then just return some component
         // it is not shown anyway
         super.getTreeCellRendererComponent(
                 tree, value, selected,
                 expanded, leaf, row,
                 hasFocus);
-        if (value instanceof Project)
+        if (value instanceof Project) {
             return empty_panel;
-        if (!(value instanceof Task))
+        }
+        if (!(value instanceof Task)) {
             return empty_panel;
+        }
         Task t = (Task) value;
         setText(t.getText());
         setToolTipText(t.getDescription());
@@ -87,24 +79,25 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
         //return getTaskTreeCellRenderer(t, selected, hasFocus);
         return this;
     }
-//depending on column can set font size
+
+    //depending on column can set font size
     public Component getTableCellRendererComponent(JTable ignore, Object value, boolean selected,
-            boolean hasFocus, int row, int column) {        
+                                                   boolean hasFocus, int row, int column) {
         Task t = (Task) table.getValueAt(row, 1);
         if (column == 1) {
             // this never happens because
             // column 1 contains TreeTableModel
             // and default renderer for it
             // is JTree directly 
-        	System.out.println("TaskTreeLabelCellRenderer.java attempting to access BASE FONT SIZE current valute is" + Configuration.get("BASE_FONT_SIZE").toString());
-               	label.setFont((new Font("serif",Font.PLAIN,Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
+            System.out.println("TaskTreeLabelCellRenderer.java attempting to access BASE FONT SIZE current valute is" + Configuration.get("BASE_FONT_SIZE").toString());
+            label.setFont((new Font("serif", Font.PLAIN, Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
             return table.getTree();
         }
         // default values
         // label.setOpaque(true);
         label.setForeground(Color.BLACK);
         label.setIcon(null);
-       // label.setToolTipText(t.getDescription()); //XXX Disabled because of bug 1596966
+        // label.setToolTipText(t.getDescription()); //XXX Disabled because of bug 1596966
         applyFont(t, label);
         applySelectionStyle(selected, label);
         applyFocus(hasFocus, label);
@@ -122,30 +115,27 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
         }
         // if( column_name.equals(Local.getString("Start date")) ||
         // column_name.equals(Local.getString("End date")) ){
-        if ((column == 2) || (column == 3)) {	
+        if ((column == 2) || (column == 3)) {
             label.setText(dateFormat.format((Date) value));
-            label.setFont((new Font("serif",Font.PLAIN,Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
+            label.setFont((new Font("serif", Font.PLAIN, Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
             return label;
         }
         // if( column_name.equals( Local.getString("Status") ) ){
         if (column == 5) {
             label.setText(value.toString());
-            try{
-            label.setFont((new Font("serif",Font.PLAIN,Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
-            }
-            catch(Exception f){
-            	System.out.println("BASE_FONT_SIZE not found ignoring font size");
+            try {
+                label.setFont((new Font("serif", Font.PLAIN, Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
+            } catch (Exception f) {
+                System.out.println("BASE_FONT_SIZE not found ignoring font size");
             }
             label.setForeground(getColorForTaskStatus(t, false));
             return label;
         }
-        try{
-        label.setFont((new Font("serif",Font.PLAIN,Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
-        label.setText(value.toString());
-        }
-        catch(Exception g)
-        {
-        	System.out.println("BASE_FONT_SIZE not found");
+        try {
+            label.setFont((new Font("serif", Font.PLAIN, Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString()))));
+            label.setText(value.toString());
+        } catch (Exception g) {
+            System.out.println("BASE_FONT_SIZE not found");
         }
         return label;
     }
@@ -154,13 +144,13 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
      * Component used to render tree cells in treetable
      */
     private Component getTaskTreeCellRenderer(Task t, boolean selected, boolean hasFocus) {
-        JLabel tree_label = new JLabel();       
+        JLabel tree_label = new JLabel();
         tree_label.setText(t.getText());
         // XXX [alexeya] Disabled coz a bug with tooltips in TreeTables:
         //tree_label.setToolTipText(t.getDescription());
         tree_label.setIcon(getStatusIcon(t));
         applyFont(t, tree_label);
-        return tree_label;        
+        return tree_label;
     }
 
     /**
@@ -182,10 +172,11 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
 
     // some convenience methods
     private void applySelectionStyle(boolean selected, JComponent c) {
-        if (selected)
+        if (selected) {
             c.setBackground(table.getSelectionBackground());
-        else
+        } else {
             c.setBackground(table.getBackground());
+        }
     }
 
     private void applyFocus(boolean hasFocus, JComponent c) {
@@ -201,10 +192,11 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
 
     private void applyFont(Task t, JComponent c) {
         if ((t.getStatus(CurrentDate.get()) == Task.ACTIVE)
-                || (t.getStatus(CurrentDate.get()) == Task.DEADLINE))
+                || (t.getStatus(CurrentDate.get()) == Task.DEADLINE)) {
             c.setFont(c.getFont().deriveFont(Font.BOLD));
-        else
+        } else {
             c.setFont(c.getFont().deriveFont(Font.PLAIN));
+        }
     }
 
     /**
@@ -214,29 +206,29 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
     public static Color getColorForTaskStatus(Task t, boolean light) {
         if (light) {
             switch (t.getStatus(CurrentDate.get())) {
-            case Task.ACTIVE:
-                return new Color(192, 255, 192);
-            case Task.SCHEDULED:
-                return new Color(192, 230, 255);
-            case Task.DEADLINE:
-                return new Color(255, 240, 160);
-            case Task.FAILED:
-                return new Color(255, 192, 192);
-            case Task.COMPLETED:
-                return new Color(230, 255, 230);
+                case Task.ACTIVE:
+                    return new Color(192, 255, 192);
+                case Task.SCHEDULED:
+                    return new Color(192, 230, 255);
+                case Task.DEADLINE:
+                    return new Color(255, 240, 160);
+                case Task.FAILED:
+                    return new Color(255, 192, 192);
+                case Task.COMPLETED:
+                    return new Color(230, 255, 230);
             }
         } else {
             switch (t.getStatus(CurrentDate.get())) {
-            case Task.ACTIVE:
-                return new Color(0, 180, 0);
-            case Task.SCHEDULED:
-                return new Color(0, 120, 255);
-            case Task.DEADLINE:
-                return new Color(160, 90, 0);
-            case Task.FAILED:
-                return new Color(255, 0, 0);
-            case Task.COMPLETED:
-                return new Color(0, 120, 0);
+                case Task.ACTIVE:
+                    return new Color(0, 180, 0);
+                case Task.SCHEDULED:
+                    return new Color(0, 120, 255);
+                case Task.DEADLINE:
+                    return new Color(160, 90, 0);
+                case Task.FAILED:
+                    return new Color(255, 0, 0);
+                case Task.COMPLETED:
+                    return new Color(0, 120, 0);
             }
         }
         System.err.println("Problem finding color for task status");
@@ -245,16 +237,16 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
 
     public static ImageIcon getStatusIcon(Task t) {
         switch (t.getStatus(CurrentDate.get())) {
-        case Task.ACTIVE:
-            return TASK_ACTIVE_ICON;
-        case Task.SCHEDULED:
-            return TASK_SCHEDULED_ICON;
-        case Task.DEADLINE:
-            return TASK_DEADLINE_ICON;
-        case Task.FAILED:
-            return TASK_FAILED_ICON;
-        case Task.COMPLETED:
-            return TASK_COMPLETED_ICON;
+            case Task.ACTIVE:
+                return TASK_ACTIVE_ICON;
+            case Task.SCHEDULED:
+                return TASK_SCHEDULED_ICON;
+            case Task.DEADLINE:
+                return TASK_DEADLINE_ICON;
+            case Task.FAILED:
+                return TASK_FAILED_ICON;
+            case Task.COMPLETED:
+                return TASK_COMPLETED_ICON;
         }
         System.err.println("Problem finding status icon");
         return null;
@@ -262,20 +254,20 @@ public class TaskTreeTableCellRenderer extends DefaultTreeCellRenderer implement
 
     public static ImageIcon getPriorityIcon(Task t) {
         switch (t.getPriority()) {
-        case Task.PRIORITY_NORMAL:
-            return PR_NORMAL_ICON;
-        case Task.PRIORITY_HIGHEST:
-            return PR_HIGHEST_ICON;
-        case Task.PRIORITY_HIGH:
-            return PR_HIGH_ICON;
-        case Task.PRIORITY_LOW:
-            return PR_LOW_ICON;
-        case Task.PRIORITY_LOWEST:
-            return PR_LOWEST_ICON;
+            case Task.PRIORITY_NORMAL:
+                return PR_NORMAL_ICON;
+            case Task.PRIORITY_HIGHEST:
+                return PR_HIGHEST_ICON;
+            case Task.PRIORITY_HIGH:
+                return PR_HIGH_ICON;
+            case Task.PRIORITY_LOW:
+                return PR_LOW_ICON;
+            case Task.PRIORITY_LOWEST:
+                return PR_LOWEST_ICON;
         }
         System.err.println("Problem finding priority icon");
         return null;
     }
-    
-    
+
+
 }
diff --git a/src/net/sf/memoranda/ui/WorkPanel.java b/src/net/sf/memoranda/ui/WorkPanel.java
index e3c2a5d..d75c238 100755
--- a/src/net/sf/memoranda/ui/WorkPanel.java
+++ b/src/net/sf/memoranda/ui/WorkPanel.java
@@ -1,275 +1,265 @@
 package net.sf.memoranda.ui;
 
-import java.awt.BorderLayout;
-import java.awt.CardLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
+import net.sf.memoranda.util.Context;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JPanel;
-import javax.swing.JToolBar;
-import javax.swing.SwingConstants;
+import javax.swing.*;
 import javax.swing.border.BevelBorder;
 import javax.swing.border.Border;
-
-import net.sf.memoranda.util.Context;
-import net.sf.memoranda.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
 
 /**
- * 
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 
 /*$Id: WorkPanel.java,v 1.9 2004/04/05 10:05:44 alexeya Exp $*/
 public class WorkPanel extends JPanel {
-	BorderLayout borderLayout1 = new BorderLayout();
-	JToolBar toolBar = new JToolBar();
-	JPanel panel = new JPanel();
-	CardLayout cardLayout1 = new CardLayout();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JToolBar toolBar = new JToolBar();
+    JPanel panel = new JPanel();
+    CardLayout cardLayout1 = new CardLayout();
 
-	public JButton notesB = new JButton();
-	public DailyItemsPanel dailyItemsPanel = new DailyItemsPanel(this);
-	public ResourcesPanel filesPanel = new ResourcesPanel();
-	public JButton agendaB = new JButton();
-	public JButton tasksB = new JButton();
-	public JButton eventsB = new JButton();
-	public JButton filesB = new JButton();
-	JButton currentB = null;
-	Border border1;
+    public JButton notesB = new JButton();
+    public DailyItemsPanel dailyItemsPanel = new DailyItemsPanel(this);
+    public ResourcesPanel filesPanel = new ResourcesPanel();
+    public JButton agendaB = new JButton();
+    public JButton tasksB = new JButton();
+    public JButton eventsB = new JButton();
+    public JButton filesB = new JButton();
+    JButton currentB = null;
+    Border border1;
 
-	public WorkPanel() {
-		try {
-			jbInit();
-		} catch (Exception ex) {
-			new ExceptionDialog(ex);
-		}
-	}
+    public WorkPanel() {
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
+        }
+    }
 
-	void jbInit() throws Exception {
-		border1 =
-			BorderFactory.createCompoundBorder(
-				BorderFactory.createBevelBorder(
-					BevelBorder.LOWERED,
-					Color.white,
-					Color.white,
-					new Color(124, 124, 124),
-					new Color(178, 178, 178)),
-				BorderFactory.createEmptyBorder(0, 2, 0, 0));
+    void jbInit() throws Exception {
+        border1 =
+                BorderFactory.createCompoundBorder(
+                        BorderFactory.createBevelBorder(
+                                BevelBorder.LOWERED,
+                                Color.white,
+                                Color.white,
+                                new Color(124, 124, 124),
+                                new Color(178, 178, 178)),
+                        BorderFactory.createEmptyBorder(0, 2, 0, 0));
 
-		this.setLayout(borderLayout1);
-		toolBar.setOrientation(JToolBar.VERTICAL);
-		toolBar.setBackground(Color.white);
+        this.setLayout(borderLayout1);
+        toolBar.setOrientation(JToolBar.VERTICAL);
+        toolBar.setBackground(Color.white);
 
-		toolBar.setBorderPainted(false);
-		toolBar.setFloatable(false);
-		panel.setLayout(cardLayout1);
+        toolBar.setBorderPainted(false);
+        toolBar.setFloatable(false);
+        panel.setLayout(cardLayout1);
 
-		agendaB.setBackground(Color.white);
-		agendaB.setMaximumSize(new Dimension(60, 80));
-		agendaB.setMinimumSize(new Dimension(30, 30));
+        agendaB.setBackground(Color.white);
+        agendaB.setMaximumSize(new Dimension(60, 80));
+        agendaB.setMinimumSize(new Dimension(30, 30));
 
-		agendaB.setFont(new java.awt.Font("Dialog", 1, 10));
-		agendaB.setPreferredSize(new Dimension(50, 50));
-		agendaB.setBorderPainted(false);
-		agendaB.setContentAreaFilled(false);
-		agendaB.setFocusPainted(false);
-		agendaB.setHorizontalTextPosition(SwingConstants.CENTER);
-		agendaB.setText(Local.getString("Agenda"));
-		agendaB.setVerticalAlignment(SwingConstants.TOP);
-		agendaB.setVerticalTextPosition(SwingConstants.BOTTOM);
-		agendaB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				agendaB_actionPerformed(e);
-			}
-		});
-		agendaB.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/agenda.png")));
-		agendaB.setOpaque(false);
-		agendaB.setMargin(new Insets(0, 0, 0, 0));
-		agendaB.setSelected(true);
+        agendaB.setFont(new java.awt.Font("Dialog", 1, 10));
+        agendaB.setPreferredSize(new Dimension(50, 50));
+        agendaB.setBorderPainted(false);
+        agendaB.setContentAreaFilled(false);
+        agendaB.setFocusPainted(false);
+        agendaB.setHorizontalTextPosition(SwingConstants.CENTER);
+        agendaB.setText(Local.getString("Agenda"));
+        agendaB.setVerticalAlignment(SwingConstants.TOP);
+        agendaB.setVerticalTextPosition(SwingConstants.BOTTOM);
+        agendaB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                agendaB_actionPerformed(e);
+            }
+        });
+        agendaB.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/agenda.png")));
+        agendaB.setOpaque(false);
+        agendaB.setMargin(new Insets(0, 0, 0, 0));
+        agendaB.setSelected(true);
 
-		eventsB.setBackground(Color.white);
-		eventsB.setMaximumSize(new Dimension(60, 80));
-		eventsB.setMinimumSize(new Dimension(30, 30));
+        eventsB.setBackground(Color.white);
+        eventsB.setMaximumSize(new Dimension(60, 80));
+        eventsB.setMinimumSize(new Dimension(30, 30));
 
-		eventsB.setFont(new java.awt.Font("Dialog", 1, 10));
-		eventsB.setPreferredSize(new Dimension(50, 50));
-		eventsB.setBorderPainted(false);
-		eventsB.setContentAreaFilled(false);
-		eventsB.setFocusPainted(false);
-		eventsB.setHorizontalTextPosition(SwingConstants.CENTER);
-		eventsB.setText(Local.getString("Events"));
-		eventsB.setVerticalAlignment(SwingConstants.TOP);
-		eventsB.setVerticalTextPosition(SwingConstants.BOTTOM);
-		eventsB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				eventsB_actionPerformed(e);
-			}
-		});
-		eventsB.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/events.png")));
-		eventsB.setOpaque(false);
-		eventsB.setMargin(new Insets(0, 0, 0, 0));
-		//eventsB.setSelected(true);
+        eventsB.setFont(new java.awt.Font("Dialog", 1, 10));
+        eventsB.setPreferredSize(new Dimension(50, 50));
+        eventsB.setBorderPainted(false);
+        eventsB.setContentAreaFilled(false);
+        eventsB.setFocusPainted(false);
+        eventsB.setHorizontalTextPosition(SwingConstants.CENTER);
+        eventsB.setText(Local.getString("Events"));
+        eventsB.setVerticalAlignment(SwingConstants.TOP);
+        eventsB.setVerticalTextPosition(SwingConstants.BOTTOM);
+        eventsB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                eventsB_actionPerformed(e);
+            }
+        });
+        eventsB.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/events.png")));
+        eventsB.setOpaque(false);
+        eventsB.setMargin(new Insets(0, 0, 0, 0));
+        //eventsB.setSelected(true);
 
-		tasksB.setSelected(true);
-		tasksB.setFont(new java.awt.Font("Dialog", 1, 10));
-		tasksB.setMargin(new Insets(0, 0, 0, 0));
-		tasksB.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/tasks.png")));
-		tasksB.setVerticalTextPosition(SwingConstants.BOTTOM);
-		tasksB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				tasksB_actionPerformed(e);
-			}
-		});
-		tasksB.setVerticalAlignment(SwingConstants.TOP);
-		tasksB.setText(Local.getString("Tasks"));
-		tasksB.setHorizontalTextPosition(SwingConstants.CENTER);
-		tasksB.setFocusPainted(false);
-		tasksB.setBorderPainted(false);
-		tasksB.setContentAreaFilled(false);
-		tasksB.setPreferredSize(new Dimension(50, 50));
-		tasksB.setMinimumSize(new Dimension(30, 30));
-		tasksB.setOpaque(false);
-		tasksB.setMaximumSize(new Dimension(60, 80));
-		tasksB.setBackground(Color.white);
+        tasksB.setSelected(true);
+        tasksB.setFont(new java.awt.Font("Dialog", 1, 10));
+        tasksB.setMargin(new Insets(0, 0, 0, 0));
+        tasksB.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/tasks.png")));
+        tasksB.setVerticalTextPosition(SwingConstants.BOTTOM);
+        tasksB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                tasksB_actionPerformed(e);
+            }
+        });
+        tasksB.setVerticalAlignment(SwingConstants.TOP);
+        tasksB.setText(Local.getString("Tasks"));
+        tasksB.setHorizontalTextPosition(SwingConstants.CENTER);
+        tasksB.setFocusPainted(false);
+        tasksB.setBorderPainted(false);
+        tasksB.setContentAreaFilled(false);
+        tasksB.setPreferredSize(new Dimension(50, 50));
+        tasksB.setMinimumSize(new Dimension(30, 30));
+        tasksB.setOpaque(false);
+        tasksB.setMaximumSize(new Dimension(60, 80));
+        tasksB.setBackground(Color.white);
 
-		notesB.setFont(new java.awt.Font("Dialog", 1, 10));
-		notesB.setBackground(Color.white);
-		notesB.setBorder(null);
-		notesB.setMaximumSize(new Dimension(60, 80));
-		notesB.setMinimumSize(new Dimension(30, 30));
-		notesB.setOpaque(false);
-		notesB.setPreferredSize(new Dimension(60, 50));
-		notesB.setBorderPainted(false);
-		notesB.setContentAreaFilled(false);
-		notesB.setFocusPainted(false);
-		notesB.setHorizontalTextPosition(SwingConstants.CENTER);
-		notesB.setText(Local.getString("Notes"));
-		notesB.setVerticalAlignment(SwingConstants.TOP);
-		notesB.setVerticalTextPosition(SwingConstants.BOTTOM);
-		notesB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				notesB_actionPerformed(e);
-			}
-		});
-		notesB.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/notes.png")));
-		notesB.setMargin(new Insets(0, 0, 0, 0));
-		notesB.setSelected(true);
-		this.setPreferredSize(new Dimension(1073, 300));
+        notesB.setFont(new java.awt.Font("Dialog", 1, 10));
+        notesB.setBackground(Color.white);
+        notesB.setBorder(null);
+        notesB.setMaximumSize(new Dimension(60, 80));
+        notesB.setMinimumSize(new Dimension(30, 30));
+        notesB.setOpaque(false);
+        notesB.setPreferredSize(new Dimension(60, 50));
+        notesB.setBorderPainted(false);
+        notesB.setContentAreaFilled(false);
+        notesB.setFocusPainted(false);
+        notesB.setHorizontalTextPosition(SwingConstants.CENTER);
+        notesB.setText(Local.getString("Notes"));
+        notesB.setVerticalAlignment(SwingConstants.TOP);
+        notesB.setVerticalTextPosition(SwingConstants.BOTTOM);
+        notesB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                notesB_actionPerformed(e);
+            }
+        });
+        notesB.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/notes.png")));
+        notesB.setMargin(new Insets(0, 0, 0, 0));
+        notesB.setSelected(true);
+        this.setPreferredSize(new Dimension(1073, 300));
 
-		filesB.setSelected(true);
-		filesB.setMargin(new Insets(0, 0, 0, 0));
-		filesB.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.AppFrame.class.getResource(
-					"resources/icons/files.png")));
-		filesB.setVerticalTextPosition(SwingConstants.BOTTOM);
-		filesB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				filesB_actionPerformed(e);
-			}
-		});
-		filesB.setFont(new java.awt.Font("Dialog", 1, 10));
-		filesB.setVerticalAlignment(SwingConstants.TOP);
-		filesB.setText(Local.getString("Resources"));
-		filesB.setHorizontalTextPosition(SwingConstants.CENTER);
-		filesB.setFocusPainted(false);
-		filesB.setBorderPainted(false);
-		filesB.setContentAreaFilled(false);
-		filesB.setPreferredSize(new Dimension(50, 50));
-		filesB.setMinimumSize(new Dimension(30, 30));
-		filesB.setOpaque(false);
-		filesB.setMaximumSize(new Dimension(60, 80));
-		filesB.setBackground(Color.white);
-		this.add(toolBar, BorderLayout.WEST);
-		this.add(panel, BorderLayout.CENTER);
-		panel.add(dailyItemsPanel, "DAILYITEMS");
-		panel.add(filesPanel, "FILES");
-		toolBar.add(agendaB, null);
-		toolBar.add(eventsB, null);
-		toolBar.add(tasksB, null);
-		toolBar.add(notesB, null);
-		toolBar.add(filesB, null);
-		currentB = agendaB;
-		// Default blue color
-		currentB.setBackground(new Color(215, 225, 250));
-		currentB.setOpaque(true);
+        filesB.setSelected(true);
+        filesB.setMargin(new Insets(0, 0, 0, 0));
+        filesB.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.AppFrame.class.getResource(
+                                "resources/icons/files.png")));
+        filesB.setVerticalTextPosition(SwingConstants.BOTTOM);
+        filesB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                filesB_actionPerformed(e);
+            }
+        });
+        filesB.setFont(new java.awt.Font("Dialog", 1, 10));
+        filesB.setVerticalAlignment(SwingConstants.TOP);
+        filesB.setText(Local.getString("Resources"));
+        filesB.setHorizontalTextPosition(SwingConstants.CENTER);
+        filesB.setFocusPainted(false);
+        filesB.setBorderPainted(false);
+        filesB.setContentAreaFilled(false);
+        filesB.setPreferredSize(new Dimension(50, 50));
+        filesB.setMinimumSize(new Dimension(30, 30));
+        filesB.setOpaque(false);
+        filesB.setMaximumSize(new Dimension(60, 80));
+        filesB.setBackground(Color.white);
+        this.add(toolBar, BorderLayout.WEST);
+        this.add(panel, BorderLayout.CENTER);
+        panel.add(dailyItemsPanel, "DAILYITEMS");
+        panel.add(filesPanel, "FILES");
+        toolBar.add(agendaB, null);
+        toolBar.add(eventsB, null);
+        toolBar.add(tasksB, null);
+        toolBar.add(notesB, null);
+        toolBar.add(filesB, null);
+        currentB = agendaB;
+        // Default blue color
+        currentB.setBackground(new Color(215, 225, 250));
+        currentB.setOpaque(true);
 
-		toolBar.setBorder(null);
-		panel.setBorder(null);
-		dailyItemsPanel.setBorder(null);
-		filesPanel.setBorder(null);
+        toolBar.setBorder(null);
+        panel.setBorder(null);
+        dailyItemsPanel.setBorder(null);
+        filesPanel.setBorder(null);
 
-	}
+    }
 
-	public void selectPanel(String pan) {
-		if (pan != null) {
-			if (pan.equals("NOTES"))
-				notesB_actionPerformed(null);
-			else if (pan.equals("TASKS"))
-				tasksB_actionPerformed(null);
-			else if (pan.equals("EVENTS"))
-				eventsB_actionPerformed(null);
-			else if (pan.equals("FILES"))
-				filesB_actionPerformed(null);
-		}
-	}
+    public void selectPanel(String pan) {
+        if (pan != null) {
+            if (pan.equals("NOTES")) {
+                notesB_actionPerformed(null);
+            } else if (pan.equals("TASKS")) {
+                tasksB_actionPerformed(null);
+            } else if (pan.equals("EVENTS")) {
+                eventsB_actionPerformed(null);
+            } else if (pan.equals("FILES")) {
+                filesB_actionPerformed(null);
+            }
+        }
+    }
 
-	public void agendaB_actionPerformed(ActionEvent e) {
-		cardLayout1.show(panel, "DAILYITEMS");
-		dailyItemsPanel.selectPanel("AGENDA");
-		setCurrentButton(agendaB);
-		Context.put("CURRENT_PANEL", "AGENDA");
-	}
+    public void agendaB_actionPerformed(ActionEvent e) {
+        cardLayout1.show(panel, "DAILYITEMS");
+        dailyItemsPanel.selectPanel("AGENDA");
+        setCurrentButton(agendaB);
+        Context.put("CURRENT_PANEL", "AGENDA");
+    }
 
-	public void notesB_actionPerformed(ActionEvent e) {
-		cardLayout1.show(panel, "DAILYITEMS");
-		dailyItemsPanel.selectPanel("NOTES");
-		setCurrentButton(notesB);
-		Context.put("CURRENT_PANEL", "NOTES");
-	}
+    public void notesB_actionPerformed(ActionEvent e) {
+        cardLayout1.show(panel, "DAILYITEMS");
+        dailyItemsPanel.selectPanel("NOTES");
+        setCurrentButton(notesB);
+        Context.put("CURRENT_PANEL", "NOTES");
+    }
 
-	public void tasksB_actionPerformed(ActionEvent e) {
-		cardLayout1.show(panel, "DAILYITEMS");
-		dailyItemsPanel.selectPanel("TASKS");
-		setCurrentButton(tasksB);
-		Context.put("CURRENT_PANEL", "TASKS");
-	}
+    public void tasksB_actionPerformed(ActionEvent e) {
+        cardLayout1.show(panel, "DAILYITEMS");
+        dailyItemsPanel.selectPanel("TASKS");
+        setCurrentButton(tasksB);
+        Context.put("CURRENT_PANEL", "TASKS");
+    }
 
-	public void eventsB_actionPerformed(ActionEvent e) {
-		cardLayout1.show(panel, "DAILYITEMS");
-		dailyItemsPanel.selectPanel("EVENTS");
-		setCurrentButton(eventsB);
-		Context.put("CURRENT_PANEL", "EVENTS");
-	}
+    public void eventsB_actionPerformed(ActionEvent e) {
+        cardLayout1.show(panel, "DAILYITEMS");
+        dailyItemsPanel.selectPanel("EVENTS");
+        setCurrentButton(eventsB);
+        Context.put("CURRENT_PANEL", "EVENTS");
+    }
 
-	public void filesB_actionPerformed(ActionEvent e) {
-		cardLayout1.show(panel, "FILES");
-		setCurrentButton(filesB);
-		Context.put("CURRENT_PANEL", "FILES");
-	}
+    public void filesB_actionPerformed(ActionEvent e) {
+        cardLayout1.show(panel, "FILES");
+        setCurrentButton(filesB);
+        Context.put("CURRENT_PANEL", "FILES");
+    }
 
-	void setCurrentButton(JButton cb) {
-		currentB.setBackground(Color.white);
-		currentB.setOpaque(false);
-		currentB = cb;
-		// Default color blue
-		currentB.setBackground(new Color(215, 225, 250));
-		currentB.setOpaque(true);
-	}
+    void setCurrentButton(JButton cb) {
+        currentB.setBackground(Color.white);
+        currentB.setOpaque(false);
+        currentB = cb;
+        // Default color blue
+        currentB.setBackground(new Color(215, 225, 250));
+        currentB.setOpaque(true);
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/AltHTMLWriter.java b/src/net/sf/memoranda/ui/htmleditor/AltHTMLWriter.java
index 3006519..08c3dbc 100755
--- a/src/net/sf/memoranda/ui/htmleditor/AltHTMLWriter.java
+++ b/src/net/sf/memoranda/ui/htmleditor/AltHTMLWriter.java
@@ -1,56 +1,36 @@
 /**
  * AltHTMLWriter.java
  * Hacked version of javax.swing.text.html.HTMLWriter
- * Created on 18.02.2003, 16:27:05 Alex 
+ * Created on 18.02.2003, 16:27:05 Alex
  * Package: javax.swing.text.html
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 OpenMechanics.org
  */
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.Polygon;
-import java.io.IOException;
-import java.io.Serializable;
-import java.io.Writer;
-import java.util.BitSet;
-import java.util.Enumeration;
-import java.util.Stack;
-import java.util.StringTokenizer;
-import java.util.Vector;
-
-import javax.swing.DefaultComboBoxModel;
-import javax.swing.DefaultListModel;
-import javax.swing.ListSelectionModel;
+import javax.swing.*;
 import javax.swing.event.EventListenerList;
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
-import javax.swing.text.AbstractWriter;
-import javax.swing.text.AttributeSet;
-import javax.swing.text.BadLocationException;
-import javax.swing.text.Document;
-import javax.swing.text.Element;
-import javax.swing.text.ElementIterator;
-import javax.swing.text.MutableAttributeSet;
-import javax.swing.text.Segment;
-import javax.swing.text.SimpleAttributeSet;
-import javax.swing.text.Style;
-import javax.swing.text.StyleConstants;
-import javax.swing.text.StyleContext;
-import javax.swing.text.html.CSS;
-import javax.swing.text.html.HTML;
-import javax.swing.text.html.HTMLDocument;
-import javax.swing.text.html.Option;
-import javax.swing.text.html.StyleSheet;
+import javax.swing.text.*;
+import javax.swing.text.html.*;
+import java.awt.*;
+import java.io.IOException;
+import java.io.Serializable;
+import java.io.Writer;
+import java.util.*;
+
+import net.sf.memoranda.ui.htmleditor.AltHTMLWriter.Map;
 
 /**
  * This is an alternate writer for HTMLDocuments.
- * 
- * Based on original javax.swing.text.html.HTMLWriter: 
- * 
+ * <p>
+ * Based on original javax.swing.text.html.HTMLWriter:
+ * <p>
  * Sun Java(TM) 2 SDK, Standard Edition Version 1.4.1
  * HTMLWriter.java 1.30 01/12/03
- * author  Sunita Mani 
+ * author  Sunita Mani
  * version 1.26, 02/02/00
  * Copyright 2002 Sun Microsystems, Inc.
  */
@@ -63,8 +43,10 @@ public class AltHTMLWriter extends AbstractWriter {
     private Stack blockElementStack = new Stack();
     private boolean inContent = false;
     private boolean inPre = false;
-    /** When inPre is true, this will indicate the end offset of the pre
-     * element. */
+    /**
+     * When inPre is true, this will indicate the end offset of the pre
+     * element.
+     */
     private int preEndOffset;
     private boolean inTextArea = false;
     private boolean newlineOutputed = false;
@@ -109,12 +91,12 @@ public class AltHTMLWriter extends AbstractWriter {
     private char[] tempChars;
 
     private String encoding = null;
+
     /**
      * Creates a new HTMLWriter.
      *
      * @param w   a Writer
-     * @param doc  an HTMLDocument
-     *
+     * @param doc an HTMLDocument
      */
 
     public AltHTMLWriter(Writer w, HTMLDocument doc) {
@@ -134,7 +116,7 @@ public class AltHTMLWriter extends AbstractWriter {
     /**
      * Creates a new HTMLWriter.
      *
-     * @param w  a Writer
+     * @param w   a Writer
      * @param doc an HTMLDocument
      * @param pos the document location from which to fetch the content
      * @param len the amount to write out
@@ -152,10 +134,9 @@ public class AltHTMLWriter extends AbstractWriter {
      * Element tree and controls the writing out of
      * all the tags and its attributes.
      *
-     * @exception IOException on any I/O error
-     * @exception BadLocationException if pos represents an invalid
-     *            location within the document.
-     *
+     * @throws IOException          on any I/O error
+     * @throws BadLocationException if pos represents an invalid
+     *                              location within the document.
      */
     public void write() throws IOException, BadLocationException {
         ElementIterator it = getElementIterator();
@@ -175,8 +156,7 @@ public class AltHTMLWriter extends AbstractWriter {
             if (!inRange(next)) {
                 if (completeDoc && next.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {
                     forcedBody = true;
-                }
-                else {
+                } else {
                     continue;
                 }
             }
@@ -188,8 +168,7 @@ public class AltHTMLWriter extends AbstractWriter {
 
                 if (indentNeedsIncrementing(current, next)) {
                     incrIndent();
-                }
-                else if (current.getParentElement() != next.getParentElement()) {
+                } else if (current.getParentElement() != next.getParentElement()) {
                     /*
                        next and current are not siblings
                        so emit end tags for items on the stack until the
@@ -211,8 +190,7 @@ public class AltHTMLWriter extends AbstractWriter {
                         }
                         top = (Element) blockElementStack.peek();
                     }
-                }
-                else if (current.getParentElement() == next.getParentElement()) {
+                } else if (current.getParentElement() == next.getParentElement()) {
                     /*
                        if next and current are siblings the indent level
                        is correct.  But, we need to make sure that if current is
@@ -228,8 +206,7 @@ public class AltHTMLWriter extends AbstractWriter {
             if (!next.isLeaf() || isFormElementWithContent(next.getAttributes())) {
                 blockElementStack.push(next);
                 startTag(next);
-            }
-            else {
+            } else {
                 emptyTag(next);
             }
             current = next;
@@ -271,9 +248,8 @@ public class AltHTMLWriter extends AbstractWriter {
      * and attributes with a key of type
      * HTML.Attribute.ENDTAG.
      *
-     * @param attr   an AttributeSet
-     * @exception IOException on any I/O error
-     *
+     * @param attr an AttributeSet
+     * @throws IOException on any I/O error
      */
     protected void writeAttributes(AttributeSet attr) throws IOException {
         // translate css attributes to html
@@ -294,10 +270,10 @@ public class AltHTMLWriter extends AbstractWriter {
      * Writes out all empty elements (all tags that have no
      * corresponding end tag).
      *
-     * @param elem   an Element
-     * @exception IOException on any I/O error
-     * @exception BadLocationException if pos represents an invalid
-     *            location within the document.
+     * @param elem an Element
+     * @throws IOException          on any I/O error
+     * @throws BadLocationException if pos represents an invalid
+     *                              location within the document.
      */
     protected void emptyTag(Element elem) throws BadLocationException, IOException {
 
@@ -312,11 +288,9 @@ public class AltHTMLWriter extends AbstractWriter {
         if (matchNameAttribute(attr, HTML.Tag.CONTENT)) {
             inContent = true;
             text(elem);
-        }
-        else if (matchNameAttribute(attr, HTML.Tag.COMMENT)) {
+        } else if (matchNameAttribute(attr, HTML.Tag.COMMENT)) {
             comment(elem);
-        }
-        else {
+        } else {
             boolean isBlock = isBlockTag(elem.getAttributes());
             if (inContent && isBlock) {
                 writeLineSeparator();
@@ -355,9 +329,7 @@ public class AltHTMLWriter extends AbstractWriter {
                 Document doc = elem.getDocument();
                 String title = (String) doc.getProperty(Document.TitleProperty);
                 write(title);
-            }
-
-            else if (!inContent || isBlock) {
+            } else if (!inContent || isBlock) {
                 writeLineSeparator();
                 if (isBlock && inContent) {
                     indent();
@@ -370,8 +342,8 @@ public class AltHTMLWriter extends AbstractWriter {
      * Determines if the HTML.Tag associated with the
      * element is a block tag.
      *
-     * @param attr  an AttributeSet
-     * @return  true if tag is block tag, false otherwise.
+     * @param attr an AttributeSet
+     * @return true if tag is block tag, false otherwise.
      */
     protected boolean isBlockTag(AttributeSet attr) {
         Object o = attr.getAttribute(StyleConstants.NameAttribute);
@@ -386,8 +358,8 @@ public class AltHTMLWriter extends AbstractWriter {
      * Writes out a start tag for the element.
      * Ignores all synthesized elements.
      *
-     * @param elem   an Element
-     * @exception IOException on any I/O error
+     * @param elem an Element
+     * @throws IOException on any I/O error
      */
     protected void startTag(Element elem) throws IOException, BadLocationException {
 
@@ -401,8 +373,7 @@ public class AltHTMLWriter extends AbstractWriter {
         HTML.Tag name;
         if (nameAttribute instanceof HTML.Tag) {
             name = (HTML.Tag) nameAttribute;
-        }
-        else {
+        } else {
             name = null;
         }
 
@@ -456,16 +427,9 @@ public class AltHTMLWriter extends AbstractWriter {
 
         if (name == HTML.Tag.TEXTAREA) {
             textAreaContent(elem.getAttributes());
-        }
-        else if (name == HTML.Tag.SELECT) {
+        } else if (name == HTML.Tag.SELECT) {
             selectContent(elem.getAttributes());
-        }
-      //  else if (completeDoc && name == HTML.Tag.BODY) {
-            // Write out the maps, which is not stored as Elements in
-            // the Document.
-            //writeMaps(((HTMLDocument)getDocument()).getMaps());
-      //  }
-        else if (name == HTML.Tag.HEAD) {
+        } else if (name == HTML.Tag.HEAD) {
             indent();
             writeAdditionalComments();
             if (encoding != null) {
@@ -481,10 +445,10 @@ public class AltHTMLWriter extends AbstractWriter {
      * Writes out text that is contained in a TEXTAREA form
      * element.
      *
-     * @param attr  an AttributeSet
-     * @exception IOException on any I/O error
-     * @exception BadLocationException if pos represents an invalid
-     *            location within the document.
+     * @param attr an AttributeSet
+     * @throws IOException          on any I/O error
+     * @throws BadLocationException if pos represents an invalid
+     *                              location within the document.
      */
     protected void textAreaContent(AttributeSet attr) throws BadLocationException, IOException {
         Document doc = (Document) attr.getAttribute(StyleConstants.ModelAttribute);
@@ -514,10 +478,10 @@ public class AltHTMLWriter extends AbstractWriter {
      * is invoked, then only the appropriate range of text is written
      * out.
      *
-     * @param elem   an Element
-     * @exception IOException on any I/O error
-     * @exception BadLocationException if pos represents an invalid
-     *            location within the document.
+     * @param elem an Element
+     * @throws IOException          on any I/O error
+     * @throws BadLocationException if pos represents an invalid
+     *                              location within the document.
      */
     protected void text(Element elem) throws BadLocationException, IOException {
         int start = Math.max(getStartOffset(), elem.getStartOffset());
@@ -535,8 +499,7 @@ public class AltHTMLWriter extends AbstractWriter {
                 if (inPre && end == preEndOffset) {
                     if (segment.count > 1) {
                         segment.count--;
-                    }
-                    else {
+                    } else {
                         return;
                     }
                 }
@@ -553,7 +516,7 @@ public class AltHTMLWriter extends AbstractWriter {
      * Writes out the content of the SELECT form element.
      *
      * @param attr the AttributeSet associated with the form element
-     * @exception IOException on any I/O error
+     * @throws IOException on any I/O error
      */
     protected void selectContent(AttributeSet attr) throws IOException {
         Object model = attr.getAttribute(StyleConstants.ModelAttribute);
@@ -565,8 +528,7 @@ public class AltHTMLWriter extends AbstractWriter {
                 Option option = (Option) listModel.getElementAt(i);
                 writeOption(option);
             }
-        }
-        else if (model instanceof OptionComboBoxModel) {
+        } else if (model instanceof OptionComboBoxModel) {
             OptionComboBoxModel comboBoxModel = (OptionComboBoxModel) model;
             int size = comboBoxModel.getSize();
             for (int i = 0; i < size; i++) {
@@ -579,9 +541,9 @@ public class AltHTMLWriter extends AbstractWriter {
 
     /**
      * Writes out the content of the Option form element.
-     * @param option  an Option
-     * @exception IOException on any I/O error
      *
+     * @param option an Option
+     * @throws IOException on any I/O error
      */
     protected void writeOption(Option option) throws IOException {
 
@@ -606,8 +568,8 @@ public class AltHTMLWriter extends AbstractWriter {
     /**
      * Writes out an end tag for the element.
      *
-     * @param elem    an Element
-     * @exception IOException on any I/O error
+     * @param elem an Element
+     * @throws IOException on any I/O error
      */
     protected void endTag(Element elem) throws IOException {
         if (synthesizedElement(elem)) {
@@ -637,10 +599,10 @@ public class AltHTMLWriter extends AbstractWriter {
     /**
      * Writes out comments.
      *
-     * @param elem    an Element
-     * @exception IOException on any I/O error
-     * @exception BadLocationException if pos represents an invalid
-     *            location within the document.
+     * @param elem an Element
+     * @throws IOException          on any I/O error
+     * @throws BadLocationException if pos represents an invalid
+     *                              location within the document.
      */
     protected void comment(Element elem) throws BadLocationException, IOException {
         AttributeSet as = elem.getAttributes();
@@ -648,8 +610,7 @@ public class AltHTMLWriter extends AbstractWriter {
             Object comment = as.getAttribute(HTML.Attribute.COMMENT);
             if (comment instanceof String) {
                 writeComment((String) comment);
-            }
-            else {
+            } else {
                 writeComment(null);
             }
         }
@@ -658,10 +619,10 @@ public class AltHTMLWriter extends AbstractWriter {
     /**
      * Writes out comment string.
      *
-     * @param string   the comment
-     * @exception IOException on any I/O error
-     * @exception BadLocationException if pos represents an invalid
-     *            location within the document.
+     * @param string the comment
+     * @throws IOException          on any I/O error
+     * @throws BadLocationException if pos represents an invalid
+     *                              location within the document.
      */
     void writeComment(String string) throws IOException {
         write("<!--");
@@ -678,16 +639,17 @@ public class AltHTMLWriter extends AbstractWriter {
      */
     void writeAdditionalComments() throws IOException {
         Object comments = getDocument().getProperty(HTMLDocument.AdditionalComments);
-        if (comments == null) return; 
+        if (comments == null) {
+            return;
+        }
         if (comments instanceof Vector) {
             Vector v = (Vector) comments;
             for (int counter = 0, maxCounter = v.size(); counter < maxCounter; counter++) {
                 writeComment(v.elementAt(counter).toString());
             }
-        }
-        //[alex] I've add the following 'else' for single comments:
-        else
+        } else { //[alex] I've add the following 'else' for single comments:
             writeComment(comments.toString());
+        }
         // end add
     }
 
@@ -724,7 +686,7 @@ public class AltHTMLWriter extends AbstractWriter {
      * so that when appropriate the corresponding end tags can be
      * written out.
      *
-     * @exception IOException on any I/O error
+     * @throws IOException on any I/O error
      */
     protected void writeEmbeddedTags(AttributeSet attr) throws IOException {
 
@@ -774,7 +736,7 @@ public class AltHTMLWriter extends AbstractWriter {
      * then the tag is removed from the vector and a corresponding
      * end tag is written out.
      *
-     * @exception IOException on any I/O error
+     * @throws IOException on any I/O error
      */
     protected void closeOutUnwantedEmbeddedTags(AttributeSet attr) throws IOException {
 
@@ -847,19 +809,18 @@ public class AltHTMLWriter extends AbstractWriter {
      * This state is maintained by the indentNext boolean.
      *
      * @return boolean that's true if indent level
-     *         needs incrementing.
+     * needs incrementing.
      */
     private boolean indentNext = false;
+
     private boolean indentNeedsIncrementing(Element current, Element next) {
         if ((next.getParentElement() == current) && !inPre) {
             if (indentNext) {
                 indentNext = false;
                 return true;
-            }
-            else if (synthesizedElement(next)) {
+            } else if (synthesizedElement(next)) {
                 indentNext = true;
-            }
-            else if (!synthesizedElement(current)) {
+            } else if (!synthesizedElement(current)) {
                 return true;
             }
         }
@@ -883,8 +844,7 @@ public class AltHTMLWriter extends AbstractWriter {
                     write(" name=\"");
                     write(name);
                     write("\">");
-                }
-                else {
+                } else {
                     write('>');
                 }
                 writeLineSeparator();
@@ -924,7 +884,7 @@ public class AltHTMLWriter extends AbstractWriter {
                     String name = (String) styles.nextElement();
                     // Don't write out the default style.
                     if (!StyleContext.DEFAULT_STYLE.equals(name)
-                        && writeStyle(name, sheet.getStyle(name), outputStyle)) {
+                            && writeStyle(name, sheet.getStyle(name), outputStyle)) {
                         outputStyle = true;
                     }
                 }
@@ -958,8 +918,7 @@ public class AltHTMLWriter extends AbstractWriter {
                             indent();
                             write(name);
                             write(" {");
-                        }
-                        else {
+                        } else {
                             write(";");
                         }
                         write(' ');
@@ -1018,8 +977,7 @@ public class AltHTMLWriter extends AbstractWriter {
         to.removeAttributes(to);
         if (writeCSS) {
             convertToHTML40(from, to);
-        }
-        else {
+        } else {
             convertToHTML32(from, to);
         }
         return to;
@@ -1059,12 +1017,11 @@ public class AltHTMLWriter extends AbstractWriter {
             Object key = keys.nextElement();
             if (key instanceof CSS.Attribute) {
                 if ((key == CSS.Attribute.FONT_FAMILY)
-                    || (key == CSS.Attribute.FONT_SIZE)
-                    || (key == CSS.Attribute.COLOR)) {
+                        || (key == CSS.Attribute.FONT_SIZE)
+                        || (key == CSS.Attribute.COLOR)) {
 
                     createFontAttribute((CSS.Attribute) key, from, to);
-                }
-                else if (key == CSS.Attribute.FONT_WEIGHT) {
+                } else if (key == CSS.Attribute.FONT_WEIGHT) {
                     // add a bold tag is weight is bold
                     //CSS.FontWeight weightValue = (CSS.FontWeight) from.getAttribute(CSS.Attribute.FONT_WEIGHT);
                     String weightValue = from.getAttribute(CSS.Attribute.FONT_WEIGHT).toString();
@@ -1072,21 +1029,19 @@ public class AltHTMLWriter extends AbstractWriter {
                         int fweight;
                         try {
                             fweight = new Integer(weightValue).intValue();
-                        }
-                        catch (Exception ex) {
+                        } catch (Exception ex) {
                             fweight = -1;
                         }
-                        if ((weightValue.toLowerCase().equals("bold")) || (fweight > 400))
+                        if ((weightValue.toLowerCase().equals("bold")) || (fweight > 400)) {
                             to.addAttribute(HTML.Tag.B, SimpleAttributeSet.EMPTY);
+                        }
                     }
-                }
-                else if (key == CSS.Attribute.FONT_STYLE) {
+                } else if (key == CSS.Attribute.FONT_STYLE) {
                     String s = from.getAttribute(key).toString();
                     if (s.indexOf("italic") >= 0) {
                         to.addAttribute(HTML.Tag.I, SimpleAttributeSet.EMPTY);
                     }
-                }
-                else if (key == CSS.Attribute.TEXT_DECORATION) {
+                } else if (key == CSS.Attribute.TEXT_DECORATION) {
                     String decor = from.getAttribute(key).toString();
                     if (decor.indexOf("underline") >= 0) {
                         to.addAttribute(HTML.Tag.U, SimpleAttributeSet.EMPTY);
@@ -1094,8 +1049,7 @@ public class AltHTMLWriter extends AbstractWriter {
                     if (decor.indexOf("line-through") >= 0) {
                         to.addAttribute(HTML.Tag.STRIKE, SimpleAttributeSet.EMPTY);
                     }
-                }
-                else if (key == CSS.Attribute.VERTICAL_ALIGN) {
+                } else if (key == CSS.Attribute.VERTICAL_ALIGN) {
                     String vAlign = from.getAttribute(key).toString();
                     if (vAlign.indexOf("sup") >= 0) {
                         to.addAttribute(HTML.Tag.SUP, SimpleAttributeSet.EMPTY);
@@ -1103,19 +1057,16 @@ public class AltHTMLWriter extends AbstractWriter {
                     if (vAlign.indexOf("sub") >= 0) {
                         to.addAttribute(HTML.Tag.SUB, SimpleAttributeSet.EMPTY);
                     }
-                }
-                else if (key == CSS.Attribute.TEXT_ALIGN) {
+                } else if (key == CSS.Attribute.TEXT_ALIGN) {
                     to.addAttribute(HTML.Attribute.ALIGN, from.getAttribute(key).toString());
-                }
-                else {
+                } else {
                     // default is to store in a HTML style attribute
                     if (value.length() > 0) {
                         value = value + "; ";
                     }
                     value = value + key + ": " + from.getAttribute(key);
                 }
-            }
-            else {
+            } else {
                 to.addAttribute(key, from.getAttribute(key));
             }
         }
@@ -1139,11 +1090,9 @@ public class AltHTMLWriter extends AbstractWriter {
         String htmlValue = from.getAttribute(a).toString();
         if (a == CSS.Attribute.FONT_FAMILY) {
             fontAttr.addAttribute(HTML.Attribute.FACE, htmlValue);
-        }
-        else if (a == CSS.Attribute.FONT_SIZE) {
+        } else if (a == CSS.Attribute.FONT_SIZE) {
             fontAttr.addAttribute(HTML.Attribute.SIZE, htmlValue);
-        }
-        else if (a == CSS.Attribute.COLOR) {
+        } else if (a == CSS.Attribute.COLOR) {
             fontAttr.addAttribute(HTML.Attribute.COLOR, htmlValue);
         }
     }
@@ -1160,8 +1109,7 @@ public class AltHTMLWriter extends AbstractWriter {
             Object key = keys.nextElement();
             if (key instanceof CSS.Attribute) {
                 value = value + " " + key + "=" + from.getAttribute(key) + ";";
-            }
-            else {
+            } else {
                 to.addAttribute(key, from.getAttribute(key));
             }
         }
@@ -1205,40 +1153,40 @@ public class AltHTMLWriter extends AbstractWriter {
             // entities.
             switch (chars[counter]) {
                 // Character level entities.
-                case '<' :
+                case '<':
                     if (counter > last) {
                         super.output(chars, last, counter - last);
                     }
                     last = counter + 1;
                     output("&lt;");
                     break;
-                case '>' :
+                case '>':
                     if (counter > last) {
                         super.output(chars, last, counter - last);
                     }
                     last = counter + 1;
                     output("&gt;");
                     break;
-                case '&' :
+                case '&':
                     if (counter > last) {
                         super.output(chars, last, counter - last);
                     }
                     last = counter + 1;
                     output("&amp;");
                     break;
-                case '"' :
+                case '"':
                     if (counter > last) {
                         super.output(chars, last, counter - last);
                     }
                     last = counter + 1;
                     output("&quot;");
                     break;
-                    // Special characters
-                case '\n' :
-                case '\t' :
-                case '\r' :
+                // Special characters
+                case '\n':
+                case '\t':
+                case '\r':
                     break;
-                default :
+                default:
 
                     /**
                      * [alex]I've replaced the following line to avoid to substitute non-ascii characters by numeric
@@ -1282,13 +1230,13 @@ public class AltHTMLWriter extends AbstractWriter {
      * the ListSelectionModel interface, allowing for it to store state
      * relevant to a SELECT form element which is implemented as a List.
      * If SELECT has a size attribute whose value is greater than 1,
-     * or if allows multiple selection then a JList is used to 
+     * or if allows multiple selection then a JList is used to
      * represent it and the OptionListModel is used as its model.
      * It also stores the initial state of the JList, to ensure an
      * accurate reset, if the user requests a reset of the form.
      *
-      @author Sunita Mani
-      @version 1.9 12/03/01
+     * @author Sunita Mani
+     * @version 1.9 12/03/01
      */
 
     class OptionListModel extends DefaultListModel implements ListSelectionModel, Serializable {
@@ -1327,12 +1275,12 @@ public class AltHTMLWriter extends AbstractWriter {
 
         public void setSelectionMode(int selectionMode) {
             switch (selectionMode) {
-                case SINGLE_SELECTION :
-                case SINGLE_INTERVAL_SELECTION :
-                case MULTIPLE_INTERVAL_SELECTION :
+                case SINGLE_SELECTION:
+                case SINGLE_INTERVAL_SELECTION:
+                case MULTIPLE_INTERVAL_SELECTION:
                     this.selectionMode = selectionMode;
                     break;
-                default :
+                default:
                     throw new IllegalArgumentException("invalid selectionMode");
             }
         }
@@ -1358,7 +1306,7 @@ public class AltHTMLWriter extends AbstractWriter {
          * to this OptionListModel with addListSelectionListener().
          *
          * @return all of the <code>ListSelectionListener</code>s added or an empty
-         *         array if no listeners have been added
+         * array if no listeners have been added
          * @since 1.4
          */
         public ListSelectionListener[] getListSelectionListeners() {
@@ -1382,8 +1330,8 @@ public class AltHTMLWriter extends AbstractWriter {
         }
 
         /**
-         * @param firstIndex The first index in the interval.
-         * @param index1 The last index in the interval.
+         * @param firstIndex  The first index in the interval.
+         * @param index1      The last index in the interval.
          * @param isAdjusting True if this is the final change in a series of them.
          * @see EventListenerList
          */
@@ -1497,7 +1445,8 @@ public class AltHTMLWriter extends AbstractWriter {
 
         /**
          * Sets the value of the leadAnchorNotificationEnabled flag.
-         * @see     #isLeadAnchorNotificationEnabled()
+         *
+         * @see #isLeadAnchorNotificationEnabled()
          */
         public void setLeadAnchorNotificationEnabled(boolean flag) {
             leadAnchorNotificationEnabled = flag;
@@ -1512,8 +1461,9 @@ public class AltHTMLWriter extends AbstractWriter {
          * include only the elements that have been selected or deselected since
          * the last change. Either way, the model continues to maintain the lead
          * and anchor variables internally. The default is true.
-         * @return      the value of the leadAnchorNotificationEnabled flag
-         * @see     #setLeadAnchorNotificationEnabled(boolean)
+         *
+         * @return the value of the leadAnchorNotificationEnabled flag
+         * @see #setLeadAnchorNotificationEnabled(boolean)
          */
         public boolean isLeadAnchorNotificationEnabled() {
             return leadAnchorNotificationEnabled;
@@ -1552,8 +1502,7 @@ public class AltHTMLWriter extends AbstractWriter {
                 if (shouldSet && shouldClear) {
                     if (clearFirst) {
                         shouldClear = false;
-                    }
-                    else {
+                    } else {
                         shouldSet = false;
                     }
                 }
@@ -1635,15 +1584,14 @@ public class AltHTMLWriter extends AbstractWriter {
         private void setState(int index, boolean state) {
             if (state) {
                 set(index);
-            }
-            else {
+            } else {
                 clear(index);
             }
         }
 
         /**
-         * Insert length indices beginning before/after index. If the value 
-         * at index is itself selected, set all of the newly inserted 
+         * Insert length indices beginning before/after index. If the value
+         * at index is itself selected, set all of the newly inserted
          * items, otherwise leave them unselected. This method is typically
          * called to sync the selection model with a corresponding change
          * in the data model.
@@ -1707,9 +1655,9 @@ public class AltHTMLWriter extends AbstractWriter {
          * <code>listenerLists</code> are not duplicated.
          *
          * @return a clone of the receiver
-         * @exception CloneNotSupportedException if the receiver does not
-         *    both (a) implement the <code>Cloneable</code> interface
-         *    and (b) define a <code>clone</code> method
+         * @throws CloneNotSupportedException if the receiver does not
+         *                                    both (a) implement the <code>Cloneable</code> interface
+         *                                    and (b) define a <code>clone</code> method
          */
         public Object clone() throws CloneNotSupportedException {
             OptionListModel clone = (OptionListModel) super.clone();
@@ -1727,9 +1675,9 @@ public class AltHTMLWriter extends AbstractWriter {
         }
 
         /**
-         * Set the anchor selection index, leaving all selection values unchanged. 
+         * Set the anchor selection index, leaving all selection values unchanged.
          *
-         * @see #getAnchorSelectionIndex     
+         * @see #getAnchorSelectionIndex
          * @see #setLeadSelectionIndex
          */
         public void setAnchorSelectionIndex(int anchorIndex) {
@@ -1737,30 +1685,30 @@ public class AltHTMLWriter extends AbstractWriter {
         }
 
         /**
-         * Set the lead selection index, ensuring that values between the 
-         * anchor and the new lead are either all selected or all deselected. 
-         * If the value at the anchor index is selected, first clear all the 
-         * values in the range [anchor, oldLeadIndex], then select all the values 
-         * values in the range [anchor, newLeadIndex], where oldLeadIndex is the old 
-         * leadIndex and newLeadIndex is the new one. 
-         * <p> 
-         * If the value at the anchor index is not selected, do the same thing in reverse, 
-         * selecting values in the old range and deslecting values in the new one. 
+         * Set the lead selection index, ensuring that values between the
+         * anchor and the new lead are either all selected or all deselected.
+         * If the value at the anchor index is selected, first clear all the
+         * values in the range [anchor, oldLeadIndex], then select all the values
+         * values in the range [anchor, newLeadIndex], where oldLeadIndex is the old
+         * leadIndex and newLeadIndex is the new one.
          * <p>
-         * Generate a single event for this change and notify all listeners. 
-         * For the purposes of generating minimal bounds in this event, do the 
-         * operation in a single pass; that way the first and last index inside the 
-         * ListSelectionEvent that is broadcast will refer to cells that actually 
-         * changed value because of this method. If, instead, this operation were 
-         * done in two steps the effect on the selection state would be the same 
-         * but two events would be generated and the bounds around the changed values 
-         * would be wider, including cells that had been first cleared and only 
-         * to later be set. 
+         * If the value at the anchor index is not selected, do the same thing in reverse,
+         * selecting values in the old range and deslecting values in the new one.
          * <p>
-         * This method can be used in the mouseDragged() method of a UI class 
-         * to extend a selection.  
+         * Generate a single event for this change and notify all listeners.
+         * For the purposes of generating minimal bounds in this event, do the
+         * operation in a single pass; that way the first and last index inside the
+         * ListSelectionEvent that is broadcast will refer to cells that actually
+         * changed value because of this method. If, instead, this operation were
+         * done in two steps the effect on the selection state would be the same
+         * but two events would be generated and the bounds around the changed values
+         * would be wider, including cells that had been first cleared and only
+         * to later be set.
+         * <p>
+         * This method can be used in the mouseDragged() method of a UI class
+         * to extend a selection.
          *
-         * @see #getLeadSelectionIndex     
+         * @see #getLeadSelectionIndex
          * @see #setAnchorSelectionIndex
          */
         public void setLeadSelectionIndex(int leadIndex) {
@@ -1777,8 +1725,7 @@ public class AltHTMLWriter extends AbstractWriter {
             int newMax = Math.max(anchorIndex, leadIndex);
             if (value.get(this.anchorIndex)) {
                 changeSelection(oldMin, oldMax, newMin, newMax);
-            }
-            else {
+            } else {
                 changeSelection(newMin, newMax, oldMin, oldMax, false);
             }
             this.anchorIndex = anchorIndex;
@@ -1838,19 +1785,26 @@ public class AltHTMLWriter extends AbstractWriter {
      * Once a Map has been created, and any number of areas have been added,
      * you can test if a point falls inside the map via the contains method.
      *
-     * @author  Scott Violet
+     * @author Scott Violet
      * @version 1.6 12/03/01
      */
     class Map {
-        /** Name of the Map. */
+        /**
+         * Name of the Map.
+         */
         private String name;
-        /** An array of AttributeSets. */
+        /**
+         * An array of AttributeSets.
+         */
         private Vector areaAttributes;
-        /** An array of RegionContainments, will slowly grow to match the
-         * length of areaAttributes as needed. */
+        /**
+         * An array of RegionContainments, will slowly grow to match the
+         * length of areaAttributes as needed.
+         */
         private Vector areas;
 
-        public Map() {}
+        public Map() {
+        }
 
         public Map(String name) {
             this.name = name;
@@ -1952,18 +1906,14 @@ public class AltHTMLWriter extends AbstractWriter {
                 try {
                     if (shapeString.equals("rect")) {
                         rc = new RectangleRegionContainment(attributes);
-                    }
-                    else if (shapeString.equals("circle")) {
+                    } else if (shapeString.equals("circle")) {
                         rc = new CircleRegionContainment(attributes);
-                    }
-                    else if (shapeString.equals("poly")) {
+                    } else if (shapeString.equals("poly")) {
                         rc = new PolygonRegionContainment(attributes);
-                    }
-                    else if (shapeString.equals("default")) {
+                    } else if (shapeString.equals("default")) {
                         rc = DefaultRegionContainment.sharedInstance();
                     }
-                }
-                catch (RuntimeException re) {
+                } catch (RuntimeException re) {
                     // Something wrong with attributes.
                     rc = null;
                 }
@@ -1978,17 +1928,29 @@ public class AltHTMLWriter extends AbstractWriter {
      * Used to test for containment in a circular region.
      */
     static class CircleRegionContainment implements RegionContainment {
-        /** X origin of the circle. */
+        /**
+         * X origin of the circle.
+         */
         int x;
-        /** Y origin of the circle. */
+        /**
+         * Y origin of the circle.
+         */
         int y;
-        /** Radius of the circle. */
+        /**
+         * Radius of the circle.
+         */
         int radiusSquared;
-        /** Non-null indicates one of the values represents a percent. */
+        /**
+         * Non-null indicates one of the values represents a percent.
+         */
         float[] percentValues;
-        /** Last value of width passed in. */
+        /**
+         * Last value of width passed in.
+         */
         int lastWidth;
-        /** Last value of height passed in. */
+        /**
+         * Last value of height passed in.
+         */
         int lastHeight;
 
         public CircleRegionContainment(AttributeSet as) {
@@ -2006,13 +1968,11 @@ public class AltHTMLWriter extends AbstractWriter {
                 for (int counter = 0; counter < 3; counter++) {
                     if (coords[counter] < 0) {
                         percentValues[counter] = coords[counter] / -100.0f;
-                    }
-                    else {
+                    } else {
                         percentValues[counter] = -1.0f;
                     }
                 }
-            }
-            else {
+            } else {
                 percentValues = null;
             }
         }
@@ -2044,7 +2004,9 @@ public class AltHTMLWriter extends AbstractWriter {
      * width passed in, and height equal to height passed in.
      */
     static class DefaultRegionContainment implements RegionContainment {
-        /** A global shared instance. */
+        /**
+         * A global shared instance.
+         */
         static DefaultRegionContainment si = null;
 
         public static DefaultRegionContainment sharedInstance() {
@@ -2063,13 +2025,19 @@ public class AltHTMLWriter extends AbstractWriter {
      * Used to test for containment in a polygon region.
      */
     static class PolygonRegionContainment extends Polygon implements RegionContainment {
-        /** If any value is a percent there will be an entry here for the
-         * percent value. Use percentIndex to find out the index for it. */
+        /**
+         * If any value is a percent there will be an entry here for the
+         * percent value. Use percentIndex to find out the index for it.
+         */
         float[] percentValues;
         int[] percentIndexs;
-        /** Last value of width passed in. */
+        /**
+         * Last value of width passed in.
+         */
         int lastWidth;
-        /** Last value of height passed in. */
+        /**
+         * Last value of height passed in.
+         */
         int lastHeight;
 
         public PolygonRegionContainment(AttributeSet as) {
@@ -2077,8 +2045,7 @@ public class AltHTMLWriter extends AbstractWriter {
 
             if (coords == null || coords.length == 0 || coords.length % 2 != 0) {
                 throw new RuntimeException("Unable to parse polygon area");
-            }
-            else {
+            } else {
                 int numPercents = 0;
 
                 lastWidth = lastHeight = -1;
@@ -2098,8 +2065,7 @@ public class AltHTMLWriter extends AbstractWriter {
                             pCounter++;
                         }
                     }
-                }
-                else {
+                } else {
                     percentIndexs = null;
                     percentValues = null;
                 }
@@ -2128,8 +2094,7 @@ public class AltHTMLWriter extends AbstractWriter {
                 if (percentIndexs[counter] % 2 == 0) {
                     // x
                     xpoints[percentIndexs[counter] / 2] = (int) (percentValues[counter] * fWidth);
-                }
-                else {
+                } else {
                     // y
                     ypoints[percentIndexs[counter] / 2] = (int) (percentValues[counter] * fHeight);
                 }
@@ -2142,18 +2107,28 @@ public class AltHTMLWriter extends AbstractWriter {
      * Used to test for containment in a rectangular region.
      */
     static class RectangleRegionContainment implements RegionContainment {
-        /** Will be non-null if one of the values is a percent, and any value
+        /**
+         * Will be non-null if one of the values is a percent, and any value
          * that is non null indicates it is a percent
-         * (order is x, y, width, height). */
+         * (order is x, y, width, height).
+         */
         float[] percents;
-        /** Last value of width passed in. */
+        /**
+         * Last value of width passed in.
+         */
         int lastWidth;
-        /** Last value of height passed in. */
+        /**
+         * Last value of height passed in.
+         */
         int lastHeight;
-        /** Top left. */
+        /**
+         * Top left.
+         */
         int x0;
         int y0;
-        /** Bottom right. */
+        /**
+         * Bottom right.
+         */
         int x1;
         int y1;
 
@@ -2163,8 +2138,7 @@ public class AltHTMLWriter extends AbstractWriter {
             percents = null;
             if (coords == null || coords.length != 4) {
                 throw new RuntimeException("Unable to parse rectangular area");
-            }
-            else {
+            } else {
                 x0 = coords[0];
                 y0 = coords[1];
                 x1 = coords[2];
@@ -2175,8 +2149,7 @@ public class AltHTMLWriter extends AbstractWriter {
                     for (int counter = 0; counter < 4; counter++) {
                         if (coords[counter] < 0) {
                             percents[counter] = Math.abs(coords[counter]) / 100.0f;
-                        }
-                        else {
+                        } else {
                             percents[counter] = -1.0f;
                         }
                     }
@@ -2234,8 +2207,7 @@ public class AltHTMLWriter extends AbstractWriter {
             if (token.endsWith("%")) {
                 scale = -1;
                 token = token.substring(0, token.length() - 1);
-            }
-            else {
+            } else {
                 scale = 1;
             }
             try {
@@ -2243,16 +2215,14 @@ public class AltHTMLWriter extends AbstractWriter {
 
                 if (retValue == null) {
                     retValue = new int[4];
-                }
-                else if (numCoords == retValue.length) {
+                } else if (numCoords == retValue.length) {
                     int[] temp = new int[retValue.length * 2];
 
                     System.arraycopy(retValue, 0, temp, 0, retValue.length);
                     retValue = temp;
                 }
                 retValue[numCoords++] = intValue * scale;
-            }
-            catch (NumberFormatException nfe) {
+            } catch (NumberFormatException nfe) {
                 return null;
             }
         }
@@ -2266,9 +2236,9 @@ public class AltHTMLWriter extends AbstractWriter {
     }
 
     /**
-        * Defines the interface used for to check if a point is inside a
-        * region.
-        */
+     * Defines the interface used for to check if a point is inside a
+     * region.
+     */
     interface RegionContainment {
         /**
          * Returns true if the location <code>x</code>, <code>y</code>
diff --git a/src/net/sf/memoranda/ui/htmleditor/CharTablePanel.java b/src/net/sf/memoranda/ui/htmleditor/CharTablePanel.java
index 36f6f14..b8d994d 100755
--- a/src/net/sf/memoranda/ui/htmleditor/CharTablePanel.java
+++ b/src/net/sf/memoranda/ui/htmleditor/CharTablePanel.java
@@ -1,27 +1,18 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Font;
-import java.awt.Insets;
+import javax.swing.*;
+import javax.swing.border.Border;
+import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.util.Vector;
 
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.JButton;
-import javax.swing.JEditorPane;
-import javax.swing.JPanel;
-import javax.swing.border.Border;
-
 public class CharTablePanel extends JPanel {
 
     JEditorPane editor;
     Border border1;
     FlowLayout flowLayout1 = new FlowLayout();
-    
-    String[] chars =
-        {
+
+    String[] chars = {
             "\u00A9",
             "\u00AE",
             "\u2122",
@@ -49,7 +40,7 @@ public class CharTablePanel extends JPanel {
             "\u25A0",
             "\u25A1",
             "\u263A",
-            "\u00A0" };
+            "\u00A0"};
 
     Vector buttons = new Vector();
 
@@ -57,19 +48,19 @@ public class CharTablePanel extends JPanel {
         try {
             editor = ed;
             jbInit();
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
             e.printStackTrace();
         }
 
     }
+
     private void jbInit() throws Exception {
-        
+
 
         //this.setSize(200, 50);        
-        this.setFocusable(false);        
+        this.setFocusable(false);
         //this.setBackground();
-        
+
         this.setPreferredSize(new Dimension(200, 45));
         this.setToolTipText("");
         flowLayout1.setHgap(0);
@@ -91,12 +82,12 @@ public class CharTablePanel extends JPanel {
             button.setFocusable(false);
             button.setBorderPainted(false);
             button.setOpaque(false);
-            button.setMargin(new Insets(0,0,0,0));
+            button.setMargin(new Insets(0, 0, 0, 0));
             button.setFont(new Font("serif", 0, 14));
-            if (i == chars.length-1) {
+            if (i == chars.length - 1) {
                 button.setText("nbsp");
-                button.setFont(new Font("Dialog",0,10));
-                button.setMargin(new Insets(0,0,0,0));
+                button.setFont(new Font("Dialog", 0, 10));
+                button.setMargin(new Insets(0, 0, 0, 0));
             }
             this.add(button, null);
         }
@@ -111,8 +102,9 @@ public class CharTablePanel extends JPanel {
         public void actionPerformed(ActionEvent e) {
             String s = this.getValue(Action.NAME).toString();
             editor.replaceSelection(s);
-            if (s.length() == 2)
-                editor.setCaretPosition(editor.getCaretPosition()-1);
+            if (s.length() == 2) {
+                editor.setCaretPosition(editor.getCaretPosition() - 1);
+            }
         }
     }
 
diff --git a/src/net/sf/memoranda/ui/htmleditor/Context.java b/src/net/sf/memoranda/ui/htmleditor/Context.java
index 6d4c3a7..354b430 100755
--- a/src/net/sf/memoranda/ui/htmleditor/Context.java
+++ b/src/net/sf/memoranda/ui/htmleditor/Context.java
@@ -1,4 +1,5 @@
 package net.sf.memoranda.ui.htmleditor;
+
 import java.util.Hashtable;
 
 /**
@@ -6,20 +7,21 @@ import java.util.Hashtable;
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 class Context {
 
-  static java.util.Hashtable hash = new Hashtable();
+    static java.util.Hashtable hash = new Hashtable();
 
-  public static Object get(Object key) {
-    return hash.get(key);
-  }
+    public static Object get(Object key) {
+        return hash.get(key);
+    }
 
-  public static void put(Object key, Object value) {
-    hash.put(key, value);
-  }
+    public static void put(Object key, Object value) {
+        hash.put(key, value);
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/ContinueSearchDialog.java b/src/net/sf/memoranda/ui/htmleditor/ContinueSearchDialog.java
index 3864770..30011f1 100755
--- a/src/net/sf/memoranda/ui/htmleditor/ContinueSearchDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/ContinueSearchDialog.java
@@ -1,91 +1,83 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.event.ActionEvent;
-
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-
 import net.sf.memoranda.ui.htmleditor.util.Local;
 
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 public class ContinueSearchDialog extends JPanel {
-  JPanel panel1 = new JPanel();
-  BorderLayout borderLayout1 = new BorderLayout();
-  FlowLayout flowLayout1 = new FlowLayout();
-  JButton cancelB = new JButton();
-  JButton continueB = new JButton();
-  JPanel buttonsPanel = new JPanel();
-  JLabel jLabel1 = new JLabel();
-  JTextField textF = new JTextField();
-  String text;
-  
-  Thread thread;
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    FlowLayout flowLayout1 = new FlowLayout();
+    JButton cancelB = new JButton();
+    JButton continueB = new JButton();
+    JPanel buttonsPanel = new JPanel();
+    JLabel jLabel1 = new JLabel();
+    JTextField textF = new JTextField();
+    String text;
 
-  public boolean cont = false;
-  public boolean cancel = false;
+    Thread thread;
 
-  public ContinueSearchDialog(Thread t, String txt) {    
-    try {
-      text = txt;   
-      thread = t;
-      jbInit();      
-    }
-    catch(Exception ex) {
-      ex.printStackTrace();
+    public boolean cont = false;
+    public boolean cancel = false;
+
+    public ContinueSearchDialog(Thread t, String txt) {
+        try {
+            text = txt;
+            thread = t;
+            jbInit();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
     }
-  }
 
-  
-  void jbInit() throws Exception {
-  
-    this.setLayout(borderLayout1);
-    textF.setEditable(false);
-    textF.setText(text);
-    cancelB.setMaximumSize(new Dimension(120, 26));
-    cancelB.setMinimumSize(new Dimension(80, 26));
-    cancelB.setPreferredSize(new Dimension(120, 26));
-    cancelB.setText(Local.getString("Cancel"));
-    cancelB.setFocusable(false);
-    cancelB.addActionListener(new java.awt.event.ActionListener() {
+
+    void jbInit() throws Exception {
+
+        this.setLayout(borderLayout1);
+        textF.setEditable(false);
+        textF.setText(text);
+        cancelB.setMaximumSize(new Dimension(120, 26));
+        cancelB.setMinimumSize(new Dimension(80, 26));
+        cancelB.setPreferredSize(new Dimension(120, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.setFocusable(false);
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 cancelB_actionPerformed(e);
             }
         });
-    continueB.addActionListener(new java.awt.event.ActionListener() {
+        continueB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 continueB_actionPerformed(e);
             }
         });
-    continueB.setText(Local.getString("Find next"));
-    continueB.setPreferredSize(new Dimension(120, 26));
-    continueB.setMinimumSize(new Dimension(80, 26));
-    continueB.setMaximumSize(new Dimension(120, 26));
-    continueB.setFocusable(false);    
-    flowLayout1.setAlignment(FlowLayout.RIGHT);
-    buttonsPanel.setLayout(flowLayout1);
-    
-    jLabel1.setText(" "+Local.getString("Search for")+":  ");
-    jLabel1.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResource("resources/icons/findbig.png"))) ;   
-    this.add(jLabel1, BorderLayout.WEST);
-    this.add(textF,BorderLayout.CENTER);    
-    buttonsPanel.add(continueB, null);
-    buttonsPanel.add(cancelB, null);
-    this.add(buttonsPanel,  BorderLayout.EAST);
-  }
+        continueB.setText(Local.getString("Find next"));
+        continueB.setPreferredSize(new Dimension(120, 26));
+        continueB.setMinimumSize(new Dimension(80, 26));
+        continueB.setMaximumSize(new Dimension(120, 26));
+        continueB.setFocusable(false);
+        flowLayout1.setAlignment(FlowLayout.RIGHT);
+        buttonsPanel.setLayout(flowLayout1);
+
+        jLabel1.setText(" " + Local.getString("Search for") + ":  ");
+        jLabel1.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResource("resources/icons/findbig.png")));
+        this.add(jLabel1, BorderLayout.WEST);
+        this.add(textF, BorderLayout.CENTER);
+        buttonsPanel.add(continueB, null);
+        buttonsPanel.add(cancelB, null);
+        this.add(buttonsPanel, BorderLayout.EAST);
+    }
 
-  void cancelB_actionPerformed(ActionEvent e) {
-    cont = true;
-    cancel = true;    
-    thread.resume();
-  }
+    void cancelB_actionPerformed(ActionEvent e) {
+        cont = true;
+        cancel = true;
+        thread.resume();
+    }
 
-  void continueB_actionPerformed(ActionEvent e) {
-     cont = true;     
-     thread.resume();
-  }
+    void continueB_actionPerformed(ActionEvent e) {
+        cont = true;
+        thread.resume();
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/ElementDialog.java b/src/net/sf/memoranda/ui/htmleditor/ElementDialog.java
index 2b1945d..b4db5f8 100755
--- a/src/net/sf/memoranda/ui/htmleditor/ElementDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/ElementDialog.java
@@ -1,149 +1,141 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagLayout;
-import java.awt.GridBagConstraints;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-
 import net.sf.memoranda.ui.htmleditor.util.Local;
 
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 public class ElementDialog extends JDialog {
-  JPanel areaPanel = new JPanel(new GridBagLayout());
-  JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
-  JButton cancelB = new JButton();
-  JButton okB = new JButton();
-  JLabel lblClass = new JLabel();
-  public JTextField classField = new JTextField();
-  JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-  public JLabel header = new JLabel();
-  public boolean CANCELLED = false;
-  JLabel lblID = new JLabel();
-  public JTextField idField = new JTextField();
-  JLabel lblStyle = new JLabel();
-  public JTextField styleField = new JTextField();
-  GridBagConstraints gbc;
+    JPanel areaPanel = new JPanel(new GridBagLayout());
+    JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
+    JButton cancelB = new JButton();
+    JButton okB = new JButton();
+    JLabel lblClass = new JLabel();
+    public JTextField classField = new JTextField();
+    JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+    public JLabel header = new JLabel();
+    public boolean CANCELLED = false;
+    JLabel lblID = new JLabel();
+    public JTextField idField = new JTextField();
+    JLabel lblStyle = new JLabel();
+    public JTextField styleField = new JTextField();
+    GridBagConstraints gbc;
 
-  public ElementDialog(Frame frame) {
-    super(frame, Local.getString("Object properties"), true);
-    try {
-      jbInit();
-      pack();
+    public ElementDialog(Frame frame) {
+        super(frame, Local.getString("Object properties"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
     }
-    catch(Exception ex) {
-      ex.printStackTrace();
+
+    public ElementDialog() {
+        this(null);
     }
-  }
 
-  public ElementDialog() {
-    this(null);
-  }
 
+    void jbInit() throws Exception {
+        this.setResizable(false);
+        headerPanel.setBackground(Color.WHITE);
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Object properties"));
+        header.setIcon(new ImageIcon(
+                net.sf.memoranda.ui.htmleditor.ElementDialog.class.getResource(
+                        "resources/icons/textbig.png")));
+        headerPanel.add(header);
+        this.getContentPane().add(headerPanel, BorderLayout.NORTH);
 
-  void jbInit() throws Exception {
-	this.setResizable(false);
-	headerPanel.setBackground(Color.WHITE);
-	header.setFont(new java.awt.Font("Dialog", 0, 20));
-	header.setForeground(new Color(0, 0, 124));
-	header.setText(Local.getString("Object properties"));
-	header.setIcon(new ImageIcon(
-		net.sf.memoranda.ui.htmleditor.ElementDialog.class.getResource(
-		"resources/icons/textbig.png")));
-    headerPanel.add(header);
-    this.getContentPane().add(headerPanel, BorderLayout.NORTH);
-    
-    areaPanel.setBorder(BorderFactory.createEtchedBorder(Color.white,
-    	new Color(142, 142, 142)));
-	lblID.setText(Local.getString("ID"));
-	gbc = new GridBagConstraints();
-	gbc.gridx = 0; gbc.gridy = 0;
-	gbc.anchor = GridBagConstraints.WEST;
-	gbc.insets = new Insets(10, 10, 5, 5);
-    areaPanel.add(lblID, gbc);
-	idField.setPreferredSize(new Dimension(300, 25));
-	gbc = new GridBagConstraints();
-	gbc.gridx = 1; gbc.gridy = 0;
-	gbc.anchor = GridBagConstraints.WEST;
-	gbc.insets = new Insets(10, 5, 5, 10);
-	areaPanel.add(idField, gbc);
-	lblClass.setText(Local.getString("Class"));
-	gbc = new GridBagConstraints();
-	gbc.gridx = 0; gbc.gridy = 1;
-	gbc.anchor = GridBagConstraints.WEST;
-	gbc.insets = new Insets(5, 10, 5, 5);
-	areaPanel.add(lblClass, gbc);		
-	classField.setPreferredSize(new Dimension(300, 25));
-	gbc = new GridBagConstraints();
-	gbc.gridx = 1; gbc.gridy = 1;
-	gbc.anchor = GridBagConstraints.WEST;
-	gbc.insets = new Insets(5, 5, 5, 10);
-	areaPanel.add(classField, gbc);
-	lblStyle.setText(Local.getString("Style"));
-	gbc = new GridBagConstraints();
-	gbc.gridx = 0; gbc.gridy = 2;
-	gbc.anchor = GridBagConstraints.WEST;
-	gbc.insets = new Insets(5, 10, 10, 5);
-	areaPanel.add(lblStyle, gbc);
-	styleField.setPreferredSize(new Dimension(300, 25));
-	gbc = new GridBagConstraints();
-	gbc.gridx = 1; gbc.gridy = 2;
-	gbc.anchor = GridBagConstraints.WEST;
-	gbc.insets = new Insets(5, 5, 10, 10);
-	areaPanel.add(styleField, gbc);
-	this.getContentPane().add(areaPanel, BorderLayout.CENTER);				
-		
-    cancelB.setMaximumSize(new Dimension(100, 26));
-    cancelB.setMinimumSize(new Dimension(100, 26));
-    cancelB.setPreferredSize(new Dimension(100, 26));
-    cancelB.setText(Local.getString("Cancel"));
-    cancelB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        cancelB_actionPerformed(e);
-      }
-    });
-    okB.setMaximumSize(new Dimension(100, 26));
-    okB.setMinimumSize(new Dimension(100, 26));
-    okB.setPreferredSize(new Dimension(100, 26));
-    okB.setText(Local.getString("Ok"));
-    okB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        okB_actionPerformed(e);
-      }
-    });
-    buttonsPanel.add(okB);
-    buttonsPanel.add(cancelB);
-    this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
+        areaPanel.setBorder(BorderFactory.createEtchedBorder(Color.white,
+                new Color(142, 142, 142)));
+        lblID.setText(Local.getString("ID"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 10, 5, 5);
+        areaPanel.add(lblID, gbc);
+        idField.setPreferredSize(new Dimension(300, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 5, 5, 10);
+        areaPanel.add(idField, gbc);
+        lblClass.setText(Local.getString("Class"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 10, 5, 5);
+        areaPanel.add(lblClass, gbc);
+        classField.setPreferredSize(new Dimension(300, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 10);
+        areaPanel.add(classField, gbc);
+        lblStyle.setText(Local.getString("Style"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 10, 10, 5);
+        areaPanel.add(lblStyle, gbc);
+        styleField.setPreferredSize(new Dimension(300, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 10, 10);
+        areaPanel.add(styleField, gbc);
+        this.getContentPane().add(areaPanel, BorderLayout.CENTER);
 
-  }
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setMinimumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        okB.setMaximumSize(new Dimension(100, 26));
+        okB.setMinimumSize(new Dimension(100, 26));
+        okB.setPreferredSize(new Dimension(100, 26));
+        okB.setText(Local.getString("Ok"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+            }
+        });
+        buttonsPanel.add(okB);
+        buttonsPanel.add(cancelB);
+        this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
 
-  void okB_actionPerformed(ActionEvent e) {
-    this.dispose();
-  }
+    }
 
-  void cancelB_actionPerformed(ActionEvent e) {
-    CANCELLED = true;
-    this.dispose();
-  }
+    void okB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
+
+    void cancelB_actionPerformed(ActionEvent e) {
+        CANCELLED = true;
+        this.dispose();
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/FindDialog.java b/src/net/sf/memoranda/ui/htmleditor/FindDialog.java
index 58fd712..309353a 100755
--- a/src/net/sf/memoranda/ui/htmleditor/FindDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/FindDialog.java
@@ -1,175 +1,168 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-
 import net.sf.memoranda.ui.htmleditor.util.Local;
 
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 public class FindDialog extends JDialog {
-	JPanel areaPanel = new JPanel(new GridBagLayout());
-	JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
-	JButton cancelB = new JButton();
-	JButton okB = new JButton();
-	JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-	public JLabel header = new JLabel();
-	public boolean CANCELLED = false;
-	JLabel lblSearch = new JLabel();
-	public JTextField txtSearch = new JTextField();
-	public JCheckBox chkReplace = new JCheckBox();
-	public JCheckBox chkCaseSens = new JCheckBox();
-	public JCheckBox chkWholeWord = new JCheckBox();
-	public JCheckBox chkRegExp = new JCheckBox();
-	public JTextField txtReplace = new JTextField();
-	GridBagConstraints gbc;
+    JPanel areaPanel = new JPanel(new GridBagLayout());
+    JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
+    JButton cancelB = new JButton();
+    JButton okB = new JButton();
+    JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+    public JLabel header = new JLabel();
+    public boolean CANCELLED = false;
+    JLabel lblSearch = new JLabel();
+    public JTextField txtSearch = new JTextField();
+    public JCheckBox chkReplace = new JCheckBox();
+    public JCheckBox chkCaseSens = new JCheckBox();
+    public JCheckBox chkWholeWord = new JCheckBox();
+    public JCheckBox chkRegExp = new JCheckBox();
+    public JTextField txtReplace = new JTextField();
+    GridBagConstraints gbc;
+
+    public FindDialog(Frame frame) {
+        super(frame, Local.getString("Find & replace"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
 
-	public FindDialog(Frame frame) {
-		super(frame, Local.getString("Find & replace"), true);
-		try {
-			jbInit();
-			pack();
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
+    public FindDialog() {
+        this(null);
+    }
 
-	public FindDialog() {
-		this(null);
-	}
+    void jbInit() throws Exception {
+        this.setResizable(false);
+        // Build Header and its layout
 
-	void jbInit() throws Exception {
-		this.setResizable(false);
-		// Build Header and its layout
-		
-		header.setFont(new java.awt.Font("Dialog", 0, 20));
-		header.setForeground(new Color(0, 0, 124));
-		header.setText(Local.getString("Find & replace"));
-		header.setIcon(
-			new ImageIcon(
-				net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
-					"resources/icons/findbig.png")));
-		headerPanel.setBackground(Color.WHITE);
-		headerPanel.add(header);
-		this.getContentPane().add(headerPanel, BorderLayout.NORTH);
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Find & replace"));
+        header.setIcon(
+                new ImageIcon(
+                        net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
+                                "resources/icons/findbig.png")));
+        headerPanel.setBackground(Color.WHITE);
+        headerPanel.add(header);
+        this.getContentPane().add(headerPanel, BorderLayout.NORTH);
 
-		// build areaPanel
-		lblSearch.setText(Local.getString("Search for") + ":");
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 0;
-		gbc.insets = new Insets(10, 10, 5, 0);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(lblSearch, gbc);
-		txtSearch.setPreferredSize(new Dimension(300, 25));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 1;
-		gbc.gridwidth = 2;
-		gbc.fill = GridBagConstraints.HORIZONTAL;
-		gbc.insets = new Insets(5, 10, 5, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(txtSearch, gbc);
-		chkWholeWord.setText(Local.getString("Whole words only"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 2;
-		gbc.insets = new Insets(5, 10, 5, 25);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(chkWholeWord, gbc);
-		chkRegExp.setText(Local.getString("Regular expressions"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1; gbc.gridy = 2;
-		gbc.insets = new Insets(5, 25, 5, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(chkRegExp, gbc);
-		chkCaseSens.setText(Local.getString("Case sensitive"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 3;
-		gbc.insets = new Insets(5, 10, 5, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(chkCaseSens, gbc);
-		chkReplace.setText(Local.getString("Replace with") + ":");
-		chkReplace.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				replaceChB_actionPerformed(e);
-			}
-		});
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 4;
-		gbc.insets = new Insets(5, 10, 5, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(chkReplace, gbc);
-		txtReplace.setPreferredSize(new Dimension(300, 25));
-		txtReplace.setEnabled(false);
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 5;
-		gbc.gridwidth = 2;
-		gbc.fill = GridBagConstraints.HORIZONTAL;
-		gbc.insets = new Insets(5, 10, 10, 10);
-		gbc.anchor = GridBagConstraints.WEST;
-		areaPanel.add(txtReplace, gbc);
-		areaPanel.setBorder(BorderFactory.createEtchedBorder(
-			Color.white, new Color(142, 142, 142)));
-		this.getContentPane().add(areaPanel, BorderLayout.CENTER);
+        // build areaPanel
+        lblSearch.setText(Local.getString("Search for") + ":");
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 0;
+        gbc.insets = new Insets(10, 10, 5, 0);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(lblSearch, gbc);
+        txtSearch.setPreferredSize(new Dimension(300, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 1;
+        gbc.gridwidth = 2;
+        gbc.fill = GridBagConstraints.HORIZONTAL;
+        gbc.insets = new Insets(5, 10, 5, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(txtSearch, gbc);
+        chkWholeWord.setText(Local.getString("Whole words only"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 2;
+        gbc.insets = new Insets(5, 10, 5, 25);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(chkWholeWord, gbc);
+        chkRegExp.setText(Local.getString("Regular expressions"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 2;
+        gbc.insets = new Insets(5, 25, 5, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(chkRegExp, gbc);
+        chkCaseSens.setText(Local.getString("Case sensitive"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 3;
+        gbc.insets = new Insets(5, 10, 5, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(chkCaseSens, gbc);
+        chkReplace.setText(Local.getString("Replace with") + ":");
+        chkReplace.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                replaceChB_actionPerformed(e);
+            }
+        });
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 4;
+        gbc.insets = new Insets(5, 10, 5, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(chkReplace, gbc);
+        txtReplace.setPreferredSize(new Dimension(300, 25));
+        txtReplace.setEnabled(false);
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 5;
+        gbc.gridwidth = 2;
+        gbc.fill = GridBagConstraints.HORIZONTAL;
+        gbc.insets = new Insets(5, 10, 10, 10);
+        gbc.anchor = GridBagConstraints.WEST;
+        areaPanel.add(txtReplace, gbc);
+        areaPanel.setBorder(BorderFactory.createEtchedBorder(
+                Color.white, new Color(142, 142, 142)));
+        this.getContentPane().add(areaPanel, BorderLayout.CENTER);
 
-		// Initialize buttons
-		cancelB.setMaximumSize(new Dimension(100, 26));
-		cancelB.setMinimumSize(new Dimension(100, 26));
-		cancelB.setPreferredSize(new Dimension(100, 26));
-		cancelB.setText(Local.getString("Cancel"));
-		cancelB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				cancelB_actionPerformed(e);
-			}
-		});
-		okB.setMaximumSize(new Dimension(100, 26));
-		okB.setMinimumSize(new Dimension(100, 26));
-		okB.setPreferredSize(new Dimension(100, 26));
-		okB.setText(Local.getString("Find"));
-		okB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				okB_actionPerformed(e);
-			}
-		});
-		this.getRootPane().setDefaultButton(okB);
-		// build button-panel
-		buttonsPanel.add(okB);
-		buttonsPanel.add(cancelB);
-		getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
-	}
+        // Initialize buttons
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setMinimumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        okB.setMaximumSize(new Dimension(100, 26));
+        okB.setMinimumSize(new Dimension(100, 26));
+        okB.setPreferredSize(new Dimension(100, 26));
+        okB.setText(Local.getString("Find"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okB);
+        // build button-panel
+        buttonsPanel.add(okB);
+        buttonsPanel.add(cancelB);
+        getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
+    }
 
-	void okB_actionPerformed(ActionEvent e) {
-		this.dispose();
-	}
+    void okB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
 
-	void cancelB_actionPerformed(ActionEvent e) {
-		CANCELLED = true;
-		this.dispose();
-	}
+    void cancelB_actionPerformed(ActionEvent e) {
+        CANCELLED = true;
+        this.dispose();
+    }
 
-	void replaceChB_actionPerformed(ActionEvent e) {
-		txtReplace.setEnabled(chkReplace.isSelected());
-	}
+    void replaceChB_actionPerformed(ActionEvent e) {
+        txtReplace.setEnabled(chkReplace.isSelected());
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/Finder.java b/src/net/sf/memoranda/ui/htmleditor/Finder.java
index 163fe56..55c92fd 100755
--- a/src/net/sf/memoranda/ui/htmleditor/Finder.java
+++ b/src/net/sf/memoranda/ui/htmleditor/Finder.java
@@ -7,14 +7,14 @@
  * Copyright (c) 2003 OpenMechanics.org
  */
 package net.sf.memoranda.ui.htmleditor;
-import java.awt.Dimension;
-import java.awt.Point;
+
+import net.sf.memoranda.ui.htmleditor.util.Local;
+
+import javax.swing.*;
+import java.awt.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import javax.swing.JOptionPane;
-
-import net.sf.memoranda.ui.htmleditor.util.Local;
 /**
  *
  */
@@ -30,27 +30,29 @@ public class Finder extends Thread {
      * Constructor for Finder.
      */
     public Finder(
-        HTMLEditor theEditor,
-        String find,
-        boolean wholeWord,
-        boolean matchCase,
-        boolean regexp,
-        String replace) {
+            HTMLEditor theEditor,
+            String find,
+            boolean wholeWord,
+            boolean matchCase,
+            boolean regexp,
+            String replace) {
         super();
         editor = theEditor;
         dispText = find;
         int flags = Pattern.DOTALL;
-        if (!matchCase)
+        if (!matchCase) {
             flags = flags + Pattern.CASE_INSENSITIVE + Pattern.UNICODE_CASE;
+        }
         _find = find;
-        if (!regexp)
+        if (!regexp) {
             _find = "\\Q" + _find + "\\E";
-        if (wholeWord)
+        }
+        if (wholeWord) {
             _find = "[\\s\\p{Punct}]" + _find + "[\\s\\p{Punct}]";
+        }
         try {
             pattern = Pattern.compile(_find, flags);
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
             pattern = null;
         }
@@ -62,13 +64,13 @@ public class Finder extends Thread {
     }
 
     public void findAll() {
-        if (pattern == null)
+        if (pattern == null) {
             return;
+        }
         String text = "";
         try {
             text = editor.editor.getDocument().getText(0, editor.editor.getDocument().getLength() - 1);
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
             return;
         }
@@ -89,31 +91,28 @@ public class Finder extends Thread {
                     Dimension frmSize = editor.getParent().getSize();
                     Point loc = editor.getLocationOnScreen();
                     dlg.setLocation(
-                        (frmSize.width - dlgSize.width) / 2 + loc.x,
-                        (frmSize.height - dlgSize.height) / 2 + loc.y);
+                            (frmSize.width - dlgSize.width) / 2 + loc.x,
+                            (frmSize.height - dlgSize.height) / 2 + loc.y);
                     dlg.setModal(true);
                     dlg.setVisible(true);
                     int op = dlg.option;
                     if (op == ReplaceOptionsDialog.YES_OPTION) {
                         editor.editor.replaceSelection(_replace);
                         start = matcher.start() + _replace.length();
-                    }
-                    else if (op == ReplaceOptionsDialog.YES_TO_ALL_OPTION) {
+                    } else if (op == ReplaceOptionsDialog.YES_TO_ALL_OPTION) {
                         editor.editor.replaceSelection(_replace);
                         start = matcher.start() + _replace.length();
                         replaceAll = true;
-                    }
-                    else if (op == ReplaceOptionsDialog.CANCEL_OPTION)
+                    } else if (op == ReplaceOptionsDialog.CANCEL_OPTION) {
                         return;
-                    else
+                    } else {
                         start = matcher.end();
-                }
-                else {
+                    }
+                } else {
                     editor.editor.replaceSelection(_replace);
                     start = matcher.start() + _replace.length();
                 }
-            }
-            else {
+            } else {
                 /*int n = JOptionPane.showConfirmDialog(null, "Continue search?", "Find", JOptionPane.YES_NO_OPTION);
                 if (n == JOptionPane.NO_OPTION)
                     return;*/
@@ -123,32 +122,33 @@ public class Finder extends Thread {
                     editor.showToolsPanel();
                     editor.toolsPanel.addTab(Local.getString("Find"), cdlg);
                     showCdlg = true;
-                }                
+                }
                 this.suspend();
 
                 if (cdlg.cancel) {
                     editor.toolsPanel.remove(cdlg);
-                    if (editor.toolsPanel.getTabCount() == 0)
+                    if (editor.toolsPanel.getTabCount() == 0) {
                         editor.hideToolsPanel();
+                    }
                     return;
                 }
                 start = matcher.end();
             }
             try {
                 text = editor.editor.getDocument().getText(0, editor.editor.getDocument().getLength() - 1);
-            }
-            catch (Exception ex) {
+            } catch (Exception ex) {
                 ex.printStackTrace();
                 return;
             }
             matcher = pattern.matcher(text);
         }
 
-        JOptionPane.showMessageDialog(null, Local.getString("Search complete")+".");
+        JOptionPane.showMessageDialog(null, Local.getString("Search complete") + ".");
         if (showCdlg) {
             editor.toolsPanel.remove(cdlg);
-            if (editor.toolsPanel.getTabCount() == 0)
+            if (editor.toolsPanel.getTabCount() == 0) {
                 editor.hideToolsPanel();
+            }
         }
 
     }
diff --git a/src/net/sf/memoranda/ui/htmleditor/FontDialog.java b/src/net/sf/memoranda/ui/htmleditor/FontDialog.java
index 754950b..3c53666 100755
--- a/src/net/sf/memoranda/ui/htmleditor/FontDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/FontDialog.java
@@ -1,38 +1,19 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Font;
-import java.awt.Frame;
-import java.awt.GraphicsEnvironment;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.util.Vector;
+import net.sf.memoranda.ui.htmleditor.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JColorChooser;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-import javax.swing.SwingConstants;
-import javax.swing.UIManager;
+import javax.swing.*;
 import javax.swing.border.TitledBorder;
-
-import net.sf.memoranda.ui.htmleditor.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.util.Vector;
 
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
@@ -46,8 +27,9 @@ public class FontDialog extends JDialog {
     JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
     public JLabel header = new JLabel();
     public boolean CANCELLED = false;
-    public JComboBox fontSizeCB = new JComboBox(new Object[] 
-    	{"", "1","2","3","4","5","6","7"});
+    public JComboBox fontSizeCB = new JComboBox(new Object[]{
+            "", "1", "2", "3", "4", "5", "6", "7"}
+    );
     public JComboBox fontFamilyCB;
     public JLabel sample = new JLabel();
     JPanel samplePanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
@@ -60,8 +42,7 @@ public class FontDialog extends JDialog {
         try {
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
@@ -71,104 +52,111 @@ public class FontDialog extends JDialog {
     }
 
     void jbInit() throws Exception {
-	this.setResizable(false);
-        GraphicsEnvironment gEnv = 
-        	GraphicsEnvironment.getLocalGraphicsEnvironment();
+        this.setResizable(false);
+        GraphicsEnvironment gEnv =
+                GraphicsEnvironment.getLocalGraphicsEnvironment();
         String envfonts[] = gEnv.getAvailableFontFamilyNames();
         Vector fonts = new Vector();
         fonts.add("");
         fonts.add("serif");
         fonts.add("sans-serif");
         fonts.add("monospaced");
-        for (int i = 0; i < envfonts.length; i++)
+        for (int i = 0; i < envfonts.length; i++) {
             fonts.add(envfonts[i]);
+        }
         fontFamilyCB = new JComboBox(fonts);
-        
-		headerPanel.setBackground(Color.WHITE);
-		header.setFont(new java.awt.Font("Dialog", 0, 20));
-		header.setForeground(new Color(0, 0, 124));
-		header.setText(Local.getString("Text properties"));
-		header.setIcon(new ImageIcon(
-			net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
-			"resources/icons/fontbig.png")));
-		headerPanel.add(header);
-		this.getContentPane().add(headerPanel, BorderLayout.NORTH);
-		        
+
+        headerPanel.setBackground(Color.WHITE);
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Text properties"));
+        header.setIcon(new ImageIcon(
+                net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
+                        "resources/icons/fontbig.png")));
+        headerPanel.add(header);
+        this.getContentPane().add(headerPanel, BorderLayout.NORTH);
+
         areaPanel.setBorder(BorderFactory.createEtchedBorder(
-        	Color.white, new Color(142, 142, 142)));
-		fontFamilyCB.setMaximumRowCount(9);
-		fontFamilyCB.setBorder(new TitledBorder(
-			BorderFactory.createEmptyBorder(), 
-			Local.getString("Font family")));
-		fontFamilyCB.setPreferredSize(new Dimension(200, 50));
-		fontFamilyCB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				fontChanged(e);
-			}
-		});
+                Color.white, new Color(142, 142, 142)));
+        fontFamilyCB.setMaximumRowCount(9);
+        fontFamilyCB.setBorder(new TitledBorder(
+                BorderFactory.createEmptyBorder(),
+                Local.getString("Font family")));
+        fontFamilyCB.setPreferredSize(new Dimension(200, 50));
+        fontFamilyCB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                fontChanged(e);
+            }
+        });
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.gridwidth = 2;
         gbc.anchor = GridBagConstraints.WEST;
         gbc.insets = new Insets(10, 10, 5, 5);
         areaPanel.add(fontFamilyCB, gbc);
-		fontSizeCB.setEditable(true);
-		fontSizeCB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				fontChanged(e);
-			}
-		});
-		fontSizeCB.setBorder(new TitledBorder(
-			BorderFactory.createEmptyBorder(), Local.getString("Font size")));
-		fontSizeCB.setPreferredSize(new Dimension(60, 50));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 2; gbc.gridy = 0;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(10, 5, 5, 10);
-		areaPanel.add(fontSizeCB, gbc);
-		lblTextColor.setText(Local.getString("Font color"));		
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.CENTER;
-		gbc.insets = new Insets(5, 20, 5, 5);
-		areaPanel.add(lblTextColor, gbc);
-		colorField.setPreferredSize(new Dimension(60, 25));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.EAST;
-		gbc.insets = new Insets(5, 5, 5, 5);
-		areaPanel.add(colorField, gbc);
-		colorB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				colorB_actionPerformed(e);
-			}
-		});
-		colorB.setIcon(new ImageIcon(
-			net.sf.memoranda.ui.htmleditor.FontDialog.class.getResource(
-			"resources/icons/color.png")));
-		colorB.setPreferredSize(new Dimension(25, 25));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 2; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.CENTER;
-		gbc.insets = new Insets(5, 5, 5, 5);
-		areaPanel.add(colorB, gbc);
-		samplePanel.setBackground(Color.white);
-		samplePanel.setBorder(BorderFactory.createTitledBorder(
-			Local.getString("Sample")));
-		sample.setText(Local.getString("AaBbCcDd"));
-		sample.setHorizontalAlignment(SwingConstants.CENTER);
-		sample.setVerticalAlignment(SwingConstants.CENTER);
-		sample.setPreferredSize(new Dimension(250, 50));
-		samplePanel.add(sample);		
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 2;
-		gbc.gridwidth = 3;
-		gbc.gridheight = 2;
-		gbc.fill = GridBagConstraints.BOTH;
-		gbc.insets = new Insets(5, 10, 10, 10);
-		areaPanel.add(samplePanel, gbc);
-		this.getContentPane().add(areaPanel, BorderLayout.CENTER);		
-						
+        fontSizeCB.setEditable(true);
+        fontSizeCB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                fontChanged(e);
+            }
+        });
+        fontSizeCB.setBorder(new TitledBorder(
+                BorderFactory.createEmptyBorder(), Local.getString("Font size")));
+        fontSizeCB.setPreferredSize(new Dimension(60, 50));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 2;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 5, 5, 10);
+        areaPanel.add(fontSizeCB, gbc);
+        lblTextColor.setText(Local.getString("Font color"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.CENTER;
+        gbc.insets = new Insets(5, 20, 5, 5);
+        areaPanel.add(lblTextColor, gbc);
+        colorField.setPreferredSize(new Dimension(60, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.EAST;
+        gbc.insets = new Insets(5, 5, 5, 5);
+        areaPanel.add(colorField, gbc);
+        colorB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                colorB_actionPerformed(e);
+            }
+        });
+        colorB.setIcon(new ImageIcon(
+                net.sf.memoranda.ui.htmleditor.FontDialog.class.getResource(
+                        "resources/icons/color.png")));
+        colorB.setPreferredSize(new Dimension(25, 25));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 2;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.CENTER;
+        gbc.insets = new Insets(5, 5, 5, 5);
+        areaPanel.add(colorB, gbc);
+        samplePanel.setBackground(Color.white);
+        samplePanel.setBorder(BorderFactory.createTitledBorder(
+                Local.getString("Sample")));
+        sample.setText(Local.getString("AaBbCcDd"));
+        sample.setHorizontalAlignment(SwingConstants.CENTER);
+        sample.setVerticalAlignment(SwingConstants.CENTER);
+        sample.setPreferredSize(new Dimension(250, 50));
+        samplePanel.add(sample);
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 2;
+        gbc.gridwidth = 3;
+        gbc.gridheight = 2;
+        gbc.fill = GridBagConstraints.BOTH;
+        gbc.insets = new Insets(5, 10, 10, 10);
+        areaPanel.add(samplePanel, gbc);
+        this.getContentPane().add(areaPanel, BorderLayout.CENTER);
+
         cancelB.setMaximumSize(new Dimension(100, 26));
         cancelB.setMinimumSize(new Dimension(100, 26));
         cancelB.setPreferredSize(new Dimension(100, 26));
@@ -203,49 +191,54 @@ public class FontDialog extends JDialog {
     }
 
     void fontChanged(ActionEvent e) {
-        int[] sizes = {8,10,13,16,18,24,32};
+        int[] sizes = {8, 10, 13, 16, 18, 24, 32};
         int size = 16;
         String face;
         Font font = sample.getFont();
-        if (fontSizeCB.getSelectedIndex() > 0)
-            size = sizes[fontSizeCB.getSelectedIndex()-1];
-        if (fontFamilyCB.getSelectedIndex() >0)
-             face = (String)fontFamilyCB.getSelectedItem();
-        else face = font.getName();        
-        sample.setFont(new Font(face,Font.PLAIN, size));
+        if (fontSizeCB.getSelectedIndex() > 0) {
+            size = sizes[fontSizeCB.getSelectedIndex() - 1];
+        }
+        if (fontFamilyCB.getSelectedIndex() > 0) {
+            face = (String) fontFamilyCB.getSelectedItem();
+        } else {
+            face = font.getName();
+        }
+        sample.setFont(new Font(face, Font.PLAIN, size));
     }
-   
+
     void colorB_actionPerformed(ActionEvent e) {
-		// Fix until Sun's JVM supports more locales...
-		UIManager.put(
-			"ColorChooser.swatchesNameText",
-			Local.getString("Swatches"));
-		UIManager.put("ColorChooser.hsbNameText", Local.getString("HSB"));
-		UIManager.put("ColorChooser.rgbNameText", Local.getString("RGB"));
-		UIManager.put(
-			"ColorChooser.swatchesRecentText",
-			Local.getString("Recent:"));
-		UIManager.put("ColorChooser.previewText", Local.getString("Preview"));
-		UIManager.put(
-			"ColorChooser.sampleText",
-			Local.getString("Sample Text")
-				+ " "
-				+ Local.getString("Sample Text"));
-		UIManager.put("ColorChooser.okText", Local.getString("OK"));
-		UIManager.put("ColorChooser.cancelText", Local.getString("Cancel"));
-		UIManager.put("ColorChooser.resetText", Local.getString("Reset"));
-		UIManager.put("ColorChooser.hsbHueText", Local.getString("H"));
-		UIManager.put("ColorChooser.hsbSaturationText", Local.getString("S"));
-		UIManager.put("ColorChooser.hsbBrightnessText", Local.getString("B"));
-		UIManager.put("ColorChooser.hsbRedText", Local.getString("R"));
-		UIManager.put("ColorChooser.hsbGreenText", Local.getString("G"));
-		UIManager.put("ColorChooser.hsbBlueText", Local.getString("B2"));
-		UIManager.put("ColorChooser.rgbRedText", Local.getString("Red"));
-		UIManager.put("ColorChooser.rgbGreenText", Local.getString("Green"));
-		UIManager.put("ColorChooser.rgbBlueText", Local.getString("Blue"));        
-        Color c = JColorChooser.showDialog(this, Local.getString("Font color"), 
-        	Util.decodeColor(colorField.getText()));
-        if (c == null) return;
+        // Fix until Sun's JVM supports more locales...
+        UIManager.put(
+                "ColorChooser.swatchesNameText",
+                Local.getString("Swatches"));
+        UIManager.put("ColorChooser.hsbNameText", Local.getString("HSB"));
+        UIManager.put("ColorChooser.rgbNameText", Local.getString("RGB"));
+        UIManager.put(
+                "ColorChooser.swatchesRecentText",
+                Local.getString("Recent:"));
+        UIManager.put("ColorChooser.previewText", Local.getString("Preview"));
+        UIManager.put(
+                "ColorChooser.sampleText",
+                Local.getString("Sample Text")
+                        + " "
+                        + Local.getString("Sample Text"));
+        UIManager.put("ColorChooser.okText", Local.getString("OK"));
+        UIManager.put("ColorChooser.cancelText", Local.getString("Cancel"));
+        UIManager.put("ColorChooser.resetText", Local.getString("Reset"));
+        UIManager.put("ColorChooser.hsbHueText", Local.getString("H"));
+        UIManager.put("ColorChooser.hsbSaturationText", Local.getString("S"));
+        UIManager.put("ColorChooser.hsbBrightnessText", Local.getString("B"));
+        UIManager.put("ColorChooser.hsbRedText", Local.getString("R"));
+        UIManager.put("ColorChooser.hsbGreenText", Local.getString("G"));
+        UIManager.put("ColorChooser.hsbBlueText", Local.getString("B2"));
+        UIManager.put("ColorChooser.rgbRedText", Local.getString("Red"));
+        UIManager.put("ColorChooser.rgbGreenText", Local.getString("Green"));
+        UIManager.put("ColorChooser.rgbBlueText", Local.getString("Blue"));
+        Color c = JColorChooser.showDialog(this, Local.getString("Font color"),
+                Util.decodeColor(colorField.getText()));
+        if (c == null) {
+            return;
+        }
         colorField.setText(Util.encodeColor(c));
         Util.setColorField(colorField);
         sample.setForeground(c);
diff --git a/src/net/sf/memoranda/ui/htmleditor/HTMLEditor.java b/src/net/sf/memoranda/ui/htmleditor/HTMLEditor.java
index 56f831f..62d1c3e 100755
--- a/src/net/sf/memoranda/ui/htmleditor/HTMLEditor.java
+++ b/src/net/sf/memoranda/ui/htmleditor/HTMLEditor.java
@@ -1,53 +1,15 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Cursor;
-import java.awt.Dimension;
-import java.awt.Font;
-import java.awt.Point;
-import java.awt.Rectangle;
-import java.awt.datatransfer.Clipboard;
-import java.awt.datatransfer.DataFlavor;
-import java.awt.datatransfer.Transferable;
-import java.awt.event.ActionEvent;
-import java.awt.event.KeyEvent;
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.io.Reader;
-import java.io.StringReader;
-import java.io.StringWriter;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.Enumeration;
+import net.sf.memoranda.ui.htmleditor.util.Local;
 
-import javax.swing.AbstractAction;
-import javax.swing.Action;
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JComboBox;
-import javax.swing.JEditorPane;
-import javax.swing.JMenuItem;
-import javax.swing.JPanel;
-import javax.swing.JPopupMenu;
-import javax.swing.JScrollPane;
-import javax.swing.JTabbedPane;
-import javax.swing.JToolBar;
-import javax.swing.KeyStroke;
+import javax.swing.*;
 import javax.swing.border.BevelBorder;
 import javax.swing.border.Border;
 import javax.swing.event.CaretEvent;
 import javax.swing.event.CaretListener;
 import javax.swing.event.UndoableEditEvent;
 import javax.swing.event.UndoableEditListener;
-import javax.swing.text.AbstractDocument;
-import javax.swing.text.AttributeSet;
-import javax.swing.text.Document;
-import javax.swing.text.Element;
-import javax.swing.text.SimpleAttributeSet;
-import javax.swing.text.StyleConstants;
-import javax.swing.text.StyledEditorKit;
+import javax.swing.text.*;
 import javax.swing.text.html.HTML;
 import javax.swing.text.html.HTMLDocument;
 import javax.swing.text.html.HTMLEditorKit;
@@ -55,2743 +17,2848 @@ import javax.swing.text.html.StyleSheet;
 import javax.swing.undo.CannotRedoException;
 import javax.swing.undo.CannotUndoException;
 import javax.swing.undo.UndoManager;
-
-import net.sf.memoranda.ui.htmleditor.util.Local;
+import java.awt.*;
+import java.awt.datatransfer.Clipboard;
+import java.awt.datatransfer.DataFlavor;
+import java.awt.datatransfer.Transferable;
+import java.awt.event.ActionEvent;
+import java.awt.event.KeyEvent;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.io.Reader;
+import java.io.StringReader;
+import java.io.StringWriter;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Enumeration;
 
 /**
- *  
+ *
  */
 public class HTMLEditor extends JPanel {
-	public HTMLEditorPane editor = new HTMLEditorPane("");
+    public HTMLEditorPane editor = new HTMLEditorPane("");
 
 
     JScrollPane jScrollPane1 = new JScrollPane();
     public HTMLEditorKit editorKit = new HTMLEditorKit();
     public HTMLDocument document = null;
 
-	boolean bold = false;
-	boolean italic = false;
-	boolean under = false;
-	boolean list = false;
-
-	String currentTagName = "BODY";
-	Element currentParaElement = null;
-
-	Border border1, border2;
-
-	Class cl = net.sf.memoranda.ui.htmleditor.HTMLEditor.class;
-
-	String imagesDir = null;
-	String imagesPath = null;
-
-	public void setImagesDir(String path) {
-		imagesDir = path;
-	}
-
-	public String getImagesDir() {
-		return imagesDir;
-	}
-
-	abstract class HTMLEditorAction extends AbstractAction {
-		HTMLEditorAction(String name, ImageIcon icon) {
-			super(name, icon);
-			super.putValue(Action.SHORT_DESCRIPTION, name);
-		}
-		HTMLEditorAction(String name) {
-			super(name);
-			super.putValue(Action.SHORT_DESCRIPTION, name);
-		}
-	}
-
-	public Action boldAction =
-		new HTMLEditorAction(
-			Local.getString("Bold"),
-			new ImageIcon(cl.getResource("resources/icons/bold.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			boldActionB_actionPerformed(e);
-		}
-	};
-
-	public Action italicAction =
-		new HTMLEditorAction(
-			Local.getString("Italic"),
-			new ImageIcon(cl.getResource("resources/icons/italic.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			italicActionB_actionPerformed(e);
-		}
-	};
-
-	public Action underAction =
-		new HTMLEditorAction(
-			Local.getString("Underline"),
-			new ImageIcon(cl.getResource("resources/icons/underline.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			underActionB_actionPerformed(e);
-		}
-	};
-
-	public Action ulAction =
-		new HTMLEditorAction(
-			Local.getString("Unordered list"),
-			new ImageIcon(
-				cl.getResource("resources/icons/listunordered.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			ulActionB_actionPerformed(e);
-		}
-	};
-
-	public Action olAction =
-		new HTMLEditorAction(
-			Local.getString("Ordered list"),
-			new ImageIcon(cl.getResource("resources/icons/listordered.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			olActionB_actionPerformed(e);
-		}
-	};
-
-	public Action lAlignAction =
-		new HTMLEditorAction(
-			Local.getString("Align left"),
-			new ImageIcon(cl.getResource("resources/icons/alignleft.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			lAlignActionB_actionPerformed(e);
-		}
-	};
-
-	public Action cAlignAction =
-		new HTMLEditorAction(
-			Local.getString("Align center"),
-			new ImageIcon(cl.getResource("resources/icons/aligncenter.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			cAlignActionB_actionPerformed(e);
-		}
-	};
-
-	public Action rAlignAction =
-		new HTMLEditorAction(
-			Local.getString("Align right"),
-			new ImageIcon(cl.getResource("resources/icons/alignright.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			rAlignActionB_actionPerformed(e);
-		}
-	};
-
-	/*
-	 * public Action jAlignAction = new AbstractAction() { public void
-	 * actionPerformed(ActionEvent e) { jAlignActionB_actionPerformed(e); }
-	 */
-	public Action imageAction =
-		new HTMLEditorAction(
-			Local.getString("Insert image"),
-			new ImageIcon(cl.getResource("resources/icons/image.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			imageActionB_actionPerformed(e);
-		}
-	};
-
-	public Action tableAction =
-		new HTMLEditorAction(
-			Local.getString("Insert table"),
-			new ImageIcon(cl.getResource("resources/icons/table.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			tableActionB_actionPerformed(e);
-		}
-	};
-
-	public Action linkAction =
-		new HTMLEditorAction(
-			Local.getString("Insert hyperlink"),
-			new ImageIcon(cl.getResource("resources/icons/link.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			linkActionB_actionPerformed(e);
-		}
-	};
-
-	public Action propsAction =
-		new HTMLEditorAction(
-			Local.getString("Object properties"),
-			new ImageIcon(cl.getResource("resources/icons/properties.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			propsActionB_actionPerformed(e);
-		}
-	};
-
-	public Action selectAllAction =
-		new HTMLEditorAction(Local.getString("Select all")) {
-		public void actionPerformed(ActionEvent e) {
-			editor.selectAll();
-		}
-	};
-
-	public Action insertHRAction =
-		new HTMLEditorAction(
-			Local.getString("Insert horizontal rule"),
-			new ImageIcon(cl.getResource("resources/icons/hr.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			/*
-			 * String elName =
-			 * document.getParagraphElement(editor.getCaretPosition()).getName();
-			 * HTML.Tag tag = HTML.getTag(elName); if
-			 * (elName.toUpperCase().equals("P-IMPLIED")) tag =
-			 * HTML.Tag.IMPLIED; HTMLEditorKit.InsertHTMLTextAction hta = new
-			 * HTMLEditorKit.InsertHTMLTextAction("insertHR", " <hr> ", tag,
-			 * HTML.Tag.HR);
-			 */
-			try {
-				editorKit.insertHTML(
-					document,
-					editor.getCaretPosition(),
-					"<hr>",
-					0,
-					0,
-					HTML.Tag.HR);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-
-		}
-	};
-
-	CharTablePanel charTablePanel = new CharTablePanel(editor);
-
-	boolean charTableShow = false;
-
-	public JTabbedPane toolsPanel = new JTabbedPane();
-	public boolean toolsPanelShow = false;
-
-	public void showToolsPanel() {
-		if (toolsPanelShow)
-			return;
-		this.add(toolsPanel, BorderLayout.SOUTH);
-		toolsPanelShow = true;
-	}
-
-	public void hideToolsPanel() {
-		if (!toolsPanelShow)
-			return;
-		this.remove(charTablePanel);
-		toolsPanelShow = false;
-	}
-
-	void addCharTablePanel() {
-		showToolsPanel();
-		toolsPanel.addTab(Local.getString("Characters"), charTablePanel);
-	}
-
-	void removeCharTablePanel() {
-		toolsPanel.remove(charTablePanel);
-		if (toolsPanel.getTabCount() == 0)
-			hideToolsPanel();
-	}
-
-	public Action insCharAction =
-		new HTMLEditorAction(
-			Local.getString("Insert character"),
-			new ImageIcon(cl.getResource("resources/icons/char.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			if (!charTableShow) {
-				addCharTablePanel();
-				charTableShow = true;
-				insCharActionB.setBorder(border2);
-			} else {
-				removeCharTablePanel();
-				charTableShow = false;
-				insCharActionB.setBorder(border1);
-			}
-			insCharActionB.setBorderPainted(charTableShow);
-		}
-	};
-
-	public Action findAction =
-		new HTMLEditorAction(
-			Local.getString("Find & Replace"),
-			new ImageIcon(cl.getResource("resources/icons/find.png"))) {
-		public void actionPerformed(ActionEvent e) {
-			doFind();
-		}
-	};
-
-	public InsertTableCellAction insertTableCellAction =
-		new InsertTableCellAction();
-	public InsertTableRowAction insertTableRowAction =
-		new InsertTableRowAction();
-	public BreakAction breakAction = new BreakAction();
-
-	public Action cutAction = new HTMLEditorKit.CutAction();
-	/*
-	 * new AbstractAction() { public void actionPerformed(ActionEvent e) { if
-	 * (editor.getSelectedText() == null) return; doCopy();
-	 * editor.replaceSelection(""); }
-	 *  
-	 */
-
-	public Action styleCopyAction = new HTMLEditorKit.CopyAction();
-	//new DefaultEditorKit.CopyAction();
-
-	public Action copyAction = styleCopyAction;
-	/*
-	 * new AbstractAction() { public void actionPerformed(ActionEvent e) { if
-	 * (editor.getSelectedText() == null) return; doCopy(); }
-	 */
-
-	public Action stylePasteAction = new HTMLEditorKit.PasteAction();
-
-		public Action pasteAction = //new HTMLEditorKit.PasteAction();
-
-	new AbstractAction() {
-		public void actionPerformed(ActionEvent e) {
-				//editor.paste();
-	doPaste();
-		}
-	};
-
-	private void doCopy() {
-		/*
-		 * java.awt.datatransfer.Clipboard clip =
-		 * java.awt.Toolkit.getDefaultToolkit().getSystemClipboard(); try {
-		 * String text = editor.getSelectedText();
-		 * //.getText(editor.getSelectionStart(),
-		 * editor.getSelectionEnd()-editor.getSelectionStart());
-		 * clip.setContents(new java.awt.datatransfer.StringSelection(text),
-		 * null); } catch (Exception e) { e.printStackTrace();
-		 */
-		Element el = document.getParagraphElement(editor.getSelectionStart());
-		if (el.getName().toUpperCase().equals("P-IMPLIED"))
-			el = el.getParentElement();
-		String elName = el.getName();
-		StringWriter sw = new StringWriter();
-		String copy;
-		java.awt.datatransfer.Clipboard clip =
-			java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
-		try {
-			editorKit.write(
-				sw,
-				document,
-				editor.getSelectionStart(),
-				editor.getSelectionEnd() - editor.getSelectionStart());
-			copy = sw.toString();
-			copy = copy.split("<" + elName + "(.*?)>")[1];
-			copy = copy.split("</" + elName + ">")[0];
-			clip.setContents(
-				new java.awt.datatransfer.StringSelection(copy.trim()),
-				null);
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	private void doPaste() {
-		Clipboard clip =
-			java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
-		try {
-			Transferable content = clip.getContents(this);
-			if (content == null)
-				return;
-			String txt =
-				content
-					.getTransferData(new DataFlavor(String.class, "String"))
-					.toString();
-			document.replace(
-				editor.getSelectionStart(),
-				editor.getSelectionEnd() - editor.getSelectionStart(),
-				txt,
-				editorKit.getInputAttributes());
-			//editor.replaceSelection(content.getTransferData(new
-			// DataFlavor(String.class, "String")).toString());
-			//editor.paste();
-			//insertHTML(content.getTransferData(new DataFlavor(String.class,
-			// "String")).toString(), editor.getCaretPosition());
-			/*
-			 * Element el =
-			 * document.getParagraphElement(editor.getCaretPosition());
-			 * insertTextInElement(el, content.getTransferData(new
-			 * DataFlavor(String.class, "String")).toString(),
-			 */
-
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	/*
-	 * private void insertTextInElement(Element el, String text, int pos) {
-	 * String elName = el.getName(); StringWriter sw = new StringWriter();
-	 * String copy1; String copy2; try { StringWriter sw1 = new StringWriter();
-	 * editorKit.write(sw1, document, el.getStartOffset(), pos -
-	 * el.getStartOffset()); copy1 = sw1.toString(); StringWriter sw2 = new
-	 * StringWriter(); editorKit.write(sw2, document, pos, el.getEndOffset() -
-	 * pos); copy2 = sw2.toString(); String copy = copy1+text+copy2; ?)>")[1];
-	 * copy = copy.split(" </" + elName + "> ")[0]; document.setInnerHTML(el,
-	 * copy); } catch (Exception ex) { ex.printStackTrace(); }
-	 */
-
-	public Action zoomInAction = new AbstractAction() {
-		public void actionPerformed(ActionEvent e) {
-			doZoom(true);
-		}
-	};
-
-	public Action zoomOutAction = new AbstractAction() {
-		public void actionPerformed(ActionEvent e) {
-			doZoom(false);
-		}
-	};
-
-	/**
-	 * Listener for the edits on the current document.
-	 */
-	protected UndoableEditListener undoHandler = new UndoHandler();
-
-	/** UndoManager that we add edits to. */
-	protected UndoManager undo = new UndoManager();
-
-	public UndoAction undoAction = new UndoAction();
-	public RedoAction redoAction = new RedoAction();
-
-	JButton jAlignActionB = new JButton();
-	public JToolBar editToolbar = new JToolBar();
-	JButton lAlignActionB = new JButton();
-	JButton olActionB = new JButton();
-	JButton linkActionB = new JButton();
-	JButton italicActionB = new JButton();
-	JButton propsActionB = new JButton();
-	JButton imageActionB = new JButton();
-
-	public final int T_P = 0;
-	public final int T_H1 = 1;
-	public final int T_H2 = 2;
-	public final int T_H3 = 3;
-	public final int T_H4 = 4;
-	public final int T_H5 = 5;
-	public final int T_H6 = 6;
-	public final int T_PRE = 7;
-	//private final int T_ADDRESS = 8;
-	public final int T_BLOCKQ = 8; //9;
-
-	String[] elementTypes =
-		{
-			Local.getString("Paragraph"),
-			Local.getString("Header") + " 1",
-			Local.getString("Header") + " 2",
-			Local.getString("Header") + " 3",
-			Local.getString("Header") + " 4",
-			Local.getString("Header") + " 5",
-			Local.getString("Header") + " 6",
-			Local.getString("Preformatted"),
-		//"Address",
-		Local.getString("Blockquote")};
-	public JComboBox blockCB = new JComboBox(elementTypes);
-	boolean blockCBEventsLock = false;
-
-	public final int I_NORMAL = 0;
-	public final int I_EM = 1;
-	public final int I_STRONG = 2;
-	public final int I_CODE = 3;
-	public final int I_CITE = 4;
-	public final int I_SUPERSCRIPT = 5;
-	public final int I_SUBSCRIPT = 6;
-	public final int I_CUSTOM = 7;
-
-	String[] inlineTypes =
-		{
-			Local.getString("Normal"),
-			Local.getString("Emphasis"),
-			Local.getString("Strong"),
-			Local.getString("Code"),
-			Local.getString("Cite"),
-			Local.getString("Superscript"),
-			Local.getString("Subscript"),
-			Local.getString("Custom style") + "..." };
-	public JComboBox inlineCB = new JComboBox(inlineTypes);
-	boolean inlineCBEventsLock = false;
-
-	JButton boldActionB = new JButton();
-	JButton ulActionB = new JButton();
-	JButton rAlignActionB = new JButton();
-	JButton tableActionB = new JButton();
-	JButton cAlignActionB = new JButton();
-	JButton underActionB = new JButton();
-	BorderLayout borderLayout1 = new BorderLayout();
-	JPopupMenu defaultPopupMenu = new JPopupMenu();
-	//JPopupMenu tablePopupMenu = new JPopupMenu();
-
-	JMenuItem jMenuItemUndo = new JMenuItem(undoAction);
-	JMenuItem jMenuItemRedo = new JMenuItem(redoAction);
-
-	JMenuItem jMenuItemCut = new JMenuItem(cutAction);
-	JMenuItem jMenuItemCopy = new JMenuItem(copyAction);
-	JMenuItem jMenuItemPaste = new JMenuItem(pasteAction);
-	JMenuItem jMenuItemProp = new JMenuItem(propsAction);
-
-	JMenuItem jMenuItemInsCell = new JMenuItem(insertTableCellAction);
-	JMenuItem jMenuItemInsRow = new JMenuItem(insertTableRowAction);
-
-	int currentCaret = 0;
-
-	int currentFontSize = 4;
-	JButton brActionB = new JButton();
-	JButton hrActionB = new JButton();
-	JButton insCharActionB = new JButton();
-
-	public HTMLEditor() {
-		try {
-			jbInit();
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	void jbInit() throws Exception {
-
-		cutAction.putValue(
-			Action.SMALL_ICON,
-			new ImageIcon(cl.getResource("resources/icons/cut.png")));
-		cutAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
-		cutAction.putValue(Action.NAME, Local.getString("Cut"));
-		cutAction.putValue(Action.SHORT_DESCRIPTION, Local.getString("Cut"));
-
-		copyAction.putValue(
-			Action.SMALL_ICON,
-			new ImageIcon(cl.getResource("resources/icons/copy.png")));
-		copyAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK));
-		copyAction.putValue(Action.NAME, Local.getString("Copy"));
-		copyAction.putValue(Action.SHORT_DESCRIPTION, Local.getString("Copy"));
-
-		pasteAction.putValue(
-			Action.SMALL_ICON,
-			new ImageIcon(cl.getResource("resources/icons/paste.png")));
-		pasteAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));
-		pasteAction.putValue(Action.NAME, Local.getString("Paste"));
-		pasteAction.putValue(
-			Action.SHORT_DESCRIPTION,
-			Local.getString("Paste"));
-
-		stylePasteAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(
-				KeyEvent.VK_V,
-				KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
-		stylePasteAction.putValue(
-			Action.NAME,
-			Local.getString("Paste special"));
-		stylePasteAction.putValue(
-			Action.SHORT_DESCRIPTION,
-			Local.getString("Paste special"));
-
-		selectAllAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_MASK));
-
-		boldAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_B, KeyEvent.CTRL_MASK));
-		italicAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_I, KeyEvent.CTRL_MASK));
-		underAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_U, KeyEvent.CTRL_MASK));
-		breakAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.SHIFT_MASK));
-		breakAction.putValue(Action.NAME, Local.getString("Insert Break"));
-		breakAction.putValue(
-			Action.SHORT_DESCRIPTION,
-			Local.getString("Insert Break"));
-
-		findAction.putValue(
-			Action.ACCELERATOR_KEY,
-			KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK));
-
-		document = (HTMLDocument) editorKit.createDefaultDocument();
-
-		border1 =
-			BorderFactory.createEtchedBorder(
-				Color.white,
-				new Color(142, 142, 142));
-		border2 =
-			BorderFactory.createBevelBorder(
-				BevelBorder.LOWERED,
-				Color.white,
-				Color.white,
-				new Color(142, 142, 142),
-				new Color(99, 99, 99));
-		this.setLayout(borderLayout1);
-
-		/*
-		 * jAlignActionB.setIcon( new
-		 * ImageIcon(net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResource("resources/icons/alignjust.png")));
-		 * jAlignActionB.setMaximumSize(new Dimension(22, 22));
-		 * jAlignActionB.setMinimumSize(new Dimension(22, 22));
-		 * jAlignActionB.setPreferredSize(new Dimension(22, 22));
-		 * jAlignActionB.setFocusable(false);
-		 */
-
-		editor.addCaretListener(new CaretListener() {
-			public void caretUpdate(CaretEvent e) {
-				editor_caretUpdate(e);
-			}
-		});
-
-		editor.setEditorKit(editorKit);
-		editorKit.setDefaultCursor(new Cursor(Cursor.TEXT_CURSOR));
-
-		editor.setDocument(document);
-		document.addUndoableEditListener(undoHandler);
-
-		this.setPreferredSize(new Dimension(520, 57));
-		editToolbar.setRequestFocusEnabled(false);
-		editToolbar.setToolTipText("");
-
-		boldActionB.setAction(boldAction);
-		boldActionB.setBorder(border1);
-		boldActionB.setMaximumSize(new Dimension(22, 22));
-		boldActionB.setMinimumSize(new Dimension(22, 22));
-		boldActionB.setPreferredSize(new Dimension(22, 22));
-		boldActionB.setBorderPainted(false);
-		boldActionB.setFocusable(false);
-		boldActionB.setText("");
-
-		italicActionB.setAction(italicAction);
-		italicActionB.setBorder(border1);
-		italicActionB.setMaximumSize(new Dimension(22, 22));
-		italicActionB.setMinimumSize(new Dimension(22, 22));
-		italicActionB.setPreferredSize(new Dimension(22, 22));
-		italicActionB.setBorderPainted(false);
-		italicActionB.setFocusable(false);
-		italicActionB.setText("");
-
-		underActionB.setAction(underAction);
-		underActionB.setBorder(border1);
-		underActionB.setMaximumSize(new Dimension(22, 22));
-		underActionB.setMinimumSize(new Dimension(22, 22));
-		underActionB.setPreferredSize(new Dimension(22, 22));
-		underActionB.setBorderPainted(false);
-		underActionB.setFocusable(false);
-		underActionB.setText("");
-
-		lAlignActionB.setAction(lAlignAction);
-		lAlignActionB.setMaximumSize(new Dimension(22, 22));
-		lAlignActionB.setMinimumSize(new Dimension(22, 22));
-		lAlignActionB.setPreferredSize(new Dimension(22, 22));
-		lAlignActionB.setBorderPainted(false);
-		lAlignActionB.setFocusable(false);
-		lAlignActionB.setText("");
-
-		rAlignActionB.setAction(rAlignAction);
-		rAlignActionB.setFocusable(false);
-		rAlignActionB.setPreferredSize(new Dimension(22, 22));
-		rAlignActionB.setBorderPainted(false);
-		rAlignActionB.setMinimumSize(new Dimension(22, 22));
-		rAlignActionB.setMaximumSize(new Dimension(22, 22));
-		rAlignActionB.setText("");
-
-		cAlignActionB.setAction(cAlignAction);
-		cAlignActionB.setMaximumSize(new Dimension(22, 22));
-		cAlignActionB.setMinimumSize(new Dimension(22, 22));
-		cAlignActionB.setPreferredSize(new Dimension(22, 22));
-		cAlignActionB.setBorderPainted(false);
-		cAlignActionB.setFocusable(false);
-		cAlignActionB.setText("");
-
-		ulActionB.setAction(ulAction);
-		ulActionB.setMaximumSize(new Dimension(22, 22));
-		ulActionB.setMinimumSize(new Dimension(22, 22));
-		ulActionB.setPreferredSize(new Dimension(22, 22));
-		ulActionB.setBorderPainted(false);
-		ulActionB.setFocusable(false);
-		ulActionB.setText("");
-
-		olActionB.setAction(olAction);
-		olActionB.setMaximumSize(new Dimension(22, 22));
-		olActionB.setMinimumSize(new Dimension(22, 22));
-		olActionB.setPreferredSize(new Dimension(22, 22));
-		olActionB.setBorderPainted(false);
-		olActionB.setFocusable(false);
-		olActionB.setText("");
-
-		linkActionB.setAction(linkAction);
-		linkActionB.setMaximumSize(new Dimension(22, 22));
-		linkActionB.setMinimumSize(new Dimension(22, 22));
-		linkActionB.setPreferredSize(new Dimension(22, 22));
-		linkActionB.setBorderPainted(false);
-		linkActionB.setFocusable(false);
-		linkActionB.setText("");
-
-		propsActionB.setAction(propsAction);
-		propsActionB.setFocusable(false);
-		propsActionB.setPreferredSize(new Dimension(22, 22));
-		propsActionB.setBorderPainted(false);
-		propsActionB.setMinimumSize(new Dimension(22, 22));
-		propsActionB.setMaximumSize(new Dimension(22, 22));
-		propsActionB.setText("");
-
-		imageActionB.setAction(imageAction);
-		imageActionB.setMaximumSize(new Dimension(22, 22));
-		imageActionB.setMinimumSize(new Dimension(22, 22));
-		imageActionB.setPreferredSize(new Dimension(22, 22));
-		imageActionB.setBorderPainted(false);
-		imageActionB.setFocusable(false);
-		imageActionB.setText("");
-
-		tableActionB.setAction(tableAction);
-		tableActionB.setFocusable(false);
-		tableActionB.setPreferredSize(new Dimension(22, 22));
-		tableActionB.setBorderPainted(false);
-		tableActionB.setMinimumSize(new Dimension(22, 22));
-		tableActionB.setMaximumSize(new Dimension(22, 22));
-		tableActionB.setText("");
-
-		brActionB.setAction(breakAction);
-		brActionB.setFocusable(false);
-		brActionB.setBorderPainted(false);
-		brActionB.setPreferredSize(new Dimension(22, 22));
-		brActionB.setMinimumSize(new Dimension(22, 22));
-		brActionB.setMaximumSize(new Dimension(22, 22));
-		brActionB.setText("");
-
-		hrActionB.setAction(insertHRAction);
-		hrActionB.setMaximumSize(new Dimension(22, 22));
-		hrActionB.setMinimumSize(new Dimension(22, 22));
-		hrActionB.setPreferredSize(new Dimension(22, 22));
-		hrActionB.setBorderPainted(false);
-		hrActionB.setFocusable(false);
-		hrActionB.setText("");
-
-		insCharActionB.setAction(insCharAction);
-		insCharActionB.setBorder(border1);
-		insCharActionB.setMaximumSize(new Dimension(22, 22));
-		insCharActionB.setMinimumSize(new Dimension(22, 22));
-		insCharActionB.setPreferredSize(new Dimension(22, 22));
-		insCharActionB.setBorderPainted(false);
-		insCharActionB.setFocusable(false);
-		insCharActionB.setText("");
-
-		blockCB.setBackground(new Color(230, 230, 230));
-		blockCB.setMaximumRowCount(12);
-		blockCB.setFont(new java.awt.Font("Dialog", 1, 10));
-		blockCB.setMaximumSize(new Dimension(120, 22));
-		blockCB.setMinimumSize(new Dimension(60, 22));
-		blockCB.setPreferredSize(new Dimension(79, 22));
-		blockCB.setFocusable(false);
-		blockCB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				blockCB_actionPerformed(e);
-			}
-		});
-
-		inlineCB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				inlineCB_actionPerformed(e);
-			}
-		});
-		inlineCB.setFocusable(false);
-		inlineCB.setPreferredSize(new Dimension(79, 22));
-		inlineCB.setMinimumSize(new Dimension(60, 22));
-		inlineCB.setMaximumSize(new Dimension(120, 22));
-		inlineCB.setFont(new java.awt.Font("Dialog", 1, 10));
-		inlineCB.setMaximumRowCount(12);
-		inlineCB.setBackground(new Color(230, 230, 230));
-
-		this.add(jScrollPane1, BorderLayout.CENTER);
-		this.add(editToolbar, BorderLayout.NORTH);
-
-		editToolbar.add(propsActionB, null);
-		editToolbar.addSeparator();
-		editToolbar.add(blockCB, null);
-
-		editToolbar.addSeparator();
-		editToolbar.add(inlineCB, null);
-		editToolbar.addSeparator();
-		editToolbar.add(boldActionB, null);
-		editToolbar.add(italicActionB, null);
-		editToolbar.add(underActionB, null);
-		editToolbar.addSeparator();
-		editToolbar.add(ulActionB, null);
-		editToolbar.add(olActionB, null);
-		editToolbar.addSeparator();
-		editToolbar.add(lAlignActionB, null);
-		editToolbar.add(cAlignActionB, null);
-		editToolbar.add(rAlignActionB, null);
-		editToolbar.addSeparator();
-		editToolbar.add(imageActionB, null);
-		editToolbar.add(tableActionB, null);
-		editToolbar.add(linkActionB, null);
-		editToolbar.addSeparator();
-		editToolbar.add(hrActionB, null);
-		editToolbar.add(brActionB, null);
-		editToolbar.add(insCharActionB, null);
-
-		jScrollPane1.getViewport().add(editor, null);
-
-		toolsPanel.setTabPlacement(JTabbedPane.BOTTOM);
-		toolsPanel.setFont(new Font("Dialog", 1, 10));
-
-		//  editToolbar.add(jAlignActionB, null);
-
-		/* KEY ACTIONS */
-
-		/*
-		 * editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.SHIFT_MASK),
-		 */
-
-		editor.getKeymap().removeKeyStrokeBinding(
-			KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0));
-		editor.getKeymap().addActionForKeyStroke(
-			KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),
-			new ParaBreakAction());
-
-		/*
-		 * editor.getKeymap().addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_B,
-		 * KeyEvent.CTRL_MASK), boldAction);
-		 * editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_I, KeyEvent.CTRL_MASK),
-		 * italicAction); editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_U, KeyEvent.CTRL_MASK),
-		 */
-
-		/*
-		 * editor.getKeymap().addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
-		 * KeyEvent.CTRL_MASK), undoAction);
-		 * editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_MASK +
-		 * KeyEvent.SHIFT_MASK), redoAction);
-		 * editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK +
-		 * KeyEvent.SHIFT_MASK), insertTableCellAction);
-		 * editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK),
-		 */
-
-		editor.getKeymap().removeKeyStrokeBinding(
-			KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK));
-		editor.getKeymap().removeKeyStrokeBinding(
-			KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));
-		editor.getKeymap().removeKeyStrokeBinding(
-			KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
-
-		editor.getKeymap().addActionForKeyStroke(
-			KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK),
-			copyAction);
-		editor.getKeymap().addActionForKeyStroke(
-			KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK),
-			pasteAction);
-		editor.getKeymap().addActionForKeyStroke(
-			KeyStroke.getKeyStroke(
-				KeyEvent.VK_V,
-				KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK),
-			stylePasteAction);
-		editor.getKeymap().addActionForKeyStroke(
-			KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK),
-			cutAction);
-
-		editor.getKeymap().addActionForKeyStroke(
-			KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK),
-			findAction);
-		/*
-		 * editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, KeyEvent.CTRL_MASK),
-		 * zoomInAction); editor.getKeymap().addActionForKeyStroke(
-		 * KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, KeyEvent.CTRL_MASK),
-		 */
-
-		/* POPUP MENUs */
-
-		/*
-		 * jMenuItemUndo.setAction(undoAction); jMenuItemUndo.setText("Undo");
-		 * jMenuItemUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
-		 * KeyEvent.CTRL_MASK)); jMenuItemUndo.setIcon( new
-		 * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/undo16.png")));
-		 * 
-		 * jMenuItemRedo.setAction(redoAction); jMenuItemRedo.setText("Redo");
-		 * jMenuItemRedo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
-		 * KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK)); jMenuItemRedo.setIcon(
-		 * new
-		 * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/redo16.png")));
-		 * 
-		 * jMenuItemCut.setAction(cutAction); jMenuItemCut.setText("Cut");
-		 * jMenuItemCut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
-		 * KeyEvent.CTRL_MASK)); jMenuItemCut.setIcon( new
-		 * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/cut.png")));
-		 * 
-		 * jMenuItemCopy.setAction(copyAction); jMenuItemCopy.setText("Copy");
-		 * jMenuItemCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
-		 * KeyEvent.CTRL_MASK)); jMenuItemCopy.setIcon( new
-		 * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/copy.png")));
-		 * 
-		 * jMenuItemPaste.setAction(pasteAction);
-		 * jMenuItemPaste.setText("Paste");
-		 * jMenuItemPaste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
-		 * KeyEvent.CTRL_MASK)); jMenuItemPaste.setIcon( new
-		 * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/paste.png")));
-		 * 
-		 * jMenuItemProp.setAction(propsAction);
-		 * jMenuItemProp.setText("Properties"); jMenuItemProp.setIcon(
-		 */
-
-		/*
-		 * defaultPopupMenu.add(jMenuItemUndo);
-		 * defaultPopupMenu.add(jMenuItemRedo);
-		 * defaultPopupMenu.addSeparator(); defaultPopupMenu.add(jMenuItemCut);
-		 * defaultPopupMenu.add(jMenuItemCopy);
-		 * defaultPopupMenu.add(jMenuItemPaste);
-		 * defaultPopupMenu.addSeparator();
-		 */
-
-		/*
-		 * jMenuItemInsCell.setAction(new InsertTableCellAction());
-		 * jMenuItemInsCell.setText(Local.getString("Insert table cell"));
-		 * 
-		 * jMenuItemInsRow.setAction(new InsertTableRowAction());
-		 */
-
-		/*
-		 * tablePopupMenu.add(jMenuItemUndo);
-		 * tablePopupMenu.add(jMenuItemRedo); tablePopupMenu.addSeparator();
-		 * tablePopupMenu.add(jMenuItemCut); tablePopupMenu.add(jMenuItemCopy);
-		 * tablePopupMenu.add(jMenuItemPaste); tablePopupMenu.addSeparator();
-		 * tablePopupMenu.add(jMenuItemInsCell);
-		 * tablePopupMenu.add(jMenuItemInsRow); tablePopupMenu.addSeparator();
-		 */
-
-		editor.addMouseListener(new PopupListener());
-
-		document.getStyleSheet().setBaseFontSize(currentFontSize);
-		this.requestFocusInWindow();
-	}
-
-	class PopupListener extends MouseAdapter {
-		public void mousePressed(MouseEvent e) {
-			maybeShowPopup(e);
-		}
-
-		public void mouseReleased(MouseEvent e) {
-			maybeShowPopup(e);
-		}
-
-		private void maybeShowPopup(MouseEvent e) {
-			if (e.isPopupTrigger()) {
-				JPopupMenu popupMenu = new JPopupMenu();
-				popupMenu.setFocusable(false);
-
-				popupMenu.add(jMenuItemUndo);
-				popupMenu.add(jMenuItemRedo);
-				popupMenu.addSeparator();
-				popupMenu.add(jMenuItemCut);
-				popupMenu.add(jMenuItemCopy);
-				popupMenu.add(jMenuItemPaste);
-				popupMenu.addSeparator();
-				if (jMenuItemInsCell.getAction().isEnabled()) {
-					popupMenu.add(jMenuItemInsCell);
-					jMenuItemInsCell.setEnabled(true);
-					popupMenu.add(jMenuItemInsRow);
-					jMenuItemInsRow.setEnabled(true);
-					popupMenu.addSeparator();
-				}
-				popupMenu.add(jMenuItemProp);
-				popupMenu.show(e.getComponent(), e.getX(), e.getY());
-
-			}
-		}
-	}
-
-	/**
-	 * Resets the undo manager.
-	 */
-	protected void resetUndoManager() {
-		undo.discardAllEdits();
-		undoAction.update();
-		redoAction.update();
-	}
-
-	class UndoHandler implements UndoableEditListener {
-
-		/**
-		 * Messaged when the Document has created an edit, the edit is added to
-		 * <code>undo</code>, an instance of UndoManager.
-		 */
-		public void undoableEditHappened(UndoableEditEvent e) {
-			undo.addEdit(e.getEdit());
-			undoAction.update();
-			redoAction.update();
-		}
-	}
-
-	class UndoAction extends AbstractAction {
-		public UndoAction() {
-			super(Local.getString("Undo"));
-			setEnabled(false);
-			putValue(
-				Action.SMALL_ICON,
-				new ImageIcon(cl.getResource("resources/icons/undo16.png")));
-			putValue(
-				Action.ACCELERATOR_KEY,
-				KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_MASK));
-		}
-
-		public void actionPerformed(ActionEvent e) {
-			try {
-				undo.undo();
-			} catch (CannotUndoException ex) {
-				System.out.println("Unable to undo: " + ex);
-				ex.printStackTrace();
-			}
-			update();
-			redoAction.update();
-		}
-
-		protected void update() {
-			if (undo.canUndo()) {
-				setEnabled(true);
-				putValue(
-					Action.SHORT_DESCRIPTION,
-					undo.getUndoPresentationName());
-			} else {
-				setEnabled(false);
-				putValue(Action.SHORT_DESCRIPTION, Local.getString("Undo"));
-			}
-		}
-	}
-
-	class RedoAction extends AbstractAction {
-		public RedoAction() {
-			super(Local.getString("Redo"));
-			setEnabled(false);
-			putValue(
-				Action.SMALL_ICON,
-				new ImageIcon(cl.getResource("resources/icons/redo16.png")));
-			putValue(
-				Action.ACCELERATOR_KEY,
-				KeyStroke.getKeyStroke(
-					KeyEvent.VK_Z,
-					KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
-		}
-
-		public void actionPerformed(ActionEvent e) {
-			try {
-				undo.redo();
-			} catch (CannotRedoException ex) {
-				System.out.println("Unable to redo: " + ex);
-				ex.printStackTrace();
-			}
-			update();
-			undoAction.update();
-		}
-
-		protected void update() {
-			if (undo.canRedo()) {
-				setEnabled(true);
-				putValue(
-					Action.SHORT_DESCRIPTION,
-					undo.getRedoPresentationName());
-			} else {
-				setEnabled(false);
-				putValue(Action.SHORT_DESCRIPTION, Local.getString("Redo"));
-			}
-		}
-	}
-
-	public class BlockAction extends AbstractAction {
-		int _type;
-
-		public BlockAction(int type, String name) {
-			super(name);
-			_type = type;
-		}
-
-		public void actionPerformed(ActionEvent e) {
-			blockCB.setSelectedIndex(_type);
-		}
-	}
-
-	public class InlineAction extends AbstractAction {
-		int _type;
-
-		public InlineAction(int type, String name) {
-			super(name);
-			_type = type;
-		}
-
-		public void actionPerformed(ActionEvent e) {
-			inlineCB.setSelectedIndex(_type);
-		}
-	}
-
-	public String getContent() {
-		try {
-			return editor.getText();
-		} catch (Exception e) {
-			e.printStackTrace();
-			return "";
-		}
-	}
-
-	public void boldActionB_actionPerformed(ActionEvent e) {
-		if (!bold) {
-			boldActionB.setBorder(border2);
-		} else {
-			boldActionB.setBorder(border1);
-		}
-		bold = !bold;
-		boldActionB.setBorderPainted(bold);
-		/*
-		 * SimpleAttributeSet attrs = new SimpleAttributeSet();
-		 * attrs.addAttribute(StyleConstants.Bold, new Boolean(bold));
-		 */
-		new StyledEditorKit.BoldAction().actionPerformed(e);
-	}
-
-	public void italicActionB_actionPerformed(ActionEvent e) {
-		if (!italic) {
-			italicActionB.setBorder(border2);
-		} else {
-			italicActionB.setBorder(border1);
-		}
-		italic = !italic;
-		italicActionB.setBorderPainted(italic);
-		/*
-		 * SimpleAttributeSet attrs = new SimpleAttributeSet();
-		 * attrs.addAttribute(StyleConstants.Italic, new Boolean(italic));
-		 */
-		new StyledEditorKit.ItalicAction().actionPerformed(e);
-	}
-
-	public void underActionB_actionPerformed(ActionEvent e) {
-		if (!under) {
-			underActionB.setBorder(border2);
-		} else {
-			underActionB.setBorder(border1);
-		}
-		under = !under;
-		underActionB.setBorderPainted(under);
-		/*
-		 * SimpleAttributeSet attrs = new SimpleAttributeSet();
-		 * attrs.addAttribute(StyleConstants.Underline, new Boolean(under));
-		 */
-
-		new StyledEditorKit.UnderlineAction().actionPerformed(e);
-	}
-
-	void editor_caretUpdate(CaretEvent e) {
-		currentCaret = e.getDot();
-		/*
-		 * currentParaElement =
-		 * document.getParagraphElement(editor.getCaretPosition());
-		 * currentTagName = currentParaElement.getName().toUpperCase();
-		 */
-
-		AttributeSet charattrs = null;
-		//System.out.print(editor.getCaretPosition()+" :
-		// "+document.getCharacterElement(editor.getCaretPosition()).getName()+"
-		// -> ");
-		if (editor.getCaretPosition() > 0)
-			try {
-				charattrs =
-					document
-						.getCharacterElement(editor.getCaretPosition() - 1)
-						.getAttributes();
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			} else
-			charattrs =
-				document
-					.getCharacterElement(editor.getCaretPosition())
-					.getAttributes();
-
-		if (charattrs
-			.containsAttribute(StyleConstants.Bold, new Boolean(true))) {
-			boldActionB.setBorder(border2);
-			bold = true;
-		} else if (bold) {
-			boldActionB.setBorder(border1);
-			bold = false;
-		}
-		boldActionB.setBorderPainted(bold);
-		if (charattrs
-			.containsAttribute(StyleConstants.Italic, new Boolean(true))) {
-			italicActionB.setBorder(border2);
-			italic = true;
-		} else if (italic) {
-			italicActionB.setBorder(border1);
-			italic = false;
-		}
-		italicActionB.setBorderPainted(italic);
-		if (charattrs
-			.containsAttribute(StyleConstants.Underline, new Boolean(true))) {
-			underActionB.setBorder(border2);
-			under = true;
-		} else if (under) {
-			underActionB.setBorder(border1);
-			under = false;
-		}
-		underActionB.setBorderPainted(under);
-		/*
-		 * String iName = document
-		 * .getCharacterElement(editor.getCaretPosition()) .getAttributes()
-		 * .getAttribute(StyleConstants.NameAttribute) .toString()
-		 */
-		inlineCBEventsLock = true;
-		inlineCB.setEnabled(!charattrs.isDefined(HTML.Tag.A));
-		if (charattrs.isDefined(HTML.Tag.EM))
-			inlineCB.setSelectedIndex(I_EM);
-		else if (charattrs.isDefined(HTML.Tag.STRONG))
-			inlineCB.setSelectedIndex(I_STRONG);
-		else if (
-			(charattrs.isDefined(HTML.Tag.CODE))
-				|| (charattrs.isDefined(HTML.Tag.SAMP)))
-			inlineCB.setSelectedIndex(I_CODE);
-		else if (charattrs.isDefined(HTML.Tag.SUP))
-			inlineCB.setSelectedIndex(I_SUPERSCRIPT);
-		else if (charattrs.isDefined(HTML.Tag.SUB))
-			inlineCB.setSelectedIndex(I_SUBSCRIPT);
-		else if (charattrs.isDefined(HTML.Tag.CITE))
-			inlineCB.setSelectedIndex(I_CITE);
-		else if (charattrs.isDefined(HTML.Tag.FONT))
-			inlineCB.setSelectedIndex(I_CUSTOM);
-		else
-			inlineCB.setSelectedIndex(I_NORMAL);
-		inlineCBEventsLock = false;
-
-		Element pEl = document.getParagraphElement(editor.getCaretPosition());
-		String pName = pEl.getName().toUpperCase();
-		blockCBEventsLock = true;
-		if (pName.equals("P-IMPLIED"))
-			pName = pEl.getParentElement().getName().toUpperCase();
-
-		if (pName.equals("P"))
-			blockCB.setSelectedIndex(T_P);
-		else if (pName.equals("H1"))
-			blockCB.setSelectedIndex(T_H1);
-		else if (pName.equals("H2"))
-			blockCB.setSelectedIndex(T_H2);
-		else if (pName.equals("H3"))
-			blockCB.setSelectedIndex(T_H3);
-		else if (pName.equals("H4"))
-			blockCB.setSelectedIndex(T_H4);
-		else if (pName.equals("H5"))
-			blockCB.setSelectedIndex(T_H5);
-		else if (pName.equals("H6"))
-			blockCB.setSelectedIndex(T_H6);
-		else if (pName.equals("PRE"))
-			blockCB.setSelectedIndex(T_PRE);
-		/*
-		 * else if (pName.equals("ADDRESS"))
-		 */
-		else if (pName.equals("BLOCKQUOTE"))
-			blockCB.setSelectedIndex(T_BLOCKQ);
-		blockCBEventsLock = false;
-		this.insertTableCellAction.update();
-		this.insertTableRowAction.update();
-		/*
-		 * String ppName =
-		 * document.getParagraphElement(editor.getCaretPosition()).getParentElement().getName().toUpperCase();
-		 * System.out.print(ppName+"->"+pName+":");
-		 * 
-		 * AbstractDocument.BranchElement pEl =
-		 * (AbstractDocument.BranchElement)document.getParagraphElement(editor.getCaretPosition());
-		 * Element el = pEl.positionToElement(editor.getCaretPosition());
-		 * System.out.println(el.getAttributes().getAttribute(StyleConstants.NameAttribute)+",
-		 * "+pEl.getElementCount()+"/"+el.getElementCount());
-		 */
-
-	}
-
-	public void ulActionB_actionPerformed(ActionEvent e) {
-		String parentname =
-			document
-				.getParagraphElement(editor.getCaretPosition())
-				.getParentElement()
-				.getName();
-		HTML.Tag parentTag = HTML.getTag(parentname);
-		HTMLEditorKit.InsertHTMLTextAction ulAction =
-			new HTMLEditorKit.InsertHTMLTextAction(
-				"insertUL",
-				"<ul><li></li></ul>",
-				parentTag,
-				HTML.Tag.UL);
-		ulAction.actionPerformed(e);
-		//removeIfEmpty(document.getParagraphElement(editor.getCaretPosition()-1));
-		list = true;
-		/*
-		 * Element pEl =
-		 * document.getParagraphElement(editor.getCaretPosition());
-		 * StringWriter sw = new StringWriter(); try { editorKit.write(sw,
-		 * document, pEl.getStartOffset(),
-		 * pEl.getEndOffset()-pEl.getStartOffset()); String copy =
-		 * sw.toString(); String elName = pEl.getName(); copy =
-		 * copy.substring(copy.indexOf(" <"+elName)); copy =
-		 * copy.substring(0,copy.indexOf(" </"+elName)+elName.length()+3);
-		 * document.setOuterHTML(pEl, " <ul><li> "+copy+" </li></ul> ");
-		 * System.out.println(copy); } catch (Exception ex){
-		 * ex.printStackTrace();
-		 */
-
-	}
-
-	public void olActionB_actionPerformed(ActionEvent e) {
-		String parentname =
-			document
-				.getParagraphElement(editor.getCaretPosition())
-				.getParentElement()
-				.getName();
-		HTML.Tag parentTag = HTML.getTag(parentname);
-		HTMLEditorKit.InsertHTMLTextAction olAction =
-			new HTMLEditorKit.InsertHTMLTextAction(
-				"insertOL",
-				"<ol><li></li></ol>",
-				parentTag,
-				HTML.Tag.OL);
-		olAction.actionPerformed(e);
-		//removeIfEmpty(document.getParagraphElement(editor.getCaretPosition()-1));
-		list = true;
-	}
-
-	void removeIfEmpty(Element elem) {
-		if (elem.getEndOffset() - elem.getStartOffset() < 2) {
-			try {
-				document.remove(elem.getStartOffset(), elem.getEndOffset());
-			} catch (Exception ex) {
-				//ex.printStackTrace();
-			}
-		}
-	}
-
-	class ParaBreakAction extends AbstractAction {
-		ParaBreakAction() {
-			super("ParaBreakAction");
-		}
-
-		public void actionPerformed(ActionEvent e) {
-
-			Element elem =
-				document.getParagraphElement(editor.getCaretPosition());
-			String elName = elem.getName().toUpperCase();
-			String parentname = elem.getParentElement().getName();
-			HTML.Tag parentTag = HTML.getTag(parentname);
-			if (parentname.toUpperCase().equals("P-IMPLIED"))
-				parentTag = HTML.Tag.IMPLIED;
-			if (parentname.toLowerCase().equals("li")) {
-				// HTML.Tag listTag =
-				// HTML.getTag(elem.getParentElement().getParentElement().getName());
-				if (elem.getEndOffset() - elem.getStartOffset() > 1) {
-					try {
-						document.insertAfterEnd(
-							elem.getParentElement(),
-							"<li></li>");
-						editor.setCaretPosition(
-							elem.getParentElement().getEndOffset());
-					} catch (Exception ex) {
-						ex.printStackTrace();
-					}
-					/*
-					 * HTMLEditorKit.InsertHTMLTextAction liAction = new
-					 * HTMLEditorKit.InsertHTMLTextAction("insertLI", " <li>
-					 * </li> ", parentTag, HTML.Tag.LI);
-					 */
-				} else {
-					try {
-						document.remove(editor.getCaretPosition(), 1);
-					} catch (Exception ex) {
-						ex.printStackTrace();
-					}
-					Element listParentElement =
-						elem
-							.getParentElement()
-							.getParentElement()
-							.getParentElement();
-					HTML.Tag listParentTag =
-						HTML.getTag(listParentElement.getName());
-					String listParentTagName = listParentTag.toString();
-					if (listParentTagName.toLowerCase().equals("li")) {
-						Element listAncEl =
-							listParentElement.getParentElement();
-						try {
-							editorKit.insertHTML(
-								document,
-								listAncEl.getEndOffset(),
-								"<li><p></p></li>",
-								3,
-								0,
-								HTML.Tag.LI);
-						} catch (Exception ex) {
-							ex.printStackTrace();
-						}
-					} else {
-						HTMLEditorKit.InsertHTMLTextAction pAction =
-							new HTMLEditorKit.InsertHTMLTextAction(
-								"insertP",
-								"<p></p>",
-								listParentTag,
-								HTML.Tag.P);
-						pAction.actionPerformed(e);
-					}
-				}
-			} else if (
-				(elName.equals("PRE"))
-					|| (elName.equals("ADDRESS"))
-					|| (elName.equals("BLOCKQUOTE"))) {
-				if (editor.getCaretPosition() > 0)
-					removeIfEmpty(
-						document.getParagraphElement(
-							editor.getCaretPosition() - 1));
-				HTMLEditorKit.InsertHTMLTextAction pAction =
-					new HTMLEditorKit.InsertHTMLTextAction(
-						"insertP",
-						"<p></p>",
-						parentTag,
-						HTML.Tag.P);
-				System.out.println("PRE");
-				pAction.actionPerformed(e);
-			} else if (elName.equals("P-IMPLIED")) {
-				/*
-				 * HTML.Tag sParentTag =
-				 * HTML.getTag(elem.getParentElement().getParentElement().getName());
-				 * if (editor.getCaretPosition() > 0)
-				 * removeIfEmpty(document.getParagraphElement(editor.getCaretPosition() -
-				 * 1)); HTMLEditorKit.InsertHTMLTextAction pAction = new
-				 * HTMLEditorKit.InsertHTMLTextAction("insertP", " <p></p> ",
-				 * sParentTag, HTML.Tag.P);
-				 * System.out.println(sParentTag.toString());
-				 */
-				try {
-					System.out.println("IMPLIED");
-					document.insertAfterEnd(elem.getParentElement(), "<p></p>");
-					editor.setCaretPosition(
-						elem.getParentElement().getEndOffset());
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-
-			} else {
-				//removeIfEmpty(editor.getStyledDocument().getParagraphElement(editor.getCaretPosition()-1));
-				/*
-				 * HTMLEditorKit.InsertHTMLTextAction pAction = new
-				 * HTMLEditorKit.InsertHTMLTextAction("insertP"," <p></p> ",
-				 * HTML.Tag.BODY, HTML.Tag.P);
-				 */
-
-				//HTMLEditorKit.InsertBreakAction iba = new
-				// HTMLEditorKit.InsertBreakAction();
-				//iba.actionPerformed(e);
-				editor.replaceSelection("\n");
-				editorKit.getInputAttributes().removeAttribute(
-					HTML.Attribute.ID);
-				editorKit.getInputAttributes().removeAttribute(
-					HTML.Attribute.CLASS);
-			}
-			//System.out.println(e.getWhen());
-		}
-	}
-
-	class BreakAction extends AbstractAction {
-		BreakAction() {
-			super(
-				Local.getString("Insert break"),
-				new ImageIcon(cl.getResource("resources/icons/break.png")));
-		}
-		public void actionPerformed(ActionEvent e) {
-			String elName =
-				document
-					.getParagraphElement(editor.getCaretPosition())
-					.getName();
-			/*
-			 * if ((elName.toUpperCase().equals("PRE")) ||
-			 * (elName.toUpperCase().equals("P-IMPLIED"))) {
-			 * editor.replaceSelection("\r"); return;
-			 */
-			HTML.Tag tag = HTML.getTag(elName);
-			if (elName.toUpperCase().equals("P-IMPLIED"))
-				tag = HTML.Tag.IMPLIED;
-
-			HTMLEditorKit.InsertHTMLTextAction hta =
-				new HTMLEditorKit.InsertHTMLTextAction(
-					"insertBR",
-					"<br>",
-					tag,
-					HTML.Tag.BR);
-			hta.actionPerformed(e);
-
-			//insertHTML("<br>",editor.getCaretPosition());
-
-		}
-	}
-
-	class InsertTableRowAction extends AbstractAction {
-		InsertTableRowAction() {
-			super(Local.getString("Insert table row"));
-			this.putValue(
-				Action.ACCELERATOR_KEY,
-				KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK));
-		}
-		public void actionPerformed(ActionEvent e) {
-			String trTag = "<tr>";
-			Element tr =
-				document
-					.getParagraphElement(editor.getCaretPosition())
-					.getParentElement()
-					.getParentElement();
-			for (int i = 0; i < tr.getElementCount(); i++)
-				if (tr.getElement(i).getName().toUpperCase().equals("TD"))
-					trTag += "<td><p></p></td>";
-			trTag += "</tr>";
-
-			/*
-			 * HTMLEditorKit.InsertHTMLTextAction hta = new
-			 * HTMLEditorKit.InsertHTMLTextAction("insertTR",trTag,
-			 * HTML.Tag.TABLE, HTML.Tag.TR);
-			 */
-			try {
-				document.insertAfterEnd(tr, trTag);
-				//editorKit.insertHTML(document, editor.getCaretPosition(),
-				// trTag, 3, 0, HTML.Tag.TR);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		}
-
-		public boolean isEnabled() {
-			if (document == null)
-				return false;
-			return document
-				.getParagraphElement(editor.getCaretPosition())
-				.getParentElement()
-				.getName()
-				.toUpperCase()
-				.equals("TD");
-		}
-
-		public void update() {
-			this.setEnabled(isEnabled());
-		}
-	}
-
-	class InsertTableCellAction extends AbstractAction {
-		InsertTableCellAction() {
-			super(Local.getString("Insert table cell"));
-			this.putValue(
-				Action.ACCELERATOR_KEY,
-				KeyStroke.getKeyStroke(
-					KeyEvent.VK_ENTER,
-					KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
-		}
-		public void actionPerformed(ActionEvent e) {
-			String tdTag = "<td><p></p></td>";
-			Element td =
-				document
-					.getParagraphElement(editor.getCaretPosition())
-					.getParentElement();
-			try {
-				document.insertAfterEnd(td, tdTag);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		}
-
-		public boolean isEnabled() {
-			if (document == null)
-				return false;
-			return document
-				.getParagraphElement(editor.getCaretPosition())
-				.getParentElement()
-				.getName()
-				.toUpperCase()
-				.equals("TD");
-		}
-
-		public void update() {
-			this.setEnabled(isEnabled());
-		}
-	}
-
-	public void lAlignActionB_actionPerformed(ActionEvent e) {
-		HTMLEditorKit.AlignmentAction aa =
-			new HTMLEditorKit.AlignmentAction(
-				"leftAlign",
-				StyleConstants.ALIGN_LEFT);
-		aa.actionPerformed(e);
-	}
-
-	public void cAlignActionB_actionPerformed(ActionEvent e) {
-		HTMLEditorKit.AlignmentAction aa =
-			new HTMLEditorKit.AlignmentAction(
-				"centerAlign",
-				StyleConstants.ALIGN_CENTER);
-		aa.actionPerformed(e);
-	}
-
-	public void rAlignActionB_actionPerformed(ActionEvent e) {
-		HTMLEditorKit.AlignmentAction aa =
-			new HTMLEditorKit.AlignmentAction(
-				"rightAlign",
-				StyleConstants.ALIGN_RIGHT);
-		aa.actionPerformed(e);
-	}
-
-	public void jAlignActionB_actionPerformed(ActionEvent e) {
-		HTMLEditorKit.AlignmentAction aa =
-			new HTMLEditorKit.AlignmentAction(
-				"justifyAlign",
-				StyleConstants.ALIGN_JUSTIFIED);
-		aa.actionPerformed(e);
-	}
-
-	public void insertHTML(String html, int location) {
-		//assumes editor is already set to "text/html" type
-		try {
-			HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
-			Document doc = editor.getDocument();
-			StringReader reader = new StringReader(html);
-			kit.read(reader, doc, location);
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	public void imageActionB_actionPerformed(ActionEvent e) {
-		/*
-		 * JFileChooser chooser = new JFileChooser();
-		 * chooser.setFileHidingEnabled(false); chooser.setDialogTitle("Choose
-		 * image file"); chooser.setAcceptAllFileFilterUsed(false);
-		 * chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
-		 * chooser.addChoosableFileFilter(new
-		 * net.sf.memoranda.ui.htmleditor.filechooser.ImageFilter());
-		 * chooser.setAccessory(new
-		 * net.sf.memoranda.ui.htmleditor.filechooser.ImagePreview(chooser));
-		 *  
-		 */
-		ImageDialog dlg = new ImageDialog(null);
-		Dimension dlgSize = dlg.getPreferredSize();
-		Dimension frmSize = this.getSize();
-		Point loc = this.getLocationOnScreen();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-		//dlg.setLocation(imageActionB.getLocationOnScreen());
-		dlg.setModal(true);
-		dlg.setVisible(true);
-
-		if (!dlg.CANCELLED) {
-			String parentname =
-				document
-					.getParagraphElement(editor.getCaretPosition())
-					.getParentElement()
-					.getName();
-			//HTML.Tag parentTag = HTML.getTag(parentname);
-			String urlString = dlg.fileField.getText();
-			String path = urlString;
-			if (imagesDir != null) {
-				try {
-					URL url = new URL(urlString);
-					if (!url.getProtocol().startsWith("http"))
-						path = imagesDir + "/" + url.getFile();
-				} catch (MalformedURLException e1) {
-					System.out.println("The URL provided cannot be resolved.  Please reattempt.");
-				}
-			}
-			try {
-				String imgTag =
-					"<img src=\""
-						+ path
-						+ "\" alt=\""
-						+ dlg.altField.getText()
-						+ "\" ";
-				String w = dlg.widthField.getText();
-				try {
-					Integer.parseInt(w, 10);
-					imgTag += " width=\"" + w + "\" ";
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-				String h = dlg.heightField.getText();
-				try {
-					Integer.parseInt(h, 10);
-					imgTag += " height=\"" + h + "\" ";
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-				String hs = dlg.hspaceField.getText();
-				try {
-					Integer.parseInt(hs, 10);
-					imgTag += " hspace=\"" + hs + "\" ";
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-				String vs = dlg.vspaceField.getText();
-				try {
-					Integer.parseInt(vs, 10);
-					imgTag += " vspace=\"" + vs + "\" ";
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-				String b = dlg.borderField.getText();
-				try {
-					Integer.parseInt(b, 10);
-					imgTag += " border=\"" + b + "\" ";
-				} catch (Exception ex) {
-					ex.printStackTrace();
-				}
-				if (dlg.alignCB.getSelectedIndex() > 0)
-					imgTag += " align=\""
-						+ dlg.alignCB.getSelectedItem()
-						+ "\" ";
-				imgTag += ">";
-
-				if (dlg.urlField.getText().length() > 0) {
-					imgTag =
-						"<a href=\""
-							+ dlg.urlField.getText()
-							+ "\">"
-							+ imgTag
-							+ "</a>";
-					if (editor.getCaretPosition() == document.getLength())
-						imgTag += "&nbsp;";
-					editorKit.insertHTML(
-						document,
-						editor.getCaretPosition(),
-						imgTag,
-						0,
-						0,
-						HTML.Tag.A);
-				} else
-					editorKit.insertHTML(
-						document,
-						editor.getCaretPosition(),
-						imgTag,
-						0,
-						0,
-						HTML.Tag.IMG);
-
-				//System.out.println(imgTag);
-
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		}
-	}
-
-	public void tableActionB_actionPerformed(ActionEvent e) {
-		TableDialog dlg = new TableDialog(null);
-		//dlg.setLocation(tableActionB.getLocationOnScreen());
-		Dimension dlgSize = dlg.getPreferredSize();
-		Dimension frmSize = this.getSize();
-		Point loc = this.getLocationOnScreen();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-
-		dlg.setModal(true);
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		String tableTag = "<table ";
-		String w = dlg.widthField.getText().trim();
-		if (w.length() > 0)
-			tableTag += " width=\"" + w + "\" ";
-		String h = dlg.heightField.getText().trim();
-		if (h.length() > 0)
-			tableTag += " height=\"" + h + "\" ";
-		String cp = dlg.cellpadding.getValue().toString();
-		try {
-			Integer.parseInt(cp, 10);
-			tableTag += " cellpadding=\"" + cp + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		String cs = dlg.cellspacing.getValue().toString();
-		try {
-			Integer.parseInt(cs, 10);
-			tableTag += " cellspacing=\"" + cs + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		String b = dlg.border.getValue().toString();
-		try {
-			Integer.parseInt(b, 10);
-			tableTag += " border=\"" + b + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		if (dlg.alignCB.getSelectedIndex() > 0)
-			tableTag += " align=\"" + dlg.alignCB.getSelectedItem() + "\" ";
-		if (dlg.vAlignCB.getSelectedIndex() > 0)
-			tableTag += " valign=\"" + dlg.vAlignCB.getSelectedItem() + "\" ";
-		if (dlg.bgcolorField.getText().length() > 0)
-			tableTag += " bgcolor=\"" + dlg.bgcolorField.getText() + "\" ";
-		tableTag += ">";
-		int cols = 1;
-		int rows = 1;
-		try {
-			cols = ((Integer) dlg.columns.getValue()).intValue();
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		try {
-			rows = ((Integer) dlg.rows.getValue()).intValue();
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		for (int r = 0; r < rows; r++) {
-			tableTag += "<tr>";
-			for (int c = 0; c < cols; c++)
-				tableTag += "<td><p></p></td>";
-			tableTag += "</tr>";
-		}
-		tableTag += "</table>";
-		String parentname =
-			document
-				.getParagraphElement(editor.getCaretPosition())
-				.getParentElement()
-				.getName();
-		HTML.Tag parentTag = HTML.getTag(parentname);
-		System.out.println(parentTag + ":\n" + tableTag);
-		/*
-		 * HTMLEditorKit.InsertHTMLTextAction insertTableAction = new
-		 * HTMLEditorKit.InsertHTMLTextAction("insertTABLE",tableTag,
-		 * HTML.Tag.BODY, HTML.Tag.TABLE);
-		 *  
-		 */
-		//insertHTML(tableTag, editor.getCaretPosition());
-
-		try {
-			editorKit.insertHTML(
-				document,
-				editor.getCaretPosition(),
-				tableTag,
-				1,
-				0,
-				HTML.Tag.TABLE);
-			//removeIfEmpty(document.getParagraphElement(editor.getCaretPosition()-1));
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	public void linkActionB_actionPerformed(ActionEvent e) {
-		LinkDialog dlg = new LinkDialog(null);
-		//dlg.setLocation(linkActionB.getLocationOnScreen());
-		Dimension dlgSize = dlg.getPreferredSize();
-		Dimension frmSize = this.getSize();
-		Point loc = this.getLocationOnScreen();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-		dlg.setModal(true);
-		if (editor.getSelectedText() != null)
-			dlg.txtDesc.setText(editor.getSelectedText());
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		String aTag = "<a";
-		if (dlg.txtURL.getText().length() > 0)
-			aTag += " href=\"" + dlg.txtURL.getText() + "\"";
-		if (dlg.txtName.getText().length() > 0)
-			aTag += " name=\"" + dlg.txtName.getText() + "\"";
-		if (dlg.txtTitle.getText().length() > 0)
-			aTag += " title=\"" + dlg.txtTitle.getText() + "\"";
-		if (dlg.chkNewWin.isSelected())
-			aTag += " target=\"_blank\"";
-		aTag += ">" + dlg.txtDesc.getText() + "</a>";
-		if (editor.getCaretPosition() == document.getLength())
-			aTag += "&nbsp;";
-		editor.replaceSelection("");
-		try {
-			editorKit.insertHTML(
-				document,
-				editor.getCaretPosition(),
-				aTag,
-				0,
-				0,
-				HTML.Tag.A);
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	void setLinkProperties(
-		Element el,
-		String href,
-		String target,
-		String title,
-		String name) {
-		LinkDialog dlg = new LinkDialog(null);
-		dlg.setLocation(linkActionB.getLocationOnScreen());
-		dlg.setModal(true);
-		//dlg.descPanel.setVisible(false);
-		dlg.txtURL.setText(href);
-		dlg.txtName.setText(name);
-		dlg.txtTitle.setText(title);
-		try {
-			dlg.txtDesc.setText(
-				document.getText(
-					el.getStartOffset(),
-					el.getEndOffset() - el.getStartOffset()));
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		dlg.chkNewWin.setSelected(target.toUpperCase().equals("_BLANK"));
-		dlg.header.setText(Local.getString("Hyperlink properties"));
-		dlg.setTitle(Local.getString("Hyperlink properties"));
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		//String p = "";
-		/*
-		 * SimpleAttributeSet attrs = new
-		 * SimpleAttributeSet(el.getAttributes()); if
-		 * (dlg.urlField.getText().length() >0) {
-		 * attrs.addAttribute(HTML.Attribute.HREF, dlg.urlField.getText()); p +=
-		 * "href="+dlg.urlField.getText()+" "; } if
-		 * (dlg.nameField.getText().length() >0) {
-		 * attrs.addAttribute(HTML.Attribute.NAME, dlg.nameField.getText()); p +=
-		 * "name="+dlg.nameField.getText()+" "; } if
-		 * (dlg.titleField.getText().length() >0) {
-		 * attrs.addAttribute(HTML.Attribute.TITLE, dlg.titleField.getText());
-		 * p += "title="+dlg.titleField.getText()+" "; } if
-		 * (dlg.newWinChB.isSelected()) {
-		 * attrs.addAttribute(HTML.Attribute.TARGET, "_blank"); p +=
-		 * "target=_blank "; } attrs.addAttribute(StyleConstants.NameAttribute,
-		 * "a"); attrs.addAttribute(HTML.Tag.A, p);
-		 */
-		String aTag = "<a";
-		if (dlg.txtURL.getText().length() > 0)
-			aTag += " href=\"" + dlg.txtURL.getText() + "\"";
-		if (dlg.txtName.getText().length() > 0)
-			aTag += " name=\"" + dlg.txtName.getText() + "\"";
-		if (dlg.txtTitle.getText().length() > 0)
-			aTag += " title=\"" + dlg.txtTitle.getText() + "\"";
-		if (dlg.chkNewWin.isSelected())
-			aTag += " target=\"_blank\"";
-		aTag += ">" + dlg.txtDesc.getText() + "</a>";
-		try {
-			document.setOuterHTML(el, aTag);
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	void setImageProperties(
-		Element el,
-		String src,
-		String alt,
-		String width,
-		String height,
-		String hspace,
-		String vspace,
-		String border,
-		String align) {
-		ImageDialog dlg = new ImageDialog(null);
-		dlg.setLocation(imageActionB.getLocationOnScreen());
-		dlg.setModal(true);
-		dlg.setTitle(Local.getString("Image properties"));
-		dlg.fileField.setText(src);
-		dlg.altField.setText(alt);
-		dlg.widthField.setText(width);
-		dlg.heightField.setText(height);
-		dlg.hspaceField.setText(hspace);
-		dlg.vspaceField.setText(vspace);
-		dlg.borderField.setText(border);
-		dlg.alignCB.setSelectedItem(align);
-		dlg.updatePreview();
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		String imgTag =
-			"<img src=\""
-				+ dlg.fileField.getText()
-				+ "\" alt=\""
-				+ dlg.altField.getText()
-				+ "\" ";
-		String w = dlg.widthField.getText();
-		try {
-			Integer.parseInt(w, 10);
-			imgTag += " width=\"" + w + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		String h = dlg.heightField.getText();
-		try {
-			Integer.parseInt(h, 10);
-			imgTag += " height=\"" + h + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		String hs = dlg.hspaceField.getText();
-		try {
-			Integer.parseInt(hs, 10);
-			imgTag += " hspace=\"" + hs + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		String vs = dlg.vspaceField.getText();
-		try {
-			Integer.parseInt(vs, 10);
-			imgTag += " vspace=\"" + vs + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		String b = dlg.borderField.getText();
-		try {
-			Integer.parseInt(b, 10);
-			imgTag += " border=\"" + b + "\" ";
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		if (dlg.alignCB.getSelectedIndex() > 0)
-			imgTag += " align=\"" + dlg.alignCB.getSelectedItem() + "\" ";
-		imgTag += ">";
-		if (dlg.urlField.getText().length() > 0) {
-			imgTag =
-				"<a href=\"" + dlg.urlField.getText() + "\">" + imgTag + "</a>";
-			if (editor.getCaretPosition() == document.getLength())
-				imgTag += "&nbsp;";
-		}
-		try {
-			document.setOuterHTML(el, imgTag);
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	void setElementProperties(Element el, String id, String cls, String sty) {
-		ElementDialog dlg = new ElementDialog(null);
-		//dlg.setLocation(linkActionB.getLocationOnScreen());
-		Dimension dlgSize = dlg.getPreferredSize();
-		Dimension frmSize = this.getSize();
-		Point loc = this.getLocationOnScreen();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-		dlg.setModal(true);
-		dlg.setTitle(Local.getString("Object properties"));
-		dlg.idField.setText(id);
-		dlg.classField.setText(cls);
-		dlg.styleField.setText(sty);
-		// Uncommented, returns a simple p into the header... fix needed ?
-		//dlg.header.setText(el.getName());
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		SimpleAttributeSet attrs = new SimpleAttributeSet(el.getAttributes());
-		if (dlg.idField.getText().length() > 0)
-			attrs.addAttribute(HTML.Attribute.ID, dlg.idField.getText());
-		if (dlg.classField.getText().length() > 0)
-			attrs.addAttribute(HTML.Attribute.CLASS, dlg.classField.getText());
-		if (dlg.styleField.getText().length() > 0)
-			attrs.addAttribute(HTML.Attribute.STYLE, dlg.styleField.getText());
-		document.setParagraphAttributes(el.getStartOffset(), 0, attrs, true);
-	}
-
-	void setTableProperties(Element td) {
-		Element tr = td.getParentElement();
-		Element table = tr.getParentElement();
-
-		TdDialog dlg = new TdDialog(null);
-		dlg.setLocation(editor.getLocationOnScreen());
-		dlg.setModal(true);
-		dlg.setTitle(Local.getString("Table properties"));
-
-		/** **********PARSE ELEMENTS*********** */
-		// TD***
-		AttributeSet tda = td.getAttributes();
-		if (tda.isDefined(HTML.Attribute.BGCOLOR)) {
-			dlg.tdBgcolorField.setText(
-				tda.getAttribute(HTML.Attribute.BGCOLOR).toString());
-			Util.setBgcolorField(dlg.tdBgcolorField);
-		}
-		if (tda.isDefined(HTML.Attribute.WIDTH))
-			dlg.tdWidthField.setText(
-				tda.getAttribute(HTML.Attribute.WIDTH).toString());
-		if (tda.isDefined(HTML.Attribute.HEIGHT))
-			dlg.tdHeightField.setText(
-				tda.getAttribute(HTML.Attribute.HEIGHT).toString());
-		if (tda.isDefined(HTML.Attribute.COLSPAN))
-			try {
-				Integer i =
-					new Integer(
-						tda.getAttribute(HTML.Attribute.COLSPAN).toString());
-				dlg.tdColspan.setValue(i);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		if (tda.isDefined(HTML.Attribute.ROWSPAN))
-			try {
-				Integer i =
-					new Integer(
-						tda.getAttribute(HTML.Attribute.ROWSPAN).toString());
-				dlg.tdRowspan.setValue(i);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		if (tda.isDefined(HTML.Attribute.ALIGN))
-			dlg.tdAlignCB.setSelectedItem(
-				tda
-					.getAttribute(HTML.Attribute.ALIGN)
-					.toString()
-					.toLowerCase());
-		if (tda.isDefined(HTML.Attribute.VALIGN))
-			dlg.tdValignCB.setSelectedItem(
-				tda
-					.getAttribute(HTML.Attribute.VALIGN)
-					.toString()
-					.toLowerCase());
-		dlg.tdNowrapChB.setSelected((tda.isDefined(HTML.Attribute.NOWRAP)));
-
-		//TR ****
-		AttributeSet tra = tr.getAttributes();
-		if (tra.isDefined(HTML.Attribute.BGCOLOR)) {
-			dlg.trBgcolorField.setText(
-				tra.getAttribute(HTML.Attribute.BGCOLOR).toString());
-			Util.setBgcolorField(dlg.trBgcolorField);
-		}
-		if (tra.isDefined(HTML.Attribute.ALIGN))
-			dlg.trAlignCB.setSelectedItem(
-				tra
-					.getAttribute(HTML.Attribute.ALIGN)
-					.toString()
-					.toLowerCase());
-		if (tra.isDefined(HTML.Attribute.VALIGN))
-			dlg.trValignCB.setSelectedItem(
-				tra
-					.getAttribute(HTML.Attribute.VALIGN)
-					.toString()
-					.toLowerCase());
-
-		//TABLE ****
-		AttributeSet ta = table.getAttributes();
-		if (ta.isDefined(HTML.Attribute.BGCOLOR)) {
-			dlg.bgcolorField.setText(
-				ta.getAttribute(HTML.Attribute.BGCOLOR).toString());
-			Util.setBgcolorField(dlg.bgcolorField);
-		}
-		if (ta.isDefined(HTML.Attribute.WIDTH))
-			dlg.widthField.setText(
-				ta.getAttribute(HTML.Attribute.WIDTH).toString());
-		if (ta.isDefined(HTML.Attribute.HEIGHT))
-			dlg.heightField.setText(
-				ta.getAttribute(HTML.Attribute.HEIGHT).toString());
-		if (ta.isDefined(HTML.Attribute.ALIGN))
-			dlg.alignCB.setSelectedItem(
-				ta.getAttribute(HTML.Attribute.ALIGN).toString().toLowerCase());
-		if (ta.isDefined(HTML.Attribute.VALIGN))
-			dlg.vAlignCB.setSelectedItem(
-				ta
-					.getAttribute(HTML.Attribute.VALIGN)
-					.toString()
-					.toLowerCase());
-		if (ta.isDefined(HTML.Attribute.CELLPADDING))
-			try {
-				Integer i =
-					new Integer(
-						ta.getAttribute(HTML.Attribute.CELLPADDING).toString());
-				dlg.cellpadding.setValue(i);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		if (ta.isDefined(HTML.Attribute.CELLSPACING))
-			try {
-				Integer i =
-					new Integer(
-						ta.getAttribute(HTML.Attribute.CELLSPACING).toString());
-				dlg.cellspacing.setValue(i);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		if (ta.isDefined(HTML.Attribute.BORDER))
-			try {
-				Integer i =
-					new Integer(
-						ta.getAttribute(HTML.Attribute.BORDER).toString());
-				dlg.border.setValue(i);
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-
-		/** ****************************** */
-
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-
-		/** ******** SET ATTRIBUTES ********* */
-		// TD***
-		String tdTag = "<td";
-		if (dlg.tdBgcolorField.getText().length() > 0)
-			tdTag += " bgcolor=\"" + dlg.tdBgcolorField.getText() + "\"";
-
-		if (dlg.tdWidthField.getText().length() > 0)
-			tdTag += " width=\"" + dlg.tdWidthField.getText() + "\"";
-
-		if (dlg.tdHeightField.getText().length() > 0)
-			tdTag += " height=\"" + dlg.tdHeightField.getText() + "\"";
-
-		if (!dlg.tdColspan.getValue().toString().equals("0"))
-			tdTag += " colspan=\"" + dlg.tdColspan.getValue().toString() + "\"";
-
-		if (!dlg.tdRowspan.getValue().toString().equals("0"))
-			tdTag += " rowspan=\"" + dlg.tdRowspan.getValue().toString() + "\"";
-
-		if (dlg.tdAlignCB.getSelectedItem().toString().length() > 0)
-			tdTag += " align=\""
-				+ dlg.tdAlignCB.getSelectedItem().toString()
-				+ "\"";
-
-		if (dlg.tdValignCB.getSelectedItem().toString().length() > 0)
-			tdTag += " valign=\""
-				+ dlg.tdValignCB.getSelectedItem().toString()
-				+ "\"";
-
-		if (dlg.tdNowrapChB.isSelected())
-			tdTag += " nowrap";
-
-		tdTag += ">";
-
-		//TR***
-		String trTag = "<tr";
-		if (dlg.trBgcolorField.getText().length() > 0)
-			trTag += " bgcolor=\"" + dlg.trBgcolorField.getText() + "\"";
-
-		if (dlg.trAlignCB.getSelectedItem().toString().length() > 0)
-			trTag += " align=\""
-				+ dlg.trAlignCB.getSelectedItem().toString()
-				+ "\"";
-
-		if (dlg.trValignCB.getSelectedItem().toString().length() > 0)
-			trTag += " valign=\""
-				+ dlg.trValignCB.getSelectedItem().toString()
-				+ "\"";
-
-		trTag += ">";
-
-		//TABLE ***
-		String tTag = "<table";
-		if (dlg.bgcolorField.getText().length() > 0)
-			tTag += " bgcolor=\"" + dlg.bgcolorField.getText() + "\"";
-
-		if (dlg.widthField.getText().length() > 0)
-			tTag += " width=\"" + dlg.widthField.getText() + "\"";
-
-		if (dlg.heightField.getText().length() > 0)
-			tTag += " height=\"" + dlg.heightField.getText() + "\"";
-
-		tTag += " cellpadding=\""
-			+ dlg.cellpadding.getValue().toString()
-			+ "\"";
-
-		tTag += " cellspacing=\""
-			+ dlg.cellspacing.getValue().toString()
-			+ "\"";
-
-		tTag += " border=\"" + dlg.border.getValue().toString() + "\"";
-
-		if (dlg.alignCB.getSelectedItem().toString().length() > 0)
-			tTag += " align=\""
-				+ dlg.alignCB.getSelectedItem().toString()
-				+ "\"";
-
-		if (dlg.vAlignCB.getSelectedItem().toString().length() > 0)
-			tTag += " valign=\""
-				+ dlg.vAlignCB.getSelectedItem().toString()
-				+ "\"";
-
-		tTag += ">";
-
-		/** ****************************** */
-
-		/** ** UPDATE TABLE ***** */
-		try {
-			StringWriter sw = new StringWriter();
-			String copy;
-
-			editorKit.write(
-				sw,
-				document,
-				td.getStartOffset(),
-				td.getEndOffset() - td.getStartOffset());
-			copy = sw.toString();
-			copy = copy.split("<td(.*?)>")[1];
-			copy = copy.split("</td>")[0];
-			//System.out.println(tdTag+copy+"</td>");
-			document.setOuterHTML(td, tdTag + copy + "</td>");
-
-			//System.out.println("*******");
-
-			sw = new StringWriter();
-			editorKit.write(
-				sw,
-				document,
-				tr.getStartOffset(),
-				tr.getEndOffset() - tr.getStartOffset());
-			copy = sw.toString();
-			copy = copy.split("<tr(.*?)>")[1];
-			copy = copy.split("</tr>")[0];
-			//System.out.println(trTag+copy+"</tr>");
-			document.setOuterHTML(tr, trTag + copy + "</tr>");
-
-			//System.out.println("*******");
-
-			sw = new StringWriter();
-			editorKit.write(
-				sw,
-				document,
-				table.getStartOffset(),
-				table.getEndOffset() - table.getStartOffset());
-			copy = sw.toString();
-			copy = copy.split("<table(.*?)>")[1];
-			copy = copy.split("</table>")[0];
-			//System.out.println(tTag+copy+"</table>");
-			document.setOuterHTML(table, tTag + copy + "</table>");
-
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	void blockCB_actionPerformed(ActionEvent e) {
-		if (blockCBEventsLock)
-			return;
-		int sel = blockCB.getSelectedIndex();
-		/*
-		 * HTML.Tag parentTag =
-		 * HTML.getTag(document.getParagraphElement(editor.getCaretPosition()).getParentElement().getName());
-		 * HTML.Tag tag = null; String tagText = ""; switch (sel) { case T_P:
-		 * tag = HTML.Tag.P; tagText=" <p></p> ";break; //case T_PRE: tag =
-		 * HTML.Tag.PRE; tagText=" <pre></pre> ";break; case T_H1: tag =
-		 * HTML.Tag.H1; tagText=" <h1></h1> ";break; case T_H2: tag =
-		 * HTML.Tag.H2; tagText=" <h2></h2> ";break; case T_H3: tag =
-		 * HTML.Tag.H3; tagText=" <h3></h3> ";break; case T_H4: tag =
-		 * HTML.Tag.H4; tagText=" <h4></h4> ";break; case T_H5: tag =
-		 * HTML.Tag.H5; tagText=" <h5></h5> ";break; case T_H6: tag =
-		 * HTML.Tag.H6; tagText=" <h6></h6> ";break; }
-		 * 
-		 * HTMLEditorKit.InsertHTMLTextAction iAction = new
-		 * HTMLEditorKit.InsertHTMLTextAction("insertTag",tagText, parentTag,
-		 * tag); iAction.actionPerformed(e);
-		 * System.out.println(tag.toString()+" -> "+parentTag.toString());
-		 */
-
-		HTML.Tag tag = null;
-
-		switch (sel) {
-			case T_P :
-				tag = HTML.Tag.P;
-				break;
-			case T_H1 :
-				tag = HTML.Tag.H1;
-				break;
-			case T_H2 :
-				tag = HTML.Tag.H2;
-				break;
-			case T_H3 :
-				tag = HTML.Tag.H3;
-				break;
-			case T_H4 :
-				tag = HTML.Tag.H4;
-				break;
-			case T_H5 :
-				tag = HTML.Tag.H5;
-				break;
-			case T_H6 :
-				tag = HTML.Tag.H6;
-				break;
-			case T_PRE :
-				tag = HTML.Tag.PRE;
-				break;
-				/*
-				 * case T_ADDRESS : tag = HTML.Tag.ADDRESS;
-				 */
-			case T_BLOCKQ :
-				tag = HTML.Tag.BLOCKQUOTE;
-				break;
-		}
-
-		Element el = document.getParagraphElement(editor.getCaretPosition());
-		if (el.getName().toUpperCase().equals("P-IMPLIED")) {
-			Element pEl = el.getParentElement();
-			String pElName = pEl.getName();
-			String newName = tag.toString();
-			StringWriter sw = new StringWriter();
-			String copy;
-			try {
-				editorKit.write(
-					sw,
-					document,
-					el.getStartOffset(),
-					el.getEndOffset() - el.getStartOffset());
-				copy = sw.toString();
-				copy = copy.split("<" + pElName + "(.*?)>")[1];
-				copy = copy.split("</" + pElName + ">")[0];
-				document.setOuterHTML(
-					pEl,
-					"<" + newName + ">" + copy + "</" + newName + ">");
-				return;
-			} catch (Exception ex) {
-				ex.printStackTrace();
-			}
-		}
-		SimpleAttributeSet attrs = new SimpleAttributeSet(el.getAttributes());
-		//attrs.removeAttribute(StyleConstants.NameAttribute);
-		attrs.addAttribute(StyleConstants.NameAttribute, tag);
-		if (editor.getSelectionEnd() - editor.getSelectionStart() > 0)
-			document.setParagraphAttributes(
-				editor.getSelectionStart(),
-				editor.getSelectionEnd() - editor.getSelectionStart(),
-				attrs,
-				true);
-		else
-			document.setParagraphAttributes(
-				editor.getCaretPosition(),
-				0,
-				attrs,
-				true);
-
-	}
-
-	public void propsActionB_actionPerformed(ActionEvent e) {
-
-		/*
-		 * Element p = document.getParagraphElement(editor.getCaretPosition());
-		 * do { System.out.print(p.getName()+" / "); p = p.getParentElement();}
-		 */
-
-		AbstractDocument.BranchElement pEl =
-			(AbstractDocument.BranchElement) document.getParagraphElement(
-				editor.getCaretPosition());
-		System.out.println("--------------");
-		System.out.println(
-			pEl.getName() + "<-" + pEl.getParentElement().getName());
-		Element el = pEl.positionToElement(editor.getCaretPosition());
-		System.out.println(
-			":"
-				+ el.getAttributes().getAttribute(StyleConstants.NameAttribute));
-		AttributeSet attrs = el.getAttributes();
-		/*
-		 * Enumeration en = attrs.getAttributeNames(); Object k =
-		 * en.nextElement(); while (en.hasMoreElements()) {
-		 * System.out.println(k+" = '"+attrs.getAttribute(k)+"'"); k =
-		 * en.nextElement();
-		 */
-		String elName =
-			attrs
-				.getAttribute(StyleConstants.NameAttribute)
-				.toString()
-				.toUpperCase();
-		if (elName.equals("IMG")) {
-			String src = "",
-				alt = "",
-				width = "",
-				height = "",
-				hspace = "",
-				vspace = "",
-				border = "",
-				align = "";
-			if (attrs.isDefined(HTML.Attribute.SRC))
-				src = attrs.getAttribute(HTML.Attribute.SRC).toString();
-			if (attrs.isDefined(HTML.Attribute.ALT))
-				alt = attrs.getAttribute(HTML.Attribute.ALT).toString();
-			if (attrs.isDefined(HTML.Attribute.WIDTH))
-				width = attrs.getAttribute(HTML.Attribute.WIDTH).toString();
-			if (attrs.isDefined(HTML.Attribute.HEIGHT))
-				height = attrs.getAttribute(HTML.Attribute.HEIGHT).toString();
-			if (attrs.isDefined(HTML.Attribute.HSPACE))
-				hspace = attrs.getAttribute(HTML.Attribute.HSPACE).toString();
-			if (attrs.isDefined(HTML.Attribute.VSPACE))
-				vspace = attrs.getAttribute(HTML.Attribute.VSPACE).toString();
-			if (attrs.isDefined(HTML.Attribute.BORDER))
-				border = attrs.getAttribute(HTML.Attribute.BORDER).toString();
-			if (attrs.isDefined(HTML.Attribute.ALIGN))
-				align = attrs.getAttribute(HTML.Attribute.ALIGN).toString();
-			setImageProperties(
-				el,
-				src,
-				alt,
-				width,
-				height,
-				hspace,
-				vspace,
-				border,
-				align);
-			return;
-		}
-
-		Object k = null;
-		for (Enumeration en = attrs.getAttributeNames();
-			en.hasMoreElements();
-			) {
-			k = en.nextElement();
-			if (k.toString().equals("a")) {
-				String[] param = attrs.getAttribute(k).toString().split(" ");
-				String href = "", target = "", title = "", name = "";
-				for (int i = 0; i < param.length; i++)
-					if (param[i].startsWith("href="))
-						href = param[i].split("=")[1];
-					else if (param[i].startsWith("title="))
-						title = param[i].split("=")[1];
-					else if (param[i].startsWith("target="))
-						target = param[i].split("=")[1];
-					else if (param[i].startsWith("name="))
-						name = param[i].split("=")[1];
-				setLinkProperties(el, href, target, title, name);
-				return;
-			}
-			System.out.println(k + " = '" + attrs.getAttribute(k) + "'");
-		}
-
-		if (pEl.getParentElement().getName().toUpperCase().equals("TD")) {
-			setTableProperties(pEl.getParentElement());
-			return;
-		}
-
-		String id = "", cls = "", sty = "";
-		AttributeSet pa = pEl.getAttributes();
-		if (pa.getAttribute(HTML.Attribute.ID) != null)
-			id = pa.getAttribute(HTML.Attribute.ID).toString();
-		if (pa.getAttribute(HTML.Attribute.CLASS) != null)
-			cls = pa.getAttribute(HTML.Attribute.CLASS).toString();
-		if (pa.getAttribute(HTML.Attribute.STYLE) != null)
-			sty = pa.getAttribute(HTML.Attribute.STYLE).toString();
-		setElementProperties(pEl, id, cls, sty);
-
-	}
-
-	/*
-	 * void dotestCharElement(ActionEvent e) { String text = "&nbsp;"; if
-	 * (editor.getSelectedText() != null) text = editor.getSelectedText();
-	 * String tag = " <code> " + text + " </code> "; if
-	 * (editor.getCaretPosition() == document.getLength()) tag += "&nbsp;";
-	 * editor.replaceSelection(""); try { editorKit.insertHTML(document,
-	 * editor.getCaretPosition(), tag, 0, 0, HTML.Tag.CODE); } catch (Exception
-	 * ex) { ex.printStackTrace(); } }
-	 * 
-	 * void dotestClearStyle(ActionEvent e) { Element el =
-	 * document.getCharacterElement(editor.getCaretPosition());
-	 * SimpleAttributeSet attrs = new SimpleAttributeSet();
-	 * attrs.addAttribute(StyleConstants.NameAttribute, HTML.Tag.CONTENT);
-	 * document.setCharacterAttributes(el.getStartOffset(), el.getEndOffset() -
-	 * el.getStartOffset(), attrs, true); }
-	 */
-
-	String setFontProperties(Element el, String text) {
-		FontDialog dlg = new FontDialog(null);
-		//dlg.setLocation(editor.getLocationOnScreen());
-		Dimension dlgSize = dlg.getSize();
-		Dimension frmSize = this.getSize();
-		Point loc = this.getLocationOnScreen();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-		dlg.setModal(true);
-		AttributeSet ea = el.getAttributes();
-		/*
-		 * if (ea.isDefined(HTML.Tag.FONT)) { String[] param =
-		 * ea.getAttribute(HTML.Tag.FONT).toString().split(" "); for (int i = 0;
-		 * i < param.length; i++) if (param[i].startsWith("face="))
-		 * dlg.fontFamilyCB.setSelectedItem(param[i].split("=")[1]); else if
-		 * (param[i].startsWith("size="))
-		 * dlg.fontSizeCB.setSelectedItem(param[i].split("=")[1]); else if
-		 * (param[i].startsWith("color=")) {
-		 * dlg.colorField.setText(param[i].split("=")[1]);
-		 * Util.setColorField(dlg.colorField); }
-		 */
-		if (ea.isDefined(StyleConstants.FontFamily))
-			dlg.fontFamilyCB.setSelectedItem(
-				ea.getAttribute(StyleConstants.FontFamily).toString());
-		if (ea.isDefined(HTML.Tag.FONT)) {
-			String s = ea.getAttribute(HTML.Tag.FONT).toString();
-			String size =
-				s.substring(s.indexOf("size=") + 5, s.indexOf("size=") + 6);
-			dlg.fontSizeCB.setSelectedItem(size);
-		}
-		if (ea.isDefined(StyleConstants.Foreground)) {
-			dlg.colorField.setText(
-				Util.encodeColor(
-					(Color) ea.getAttribute(StyleConstants.Foreground)));
-			Util.setColorField(dlg.colorField);
-			dlg.sample.setForeground(
-				(Color) ea.getAttribute(StyleConstants.Foreground));
-		}
-		if (text != null)
-			dlg.sample.setText(text);
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return null;
-		String attrs = "";
-		if (dlg.fontSizeCB.getSelectedIndex() > 0)
-			attrs += "size=\"" + dlg.fontSizeCB.getSelectedItem() + "\"";
-		if (dlg.fontFamilyCB.getSelectedIndex() > 0)
-			attrs += "face=\"" + dlg.fontFamilyCB.getSelectedItem() + "\"";
-		if (dlg.colorField.getText().length() > 0)
-			attrs += "color=\"" + dlg.colorField.getText() + "\"";
-		if (attrs.length() > 0)
-			return " " + attrs;
-		else
-			return null;
-	}
-
-	void inlineCB_actionPerformed(ActionEvent e) {
-		if (inlineCBEventsLock)
-			return;
-		int sel = inlineCB.getSelectedIndex();
-		if (sel == I_NORMAL) {
-			Element el =
-				document.getCharacterElement(editor.getCaretPosition());
-			SimpleAttributeSet attrs = new SimpleAttributeSet();
-			attrs.addAttribute(StyleConstants.NameAttribute, HTML.Tag.CONTENT);
-			if (editor.getSelectionEnd() > editor.getSelectionStart())
-				document.setCharacterAttributes(
-					editor.getSelectionStart(),
-					editor.getSelectionEnd() - editor.getSelectionStart(),
-					attrs,
-					true);
-			else
-				document.setCharacterAttributes(
-					el.getStartOffset(),
-					el.getEndOffset() - el.getStartOffset(),
-					attrs,
-					true);
-			return;
-		}
-		String text = "&nbsp;";
-		if (editor.getSelectedText() != null)
-			text = editor.getSelectedText();
-		String tag = "";
-		String att = "";
-		switch (sel) {
-			case I_EM :
-				tag = "em";
-				break;
-			case I_STRONG :
-				tag = "strong";
-				break;
-			case I_CODE :
-				tag = "code";
-				break;
-			case I_SUPERSCRIPT :
-				tag = "sup";
-				break;
-			case I_SUBSCRIPT :
-				tag = "sub";
-				break;
-			case I_CITE :
-				tag = "cite";
-				break;
-			case I_CUSTOM :
-				tag = "font";
-				att =
-					setFontProperties(
-						document.getCharacterElement(editor.getCaretPosition()),
-						editor.getSelectedText());
-				if (att == null)
-					return;
-				break;
-		}
-		String html = "<" + tag + att + ">" + text + "</" + tag + ">";
-		if (editor.getCaretPosition() == document.getLength())
-			html += "&nbsp;";
-		editor.replaceSelection("");
-		try {
-			editorKit.insertHTML(
-				document,
-				editor.getCaretPosition(),
-				html,
-				0,
-				0,
-				HTML.getTag(tag));
-			if (editor.getCaretPosition() == document.getLength())
-				editor.setCaretPosition(editor.getCaretPosition() - 1);
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
-
-	void doZoom(boolean in) {
-		/**
-		 * @todo: ZOOM
-		 */
-
-		/*
-		 * if (in && (currentFontSize < 7)) currentFontSize++; else if (!in &&
-		 * (currentFontSize > 1)) currentFontSize--; else return;
-		 * editorKit.getStyleSheet().setBaseFontSize(currentFontSize);
-		 *  
-		 */
-
-	}
-
-	public void setDocument(Document doc) {
-		this.document = (HTMLDocument) doc;
-		initEditor();
-	}
-
-	public void initEditor() {
-		editor.setDocument(document);
-		//undo = new UndoManager();
-		resetUndoManager();
-		document.addUndoableEditListener(undoHandler);
-		editor.scrollRectToVisible(new Rectangle(0,0,0,0));
-		editor.setCaretPosition(0);
-	}
-
-	public boolean isDocumentChanged() {
-		return undo.canUndo();
-	}
-
-	public void setStyleSheet(Reader r) {
-		StyleSheet css = new StyleSheet();
-		try {
-			css.loadRules(r, null);
-			/*
-			 * new InputStreamReader(
-			 * net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResourceAsStream("resources/css/default.css")),
-			 */
-
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-		editorKit.setStyleSheet(css);
-	}
-	
-	public void reload() {	
-		
-	}
-
-	void doFind() {
-		FindDialog dlg = new FindDialog();
-		//dlg.setLocation(linkActionB.getLocationOnScreen());
-		Dimension dlgSize = dlg.getSize();
-		//dlg.setSize(400, 300);
-		Dimension frmSize = this.getSize();
-		Point loc = this.getLocationOnScreen();
-		dlg.setLocation(
-			(frmSize.width - dlgSize.width) / 2 + loc.x,
-			(frmSize.height - dlgSize.height) / 2 + loc.y);
-		dlg.setModal(true);
-		if (editor.getSelectedText() != null)
-			dlg.txtSearch.setText(editor.getSelectedText());
-		else if (Context.get("LAST_SEARCHED_WORD") != null)
-			dlg.txtSearch.setText(Context.get("LAST_SEARCHED_WORD").toString());
-		dlg.setVisible(true);
-		if (dlg.CANCELLED)
-			return;
-		Context.put("LAST_SEARCHED_WORD", dlg.txtSearch.getText());
-		String repl = null;
-		if (dlg.chkReplace.isSelected())
-			repl = dlg.txtReplace.getText();
-		Finder finder =
-			new Finder(
-				this,
-				dlg.txtSearch.getText(),
-				dlg.chkWholeWord.isSelected(),
-				dlg.chkCaseSens.isSelected(),
-				dlg.chkRegExp.isSelected(),
-				repl);
-		finder.start();
-
-	}
+    boolean bold = false;
+    boolean italic = false;
+    boolean under = false;
+    boolean list = false;
+
+    String currentTagName = "BODY";
+    Element currentParaElement = null;
+
+    Border border1, border2;
+
+    Class cl = net.sf.memoranda.ui.htmleditor.HTMLEditor.class;
+
+    String imagesDir = null;
+    String imagesPath = null;
+
+    public void setImagesDir(String path) {
+        imagesDir = path;
+    }
+
+    public String getImagesDir() {
+        return imagesDir;
+    }
+
+    abstract class HTMLEditorAction extends AbstractAction {
+        HTMLEditorAction(String name, ImageIcon icon) {
+            super(name, icon);
+            super.putValue(Action.SHORT_DESCRIPTION, name);
+        }
+
+        HTMLEditorAction(String name) {
+            super(name);
+            super.putValue(Action.SHORT_DESCRIPTION, name);
+        }
+    }
+
+    public Action boldAction = new HTMLEditorAction(
+            Local.getString("Bold"),
+            new ImageIcon(cl.getResource("resources/icons/bold.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            boldActionB_actionPerformed(e);
+        }
+    };
+
+    public Action italicAction = new HTMLEditorAction(
+            Local.getString("Italic"),
+            new ImageIcon(cl.getResource("resources/icons/italic.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            italicActionB_actionPerformed(e);
+        }
+    };
+
+    public Action underAction = new HTMLEditorAction(
+            Local.getString("Underline"),
+            new ImageIcon(cl.getResource("resources/icons/underline.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            underActionB_actionPerformed(e);
+        }
+    };
+
+    public Action ulAction = new HTMLEditorAction(
+            Local.getString("Unordered list"),
+            new ImageIcon(
+                    cl.getResource("resources/icons/listunordered.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            ulActionB_actionPerformed(e);
+        }
+    };
+
+    public Action olAction = new HTMLEditorAction(
+            Local.getString("Ordered list"),
+            new ImageIcon(cl.getResource("resources/icons/listordered.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            olActionB_actionPerformed(e);
+        }
+    };
+
+    public Action lAlignAction = new HTMLEditorAction(
+            Local.getString("Align left"),
+            new ImageIcon(cl.getResource("resources/icons/alignleft.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            lAlignActionB_actionPerformed(e);
+        }
+    };
+
+    public Action cAlignAction = new HTMLEditorAction(
+            Local.getString("Align center"),
+            new ImageIcon(cl.getResource("resources/icons/aligncenter.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            cAlignActionB_actionPerformed(e);
+        }
+    };
+
+    public Action rAlignAction = new HTMLEditorAction(
+            Local.getString("Align right"),
+            new ImageIcon(cl.getResource("resources/icons/alignright.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            rAlignActionB_actionPerformed(e);
+        }
+    };
+
+    /*
+     * public Action jAlignAction = new AbstractAction() { public void
+     * actionPerformed(ActionEvent e) { jAlignActionB_actionPerformed(e); }
+     */
+    public Action imageAction = new HTMLEditorAction(
+            Local.getString("Insert image"),
+            new ImageIcon(cl.getResource("resources/icons/image.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            imageActionB_actionPerformed(e);
+        }
+    };
+
+    public Action tableAction = new HTMLEditorAction(
+            Local.getString("Insert table"),
+            new ImageIcon(cl.getResource("resources/icons/table.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            tableActionB_actionPerformed(e);
+        }
+    };
+
+    public Action linkAction = new HTMLEditorAction(
+            Local.getString("Insert hyperlink"),
+            new ImageIcon(cl.getResource("resources/icons/link.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            linkActionB_actionPerformed(e);
+        }
+    };
+
+    public Action propsAction = new HTMLEditorAction(
+            Local.getString("Object properties"),
+            new ImageIcon(cl.getResource("resources/icons/properties.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            propsActionB_actionPerformed(e);
+        }
+    };
+
+    public Action selectAllAction = new HTMLEditorAction(Local.getString("Select all")) {
+        public void actionPerformed(ActionEvent e) {
+            editor.selectAll();
+        }
+    };
+
+    public Action insertHRAction = new HTMLEditorAction(
+            Local.getString("Insert horizontal rule"),
+            new ImageIcon(cl.getResource("resources/icons/hr.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            /*
+             * String elName =
+             * document.getParagraphElement(editor.getCaretPosition()).getName();
+             * HTML.Tag tag = HTML.getTag(elName); if
+             * (elName.toUpperCase().equals("P-IMPLIED")) tag =
+             * HTML.Tag.IMPLIED; HTMLEditorKit.InsertHTMLTextAction hta = new
+             * HTMLEditorKit.InsertHTMLTextAction("insertHR", " <hr> ", tag,
+             * HTML.Tag.HR);
+             */
+            try {
+                editorKit.insertHTML(
+                        document,
+                        editor.getCaretPosition(),
+                        "<hr>",
+                        0,
+                        0,
+                        HTML.Tag.HR);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+
+        }
+    };
+
+    CharTablePanel charTablePanel = new CharTablePanel(editor);
+
+    boolean charTableShow = false;
+
+    public JTabbedPane toolsPanel = new JTabbedPane();
+    public boolean toolsPanelShow = false;
+
+    public void showToolsPanel() {
+        if (toolsPanelShow) {
+            return;
+        }
+        this.add(toolsPanel, BorderLayout.SOUTH);
+        toolsPanelShow = true;
+    }
+
+    public void hideToolsPanel() {
+        if (!toolsPanelShow) {
+            return;
+        }
+        this.remove(charTablePanel);
+        toolsPanelShow = false;
+    }
+
+    void addCharTablePanel() {
+        showToolsPanel();
+        toolsPanel.addTab(Local.getString("Characters"), charTablePanel);
+    }
+
+    void removeCharTablePanel() {
+        toolsPanel.remove(charTablePanel);
+        if (toolsPanel.getTabCount() == 0) {
+            hideToolsPanel();
+        }
+    }
+
+    public Action insCharAction = new HTMLEditorAction(
+            Local.getString("Insert character"),
+            new ImageIcon(cl.getResource("resources/icons/char.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            if (!charTableShow) {
+                addCharTablePanel();
+                charTableShow = true;
+                insCharActionB.setBorder(border2);
+            } else {
+                removeCharTablePanel();
+                charTableShow = false;
+                insCharActionB.setBorder(border1);
+            }
+            insCharActionB.setBorderPainted(charTableShow);
+        }
+    };
+
+    public Action findAction = new HTMLEditorAction(
+            Local.getString("Find & Replace"),
+            new ImageIcon(cl.getResource("resources/icons/find.png"))) {
+        public void actionPerformed(ActionEvent e) {
+            doFind();
+        }
+    };
+
+    public InsertTableCellAction insertTableCellAction =
+            new InsertTableCellAction();
+    public InsertTableRowAction insertTableRowAction =
+            new InsertTableRowAction();
+    public BreakAction breakAction = new BreakAction();
+
+    public Action cutAction = new HTMLEditorKit.CutAction();
+    /*
+     * new AbstractAction() { public void actionPerformed(ActionEvent e) { if
+     * (editor.getSelectedText() == null) return; doCopy();
+     * editor.replaceSelection(""); }
+     *  
+     */
+
+    public Action styleCopyAction = new HTMLEditorKit.CopyAction();
+    //new DefaultEditorKit.CopyAction();
+
+    public Action copyAction = styleCopyAction;
+    /*
+     * new AbstractAction() { public void actionPerformed(ActionEvent e) { if
+     * (editor.getSelectedText() == null) return; doCopy(); }
+     */
+
+    public Action stylePasteAction = new HTMLEditorKit.PasteAction();
+
+    public Action pasteAction = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+            //editor.paste();
+            doPaste();
+        }
+    };
+
+    private void doCopy() {
+        /*
+         * java.awt.datatransfer.Clipboard clip =
+         * java.awt.Toolkit.getDefaultToolkit().getSystemClipboard(); try {
+         * String text = editor.getSelectedText();
+         * //.getText(editor.getSelectionStart(),
+         * editor.getSelectionEnd()-editor.getSelectionStart());
+         * clip.setContents(new java.awt.datatransfer.StringSelection(text),
+         * null); } catch (Exception e) { e.printStackTrace();
+         */
+        Element el = document.getParagraphElement(editor.getSelectionStart());
+        if (el.getName().toUpperCase().equals("P-IMPLIED")) {
+            el = el.getParentElement();
+        }
+        String elName = el.getName();
+        StringWriter sw = new StringWriter();
+        String copy;
+        java.awt.datatransfer.Clipboard clip =
+                java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
+        try {
+            editorKit.write(
+                    sw,
+                    document,
+                    editor.getSelectionStart(),
+                    editor.getSelectionEnd() - editor.getSelectionStart());
+            copy = sw.toString();
+            copy = copy.split("<" + elName + "(.*?)>")[1];
+            copy = copy.split("</" + elName + ">")[0];
+            clip.setContents(
+                    new java.awt.datatransfer.StringSelection(copy.trim()),
+                    null);
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    private void doPaste() {
+        Clipboard clip =
+                java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
+        try {
+            Transferable content = clip.getContents(this);
+            if (content == null) {
+                return;
+            }
+            String txt =
+                    content
+                            .getTransferData(new DataFlavor(String.class, "String"))
+                            .toString();
+            document.replace(
+                    editor.getSelectionStart(),
+                    editor.getSelectionEnd() - editor.getSelectionStart(),
+                    txt,
+                    editorKit.getInputAttributes());
+            //editor.replaceSelection(content.getTransferData(new
+            // DataFlavor(String.class, "String")).toString());
+            //editor.paste();
+            //insertHTML(content.getTransferData(new DataFlavor(String.class,
+            // "String")).toString(), editor.getCaretPosition());
+            /*
+             * Element el =
+             * document.getParagraphElement(editor.getCaretPosition());
+             * insertTextInElement(el, content.getTransferData(new
+             * DataFlavor(String.class, "String")).toString(),
+             */
+
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    /*
+     * private void insertTextInElement(Element el, String text, int pos) {
+     * String elName = el.getName(); StringWriter sw = new StringWriter();
+     * String copy1; String copy2; try { StringWriter sw1 = new StringWriter();
+     * editorKit.write(sw1, document, el.getStartOffset(), pos -
+     * el.getStartOffset()); copy1 = sw1.toString(); StringWriter sw2 = new
+     * StringWriter(); editorKit.write(sw2, document, pos, el.getEndOffset() -
+     * pos); copy2 = sw2.toString(); String copy = copy1+text+copy2; ?)>")[1];
+     * copy = copy.split(" </" + elName + "> ")[0]; document.setInnerHTML(el,
+     * copy); } catch (Exception ex) { ex.printStackTrace(); }
+     */
+
+    public Action zoomInAction = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+            doZoom(true);
+        }
+    };
+
+    public Action zoomOutAction = new AbstractAction() {
+        public void actionPerformed(ActionEvent e) {
+            doZoom(false);
+        }
+    };
+
+    /**
+     * Listener for the edits on the current document.
+     */
+    protected UndoableEditListener undoHandler = new UndoHandler();
+
+    /**
+     * UndoManager that we add edits to.
+     */
+    protected UndoManager undo = new UndoManager();
+
+    public UndoAction undoAction = new UndoAction();
+    public RedoAction redoAction = new RedoAction();
+
+    JButton jAlignActionB = new JButton();
+    public JToolBar editToolbar = new JToolBar();
+    JButton lAlignActionB = new JButton();
+    JButton olActionB = new JButton();
+    JButton linkActionB = new JButton();
+    JButton italicActionB = new JButton();
+    JButton propsActionB = new JButton();
+    JButton imageActionB = new JButton();
+
+    public final int T_P = 0;
+    public final int T_H1 = 1;
+    public final int T_H2 = 2;
+    public final int T_H3 = 3;
+    public final int T_H4 = 4;
+    public final int T_H5 = 5;
+    public final int T_H6 = 6;
+    public final int T_PRE = 7;
+    //private final int T_ADDRESS = 8;
+    public final int T_BLOCKQ = 8; //9;
+
+    String[] elementTypes = {
+            Local.getString("Paragraph"),
+            Local.getString("Header") + " 1",
+            Local.getString("Header") + " 2",
+            Local.getString("Header") + " 3",
+            Local.getString("Header") + " 4",
+            Local.getString("Header") + " 5",
+            Local.getString("Header") + " 6",
+            Local.getString("Preformatted"),
+            //"Address",
+            Local.getString("Blockquote")
+    };
+    public JComboBox blockCB = new JComboBox(elementTypes);
+    boolean blockCBEventsLock = false;
+
+    public final int I_NORMAL = 0;
+    public final int I_EM = 1;
+    public final int I_STRONG = 2;
+    public final int I_CODE = 3;
+    public final int I_CITE = 4;
+    public final int I_SUPERSCRIPT = 5;
+    public final int I_SUBSCRIPT = 6;
+    public final int I_CUSTOM = 7;
+
+    String[] inlineTypes = {
+            Local.getString("Normal"),
+            Local.getString("Emphasis"),
+            Local.getString("Strong"),
+            Local.getString("Code"),
+            Local.getString("Cite"),
+            Local.getString("Superscript"),
+            Local.getString("Subscript"),
+            Local.getString("Custom style") + "..."
+    };
+    public JComboBox inlineCB = new JComboBox(inlineTypes);
+    boolean inlineCBEventsLock = false;
+
+    JButton boldActionB = new JButton();
+    JButton ulActionB = new JButton();
+    JButton rAlignActionB = new JButton();
+    JButton tableActionB = new JButton();
+    JButton cAlignActionB = new JButton();
+    JButton underActionB = new JButton();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JPopupMenu defaultPopupMenu = new JPopupMenu();
+    //JPopupMenu tablePopupMenu = new JPopupMenu();
+
+    JMenuItem jMenuItemUndo = new JMenuItem(undoAction);
+    JMenuItem jMenuItemRedo = new JMenuItem(redoAction);
+
+    JMenuItem jMenuItemCut = new JMenuItem(cutAction);
+    JMenuItem jMenuItemCopy = new JMenuItem(copyAction);
+    JMenuItem jMenuItemPaste = new JMenuItem(pasteAction);
+    JMenuItem jMenuItemProp = new JMenuItem(propsAction);
+
+    JMenuItem jMenuItemInsCell = new JMenuItem(insertTableCellAction);
+    JMenuItem jMenuItemInsRow = new JMenuItem(insertTableRowAction);
+
+    int currentCaret = 0;
+
+    int currentFontSize = 4;
+    JButton brActionB = new JButton();
+    JButton hrActionB = new JButton();
+    JButton insCharActionB = new JButton();
+
+    public HTMLEditor() {
+        try {
+            jbInit();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    void jbInit() throws Exception {
+
+        cutAction.putValue(
+                Action.SMALL_ICON,
+                new ImageIcon(cl.getResource("resources/icons/cut.png")));
+        cutAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
+        cutAction.putValue(Action.NAME, Local.getString("Cut"));
+        cutAction.putValue(Action.SHORT_DESCRIPTION, Local.getString("Cut"));
+
+        copyAction.putValue(
+                Action.SMALL_ICON,
+                new ImageIcon(cl.getResource("resources/icons/copy.png")));
+        copyAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK));
+        copyAction.putValue(Action.NAME, Local.getString("Copy"));
+        copyAction.putValue(Action.SHORT_DESCRIPTION, Local.getString("Copy"));
+
+        pasteAction.putValue(
+                Action.SMALL_ICON,
+                new ImageIcon(cl.getResource("resources/icons/paste.png")));
+        pasteAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));
+        pasteAction.putValue(Action.NAME, Local.getString("Paste"));
+        pasteAction.putValue(
+                Action.SHORT_DESCRIPTION,
+                Local.getString("Paste"));
+
+        stylePasteAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(
+                        KeyEvent.VK_V,
+                        KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
+        stylePasteAction.putValue(
+                Action.NAME,
+                Local.getString("Paste special"));
+        stylePasteAction.putValue(
+                Action.SHORT_DESCRIPTION,
+                Local.getString("Paste special"));
+
+        selectAllAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_MASK));
+
+        boldAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_B, KeyEvent.CTRL_MASK));
+        italicAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_I, KeyEvent.CTRL_MASK));
+        underAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_U, KeyEvent.CTRL_MASK));
+        breakAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.SHIFT_MASK));
+        breakAction.putValue(Action.NAME, Local.getString("Insert Break"));
+        breakAction.putValue(
+                Action.SHORT_DESCRIPTION,
+                Local.getString("Insert Break"));
+
+        findAction.putValue(
+                Action.ACCELERATOR_KEY,
+                KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK));
+
+        document = (HTMLDocument) editorKit.createDefaultDocument();
+
+        border1 =
+                BorderFactory.createEtchedBorder(
+                        Color.white,
+                        new Color(142, 142, 142));
+        border2 =
+                BorderFactory.createBevelBorder(
+                        BevelBorder.LOWERED,
+                        Color.white,
+                        Color.white,
+                        new Color(142, 142, 142),
+                        new Color(99, 99, 99));
+        this.setLayout(borderLayout1);
+
+        /*
+         * jAlignActionB.setIcon( new
+         * ImageIcon(net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResource("resources/icons/alignjust.png")));
+         * jAlignActionB.setMaximumSize(new Dimension(22, 22));
+         * jAlignActionB.setMinimumSize(new Dimension(22, 22));
+         * jAlignActionB.setPreferredSize(new Dimension(22, 22));
+         * jAlignActionB.setFocusable(false);
+         */
+
+        editor.addCaretListener(new CaretListener() {
+            public void caretUpdate(CaretEvent e) {
+                editor_caretUpdate(e);
+            }
+        });
+
+        editor.setEditorKit(editorKit);
+        editorKit.setDefaultCursor(new Cursor(Cursor.TEXT_CURSOR));
+
+        editor.setDocument(document);
+        document.addUndoableEditListener(undoHandler);
+
+        this.setPreferredSize(new Dimension(520, 57));
+        editToolbar.setRequestFocusEnabled(false);
+        editToolbar.setToolTipText("");
+
+        boldActionB.setAction(boldAction);
+        boldActionB.setBorder(border1);
+        boldActionB.setMaximumSize(new Dimension(22, 22));
+        boldActionB.setMinimumSize(new Dimension(22, 22));
+        boldActionB.setPreferredSize(new Dimension(22, 22));
+        boldActionB.setBorderPainted(false);
+        boldActionB.setFocusable(false);
+        boldActionB.setText("");
+
+        italicActionB.setAction(italicAction);
+        italicActionB.setBorder(border1);
+        italicActionB.setMaximumSize(new Dimension(22, 22));
+        italicActionB.setMinimumSize(new Dimension(22, 22));
+        italicActionB.setPreferredSize(new Dimension(22, 22));
+        italicActionB.setBorderPainted(false);
+        italicActionB.setFocusable(false);
+        italicActionB.setText("");
+
+        underActionB.setAction(underAction);
+        underActionB.setBorder(border1);
+        underActionB.setMaximumSize(new Dimension(22, 22));
+        underActionB.setMinimumSize(new Dimension(22, 22));
+        underActionB.setPreferredSize(new Dimension(22, 22));
+        underActionB.setBorderPainted(false);
+        underActionB.setFocusable(false);
+        underActionB.setText("");
+
+        lAlignActionB.setAction(lAlignAction);
+        lAlignActionB.setMaximumSize(new Dimension(22, 22));
+        lAlignActionB.setMinimumSize(new Dimension(22, 22));
+        lAlignActionB.setPreferredSize(new Dimension(22, 22));
+        lAlignActionB.setBorderPainted(false);
+        lAlignActionB.setFocusable(false);
+        lAlignActionB.setText("");
+
+        rAlignActionB.setAction(rAlignAction);
+        rAlignActionB.setFocusable(false);
+        rAlignActionB.setPreferredSize(new Dimension(22, 22));
+        rAlignActionB.setBorderPainted(false);
+        rAlignActionB.setMinimumSize(new Dimension(22, 22));
+        rAlignActionB.setMaximumSize(new Dimension(22, 22));
+        rAlignActionB.setText("");
+
+        cAlignActionB.setAction(cAlignAction);
+        cAlignActionB.setMaximumSize(new Dimension(22, 22));
+        cAlignActionB.setMinimumSize(new Dimension(22, 22));
+        cAlignActionB.setPreferredSize(new Dimension(22, 22));
+        cAlignActionB.setBorderPainted(false);
+        cAlignActionB.setFocusable(false);
+        cAlignActionB.setText("");
+
+        ulActionB.setAction(ulAction);
+        ulActionB.setMaximumSize(new Dimension(22, 22));
+        ulActionB.setMinimumSize(new Dimension(22, 22));
+        ulActionB.setPreferredSize(new Dimension(22, 22));
+        ulActionB.setBorderPainted(false);
+        ulActionB.setFocusable(false);
+        ulActionB.setText("");
+
+        olActionB.setAction(olAction);
+        olActionB.setMaximumSize(new Dimension(22, 22));
+        olActionB.setMinimumSize(new Dimension(22, 22));
+        olActionB.setPreferredSize(new Dimension(22, 22));
+        olActionB.setBorderPainted(false);
+        olActionB.setFocusable(false);
+        olActionB.setText("");
+
+        linkActionB.setAction(linkAction);
+        linkActionB.setMaximumSize(new Dimension(22, 22));
+        linkActionB.setMinimumSize(new Dimension(22, 22));
+        linkActionB.setPreferredSize(new Dimension(22, 22));
+        linkActionB.setBorderPainted(false);
+        linkActionB.setFocusable(false);
+        linkActionB.setText("");
+
+        propsActionB.setAction(propsAction);
+        propsActionB.setFocusable(false);
+        propsActionB.setPreferredSize(new Dimension(22, 22));
+        propsActionB.setBorderPainted(false);
+        propsActionB.setMinimumSize(new Dimension(22, 22));
+        propsActionB.setMaximumSize(new Dimension(22, 22));
+        propsActionB.setText("");
+
+        imageActionB.setAction(imageAction);
+        imageActionB.setMaximumSize(new Dimension(22, 22));
+        imageActionB.setMinimumSize(new Dimension(22, 22));
+        imageActionB.setPreferredSize(new Dimension(22, 22));
+        imageActionB.setBorderPainted(false);
+        imageActionB.setFocusable(false);
+        imageActionB.setText("");
+
+        tableActionB.setAction(tableAction);
+        tableActionB.setFocusable(false);
+        tableActionB.setPreferredSize(new Dimension(22, 22));
+        tableActionB.setBorderPainted(false);
+        tableActionB.setMinimumSize(new Dimension(22, 22));
+        tableActionB.setMaximumSize(new Dimension(22, 22));
+        tableActionB.setText("");
+
+        brActionB.setAction(breakAction);
+        brActionB.setFocusable(false);
+        brActionB.setBorderPainted(false);
+        brActionB.setPreferredSize(new Dimension(22, 22));
+        brActionB.setMinimumSize(new Dimension(22, 22));
+        brActionB.setMaximumSize(new Dimension(22, 22));
+        brActionB.setText("");
+
+        hrActionB.setAction(insertHRAction);
+        hrActionB.setMaximumSize(new Dimension(22, 22));
+        hrActionB.setMinimumSize(new Dimension(22, 22));
+        hrActionB.setPreferredSize(new Dimension(22, 22));
+        hrActionB.setBorderPainted(false);
+        hrActionB.setFocusable(false);
+        hrActionB.setText("");
+
+        insCharActionB.setAction(insCharAction);
+        insCharActionB.setBorder(border1);
+        insCharActionB.setMaximumSize(new Dimension(22, 22));
+        insCharActionB.setMinimumSize(new Dimension(22, 22));
+        insCharActionB.setPreferredSize(new Dimension(22, 22));
+        insCharActionB.setBorderPainted(false);
+        insCharActionB.setFocusable(false);
+        insCharActionB.setText("");
+
+        blockCB.setBackground(new Color(230, 230, 230));
+        blockCB.setMaximumRowCount(12);
+        blockCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        blockCB.setMaximumSize(new Dimension(120, 22));
+        blockCB.setMinimumSize(new Dimension(60, 22));
+        blockCB.setPreferredSize(new Dimension(79, 22));
+        blockCB.setFocusable(false);
+        blockCB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                blockCB_actionPerformed(e);
+            }
+        });
+
+        inlineCB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                inlineCB_actionPerformed(e);
+            }
+        });
+        inlineCB.setFocusable(false);
+        inlineCB.setPreferredSize(new Dimension(79, 22));
+        inlineCB.setMinimumSize(new Dimension(60, 22));
+        inlineCB.setMaximumSize(new Dimension(120, 22));
+        inlineCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        inlineCB.setMaximumRowCount(12);
+        inlineCB.setBackground(new Color(230, 230, 230));
+
+        this.add(jScrollPane1, BorderLayout.CENTER);
+        this.add(editToolbar, BorderLayout.NORTH);
+
+        editToolbar.add(propsActionB, null);
+        editToolbar.addSeparator();
+        editToolbar.add(blockCB, null);
+
+        editToolbar.addSeparator();
+        editToolbar.add(inlineCB, null);
+        editToolbar.addSeparator();
+        editToolbar.add(boldActionB, null);
+        editToolbar.add(italicActionB, null);
+        editToolbar.add(underActionB, null);
+        editToolbar.addSeparator();
+        editToolbar.add(ulActionB, null);
+        editToolbar.add(olActionB, null);
+        editToolbar.addSeparator();
+        editToolbar.add(lAlignActionB, null);
+        editToolbar.add(cAlignActionB, null);
+        editToolbar.add(rAlignActionB, null);
+        editToolbar.addSeparator();
+        editToolbar.add(imageActionB, null);
+        editToolbar.add(tableActionB, null);
+        editToolbar.add(linkActionB, null);
+        editToolbar.addSeparator();
+        editToolbar.add(hrActionB, null);
+        editToolbar.add(brActionB, null);
+        editToolbar.add(insCharActionB, null);
+
+        jScrollPane1.getViewport().add(editor, null);
+
+        toolsPanel.setTabPlacement(JTabbedPane.BOTTOM);
+        toolsPanel.setFont(new Font("Dialog", 1, 10));
+
+        //  editToolbar.add(jAlignActionB, null);
+
+        /* KEY ACTIONS */
+
+        /*
+         * editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.SHIFT_MASK),
+         */
+
+        editor.getKeymap().removeKeyStrokeBinding(
+                KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0));
+        editor.getKeymap().addActionForKeyStroke(
+                KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0),
+                new ParaBreakAction());
+
+        /*
+         * editor.getKeymap().addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_B,
+         * KeyEvent.CTRL_MASK), boldAction);
+         * editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_I, KeyEvent.CTRL_MASK),
+         * italicAction); editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_U, KeyEvent.CTRL_MASK),
+         */
+
+        /*
+         * editor.getKeymap().addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
+         * KeyEvent.CTRL_MASK), undoAction);
+         * editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_MASK +
+         * KeyEvent.SHIFT_MASK), redoAction);
+         * editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK +
+         * KeyEvent.SHIFT_MASK), insertTableCellAction);
+         * editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK),
+         */
+
+        editor.getKeymap().removeKeyStrokeBinding(
+                KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK));
+        editor.getKeymap().removeKeyStrokeBinding(
+                KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));
+        editor.getKeymap().removeKeyStrokeBinding(
+                KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
+
+        editor.getKeymap().addActionForKeyStroke(
+                KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK),
+                copyAction);
+        editor.getKeymap().addActionForKeyStroke(
+                KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK),
+                pasteAction);
+        editor.getKeymap().addActionForKeyStroke(
+                KeyStroke.getKeyStroke(
+                        KeyEvent.VK_V,
+                        KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK),
+                stylePasteAction);
+        editor.getKeymap().addActionForKeyStroke(
+                KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK),
+                cutAction);
+
+        editor.getKeymap().addActionForKeyStroke(
+                KeyStroke.getKeyStroke(KeyEvent.VK_F, KeyEvent.CTRL_MASK),
+                findAction);
+        /*
+         * editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS, KeyEvent.CTRL_MASK),
+         * zoomInAction); editor.getKeymap().addActionForKeyStroke(
+         * KeyStroke.getKeyStroke(KeyEvent.VK_MINUS, KeyEvent.CTRL_MASK),
+         */
+
+        /* POPUP MENUs */
+
+        /*
+         * jMenuItemUndo.setAction(undoAction); jMenuItemUndo.setText("Undo");
+         * jMenuItemUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
+         * KeyEvent.CTRL_MASK)); jMenuItemUndo.setIcon( new
+         * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/undo16.png")));
+         * 
+         * jMenuItemRedo.setAction(redoAction); jMenuItemRedo.setText("Redo");
+         * jMenuItemRedo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
+         * KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK)); jMenuItemRedo.setIcon(
+         * new
+         * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/redo16.png")));
+         * 
+         * jMenuItemCut.setAction(cutAction); jMenuItemCut.setText("Cut");
+         * jMenuItemCut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
+         * KeyEvent.CTRL_MASK)); jMenuItemCut.setIcon( new
+         * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/cut.png")));
+         * 
+         * jMenuItemCopy.setAction(copyAction); jMenuItemCopy.setText("Copy");
+         * jMenuItemCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
+         * KeyEvent.CTRL_MASK)); jMenuItemCopy.setIcon( new
+         * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/copy.png")));
+         * 
+         * jMenuItemPaste.setAction(pasteAction);
+         * jMenuItemPaste.setText("Paste");
+         * jMenuItemPaste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
+         * KeyEvent.CTRL_MASK)); jMenuItemPaste.setIcon( new
+         * ImageIcon(net.sf.memoranda.ui.htmleditor.AppFrame.class.getResource("resources/icons/paste.png")));
+         * 
+         * jMenuItemProp.setAction(propsAction);
+         * jMenuItemProp.setText("Properties"); jMenuItemProp.setIcon(
+         */
+
+        /*
+         * defaultPopupMenu.add(jMenuItemUndo);
+         * defaultPopupMenu.add(jMenuItemRedo);
+         * defaultPopupMenu.addSeparator(); defaultPopupMenu.add(jMenuItemCut);
+         * defaultPopupMenu.add(jMenuItemCopy);
+         * defaultPopupMenu.add(jMenuItemPaste);
+         * defaultPopupMenu.addSeparator();
+         */
+
+        /*
+         * jMenuItemInsCell.setAction(new InsertTableCellAction());
+         * jMenuItemInsCell.setText(Local.getString("Insert table cell"));
+         * 
+         * jMenuItemInsRow.setAction(new InsertTableRowAction());
+         */
+
+        /*
+         * tablePopupMenu.add(jMenuItemUndo);
+         * tablePopupMenu.add(jMenuItemRedo); tablePopupMenu.addSeparator();
+         * tablePopupMenu.add(jMenuItemCut); tablePopupMenu.add(jMenuItemCopy);
+         * tablePopupMenu.add(jMenuItemPaste); tablePopupMenu.addSeparator();
+         * tablePopupMenu.add(jMenuItemInsCell);
+         * tablePopupMenu.add(jMenuItemInsRow); tablePopupMenu.addSeparator();
+         */
+
+        editor.addMouseListener(new PopupListener());
+
+        document.getStyleSheet().setBaseFontSize(currentFontSize);
+        this.requestFocusInWindow();
+    }
+
+    class PopupListener extends MouseAdapter {
+        public void mousePressed(MouseEvent e) {
+            maybeShowPopup(e);
+        }
+
+        public void mouseReleased(MouseEvent e) {
+            maybeShowPopup(e);
+        }
+
+        private void maybeShowPopup(MouseEvent e) {
+            if (e.isPopupTrigger()) {
+                JPopupMenu popupMenu = new JPopupMenu();
+                popupMenu.setFocusable(false);
+
+                popupMenu.add(jMenuItemUndo);
+                popupMenu.add(jMenuItemRedo);
+                popupMenu.addSeparator();
+                popupMenu.add(jMenuItemCut);
+                popupMenu.add(jMenuItemCopy);
+                popupMenu.add(jMenuItemPaste);
+                popupMenu.addSeparator();
+                if (jMenuItemInsCell.getAction().isEnabled()) {
+                    popupMenu.add(jMenuItemInsCell);
+                    jMenuItemInsCell.setEnabled(true);
+                    popupMenu.add(jMenuItemInsRow);
+                    jMenuItemInsRow.setEnabled(true);
+                    popupMenu.addSeparator();
+                }
+                popupMenu.add(jMenuItemProp);
+                popupMenu.show(e.getComponent(), e.getX(), e.getY());
+
+            }
+        }
+    }
+
+    /**
+     * Resets the undo manager.
+     */
+    protected void resetUndoManager() {
+        undo.discardAllEdits();
+        undoAction.update();
+        redoAction.update();
+    }
+
+    class UndoHandler implements UndoableEditListener {
+
+        /**
+         * Messaged when the Document has created an edit, the edit is added to
+         * <code>undo</code>, an instance of UndoManager.
+         */
+        public void undoableEditHappened(UndoableEditEvent e) {
+            undo.addEdit(e.getEdit());
+            undoAction.update();
+            redoAction.update();
+        }
+    }
+
+    class UndoAction extends AbstractAction {
+        public UndoAction() {
+            super(Local.getString("Undo"));
+            setEnabled(false);
+            putValue(
+                    Action.SMALL_ICON,
+                    new ImageIcon(cl.getResource("resources/icons/undo16.png")));
+            putValue(
+                    Action.ACCELERATOR_KEY,
+                    KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_MASK));
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            try {
+                undo.undo();
+            } catch (CannotUndoException ex) {
+                System.out.println("Unable to undo: " + ex);
+                ex.printStackTrace();
+            }
+            update();
+            redoAction.update();
+        }
+
+        protected void update() {
+            if (undo.canUndo()) {
+                setEnabled(true);
+                putValue(
+                        Action.SHORT_DESCRIPTION,
+                        undo.getUndoPresentationName());
+            } else {
+                setEnabled(false);
+                putValue(Action.SHORT_DESCRIPTION, Local.getString("Undo"));
+            }
+        }
+    }
+
+    class RedoAction extends AbstractAction {
+        public RedoAction() {
+            super(Local.getString("Redo"));
+            setEnabled(false);
+            putValue(
+                    Action.SMALL_ICON,
+                    new ImageIcon(cl.getResource("resources/icons/redo16.png")));
+            putValue(
+                    Action.ACCELERATOR_KEY,
+                    KeyStroke.getKeyStroke(
+                            KeyEvent.VK_Z,
+                            KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            try {
+                undo.redo();
+            } catch (CannotRedoException ex) {
+                System.out.println("Unable to redo: " + ex);
+                ex.printStackTrace();
+            }
+            update();
+            undoAction.update();
+        }
+
+        protected void update() {
+            if (undo.canRedo()) {
+                setEnabled(true);
+                putValue(
+                        Action.SHORT_DESCRIPTION,
+                        undo.getRedoPresentationName());
+            } else {
+                setEnabled(false);
+                putValue(Action.SHORT_DESCRIPTION, Local.getString("Redo"));
+            }
+        }
+    }
+
+    public class BlockAction extends AbstractAction {
+        int _type;
+
+        public BlockAction(int type, String name) {
+            super(name);
+            _type = type;
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            blockCB.setSelectedIndex(_type);
+        }
+    }
+
+    public class InlineAction extends AbstractAction {
+        int _type;
+
+        public InlineAction(int type, String name) {
+            super(name);
+            _type = type;
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            inlineCB.setSelectedIndex(_type);
+        }
+    }
+
+    public String getContent() {
+        try {
+            return editor.getText();
+        } catch (Exception e) {
+            e.printStackTrace();
+            return "";
+        }
+    }
+
+    public void boldActionB_actionPerformed(ActionEvent e) {
+        if (!bold) {
+            boldActionB.setBorder(border2);
+        } else {
+            boldActionB.setBorder(border1);
+        }
+        bold = !bold;
+        boldActionB.setBorderPainted(bold);
+        /*
+         * SimpleAttributeSet attrs = new SimpleAttributeSet();
+         * attrs.addAttribute(StyleConstants.Bold, new Boolean(bold));
+         */
+        new StyledEditorKit.BoldAction().actionPerformed(e);
+    }
+
+    public void italicActionB_actionPerformed(ActionEvent e) {
+        if (!italic) {
+            italicActionB.setBorder(border2);
+        } else {
+            italicActionB.setBorder(border1);
+        }
+        italic = !italic;
+        italicActionB.setBorderPainted(italic);
+        /*
+         * SimpleAttributeSet attrs = new SimpleAttributeSet();
+         * attrs.addAttribute(StyleConstants.Italic, new Boolean(italic));
+         */
+        new StyledEditorKit.ItalicAction().actionPerformed(e);
+    }
+
+    public void underActionB_actionPerformed(ActionEvent e) {
+        if (!under) {
+            underActionB.setBorder(border2);
+        } else {
+            underActionB.setBorder(border1);
+        }
+        under = !under;
+        underActionB.setBorderPainted(under);
+        /*
+         * SimpleAttributeSet attrs = new SimpleAttributeSet();
+         * attrs.addAttribute(StyleConstants.Underline, new Boolean(under));
+         */
+
+        new StyledEditorKit.UnderlineAction().actionPerformed(e);
+    }
+
+    void editor_caretUpdate(CaretEvent e) {
+        currentCaret = e.getDot();
+        /*
+         * currentParaElement =
+         * document.getParagraphElement(editor.getCaretPosition());
+         * currentTagName = currentParaElement.getName().toUpperCase();
+         */
+
+        AttributeSet charattrs = null;
+        //System.out.print(editor.getCaretPosition()+" :
+        // "+document.getCharacterElement(editor.getCaretPosition()).getName()+"
+        // -> ");
+        if (editor.getCaretPosition() > 0) {
+            try {
+                charattrs =
+                        document
+                                .getCharacterElement(editor.getCaretPosition() - 1)
+                                .getAttributes();
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        } else {
+            charattrs =
+                    document
+                            .getCharacterElement(editor.getCaretPosition())
+                            .getAttributes();
+        }
+
+        if (charattrs
+                .containsAttribute(StyleConstants.Bold, new Boolean(true))) {
+            boldActionB.setBorder(border2);
+            bold = true;
+        } else if (bold) {
+            boldActionB.setBorder(border1);
+            bold = false;
+        }
+        boldActionB.setBorderPainted(bold);
+        if (charattrs
+                .containsAttribute(StyleConstants.Italic, new Boolean(true))) {
+            italicActionB.setBorder(border2);
+            italic = true;
+        } else if (italic) {
+            italicActionB.setBorder(border1);
+            italic = false;
+        }
+        italicActionB.setBorderPainted(italic);
+        if (charattrs
+                .containsAttribute(StyleConstants.Underline, new Boolean(true))) {
+            underActionB.setBorder(border2);
+            under = true;
+        } else if (under) {
+            underActionB.setBorder(border1);
+            under = false;
+        }
+        underActionB.setBorderPainted(under);
+        /*
+         * String iName = document
+         * .getCharacterElement(editor.getCaretPosition()) .getAttributes()
+         * .getAttribute(StyleConstants.NameAttribute) .toString()
+         */
+        inlineCBEventsLock = true;
+        inlineCB.setEnabled(!charattrs.isDefined(HTML.Tag.A));
+        if (charattrs.isDefined(HTML.Tag.EM)) {
+            inlineCB.setSelectedIndex(I_EM);
+        } else if (charattrs.isDefined(HTML.Tag.STRONG)) {
+            inlineCB.setSelectedIndex(I_STRONG);
+        } else if (
+                (charattrs.isDefined(HTML.Tag.CODE))
+                        || (charattrs.isDefined(HTML.Tag.SAMP))) {
+            inlineCB.setSelectedIndex(I_CODE);
+        } else if (charattrs.isDefined(HTML.Tag.SUP)) {
+            inlineCB.setSelectedIndex(I_SUPERSCRIPT);
+        } else if (charattrs.isDefined(HTML.Tag.SUB)) {
+            inlineCB.setSelectedIndex(I_SUBSCRIPT);
+        } else if (charattrs.isDefined(HTML.Tag.CITE)) {
+            inlineCB.setSelectedIndex(I_CITE);
+        } else if (charattrs.isDefined(HTML.Tag.FONT)) {
+            inlineCB.setSelectedIndex(I_CUSTOM);
+        } else {
+            inlineCB.setSelectedIndex(I_NORMAL);
+        }
+        inlineCBEventsLock = false;
+
+        Element pEl = document.getParagraphElement(editor.getCaretPosition());
+        String pName = pEl.getName().toUpperCase();
+        blockCBEventsLock = true;
+        if (pName.equals("P-IMPLIED")) {
+            pName = pEl.getParentElement().getName().toUpperCase();
+        }
+
+        if (pName.equals("P")) {
+            blockCB.setSelectedIndex(T_P);
+        } else if (pName.equals("H1")) {
+            blockCB.setSelectedIndex(T_H1);
+        } else if (pName.equals("H2")) {
+            blockCB.setSelectedIndex(T_H2);
+        } else if (pName.equals("H3")) {
+            blockCB.setSelectedIndex(T_H3);
+        } else if (pName.equals("H4")) {
+            blockCB.setSelectedIndex(T_H4);
+        } else if (pName.equals("H5")) {
+            blockCB.setSelectedIndex(T_H5);
+        } else if (pName.equals("H6")) {
+            blockCB.setSelectedIndex(T_H6);
+        } else if (pName.equals("PRE")) {
+            blockCB.setSelectedIndex(T_PRE);
+        } else if (pName.equals("BLOCKQUOTE")) {
+            blockCB.setSelectedIndex(T_BLOCKQ);
+        }
+        /*
+         * else if (pName.equals("ADDRESS"))
+         */
+        blockCBEventsLock = false;
+        this.insertTableCellAction.update();
+        this.insertTableRowAction.update();
+        /*
+         * String ppName =
+         * document.getParagraphElement(editor.getCaretPosition()).getParentElement().getName().toUpperCase();
+         * System.out.print(ppName+"->"+pName+":");
+         * 
+         * AbstractDocument.BranchElement pEl =
+         * (AbstractDocument.BranchElement)document.getParagraphElement(editor.getCaretPosition());
+         * Element el = pEl.positionToElement(editor.getCaretPosition());
+         * System.out.println(el.getAttributes().getAttribute(StyleConstants.NameAttribute)+",
+         * "+pEl.getElementCount()+"/"+el.getElementCount());
+         */
+
+    }
+
+    public void ulActionB_actionPerformed(ActionEvent e) {
+        String parentname =
+                document
+                        .getParagraphElement(editor.getCaretPosition())
+                        .getParentElement()
+                        .getName();
+        HTML.Tag parentTag = HTML.getTag(parentname);
+        HTMLEditorKit.InsertHTMLTextAction ulAction =
+                new HTMLEditorKit.InsertHTMLTextAction(
+                        "insertUL",
+                        "<ul><li></li></ul>",
+                        parentTag,
+                        HTML.Tag.UL);
+        ulAction.actionPerformed(e);
+        //removeIfEmpty(document.getParagraphElement(editor.getCaretPosition()-1));
+        list = true;
+        /*
+         * Element pEl =
+         * document.getParagraphElement(editor.getCaretPosition());
+         * StringWriter sw = new StringWriter(); try { editorKit.write(sw,
+         * document, pEl.getStartOffset(),
+         * pEl.getEndOffset()-pEl.getStartOffset()); String copy =
+         * sw.toString(); String elName = pEl.getName(); copy =
+         * copy.substring(copy.indexOf(" <"+elName)); copy =
+         * copy.substring(0,copy.indexOf(" </"+elName)+elName.length()+3);
+         * document.setOuterHTML(pEl, " <ul><li> "+copy+" </li></ul> ");
+         * System.out.println(copy); } catch (Exception ex){
+         * ex.printStackTrace();
+         */
+
+    }
+
+    public void olActionB_actionPerformed(ActionEvent e) {
+        String parentname =
+                document
+                        .getParagraphElement(editor.getCaretPosition())
+                        .getParentElement()
+                        .getName();
+        HTML.Tag parentTag = HTML.getTag(parentname);
+        HTMLEditorKit.InsertHTMLTextAction olAction =
+                new HTMLEditorKit.InsertHTMLTextAction(
+                        "insertOL",
+                        "<ol><li></li></ol>",
+                        parentTag,
+                        HTML.Tag.OL);
+        olAction.actionPerformed(e);
+        //removeIfEmpty(document.getParagraphElement(editor.getCaretPosition()-1));
+        list = true;
+    }
+
+    void removeIfEmpty(Element elem) {
+        if (elem.getEndOffset() - elem.getStartOffset() < 2) {
+            try {
+                document.remove(elem.getStartOffset(), elem.getEndOffset());
+            } catch (Exception ex) {
+                //ex.printStackTrace();
+            }
+        }
+    }
+
+    class ParaBreakAction extends AbstractAction {
+        ParaBreakAction() {
+            super("ParaBreakAction");
+        }
+
+        public void actionPerformed(ActionEvent e) {
+
+            Element elem =
+                    document.getParagraphElement(editor.getCaretPosition());
+            String elName = elem.getName().toUpperCase();
+            String parentname = elem.getParentElement().getName();
+            HTML.Tag parentTag = HTML.getTag(parentname);
+            if (parentname.toUpperCase().equals("P-IMPLIED")) {
+                parentTag = HTML.Tag.IMPLIED;
+            }
+            if (parentname.toLowerCase().equals("li")) {
+                // HTML.Tag listTag =
+                // HTML.getTag(elem.getParentElement().getParentElement().getName());
+                if (elem.getEndOffset() - elem.getStartOffset() > 1) {
+                    try {
+                        document.insertAfterEnd(
+                                elem.getParentElement(),
+                                "<li></li>");
+                        editor.setCaretPosition(
+                                elem.getParentElement().getEndOffset());
+                    } catch (Exception ex) {
+                        ex.printStackTrace();
+                    }
+                    /*
+                     * HTMLEditorKit.InsertHTMLTextAction liAction = new
+                     * HTMLEditorKit.InsertHTMLTextAction("insertLI", " <li>
+                     * </li> ", parentTag, HTML.Tag.LI);
+                     */
+                } else {
+                    try {
+                        document.remove(editor.getCaretPosition(), 1);
+                    } catch (Exception ex) {
+                        ex.printStackTrace();
+                    }
+                    Element listParentElement =
+                            elem
+                                    .getParentElement()
+                                    .getParentElement()
+                                    .getParentElement();
+                    HTML.Tag listParentTag =
+                            HTML.getTag(listParentElement.getName());
+                    String listParentTagName = listParentTag.toString();
+                    if (listParentTagName.toLowerCase().equals("li")) {
+                        Element listAncEl =
+                                listParentElement.getParentElement();
+                        try {
+                            editorKit.insertHTML(
+                                    document,
+                                    listAncEl.getEndOffset(),
+                                    "<li><p></p></li>",
+                                    3,
+                                    0,
+                                    HTML.Tag.LI);
+                        } catch (Exception ex) {
+                            ex.printStackTrace();
+                        }
+                    } else {
+                        HTMLEditorKit.InsertHTMLTextAction pAction =
+                                new HTMLEditorKit.InsertHTMLTextAction(
+                                        "insertP",
+                                        "<p></p>",
+                                        listParentTag,
+                                        HTML.Tag.P);
+                        pAction.actionPerformed(e);
+                    }
+                }
+            } else if (
+                    (elName.equals("PRE"))
+                            || (elName.equals("ADDRESS"))
+                            || (elName.equals("BLOCKQUOTE"))) {
+                if (editor.getCaretPosition() > 0) {
+                    removeIfEmpty(
+                            document.getParagraphElement(
+                                    editor.getCaretPosition() - 1));
+                }
+                HTMLEditorKit.InsertHTMLTextAction pAction =
+                        new HTMLEditorKit.InsertHTMLTextAction(
+                                "insertP",
+                                "<p></p>",
+                                parentTag,
+                                HTML.Tag.P);
+                System.out.println("PRE");
+                pAction.actionPerformed(e);
+            } else if (elName.equals("P-IMPLIED")) {
+                /*
+                 * HTML.Tag sParentTag =
+                 * HTML.getTag(elem.getParentElement().getParentElement().getName());
+                 * if (editor.getCaretPosition() > 0)
+                 * removeIfEmpty(document.getParagraphElement(editor.getCaretPosition() -
+                 * 1)); HTMLEditorKit.InsertHTMLTextAction pAction = new
+                 * HTMLEditorKit.InsertHTMLTextAction("insertP", " <p></p> ",
+                 * sParentTag, HTML.Tag.P);
+                 * System.out.println(sParentTag.toString());
+                 */
+                try {
+                    System.out.println("IMPLIED");
+                    document.insertAfterEnd(elem.getParentElement(), "<p></p>");
+                    editor.setCaretPosition(
+                            elem.getParentElement().getEndOffset());
+                } catch (Exception ex) {
+                    ex.printStackTrace();
+                }
+
+            } else {
+                //removeIfEmpty(editor.getStyledDocument().getParagraphElement(editor.getCaretPosition()-1));
+                /*
+                 * HTMLEditorKit.InsertHTMLTextAction pAction = new
+                 * HTMLEditorKit.InsertHTMLTextAction("insertP"," <p></p> ",
+                 * HTML.Tag.BODY, HTML.Tag.P);
+                 */
+
+                //HTMLEditorKit.InsertBreakAction iba = new
+                // HTMLEditorKit.InsertBreakAction();
+                //iba.actionPerformed(e);
+                editor.replaceSelection("\n");
+                editorKit.getInputAttributes().removeAttribute(
+                        HTML.Attribute.ID);
+                editorKit.getInputAttributes().removeAttribute(
+                        HTML.Attribute.CLASS);
+            }
+            //System.out.println(e.getWhen());
+        }
+    }
+
+    class BreakAction extends AbstractAction {
+        BreakAction() {
+            super(
+                    Local.getString("Insert break"),
+                    new ImageIcon(cl.getResource("resources/icons/break.png")));
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            String elName =
+                    document
+                            .getParagraphElement(editor.getCaretPosition())
+                            .getName();
+            /*
+             * if ((elName.toUpperCase().equals("PRE")) ||
+             * (elName.toUpperCase().equals("P-IMPLIED"))) {
+             * editor.replaceSelection("\r"); return;
+             */
+            HTML.Tag tag = HTML.getTag(elName);
+            if (elName.toUpperCase().equals("P-IMPLIED")) {
+                tag = HTML.Tag.IMPLIED;
+            }
+
+            HTMLEditorKit.InsertHTMLTextAction hta =
+                    new HTMLEditorKit.InsertHTMLTextAction(
+                            "insertBR",
+                            "<br>",
+                            tag,
+                            HTML.Tag.BR);
+            hta.actionPerformed(e);
+
+            //insertHTML("<br>",editor.getCaretPosition());
+
+        }
+    }
+
+    class InsertTableRowAction extends AbstractAction {
+        InsertTableRowAction() {
+            super(Local.getString("Insert table row"));
+            this.putValue(
+                    Action.ACCELERATOR_KEY,
+                    KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.CTRL_MASK));
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            String trTag = "<tr>";
+            Element tr =
+                    document
+                            .getParagraphElement(editor.getCaretPosition())
+                            .getParentElement()
+                            .getParentElement();
+            for (int i = 0; i < tr.getElementCount(); i++) {
+                if (tr.getElement(i).getName().toUpperCase().equals("TD")) {
+                    trTag += "<td><p></p></td>";
+                }
+            }
+            trTag += "</tr>";
+
+            /*
+             * HTMLEditorKit.InsertHTMLTextAction hta = new
+             * HTMLEditorKit.InsertHTMLTextAction("insertTR",trTag,
+             * HTML.Tag.TABLE, HTML.Tag.TR);
+             */
+            try {
+                document.insertAfterEnd(tr, trTag);
+                //editorKit.insertHTML(document, editor.getCaretPosition(),
+                // trTag, 3, 0, HTML.Tag.TR);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+
+        public boolean isEnabled() {
+            if (document == null) {
+                return false;
+            }
+            return document
+                    .getParagraphElement(editor.getCaretPosition())
+                    .getParentElement()
+                    .getName()
+                    .toUpperCase()
+                    .equals("TD");
+        }
+
+        public void update() {
+            this.setEnabled(isEnabled());
+        }
+    }
+
+    class InsertTableCellAction extends AbstractAction {
+        InsertTableCellAction() {
+            super(Local.getString("Insert table cell"));
+            this.putValue(
+                    Action.ACCELERATOR_KEY,
+                    KeyStroke.getKeyStroke(
+                            KeyEvent.VK_ENTER,
+                            KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));
+        }
+
+        public void actionPerformed(ActionEvent e) {
+            String tdTag = "<td><p></p></td>";
+            Element td =
+                    document
+                            .getParagraphElement(editor.getCaretPosition())
+                            .getParentElement();
+            try {
+                document.insertAfterEnd(td, tdTag);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+
+        public boolean isEnabled() {
+            if (document == null) {
+                return false;
+            }
+            return document
+                    .getParagraphElement(editor.getCaretPosition())
+                    .getParentElement()
+                    .getName()
+                    .toUpperCase()
+                    .equals("TD");
+        }
+
+        public void update() {
+            this.setEnabled(isEnabled());
+        }
+    }
+
+    public void lAlignActionB_actionPerformed(ActionEvent e) {
+        HTMLEditorKit.AlignmentAction aa =
+                new HTMLEditorKit.AlignmentAction(
+                        "leftAlign",
+                        StyleConstants.ALIGN_LEFT);
+        aa.actionPerformed(e);
+    }
+
+    public void cAlignActionB_actionPerformed(ActionEvent e) {
+        HTMLEditorKit.AlignmentAction aa =
+                new HTMLEditorKit.AlignmentAction(
+                        "centerAlign",
+                        StyleConstants.ALIGN_CENTER);
+        aa.actionPerformed(e);
+    }
+
+    public void rAlignActionB_actionPerformed(ActionEvent e) {
+        HTMLEditorKit.AlignmentAction aa =
+                new HTMLEditorKit.AlignmentAction(
+                        "rightAlign",
+                        StyleConstants.ALIGN_RIGHT);
+        aa.actionPerformed(e);
+    }
+
+    public void jAlignActionB_actionPerformed(ActionEvent e) {
+        HTMLEditorKit.AlignmentAction aa =
+                new HTMLEditorKit.AlignmentAction(
+                        "justifyAlign",
+                        StyleConstants.ALIGN_JUSTIFIED);
+        aa.actionPerformed(e);
+    }
+
+    public void insertHTML(String html, int location) {
+        //assumes editor is already set to "text/html" type
+        try {
+            HTMLEditorKit kit = (HTMLEditorKit) editor.getEditorKit();
+            Document doc = editor.getDocument();
+            StringReader reader = new StringReader(html);
+            kit.read(reader, doc, location);
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    public void imageActionB_actionPerformed(ActionEvent e) {
+        /*
+         * JFileChooser chooser = new JFileChooser();
+         * chooser.setFileHidingEnabled(false); chooser.setDialogTitle("Choose
+         * image file"); chooser.setAcceptAllFileFilterUsed(false);
+         * chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
+         * chooser.addChoosableFileFilter(new
+         * net.sf.memoranda.ui.htmleditor.filechooser.ImageFilter());
+         * chooser.setAccessory(new
+         * net.sf.memoranda.ui.htmleditor.filechooser.ImagePreview(chooser));
+         *  
+         */
+        ImageDialog dlg = new ImageDialog(null);
+        Dimension dlgSize = dlg.getPreferredSize();
+        Dimension frmSize = this.getSize();
+        Point loc = this.getLocationOnScreen();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        //dlg.setLocation(imageActionB.getLocationOnScreen());
+        dlg.setModal(true);
+        dlg.setVisible(true);
+
+        if (!dlg.CANCELLED) {
+            String parentname =
+                    document
+                            .getParagraphElement(editor.getCaretPosition())
+                            .getParentElement()
+                            .getName();
+            //HTML.Tag parentTag = HTML.getTag(parentname);
+            String urlString = dlg.fileField.getText();
+            String path = urlString;
+            if (imagesDir != null) {
+                try {
+                    URL url = new URL(urlString);
+                    if (!url.getProtocol().startsWith("http")) {
+                        path = imagesDir + "/" + url.getFile();
+                    }
+                } catch (MalformedURLException e1) {
+                    System.out.println("The URL provided cannot be resolved.  Please reattempt.");
+                }
+            }
+            try {
+                String imgTag =
+                        "<img src=\""
+                                + path
+                                + "\" alt=\""
+                                + dlg.altField.getText()
+                                + "\" ";
+                String w = dlg.widthField.getText();
+                try {
+                    Integer.parseInt(w, 10);
+                    imgTag += " width=\"" + w + "\" ";
+                } catch (Exception ex) {
+                    ex.printStackTrace();
+                }
+                String h = dlg.heightField.getText();
+                try {
+                    Integer.parseInt(h, 10);
+                    imgTag += " height=\"" + h + "\" ";
+                } catch (Exception ex) {
+                    ex.printStackTrace();
+                }
+                String hs = dlg.hspaceField.getText();
+                try {
+                    Integer.parseInt(hs, 10);
+                    imgTag += " hspace=\"" + hs + "\" ";
+                } catch (Exception ex) {
+                    ex.printStackTrace();
+                }
+                String vs = dlg.vspaceField.getText();
+                try {
+                    Integer.parseInt(vs, 10);
+                    imgTag += " vspace=\"" + vs + "\" ";
+                } catch (Exception ex) {
+                    ex.printStackTrace();
+                }
+                String b = dlg.borderField.getText();
+                try {
+                    Integer.parseInt(b, 10);
+                    imgTag += " border=\"" + b + "\" ";
+                } catch (Exception ex) {
+                    ex.printStackTrace();
+                }
+                if (dlg.alignCB.getSelectedIndex() > 0) {
+                    imgTag += " align=\""
+                            + dlg.alignCB.getSelectedItem()
+                            + "\" ";
+                }
+                imgTag += ">";
+
+                if (dlg.urlField.getText().length() > 0) {
+                    imgTag =
+                            "<a href=\""
+                                    + dlg.urlField.getText()
+                                    + "\">"
+                                    + imgTag
+                                    + "</a>";
+                    if (editor.getCaretPosition() == document.getLength()) {
+                        imgTag += "&nbsp;";
+                    }
+                    editorKit.insertHTML(
+                            document,
+                            editor.getCaretPosition(),
+                            imgTag,
+                            0,
+                            0,
+                            HTML.Tag.A);
+                } else {
+                    editorKit.insertHTML(
+                            document,
+                            editor.getCaretPosition(),
+                            imgTag,
+                            0,
+                            0,
+                            HTML.Tag.IMG);
+                }
+
+                //System.out.println(imgTag);
+
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+    }
+
+    public void tableActionB_actionPerformed(ActionEvent e) {
+        TableDialog dlg = new TableDialog(null);
+        //dlg.setLocation(tableActionB.getLocationOnScreen());
+        Dimension dlgSize = dlg.getPreferredSize();
+        Dimension frmSize = this.getSize();
+        Point loc = this.getLocationOnScreen();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+
+        dlg.setModal(true);
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        String tableTag = "<table ";
+        String w = dlg.widthField.getText().trim();
+        if (w.length() > 0) {
+            tableTag += " width=\"" + w + "\" ";
+        }
+        String h = dlg.heightField.getText().trim();
+        if (h.length() > 0) {
+            tableTag += " height=\"" + h + "\" ";
+        }
+        String cp = dlg.cellpadding.getValue().toString();
+        try {
+            Integer.parseInt(cp, 10);
+            tableTag += " cellpadding=\"" + cp + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        String cs = dlg.cellspacing.getValue().toString();
+        try {
+            Integer.parseInt(cs, 10);
+            tableTag += " cellspacing=\"" + cs + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        String b = dlg.border.getValue().toString();
+        try {
+            Integer.parseInt(b, 10);
+            tableTag += " border=\"" + b + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        if (dlg.alignCB.getSelectedIndex() > 0) {
+            tableTag += " align=\"" + dlg.alignCB.getSelectedItem() + "\" ";
+        }
+        if (dlg.vAlignCB.getSelectedIndex() > 0) {
+            tableTag += " valign=\"" + dlg.vAlignCB.getSelectedItem() + "\" ";
+        }
+        if (dlg.bgcolorField.getText().length() > 0) {
+            tableTag += " bgcolor=\"" + dlg.bgcolorField.getText() + "\" ";
+        }
+        tableTag += ">";
+        int cols = 1;
+        int rows = 1;
+        try {
+            cols = ((Integer) dlg.columns.getValue()).intValue();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        try {
+            rows = ((Integer) dlg.rows.getValue()).intValue();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        for (int r = 0; r < rows; r++) {
+            tableTag += "<tr>";
+            for (int c = 0; c < cols; c++) {
+                tableTag += "<td><p></p></td>";
+            }
+            tableTag += "</tr>";
+        }
+        tableTag += "</table>";
+        String parentname =
+                document
+                        .getParagraphElement(editor.getCaretPosition())
+                        .getParentElement()
+                        .getName();
+        HTML.Tag parentTag = HTML.getTag(parentname);
+        System.out.println(parentTag + ":\n" + tableTag);
+        /*
+         * HTMLEditorKit.InsertHTMLTextAction insertTableAction = new
+         * HTMLEditorKit.InsertHTMLTextAction("insertTABLE",tableTag,
+         * HTML.Tag.BODY, HTML.Tag.TABLE);
+         *  
+         */
+        //insertHTML(tableTag, editor.getCaretPosition());
+
+        try {
+            editorKit.insertHTML(
+                    document,
+                    editor.getCaretPosition(),
+                    tableTag,
+                    1,
+                    0,
+                    HTML.Tag.TABLE);
+            //removeIfEmpty(document.getParagraphElement(editor.getCaretPosition()-1));
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    public void linkActionB_actionPerformed(ActionEvent e) {
+        LinkDialog dlg = new LinkDialog(null);
+        //dlg.setLocation(linkActionB.getLocationOnScreen());
+        Dimension dlgSize = dlg.getPreferredSize();
+        Dimension frmSize = this.getSize();
+        Point loc = this.getLocationOnScreen();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        dlg.setModal(true);
+        if (editor.getSelectedText() != null) {
+            dlg.txtDesc.setText(editor.getSelectedText());
+        }
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        String aTag = "<a";
+        if (dlg.txtURL.getText().length() > 0) {
+            aTag += " href=\"" + dlg.txtURL.getText() + "\"";
+        }
+        if (dlg.txtName.getText().length() > 0) {
+            aTag += " name=\"" + dlg.txtName.getText() + "\"";
+        }
+        if (dlg.txtTitle.getText().length() > 0) {
+            aTag += " title=\"" + dlg.txtTitle.getText() + "\"";
+        }
+        if (dlg.chkNewWin.isSelected()) {
+            aTag += " target=\"_blank\"";
+        }
+        aTag += ">" + dlg.txtDesc.getText() + "</a>";
+        if (editor.getCaretPosition() == document.getLength()) {
+            aTag += "&nbsp;";
+        }
+        editor.replaceSelection("");
+        try {
+            editorKit.insertHTML(
+                    document,
+                    editor.getCaretPosition(),
+                    aTag,
+                    0,
+                    0,
+                    HTML.Tag.A);
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    void setLinkProperties(
+            Element el,
+            String href,
+            String target,
+            String title,
+            String name) {
+        LinkDialog dlg = new LinkDialog(null);
+        dlg.setLocation(linkActionB.getLocationOnScreen());
+        dlg.setModal(true);
+        //dlg.descPanel.setVisible(false);
+        dlg.txtURL.setText(href);
+        dlg.txtName.setText(name);
+        dlg.txtTitle.setText(title);
+        try {
+            dlg.txtDesc.setText(
+                    document.getText(
+                            el.getStartOffset(),
+                            el.getEndOffset() - el.getStartOffset()));
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        dlg.chkNewWin.setSelected(target.toUpperCase().equals("_BLANK"));
+        dlg.header.setText(Local.getString("Hyperlink properties"));
+        dlg.setTitle(Local.getString("Hyperlink properties"));
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        //String p = "";
+        /*
+         * SimpleAttributeSet attrs = new
+         * SimpleAttributeSet(el.getAttributes()); if
+         * (dlg.urlField.getText().length() >0) {
+         * attrs.addAttribute(HTML.Attribute.HREF, dlg.urlField.getText()); p +=
+         * "href="+dlg.urlField.getText()+" "; } if
+         * (dlg.nameField.getText().length() >0) {
+         * attrs.addAttribute(HTML.Attribute.NAME, dlg.nameField.getText()); p +=
+         * "name="+dlg.nameField.getText()+" "; } if
+         * (dlg.titleField.getText().length() >0) {
+         * attrs.addAttribute(HTML.Attribute.TITLE, dlg.titleField.getText());
+         * p += "title="+dlg.titleField.getText()+" "; } if
+         * (dlg.newWinChB.isSelected()) {
+         * attrs.addAttribute(HTML.Attribute.TARGET, "_blank"); p +=
+         * "target=_blank "; } attrs.addAttribute(StyleConstants.NameAttribute,
+         * "a"); attrs.addAttribute(HTML.Tag.A, p);
+         */
+        String aTag = "<a";
+        if (dlg.txtURL.getText().length() > 0) {
+            aTag += " href=\"" + dlg.txtURL.getText() + "\"";
+        }
+        if (dlg.txtName.getText().length() > 0) {
+            aTag += " name=\"" + dlg.txtName.getText() + "\"";
+        }
+        if (dlg.txtTitle.getText().length() > 0) {
+            aTag += " title=\"" + dlg.txtTitle.getText() + "\"";
+        }
+        if (dlg.chkNewWin.isSelected()) {
+            aTag += " target=\"_blank\"";
+        }
+        aTag += ">" + dlg.txtDesc.getText() + "</a>";
+        try {
+            document.setOuterHTML(el, aTag);
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    void setImageProperties(
+            Element el,
+            String src,
+            String alt,
+            String width,
+            String height,
+            String hspace,
+            String vspace,
+            String border,
+            String align) {
+        ImageDialog dlg = new ImageDialog(null);
+        dlg.setLocation(imageActionB.getLocationOnScreen());
+        dlg.setModal(true);
+        dlg.setTitle(Local.getString("Image properties"));
+        dlg.fileField.setText(src);
+        dlg.altField.setText(alt);
+        dlg.widthField.setText(width);
+        dlg.heightField.setText(height);
+        dlg.hspaceField.setText(hspace);
+        dlg.vspaceField.setText(vspace);
+        dlg.borderField.setText(border);
+        dlg.alignCB.setSelectedItem(align);
+        dlg.updatePreview();
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        String imgTag =
+                "<img src=\""
+                        + dlg.fileField.getText()
+                        + "\" alt=\""
+                        + dlg.altField.getText()
+                        + "\" ";
+        String w = dlg.widthField.getText();
+        try {
+            Integer.parseInt(w, 10);
+            imgTag += " width=\"" + w + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        String h = dlg.heightField.getText();
+        try {
+            Integer.parseInt(h, 10);
+            imgTag += " height=\"" + h + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        String hs = dlg.hspaceField.getText();
+        try {
+            Integer.parseInt(hs, 10);
+            imgTag += " hspace=\"" + hs + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        String vs = dlg.vspaceField.getText();
+        try {
+            Integer.parseInt(vs, 10);
+            imgTag += " vspace=\"" + vs + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        String b = dlg.borderField.getText();
+        try {
+            Integer.parseInt(b, 10);
+            imgTag += " border=\"" + b + "\" ";
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        if (dlg.alignCB.getSelectedIndex() > 0) {
+            imgTag += " align=\"" + dlg.alignCB.getSelectedItem() + "\" ";
+        }
+        imgTag += ">";
+        if (dlg.urlField.getText().length() > 0) {
+            imgTag =
+                    "<a href=\"" + dlg.urlField.getText() + "\">" + imgTag + "</a>";
+            if (editor.getCaretPosition() == document.getLength()) {
+                imgTag += "&nbsp;";
+            }
+        }
+        try {
+            document.setOuterHTML(el, imgTag);
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    void setElementProperties(Element el, String id, String cls, String sty) {
+        ElementDialog dlg = new ElementDialog(null);
+        //dlg.setLocation(linkActionB.getLocationOnScreen());
+        Dimension dlgSize = dlg.getPreferredSize();
+        Dimension frmSize = this.getSize();
+        Point loc = this.getLocationOnScreen();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        dlg.setModal(true);
+        dlg.setTitle(Local.getString("Object properties"));
+        dlg.idField.setText(id);
+        dlg.classField.setText(cls);
+        dlg.styleField.setText(sty);
+        // Uncommented, returns a simple p into the header... fix needed ?
+        //dlg.header.setText(el.getName());
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        SimpleAttributeSet attrs = new SimpleAttributeSet(el.getAttributes());
+        if (dlg.idField.getText().length() > 0) {
+            attrs.addAttribute(HTML.Attribute.ID, dlg.idField.getText());
+        }
+        if (dlg.classField.getText().length() > 0) {
+            attrs.addAttribute(HTML.Attribute.CLASS, dlg.classField.getText());
+        }
+        if (dlg.styleField.getText().length() > 0) {
+            attrs.addAttribute(HTML.Attribute.STYLE, dlg.styleField.getText());
+        }
+        document.setParagraphAttributes(el.getStartOffset(), 0, attrs, true);
+    }
+
+    void setTableProperties(Element td) {
+        Element tr = td.getParentElement();
+        Element table = tr.getParentElement();
+
+        TdDialog dlg = new TdDialog(null);
+        dlg.setLocation(editor.getLocationOnScreen());
+        dlg.setModal(true);
+        dlg.setTitle(Local.getString("Table properties"));
+
+        /** **********PARSE ELEMENTS*********** */
+        // TD***
+        AttributeSet tda = td.getAttributes();
+        if (tda.isDefined(HTML.Attribute.BGCOLOR)) {
+            dlg.tdBgcolorField.setText(
+                    tda.getAttribute(HTML.Attribute.BGCOLOR).toString());
+            Util.setBgcolorField(dlg.tdBgcolorField);
+        }
+        if (tda.isDefined(HTML.Attribute.WIDTH)) {
+            dlg.tdWidthField.setText(
+                    tda.getAttribute(HTML.Attribute.WIDTH).toString());
+        }
+        if (tda.isDefined(HTML.Attribute.HEIGHT)) {
+            dlg.tdHeightField.setText(
+                    tda.getAttribute(HTML.Attribute.HEIGHT).toString());
+        }
+        if (tda.isDefined(HTML.Attribute.COLSPAN)) {
+            try {
+                Integer i =
+                        new Integer(
+                                tda.getAttribute(HTML.Attribute.COLSPAN).toString());
+                dlg.tdColspan.setValue(i);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+        if (tda.isDefined(HTML.Attribute.ROWSPAN)) {
+            try {
+                Integer i =
+                        new Integer(
+                                tda.getAttribute(HTML.Attribute.ROWSPAN).toString());
+                dlg.tdRowspan.setValue(i);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+        if (tda.isDefined(HTML.Attribute.ALIGN)) {
+            dlg.tdAlignCB.setSelectedItem(
+                    tda
+                            .getAttribute(HTML.Attribute.ALIGN)
+                            .toString()
+                            .toLowerCase());
+        }
+        if (tda.isDefined(HTML.Attribute.VALIGN)) {
+            dlg.tdValignCB.setSelectedItem(
+                    tda
+                            .getAttribute(HTML.Attribute.VALIGN)
+                            .toString()
+                            .toLowerCase());
+        }
+        dlg.tdNowrapChB.setSelected((tda.isDefined(HTML.Attribute.NOWRAP)));
+
+        //TR ****
+        AttributeSet tra = tr.getAttributes();
+        if (tra.isDefined(HTML.Attribute.BGCOLOR)) {
+            dlg.trBgcolorField.setText(
+                    tra.getAttribute(HTML.Attribute.BGCOLOR).toString());
+            Util.setBgcolorField(dlg.trBgcolorField);
+        }
+        if (tra.isDefined(HTML.Attribute.ALIGN)) {
+            dlg.trAlignCB.setSelectedItem(
+                    tra
+                            .getAttribute(HTML.Attribute.ALIGN)
+                            .toString()
+                            .toLowerCase());
+        }
+        if (tra.isDefined(HTML.Attribute.VALIGN)) {
+            dlg.trValignCB.setSelectedItem(
+                    tra
+                            .getAttribute(HTML.Attribute.VALIGN)
+                            .toString()
+                            .toLowerCase());
+        }
+
+        //TABLE ****
+        AttributeSet ta = table.getAttributes();
+        if (ta.isDefined(HTML.Attribute.BGCOLOR)) {
+            dlg.bgcolorField.setText(
+                    ta.getAttribute(HTML.Attribute.BGCOLOR).toString());
+            Util.setBgcolorField(dlg.bgcolorField);
+        }
+        if (ta.isDefined(HTML.Attribute.WIDTH)) {
+            dlg.widthField.setText(
+                    ta.getAttribute(HTML.Attribute.WIDTH).toString());
+        }
+        if (ta.isDefined(HTML.Attribute.HEIGHT)) {
+            dlg.heightField.setText(
+                    ta.getAttribute(HTML.Attribute.HEIGHT).toString());
+        }
+        if (ta.isDefined(HTML.Attribute.ALIGN)) {
+            dlg.alignCB.setSelectedItem(
+                    ta.getAttribute(HTML.Attribute.ALIGN).toString().toLowerCase());
+        }
+        if (ta.isDefined(HTML.Attribute.VALIGN)) {
+            dlg.vAlignCB.setSelectedItem(
+                    ta
+                            .getAttribute(HTML.Attribute.VALIGN)
+                            .toString()
+                            .toLowerCase());
+        }
+        if (ta.isDefined(HTML.Attribute.CELLPADDING)) {
+            try {
+                Integer i =
+                        new Integer(
+                                ta.getAttribute(HTML.Attribute.CELLPADDING).toString());
+                dlg.cellpadding.setValue(i);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+        if (ta.isDefined(HTML.Attribute.CELLSPACING)) {
+            try {
+                Integer i =
+                        new Integer(
+                                ta.getAttribute(HTML.Attribute.CELLSPACING).toString());
+                dlg.cellspacing.setValue(i);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+        if (ta.isDefined(HTML.Attribute.BORDER)) {
+            try {
+                Integer i =
+                        new Integer(
+                                ta.getAttribute(HTML.Attribute.BORDER).toString());
+                dlg.border.setValue(i);
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+
+        /** ****************************** */
+
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+
+        /** ******** SET ATTRIBUTES ********* */
+        // TD***
+        String tdTag = "<td";
+        if (dlg.tdBgcolorField.getText().length() > 0) {
+            tdTag += " bgcolor=\"" + dlg.tdBgcolorField.getText() + "\"";
+        }
+
+        if (dlg.tdWidthField.getText().length() > 0) {
+            tdTag += " width=\"" + dlg.tdWidthField.getText() + "\"";
+        }
+
+        if (dlg.tdHeightField.getText().length() > 0) {
+            tdTag += " height=\"" + dlg.tdHeightField.getText() + "\"";
+        }
+
+        if (!dlg.tdColspan.getValue().toString().equals("0")) {
+            tdTag += " colspan=\"" + dlg.tdColspan.getValue().toString() + "\"";
+        }
+
+        if (!dlg.tdRowspan.getValue().toString().equals("0")) {
+            tdTag += " rowspan=\"" + dlg.tdRowspan.getValue().toString() + "\"";
+        }
+
+        if (dlg.tdAlignCB.getSelectedItem().toString().length() > 0) {
+            tdTag += " align=\""
+                    + dlg.tdAlignCB.getSelectedItem().toString()
+                    + "\"";
+        }
+
+        if (dlg.tdValignCB.getSelectedItem().toString().length() > 0) {
+            tdTag += " valign=\""
+                    + dlg.tdValignCB.getSelectedItem().toString()
+                    + "\"";
+        }
+
+        if (dlg.tdNowrapChB.isSelected()) {
+            tdTag += " nowrap";
+        }
+
+        tdTag += ">";
+
+        //TR***
+        String trTag = "<tr";
+        if (dlg.trBgcolorField.getText().length() > 0) {
+            trTag += " bgcolor=\"" + dlg.trBgcolorField.getText() + "\"";
+        }
+
+        if (dlg.trAlignCB.getSelectedItem().toString().length() > 0) {
+            trTag += " align=\""
+                    + dlg.trAlignCB.getSelectedItem().toString()
+                    + "\"";
+        }
+
+        if (dlg.trValignCB.getSelectedItem().toString().length() > 0) {
+            trTag += " valign=\""
+                    + dlg.trValignCB.getSelectedItem().toString()
+                    + "\"";
+        }
+
+        trTag += ">";
+
+        //TABLE ***
+        String tTag = "<table";
+        if (dlg.bgcolorField.getText().length() > 0) {
+            tTag += " bgcolor=\"" + dlg.bgcolorField.getText() + "\"";
+        }
+
+        if (dlg.widthField.getText().length() > 0) {
+            tTag += " width=\"" + dlg.widthField.getText() + "\"";
+        }
+
+        if (dlg.heightField.getText().length() > 0) {
+            tTag += " height=\"" + dlg.heightField.getText() + "\"";
+        }
+
+        tTag += " cellpadding=\""
+                + dlg.cellpadding.getValue().toString()
+                + "\"";
+
+        tTag += " cellspacing=\""
+                + dlg.cellspacing.getValue().toString()
+                + "\"";
+
+        tTag += " border=\"" + dlg.border.getValue().toString() + "\"";
+
+        if (dlg.alignCB.getSelectedItem().toString().length() > 0) {
+            tTag += " align=\""
+                    + dlg.alignCB.getSelectedItem().toString()
+                    + "\"";
+        }
+
+        if (dlg.vAlignCB.getSelectedItem().toString().length() > 0) {
+            tTag += " valign=\""
+                    + dlg.vAlignCB.getSelectedItem().toString()
+                    + "\"";
+        }
+
+        tTag += ">";
+
+        /** ****************************** */
+
+        /** ** UPDATE TABLE ***** */
+        try {
+            StringWriter sw = new StringWriter();
+            String copy;
+
+            editorKit.write(
+                    sw,
+                    document,
+                    td.getStartOffset(),
+                    td.getEndOffset() - td.getStartOffset());
+            copy = sw.toString();
+            copy = copy.split("<td(.*?)>")[1];
+            copy = copy.split("</td>")[0];
+            //System.out.println(tdTag+copy+"</td>");
+            document.setOuterHTML(td, tdTag + copy + "</td>");
+
+            //System.out.println("*******");
+
+            sw = new StringWriter();
+            editorKit.write(
+                    sw,
+                    document,
+                    tr.getStartOffset(),
+                    tr.getEndOffset() - tr.getStartOffset());
+            copy = sw.toString();
+            copy = copy.split("<tr(.*?)>")[1];
+            copy = copy.split("</tr>")[0];
+            //System.out.println(trTag+copy+"</tr>");
+            document.setOuterHTML(tr, trTag + copy + "</tr>");
+
+            //System.out.println("*******");
+
+            sw = new StringWriter();
+            editorKit.write(
+                    sw,
+                    document,
+                    table.getStartOffset(),
+                    table.getEndOffset() - table.getStartOffset());
+            copy = sw.toString();
+            copy = copy.split("<table(.*?)>")[1];
+            copy = copy.split("</table>")[0];
+            //System.out.println(tTag+copy+"</table>");
+            document.setOuterHTML(table, tTag + copy + "</table>");
+
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    void blockCB_actionPerformed(ActionEvent e) {
+        if (blockCBEventsLock) {
+            return;
+        }
+        int sel = blockCB.getSelectedIndex();
+        /*
+         * HTML.Tag parentTag =
+         * HTML.getTag(document.getParagraphElement(editor.getCaretPosition()).getParentElement().getName());
+         * HTML.Tag tag = null; String tagText = ""; switch (sel) { case T_P:
+         * tag = HTML.Tag.P; tagText=" <p></p> ";break; //case T_PRE: tag =
+         * HTML.Tag.PRE; tagText=" <pre></pre> ";break; case T_H1: tag =
+         * HTML.Tag.H1; tagText=" <h1></h1> ";break; case T_H2: tag =
+         * HTML.Tag.H2; tagText=" <h2></h2> ";break; case T_H3: tag =
+         * HTML.Tag.H3; tagText=" <h3></h3> ";break; case T_H4: tag =
+         * HTML.Tag.H4; tagText=" <h4></h4> ";break; case T_H5: tag =
+         * HTML.Tag.H5; tagText=" <h5></h5> ";break; case T_H6: tag =
+         * HTML.Tag.H6; tagText=" <h6></h6> ";break; }
+         * 
+         * HTMLEditorKit.InsertHTMLTextAction iAction = new
+         * HTMLEditorKit.InsertHTMLTextAction("insertTag",tagText, parentTag,
+         * tag); iAction.actionPerformed(e);
+         * System.out.println(tag.toString()+" -> "+parentTag.toString());
+         */
+
+        HTML.Tag tag = null;
+
+        switch (sel) {
+            case T_P:
+                tag = HTML.Tag.P;
+                break;
+            case T_H1:
+                tag = HTML.Tag.H1;
+                break;
+            case T_H2:
+                tag = HTML.Tag.H2;
+                break;
+            case T_H3:
+                tag = HTML.Tag.H3;
+                break;
+            case T_H4:
+                tag = HTML.Tag.H4;
+                break;
+            case T_H5:
+                tag = HTML.Tag.H5;
+                break;
+            case T_H6:
+                tag = HTML.Tag.H6;
+                break;
+            case T_PRE:
+                tag = HTML.Tag.PRE;
+                break;
+            case T_BLOCKQ:
+                tag = HTML.Tag.BLOCKQUOTE;
+                break;
+        }
+
+        Element el = document.getParagraphElement(editor.getCaretPosition());
+        if (el.getName().toUpperCase().equals("P-IMPLIED")) {
+            Element pEl = el.getParentElement();
+            String pElName = pEl.getName();
+            String newName = tag.toString();
+            StringWriter sw = new StringWriter();
+            String copy;
+            try {
+                editorKit.write(
+                        sw,
+                        document,
+                        el.getStartOffset(),
+                        el.getEndOffset() - el.getStartOffset());
+                copy = sw.toString();
+                copy = copy.split("<" + pElName + "(.*?)>")[1];
+                copy = copy.split("</" + pElName + ">")[0];
+                document.setOuterHTML(
+                        pEl,
+                        "<" + newName + ">" + copy + "</" + newName + ">");
+                return;
+            } catch (Exception ex) {
+                ex.printStackTrace();
+            }
+        }
+        SimpleAttributeSet attrs = new SimpleAttributeSet(el.getAttributes());
+        //attrs.removeAttribute(StyleConstants.NameAttribute);
+        attrs.addAttribute(StyleConstants.NameAttribute, tag);
+        if (editor.getSelectionEnd() - editor.getSelectionStart() > 0) {
+            document.setParagraphAttributes(
+                    editor.getSelectionStart(),
+                    editor.getSelectionEnd() - editor.getSelectionStart(),
+                    attrs,
+                    true);
+        } else {
+            document.setParagraphAttributes(
+                    editor.getCaretPosition(),
+                    0,
+                    attrs,
+                    true);
+        }
+
+    }
+
+    public void propsActionB_actionPerformed(ActionEvent e) {
+
+        /*
+         * Element p = document.getParagraphElement(editor.getCaretPosition());
+         * do { System.out.print(p.getName()+" / "); p = p.getParentElement();}
+         */
+
+        AbstractDocument.BranchElement pEl =
+                (AbstractDocument.BranchElement) document.getParagraphElement(
+                        editor.getCaretPosition());
+        System.out.println("--------------");
+        System.out.println(
+                pEl.getName() + "<-" + pEl.getParentElement().getName());
+        Element el = pEl.positionToElement(editor.getCaretPosition());
+        System.out.println(
+                ":"
+                        + el.getAttributes().getAttribute(StyleConstants.NameAttribute));
+        AttributeSet attrs = el.getAttributes();
+        /*
+         * Enumeration en = attrs.getAttributeNames(); Object k =
+         * en.nextElement(); while (en.hasMoreElements()) {
+         * System.out.println(k+" = '"+attrs.getAttribute(k)+"'"); k =
+         * en.nextElement();
+         */
+        String elName =
+                attrs
+                        .getAttribute(StyleConstants.NameAttribute)
+                        .toString()
+                        .toUpperCase();
+        if (elName.equals("IMG")) {
+            String src = "",
+                    alt = "",
+                    width = "",
+                    height = "",
+                    hspace = "",
+                    vspace = "",
+                    border = "",
+                    align = "";
+            if (attrs.isDefined(HTML.Attribute.SRC)) {
+                src = attrs.getAttribute(HTML.Attribute.SRC).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.ALT)) {
+                alt = attrs.getAttribute(HTML.Attribute.ALT).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.WIDTH)) {
+                width = attrs.getAttribute(HTML.Attribute.WIDTH).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.HEIGHT)) {
+                height = attrs.getAttribute(HTML.Attribute.HEIGHT).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.HSPACE)) {
+                hspace = attrs.getAttribute(HTML.Attribute.HSPACE).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.VSPACE)) {
+                vspace = attrs.getAttribute(HTML.Attribute.VSPACE).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.BORDER)) {
+                border = attrs.getAttribute(HTML.Attribute.BORDER).toString();
+            }
+            if (attrs.isDefined(HTML.Attribute.ALIGN)) {
+                align = attrs.getAttribute(HTML.Attribute.ALIGN).toString();
+            }
+            setImageProperties(
+                    el,
+                    src,
+                    alt,
+                    width,
+                    height,
+                    hspace,
+                    vspace,
+                    border,
+                    align);
+            return;
+        }
+
+        Object k = null;
+        for (Enumeration en = attrs.getAttributeNames(); en.hasMoreElements(); ) {
+            k = en.nextElement();
+            if (k.toString().equals("a")) {
+                String[] param = attrs.getAttribute(k).toString().split(" ");
+                String href = "", target = "", title = "", name = "";
+                for (int i = 0; i < param.length; i++) {
+                    if (param[i].startsWith("href=")) {
+                        href = param[i].split("=")[1];
+                    } else if (param[i].startsWith("title=")) {
+                        title = param[i].split("=")[1];
+                    } else if (param[i].startsWith("target=")) {
+                        target = param[i].split("=")[1];
+                    } else if (param[i].startsWith("name=")) {
+                        name = param[i].split("=")[1];
+                    }
+                }
+                setLinkProperties(el, href, target, title, name);
+                return;
+            }
+            System.out.println(k + " = '" + attrs.getAttribute(k) + "'");
+        }
+
+        if (pEl.getParentElement().getName().toUpperCase().equals("TD")) {
+            setTableProperties(pEl.getParentElement());
+            return;
+        }
+
+        String id = "", cls = "", sty = "";
+        AttributeSet pa = pEl.getAttributes();
+        if (pa.getAttribute(HTML.Attribute.ID) != null) {
+            id = pa.getAttribute(HTML.Attribute.ID).toString();
+        }
+        if (pa.getAttribute(HTML.Attribute.CLASS) != null) {
+            cls = pa.getAttribute(HTML.Attribute.CLASS).toString();
+        }
+        if (pa.getAttribute(HTML.Attribute.STYLE) != null) {
+            sty = pa.getAttribute(HTML.Attribute.STYLE).toString();
+        }
+        setElementProperties(pEl, id, cls, sty);
+
+    }
+
+    /*
+     * void dotestCharElement(ActionEvent e) { String text = "&nbsp;"; if
+     * (editor.getSelectedText() != null) text = editor.getSelectedText();
+     * String tag = " <code> " + text + " </code> "; if
+     * (editor.getCaretPosition() == document.getLength()) tag += "&nbsp;";
+     * editor.replaceSelection(""); try { editorKit.insertHTML(document,
+     * editor.getCaretPosition(), tag, 0, 0, HTML.Tag.CODE); } catch (Exception
+     * ex) { ex.printStackTrace(); } }
+     * 
+     * void dotestClearStyle(ActionEvent e) { Element el =
+     * document.getCharacterElement(editor.getCaretPosition());
+     * SimpleAttributeSet attrs = new SimpleAttributeSet();
+     * attrs.addAttribute(StyleConstants.NameAttribute, HTML.Tag.CONTENT);
+     * document.setCharacterAttributes(el.getStartOffset(), el.getEndOffset() -
+     * el.getStartOffset(), attrs, true); }
+     */
+
+    String setFontProperties(Element el, String text) {
+        FontDialog dlg = new FontDialog(null);
+        //dlg.setLocation(editor.getLocationOnScreen());
+        Dimension dlgSize = dlg.getSize();
+        Dimension frmSize = this.getSize();
+        Point loc = this.getLocationOnScreen();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        dlg.setModal(true);
+        AttributeSet ea = el.getAttributes();
+        /*
+         * if (ea.isDefined(HTML.Tag.FONT)) { String[] param =
+         * ea.getAttribute(HTML.Tag.FONT).toString().split(" "); for (int i = 0;
+         * i < param.length; i++) if (param[i].startsWith("face="))
+         * dlg.fontFamilyCB.setSelectedItem(param[i].split("=")[1]); else if
+         * (param[i].startsWith("size="))
+         * dlg.fontSizeCB.setSelectedItem(param[i].split("=")[1]); else if
+         * (param[i].startsWith("color=")) {
+         * dlg.colorField.setText(param[i].split("=")[1]);
+         * Util.setColorField(dlg.colorField); }
+         */
+        if (ea.isDefined(StyleConstants.FontFamily)) {
+            dlg.fontFamilyCB.setSelectedItem(
+                    ea.getAttribute(StyleConstants.FontFamily).toString());
+        }
+        if (ea.isDefined(HTML.Tag.FONT)) {
+            String s = ea.getAttribute(HTML.Tag.FONT).toString();
+            String size =
+                    s.substring(s.indexOf("size=") + 5, s.indexOf("size=") + 6);
+            dlg.fontSizeCB.setSelectedItem(size);
+        }
+        if (ea.isDefined(StyleConstants.Foreground)) {
+            dlg.colorField.setText(
+                    Util.encodeColor(
+                            (Color) ea.getAttribute(StyleConstants.Foreground)));
+            Util.setColorField(dlg.colorField);
+            dlg.sample.setForeground(
+                    (Color) ea.getAttribute(StyleConstants.Foreground));
+        }
+        if (text != null) {
+            dlg.sample.setText(text);
+        }
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return null;
+        }
+        String attrs = "";
+        if (dlg.fontSizeCB.getSelectedIndex() > 0) {
+            attrs += "size=\"" + dlg.fontSizeCB.getSelectedItem() + "\"";
+        }
+        if (dlg.fontFamilyCB.getSelectedIndex() > 0) {
+            attrs += "face=\"" + dlg.fontFamilyCB.getSelectedItem() + "\"";
+        }
+        if (dlg.colorField.getText().length() > 0) {
+            attrs += "color=\"" + dlg.colorField.getText() + "\"";
+        }
+        if (attrs.length() > 0) {
+            return " " + attrs;
+        } else {
+            return null;
+        }
+    }
+
+    void inlineCB_actionPerformed(ActionEvent e) {
+        if (inlineCBEventsLock) {
+            return;
+        }
+        int sel = inlineCB.getSelectedIndex();
+        if (sel == I_NORMAL) {
+            Element el =
+                    document.getCharacterElement(editor.getCaretPosition());
+            SimpleAttributeSet attrs = new SimpleAttributeSet();
+            attrs.addAttribute(StyleConstants.NameAttribute, HTML.Tag.CONTENT);
+            if (editor.getSelectionEnd() > editor.getSelectionStart()) {
+                document.setCharacterAttributes(
+                        editor.getSelectionStart(),
+                        editor.getSelectionEnd() - editor.getSelectionStart(),
+                        attrs,
+                        true);
+            } else {
+                document.setCharacterAttributes(
+                        el.getStartOffset(),
+                        el.getEndOffset() - el.getStartOffset(),
+                        attrs,
+                        true);
+            }
+            return;
+        }
+        String text = "&nbsp;";
+        if (editor.getSelectedText() != null) {
+            text = editor.getSelectedText();
+        }
+        String tag = "";
+        String att = "";
+        switch (sel) {
+            case I_EM:
+                tag = "em";
+                break;
+            case I_STRONG:
+                tag = "strong";
+                break;
+            case I_CODE:
+                tag = "code";
+                break;
+            case I_SUPERSCRIPT:
+                tag = "sup";
+                break;
+            case I_SUBSCRIPT:
+                tag = "sub";
+                break;
+            case I_CITE:
+                tag = "cite";
+                break;
+            case I_CUSTOM:
+                tag = "font";
+                att =
+                        setFontProperties(
+                                document.getCharacterElement(editor.getCaretPosition()),
+                                editor.getSelectedText());
+                if (att == null) {
+                    return;
+                }
+                break;
+        }
+        String html = "<" + tag + att + ">" + text + "</" + tag + ">";
+        if (editor.getCaretPosition() == document.getLength()) {
+            html += "&nbsp;";
+        }
+        editor.replaceSelection("");
+        try {
+            editorKit.insertHTML(
+                    document,
+                    editor.getCaretPosition(),
+                    html,
+                    0,
+                    0,
+                    HTML.getTag(tag));
+            if (editor.getCaretPosition() == document.getLength()) {
+                editor.setCaretPosition(editor.getCaretPosition() - 1);
+            }
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
+
+    void doZoom(boolean in) {
+        /**
+         * @todo: ZOOM
+         */
+
+        /*
+         * if (in && (currentFontSize < 7)) currentFontSize++; else if (!in &&
+         * (currentFontSize > 1)) currentFontSize--; else return;
+         * editorKit.getStyleSheet().setBaseFontSize(currentFontSize);
+         *  
+         */
+
+    }
+
+    public void setDocument(Document doc) {
+        this.document = (HTMLDocument) doc;
+        initEditor();
+    }
+
+    public void initEditor() {
+        editor.setDocument(document);
+        //undo = new UndoManager();
+        resetUndoManager();
+        document.addUndoableEditListener(undoHandler);
+        editor.scrollRectToVisible(new Rectangle(0, 0, 0, 0));
+        editor.setCaretPosition(0);
+    }
+
+    public boolean isDocumentChanged() {
+        return undo.canUndo();
+    }
+
+    public void setStyleSheet(Reader r) {
+        StyleSheet css = new StyleSheet();
+        try {
+            css.loadRules(r, null);
+            /*
+             * new InputStreamReader(
+             * net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResourceAsStream("resources/css/default.css")),
+             */
+
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+        editorKit.setStyleSheet(css);
+    }
+
+    public void reload() {
+
+    }
+
+    void doFind() {
+        FindDialog dlg = new FindDialog();
+        //dlg.setLocation(linkActionB.getLocationOnScreen());
+        Dimension dlgSize = dlg.getSize();
+        //dlg.setSize(400, 300);
+        Dimension frmSize = this.getSize();
+        Point loc = this.getLocationOnScreen();
+        dlg.setLocation(
+                (frmSize.width - dlgSize.width) / 2 + loc.x,
+                (frmSize.height - dlgSize.height) / 2 + loc.y);
+        dlg.setModal(true);
+        if (editor.getSelectedText() != null) {
+            dlg.txtSearch.setText(editor.getSelectedText());
+        } else if (Context.get("LAST_SEARCHED_WORD") != null) {
+            dlg.txtSearch.setText(Context.get("LAST_SEARCHED_WORD").toString());
+        }
+        dlg.setVisible(true);
+        if (dlg.CANCELLED) {
+            return;
+        }
+        Context.put("LAST_SEARCHED_WORD", dlg.txtSearch.getText());
+        String repl = null;
+        if (dlg.chkReplace.isSelected()) {
+            repl = dlg.txtReplace.getText();
+        }
+        Finder finder =
+                new Finder(
+                        this,
+                        dlg.txtSearch.getText(),
+                        dlg.chkWholeWord.isSelected(),
+                        dlg.chkCaseSens.isSelected(),
+                        dlg.chkRegExp.isSelected(),
+                        repl);
+        finder.start();
+
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/HTMLEditorPane.java b/src/net/sf/memoranda/ui/htmleditor/HTMLEditorPane.java
index 4a15dfa..999c78a 100755
--- a/src/net/sf/memoranda/ui/htmleditor/HTMLEditorPane.java
+++ b/src/net/sf/memoranda/ui/htmleditor/HTMLEditorPane.java
@@ -1,41 +1,38 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.Graphics;
-import java.awt.Graphics2D;
-import java.awt.RenderingHints;
-
-import javax.swing.JEditorPane;
+import javax.swing.*;
+import java.awt.*;
 
 public class HTMLEditorPane extends JEditorPane {
 
-	boolean antiAlias = true;
-
-	public HTMLEditorPane(String text) {
-		super("text/html", text);
-	}
-
-	public boolean isAntialiasOn() {
-		return antiAlias;
-	}
-
-	public void setAntiAlias(boolean on) {
-		antiAlias = on;
-	}
-
-	public void paint(Graphics g) {
-		if (antiAlias) {
-			Graphics2D g2 = (Graphics2D) g;
-			g2.setRenderingHint(RenderingHints.KEY_RENDERING,
-					RenderingHints.VALUE_RENDER_QUALITY);
-			g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
-					RenderingHints.VALUE_ANTIALIAS_ON);
-			g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
-					RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
-			/*g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,
-					RenderingHints.VALUE_FRACTIONALMETRICS_ON);*/
-			super.paint(g2);
-		} else {
-			super.paint(g);
-		}
-	}
+    boolean antiAlias = true;
+
+    public HTMLEditorPane(String text) {
+        super("text/html", text);
+    }
+
+    public boolean isAntialiasOn() {
+        return antiAlias;
+    }
+
+    public void setAntiAlias(boolean on) {
+        antiAlias = on;
+    }
+
+    public void paint(Graphics g) {
+        if (antiAlias) {
+            Graphics2D g2 = (Graphics2D) g;
+            g2.setRenderingHint(RenderingHints.KEY_RENDERING,
+                    RenderingHints.VALUE_RENDER_QUALITY);
+            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
+                    RenderingHints.VALUE_ANTIALIAS_ON);
+            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
+                    RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
+            /*g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,
+                    RenderingHints.VALUE_FRACTIONALMETRICS_ON);*/
+            super.paint(g2);
+        } else {
+            super.paint(g);
+        }
+    }
 }
diff --git a/src/net/sf/memoranda/ui/htmleditor/ImageDialog.java b/src/net/sf/memoranda/ui/htmleditor/ImageDialog.java
index 81fce75..abf2f98 100755
--- a/src/net/sf/memoranda/ui/htmleditor/ImageDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/ImageDialog.java
@@ -1,37 +1,21 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Image;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-import java.awt.event.WindowEvent;
-import java.awt.event.WindowListener;
+import net.sf.memoranda.ui.htmleditor.util.Local;
 
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JFileChooser;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
-import javax.swing.UIManager;
+import javax.swing.*;
 import javax.swing.border.EmptyBorder;
 import javax.swing.border.EtchedBorder;
-
-import net.sf.memoranda.ui.htmleditor.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.WindowEvent;
+import java.awt.event.WindowListener;
 
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
@@ -57,7 +41,7 @@ public class ImageDialog extends JDialog implements WindowListener {
     public JTextField borderField = new JTextField();
     JLabel jLabel8 = new JLabel();
     String[] aligns = {"left", "right", "top", "middle", "bottom", "absmiddle",
-        "texttop", "baseline"}; 
+            "texttop", "baseline"};
     // Note: align values are not localized because they are HTML keywords 
     public JComboBox alignCB = new JComboBox(aligns);
     JLabel jLabel9 = new JLabel();
@@ -72,8 +56,7 @@ public class ImageDialog extends JDialog implements WindowListener {
         try {
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
         super.addWindowListener(this);
@@ -302,16 +285,14 @@ public class ImageDialog extends JDialog implements WindowListener {
         ImageIcon thmb = null;
         if (tmpIcon.getIconHeight() > 48) {
             thmb = new ImageIcon(tmpIcon.getImage()
-                    .getScaledInstance( -1, 48, Image.SCALE_DEFAULT));
-        }
-        else {
+                    .getScaledInstance(-1, 48, Image.SCALE_DEFAULT));
+        } else {
             thmb = tmpIcon;
         }
         if (thmb.getIconWidth() > 350) {
             return new ImageIcon(thmb.getImage()
                     .getScaledInstance(350, -1, Image.SCALE_DEFAULT));
-        }
-        else {
+        } else {
             return thmb;
         }
     }
@@ -319,29 +300,35 @@ public class ImageDialog extends JDialog implements WindowListener {
     //java.io.File selectedFile = null;
     public void updatePreview() {
         try {
-            if (new java.net.URL(fileField.getText()).getPath() != "")
+            if (new java.net.URL(fileField.getText()).getPath() != "") {
                 header.setIcon(getPreviewIcon(new java.io.File(
                         new java.net.URL(fileField.getText()).getPath())));
-        }
-        catch (Exception ex) {
+            }
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
 
     public void windowOpened(WindowEvent e) {
     }
+
     public void windowClosing(WindowEvent e) {
         CANCELLED = true;
         this.dispose();
     }
+
     public void windowClosed(WindowEvent e) {
     }
+
     public void windowIconified(WindowEvent e) {
     }
+
     public void windowDeiconified(WindowEvent e) {
     }
+
     public void windowActivated(WindowEvent e) {
     }
+
     public void windowDeactivated(WindowEvent e) {
     }
 
@@ -382,8 +369,9 @@ public class ImageDialog extends JDialog implements WindowListener {
         chooser.setPreferredSize(new Dimension(550, 375));
         java.io.File lastSel = (java.io.File) Context.get(
                 "LAST_SELECTED_IMG_FILE");
-        if (lastSel != null)
+        if (lastSel != null) {
             chooser.setCurrentDirectory(lastSel);
+        }
         if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
             try {
                 fileField.setText(chooser.getSelectedFile().toURL().toString());
@@ -391,8 +379,7 @@ public class ImageDialog extends JDialog implements WindowListener {
                 Context
                         .put("LAST_SELECTED_IMG_FILE", chooser
                                 .getSelectedFile());
-            }
-            catch (Exception ex) {
+            } catch (Exception ex) {
                 fileField.setText(chooser.getSelectedFile().getPath());
             }
             try {
@@ -401,8 +388,7 @@ public class ImageDialog extends JDialog implements WindowListener {
                 widthField.setText(new Integer(img.getIconWidth()).toString());
                 heightField
                         .setText(new Integer(img.getIconHeight()).toString());
-            }
-            catch (Exception ex) {
+            } catch (Exception ex) {
                 ex.printStackTrace();
             }
         }
diff --git a/src/net/sf/memoranda/ui/htmleditor/LinkDialog.java b/src/net/sf/memoranda/ui/htmleditor/LinkDialog.java
index 4363492..b2ea6fa 100755
--- a/src/net/sf/memoranda/ui/htmleditor/LinkDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/LinkDialog.java
@@ -1,30 +1,17 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JTextField;
 import net.sf.memoranda.ui.htmleditor.util.Local;
 
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
@@ -45,99 +32,107 @@ public class LinkDialog extends JDialog {
     JCheckBox chkNewWin = new JCheckBox();
     JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
     JButton okB = new JButton();
-  JButton cancelB = new JButton();
-  String[] aligns = {"", Local.getString("left"), 
-  Local.getString("center"), Local.getString("right")};
-  public boolean CANCELLED = false;
+    JButton cancelB = new JButton();
+    String[] aligns = {"", Local.getString("left"),
+            Local.getString("center"), Local.getString("right")};
+    public boolean CANCELLED = false;
 
-  public LinkDialog(Frame frame) {
-    super(frame, Local.getString("Insert hyperlink"), true);
-    try {
-      jbInit();
-      pack();
+    public LinkDialog(Frame frame) {
+        super(frame, Local.getString("Insert hyperlink"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
     }
-    catch(Exception ex) {
-      ex.printStackTrace();
-    }
-  }
 
-  public LinkDialog() {
-    this(null);
-  }
+    public LinkDialog() {
+        this(null);
+    }
 
 
-  void jbInit() throws Exception {
-	this.setResizable(false);
+    void jbInit() throws Exception {
+        this.setResizable(false);
         header.setFont(new java.awt.Font("Dialog", 0, 20));
         header.setForeground(new Color(0, 0, 124));
         header.setText(Local.getString("Insert hyperlink"));
         header.setIcon(new ImageIcon(
-            net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
-            "resources/icons/linkbig.png")));
+                net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
+                        "resources/icons/linkbig.png")));
         topPanel.setBackground(Color.WHITE);
         //topPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
         topPanel.add(header);
         this.getContentPane().add(topPanel, BorderLayout.NORTH);
-        
+
         lblURL.setText(Local.getString("URL"));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 0;
+        gbc.gridx = 0;
+        gbc.gridy = 0;
         gbc.insets = new Insets(10, 10, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(lblURL, gbc);
         txtURL.setPreferredSize(new Dimension(300, 25));
         txtURL.setText("http://");
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 0;
+        gbc.gridx = 1;
+        gbc.gridy = 0;
         gbc.insets = new Insets(10, 5, 5, 10);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(txtURL, gbc);
         lblName.setText(Local.getString("Name"));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 1;
+        gbc.gridx = 0;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 10, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(lblName, gbc);
         txtName.setPreferredSize(new Dimension(300, 25));
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 1;
+        gbc.gridx = 1;
+        gbc.gridy = 1;
         gbc.insets = new Insets(5, 5, 5, 10);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(txtName, gbc);
         lblTitle.setText(Local.getString("Title"));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 2;
+        gbc.gridx = 0;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 10, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(lblTitle, gbc);
         txtTitle.setPreferredSize(new Dimension(300, 25));
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 2;
+        gbc.gridx = 1;
+        gbc.gridy = 2;
         gbc.insets = new Insets(5, 5, 5, 10);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(txtTitle, gbc);
         lblDesc.setText(Local.getString("Description"));
         gbc = new GridBagConstraints();
-        gbc.gridx = 0; gbc.gridy = 3;
+        gbc.gridx = 0;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 10, 5, 5);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(lblDesc, gbc);
         txtDesc.setPreferredSize(new Dimension(300, 25));
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 3;
+        gbc.gridx = 1;
+        gbc.gridy = 3;
         gbc.insets = new Insets(5, 5, 5, 10);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(txtDesc, gbc);
         chkNewWin.setText(Local.getString("Open in a new window"));
         gbc = new GridBagConstraints();
-        gbc.gridx = 1; gbc.gridy = 4;
+        gbc.gridx = 1;
+        gbc.gridy = 4;
         gbc.insets = new Insets(5, 5, 10, 10);
         gbc.anchor = GridBagConstraints.WEST;
         areaPanel.add(chkNewWin, gbc);
         areaPanel.setBorder(BorderFactory.createEtchedBorder(Color.white,
-            new Color(142, 142, 142)));
+                new Color(142, 142, 142)));
         this.getContentPane().add(areaPanel, BorderLayout.CENTER);
-        
+
         okB.setMaximumSize(new Dimension(100, 26));
         okB.setMinimumSize(new Dimension(100, 26));
         okB.setPreferredSize(new Dimension(100, 26));
@@ -148,27 +143,27 @@ public class LinkDialog extends JDialog {
             }
         });
         this.getRootPane().setDefaultButton(okB);
-    cancelB.setMaximumSize(new Dimension(100, 26));
-    cancelB.setMinimumSize(new Dimension(100, 26));
-    cancelB.setPreferredSize(new Dimension(100, 26));
-    cancelB.setText(Local.getString("Cancel"));
-    cancelB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        cancelB_actionPerformed(e);
-      }
-    });
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setMinimumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
         buttonsPanel.add(okB);
         buttonsPanel.add(cancelB);
         this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
-        
-  }
 
-  void okB_actionPerformed(ActionEvent e) {
-    this.dispose();
-  }
+    }
 
-  void cancelB_actionPerformed(ActionEvent e) {
-    CANCELLED = true;
-    this.dispose();
-  }
+    void okB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
+
+    void cancelB_actionPerformed(ActionEvent e) {
+        CANCELLED = true;
+        this.dispose();
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/ReplaceOptionsDialog.java b/src/net/sf/memoranda/ui/htmleditor/ReplaceOptionsDialog.java
index e3e56d1..ce82237 100755
--- a/src/net/sf/memoranda/ui/htmleditor/ReplaceOptionsDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/ReplaceOptionsDialog.java
@@ -1,29 +1,18 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.Point;
-import java.awt.event.ActionEvent;
+import net.sf.memoranda.ui.htmleditor.util.Local;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.SwingConstants;
+import javax.swing.*;
 import javax.swing.border.Border;
-
-import net.sf.memoranda.ui.htmleditor.util.Local;
+import java.awt.*;
+import java.awt.event.ActionEvent;
 
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
@@ -59,7 +48,7 @@ public class ReplaceOptionsDialog extends JDialog {
 
     Border border2;
 
-   
+
     BorderLayout borderLayout3 = new BorderLayout();
     JLabel textLabel = new JLabel();
     JButton yesB = new JButton();
@@ -71,8 +60,7 @@ public class ReplaceOptionsDialog extends JDialog {
             textLabel.setText(text);
             jbInit();
             pack();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
@@ -83,21 +71,21 @@ public class ReplaceOptionsDialog extends JDialog {
 
     void jbInit() throws Exception {
         this.setResizable(false);
-        textLabel.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResource("resources/icons/findbig.png"))) ;
+        textLabel.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.HTMLEditor.class.getResource("resources/icons/findbig.png")));
         textLabel.setIconTextGap(10);
         border1 = BorderFactory.createEmptyBorder(5, 5, 5, 5);
         border2 = BorderFactory.createEmptyBorder();
-        
+
         panel1.setLayout(borderLayout1);
-       
+
         cancelB.setText(Local.getString("Cancel"));
         cancelB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 cancelB_actionPerformed(e);
             }
         });
-       // cancelB.setFocusable(false);
-      
+        // cancelB.setFocusable(false);
+
         yesAllB.setText(Local.getString("Yes to all"));
         yesAllB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
@@ -118,18 +106,18 @@ public class ReplaceOptionsDialog extends JDialog {
             }
         });
         yesB.setText(Local.getString("Yes"));
-        
+
         //yesB.setFocusable(false);
         this.getRootPane().setDefaultButton(yesB);
-        
-      
+
+
         noB.setText(Local.getString("No"));
         noB.addActionListener(new java.awt.event.ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 noB_actionPerformed(e);
             }
         });
-       // noB.setFocusable(false);
+        // noB.setFocusable(false);
         buttonsPanel.add(yesB, null);
         getContentPane().add(panel1);
         panel1.add(areaPanel, BorderLayout.CENTER);
@@ -138,7 +126,7 @@ public class ReplaceOptionsDialog extends JDialog {
         buttonsPanel.add(yesAllB, null);
         buttonsPanel.add(noB, null);
         buttonsPanel.add(cancelB, null);
-        
+
 
     }
 
@@ -151,10 +139,12 @@ public class ReplaceOptionsDialog extends JDialog {
         option = CANCEL_OPTION;
         this.dispose();
     }
+
     void yesB_actionPerformed(ActionEvent e) {
         option = YES_OPTION;
         this.dispose();
     }
+
     void noB_actionPerformed(ActionEvent e) {
         option = NO_OPTION;
         this.dispose();
diff --git a/src/net/sf/memoranda/ui/htmleditor/SrcDialog.java b/src/net/sf/memoranda/ui/htmleditor/SrcDialog.java
index caec354..5ec4303 100755
--- a/src/net/sf/memoranda/ui/htmleditor/SrcDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/SrcDialog.java
@@ -1,52 +1,48 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Frame;
-
-import javax.swing.JDialog;
-import javax.swing.JPanel;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
+import javax.swing.*;
+import java.awt.*;
 
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 public class SrcDialog extends JDialog {
-	JPanel panel1 = new JPanel();
-	BorderLayout borderLayout1 = new BorderLayout();
-	JScrollPane jScrollPane1 = new JScrollPane();
-	JTextArea jTextArea1 = new JTextArea();
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JScrollPane jScrollPane1 = new JScrollPane();
+    JTextArea jTextArea1 = new JTextArea();
+
+    public SrcDialog(Frame frame, String text) {
+        super(frame, "Source text", true);
+        try {
+            setText(text);
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
 
-	public SrcDialog(Frame frame, String text) {
-		super(frame, "Source text", true);
-		try {
-			setText(text);
-			jbInit();
-			pack();
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
+    public SrcDialog() {
+        this(null, "");
+    }
 
-	public SrcDialog() {
-		this(null, "");
-	}
-	
-	void jbInit() throws Exception {
-		panel1.setLayout(borderLayout1);
-		jTextArea1.setEditable(false);
-		getContentPane().add(panel1);
-		panel1.add(jScrollPane1, BorderLayout.CENTER);
-		jScrollPane1.getViewport().add(jTextArea1, null);
-	}
+    void jbInit() throws Exception {
+        panel1.setLayout(borderLayout1);
+        jTextArea1.setEditable(false);
+        getContentPane().add(panel1);
+        panel1.add(jScrollPane1, BorderLayout.CENTER);
+        jScrollPane1.getViewport().add(jTextArea1, null);
+    }
 
-	public void setText(String txt) {
-		jTextArea1.setText(txt);
-	}
+    public void setText(String txt) {
+        jTextArea1.setText(txt);
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/TableDialog.java b/src/net/sf/memoranda/ui/htmleditor/TableDialog.java
index fca3ead..01515f1 100755
--- a/src/net/sf/memoranda/ui/htmleditor/TableDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/TableDialog.java
@@ -1,307 +1,311 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridBagConstraints;
-import java.awt.GridBagLayout;
-import java.awt.Insets;
-import java.awt.event.ActionEvent;
-
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JColorChooser;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JSpinner;
-import javax.swing.JTextField;
-import javax.swing.SpinnerNumberModel;
-import javax.swing.UIManager;
-
 import net.sf.memoranda.ui.htmleditor.util.Local;
 
+import javax.swing.*;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 public class TableDialog extends JDialog {
-	JPanel areaPanel = new JPanel(new GridBagLayout());
-	GridBagConstraints gbc;
-	JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
-	JButton cancelB = new JButton();
-	JButton okB = new JButton();
-	JLabel lblWidth = new JLabel();
-	public JTextField heightField = new JTextField();
-	JLabel lblHeight = new JLabel();
-	public JTextField widthField = new JTextField();
-	String[] aligns = {"", Local.getString("left"), Local.getString("center"),
-		Local.getString("right")};
-	String[] valigns = {"", Local.getString("top"), Local.getString("center"),
-		Local.getString("bottom")};
-	JLabel lblPadding = new JLabel();
-	JLabel lblSpacing = new JLabel();
-	JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-	JLabel header = new JLabel();
-	public boolean CANCELLED = false;
-	JLabel lblColumns = new JLabel();
-	JLabel lblRows = new JLabel();
-	JComboBox vAlignCB = new JComboBox(valigns);
-	JLabel lblOutline = new JLabel();
-	JComboBox alignCB = new JComboBox(aligns);
-	JLabel lblVertOutline = new JLabel();
-	JTextField bgcolorField = new JTextField();
-	JLabel lblFillColor = new JLabel();
-	JButton bgColorB = new JButton();
-	JLabel lblBorder = new JLabel();
-	public JSpinner columns = new JSpinner(new SpinnerNumberModel(1, 1, 999, 1));
-	public JSpinner rows = new JSpinner(new SpinnerNumberModel(1, 1, 999, 1));
-	public JSpinner cellpadding = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
-	public JSpinner cellspacing = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
-	public JSpinner border = new JSpinner(new SpinnerNumberModel(1, 0, 999, 1));
+    JPanel areaPanel = new JPanel(new GridBagLayout());
+    GridBagConstraints gbc;
+    JPanel buttonsPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 10));
+    JButton cancelB = new JButton();
+    JButton okB = new JButton();
+    JLabel lblWidth = new JLabel();
+    public JTextField heightField = new JTextField();
+    JLabel lblHeight = new JLabel();
+    public JTextField widthField = new JTextField();
+    String[] aligns = {"", Local.getString("left"), Local.getString("center"),
+            Local.getString("right")};
+    String[] valigns = {"", Local.getString("top"), Local.getString("center"),
+            Local.getString("bottom")};
+    JLabel lblPadding = new JLabel();
+    JLabel lblSpacing = new JLabel();
+    JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
+    JLabel header = new JLabel();
+    public boolean CANCELLED = false;
+    JLabel lblColumns = new JLabel();
+    JLabel lblRows = new JLabel();
+    JComboBox vAlignCB = new JComboBox(valigns);
+    JLabel lblOutline = new JLabel();
+    JComboBox alignCB = new JComboBox(aligns);
+    JLabel lblVertOutline = new JLabel();
+    JTextField bgcolorField = new JTextField();
+    JLabel lblFillColor = new JLabel();
+    JButton bgColorB = new JButton();
+    JLabel lblBorder = new JLabel();
+    public JSpinner columns = new JSpinner(new SpinnerNumberModel(1, 1, 999, 1));
+    public JSpinner rows = new JSpinner(new SpinnerNumberModel(1, 1, 999, 1));
+    public JSpinner cellpadding = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
+    public JSpinner cellspacing = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
+    public JSpinner border = new JSpinner(new SpinnerNumberModel(1, 0, 999, 1));
+
+    public TableDialog(Frame frame) {
+        super(frame, Local.getString("Table"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
+    }
 
-	public TableDialog(Frame frame) {
-		super(frame, Local.getString("Table"), true);
-		try {
-			jbInit();
-			pack();
-		} catch (Exception ex) {
-			ex.printStackTrace();
-		}
-	}
+    public TableDialog() {
+        this(null);
+    }
 
-	public TableDialog() {
-		this(null);
-	}
+    void jbInit() throws Exception {
+        this.setResizable(false);
+        headerPanel.setBackground(Color.WHITE);
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Table"));
+        header.setIcon(new ImageIcon(
+                net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
+                        "resources/icons/tablebig.png")));
+        headerPanel.add(header);
+        this.getContentPane().add(headerPanel, BorderLayout.NORTH);
 
-	void jbInit() throws Exception {
-		this.setResizable(false);
-		headerPanel.setBackground(Color.WHITE);
-		header.setFont(new java.awt.Font("Dialog", 0, 20));
-		header.setForeground(new Color(0, 0, 124));
-		header.setText(Local.getString("Table"));
-		header.setIcon(new ImageIcon(
-				net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
-				"resources/icons/tablebig.png")));
-		headerPanel.add(header);
-		this.getContentPane().add(headerPanel, BorderLayout.NORTH);
-		
-		areaPanel.setBorder(BorderFactory.createEtchedBorder(Color.white,
-			new Color(142, 142, 142)));
-		lblColumns.setText(Local.getString("Columns"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 0;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(10, 10, 5, 5);
-		areaPanel.add(lblColumns, gbc);
-		columns.setPreferredSize(new Dimension(50, 24));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1; gbc.gridy = 0;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(10, 5, 5, 0);
-		areaPanel.add(columns, gbc);
-		lblRows.setText(Local.getString("Rows"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 3; gbc.gridy = 0;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(10, 5, 5, 5);
-		areaPanel.add(lblRows, gbc);
-		rows.setPreferredSize(new Dimension(50, 24));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 4; gbc.gridy = 0;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(10, 5, 5, 0);
-		areaPanel.add(rows, gbc);
-		lblWidth.setText(Local.getString("Width"));
-		gbc = new GridBagConstraints();
-		gbc.gridx = 0; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 10, 5, 5);
-		areaPanel.add(lblWidth, gbc);
-		widthField.setPreferredSize(new Dimension(50, 25));
-		widthField.setText("100%");
-		gbc = new GridBagConstraints();
-		gbc.gridx = 1; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 0);
-		areaPanel.add(widthField, gbc);
-		lblHeight.setText(Local.getString("Height"));
-		gbc.gridx = 3; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 5);
-		areaPanel.add(lblHeight, gbc);
-		heightField.setPreferredSize(new Dimension(50, 25));
-		gbc.gridx = 4; gbc.gridy = 1;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 0);
-		areaPanel.add(heightField, gbc);
-		lblPadding.setText(Local.getString("Cell padding"));
-		gbc.gridx = 0; gbc.gridy = 2;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 10, 5, 5);
-		areaPanel.add(lblPadding, gbc);
-		cellpadding.setPreferredSize(new Dimension(50, 24));
-		gbc.gridx = 1; gbc.gridy = 2;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 0);
-		areaPanel.add(cellpadding, gbc);
-		lblSpacing.setText(Local.getString("Cell spacing"));
-		gbc.gridx = 3; gbc.gridy = 2;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 5);
-		areaPanel.add(lblSpacing, gbc);
-		cellspacing.setPreferredSize(new Dimension(50, 24));
-		gbc.gridx = 4; gbc.gridy = 2;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 0);
-		areaPanel.add(cellspacing, gbc);
-		lblBorder.setText(Local.getString("Border"));
-		gbc.gridx = 0; gbc.gridy = 3;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 10, 5, 5);
-		areaPanel.add(lblBorder, gbc);
-		border.setPreferredSize(new Dimension(50, 24));
-		gbc.gridx = 1; gbc.gridy = 3;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 0);
-		areaPanel.add(border, gbc);
-		lblFillColor.setText(Local.getString("Fill color"));
-		gbc.gridx = 3; gbc.gridy = 3;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 5);
-		areaPanel.add(lblFillColor, gbc);
-		bgcolorField.setPreferredSize(new Dimension(50, 24));
-		Util.setBgcolorField(bgcolorField);
-		gbc.gridx = 4; gbc.gridy = 3;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 5);
-		areaPanel.add(bgcolorField, gbc);
-		bgColorB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				bgColorB_actionPerformed(e);
-			}
-		});
-		bgColorB.setIcon(new ImageIcon(
-			net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
-			"resources/icons/color.png")));
-		bgColorB.setPreferredSize(new Dimension(25, 25));
-		gbc.gridx = 5; gbc.gridy = 3;
-		gbc.gridwidth = 2;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 5, 10);
-		areaPanel.add(bgColorB, gbc);
-		lblOutline.setText(Local.getString("Align"));
-		gbc.gridx = 0; gbc.gridy = 4;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 10, 10, 5);
-		areaPanel.add(lblOutline, gbc);
-		alignCB.setBackground(new Color(230, 230, 230));
-		alignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-		alignCB.setPreferredSize(new Dimension(70, 25));
-		gbc.gridx = 1; gbc.gridy = 4;
-		gbc.gridwidth = 2;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 10, 5);
-		areaPanel.add(alignCB, gbc);																																																																				
-		lblVertOutline.setText(Local.getString("Vert. align"));
-		gbc.gridx = 3; gbc.gridy = 4;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 10, 5);
-		areaPanel.add(lblVertOutline, gbc);		
-		vAlignCB.setPreferredSize(new Dimension(70, 25));
-		vAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-		vAlignCB.setBackground(new Color(230, 230, 230));
-		gbc.gridx = 4; gbc.gridy = 4;
-		gbc.gridwidth = 3;
-		gbc.anchor = GridBagConstraints.WEST;
-		gbc.insets = new Insets(5, 5, 10, 0);
-		areaPanel.add(vAlignCB, gbc);
-		this.getContentPane().add(areaPanel, BorderLayout.CENTER);
+        areaPanel.setBorder(BorderFactory.createEtchedBorder(Color.white,
+                new Color(142, 142, 142)));
+        lblColumns.setText(Local.getString("Columns"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 10, 5, 5);
+        areaPanel.add(lblColumns, gbc);
+        columns.setPreferredSize(new Dimension(50, 24));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 5, 5, 0);
+        areaPanel.add(columns, gbc);
+        lblRows.setText(Local.getString("Rows"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 3;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 5, 5, 5);
+        areaPanel.add(lblRows, gbc);
+        rows.setPreferredSize(new Dimension(50, 24));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 4;
+        gbc.gridy = 0;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(10, 5, 5, 0);
+        areaPanel.add(rows, gbc);
+        lblWidth.setText(Local.getString("Width"));
+        gbc = new GridBagConstraints();
+        gbc.gridx = 0;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 10, 5, 5);
+        areaPanel.add(lblWidth, gbc);
+        widthField.setPreferredSize(new Dimension(50, 25));
+        widthField.setText("100%");
+        gbc = new GridBagConstraints();
+        gbc.gridx = 1;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 0);
+        areaPanel.add(widthField, gbc);
+        lblHeight.setText(Local.getString("Height"));
+        gbc.gridx = 3;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 5);
+        areaPanel.add(lblHeight, gbc);
+        heightField.setPreferredSize(new Dimension(50, 25));
+        gbc.gridx = 4;
+        gbc.gridy = 1;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 0);
+        areaPanel.add(heightField, gbc);
+        lblPadding.setText(Local.getString("Cell padding"));
+        gbc.gridx = 0;
+        gbc.gridy = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 10, 5, 5);
+        areaPanel.add(lblPadding, gbc);
+        cellpadding.setPreferredSize(new Dimension(50, 24));
+        gbc.gridx = 1;
+        gbc.gridy = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 0);
+        areaPanel.add(cellpadding, gbc);
+        lblSpacing.setText(Local.getString("Cell spacing"));
+        gbc.gridx = 3;
+        gbc.gridy = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 5);
+        areaPanel.add(lblSpacing, gbc);
+        cellspacing.setPreferredSize(new Dimension(50, 24));
+        gbc.gridx = 4;
+        gbc.gridy = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 0);
+        areaPanel.add(cellspacing, gbc);
+        lblBorder.setText(Local.getString("Border"));
+        gbc.gridx = 0;
+        gbc.gridy = 3;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 10, 5, 5);
+        areaPanel.add(lblBorder, gbc);
+        border.setPreferredSize(new Dimension(50, 24));
+        gbc.gridx = 1;
+        gbc.gridy = 3;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 0);
+        areaPanel.add(border, gbc);
+        lblFillColor.setText(Local.getString("Fill color"));
+        gbc.gridx = 3;
+        gbc.gridy = 3;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 5);
+        areaPanel.add(lblFillColor, gbc);
+        bgcolorField.setPreferredSize(new Dimension(50, 24));
+        Util.setBgcolorField(bgcolorField);
+        gbc.gridx = 4;
+        gbc.gridy = 3;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 5);
+        areaPanel.add(bgcolorField, gbc);
+        bgColorB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                bgColorB_actionPerformed(e);
+            }
+        });
+        bgColorB.setIcon(new ImageIcon(
+                net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource(
+                        "resources/icons/color.png")));
+        bgColorB.setPreferredSize(new Dimension(25, 25));
+        gbc.gridx = 5;
+        gbc.gridy = 3;
+        gbc.gridwidth = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 5, 10);
+        areaPanel.add(bgColorB, gbc);
+        lblOutline.setText(Local.getString("Align"));
+        gbc.gridx = 0;
+        gbc.gridy = 4;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 10, 10, 5);
+        areaPanel.add(lblOutline, gbc);
+        alignCB.setBackground(new Color(230, 230, 230));
+        alignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        alignCB.setPreferredSize(new Dimension(70, 25));
+        gbc.gridx = 1;
+        gbc.gridy = 4;
+        gbc.gridwidth = 2;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 10, 5);
+        areaPanel.add(alignCB, gbc);
+        lblVertOutline.setText(Local.getString("Vert. align"));
+        gbc.gridx = 3;
+        gbc.gridy = 4;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 10, 5);
+        areaPanel.add(lblVertOutline, gbc);
+        vAlignCB.setPreferredSize(new Dimension(70, 25));
+        vAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        vAlignCB.setBackground(new Color(230, 230, 230));
+        gbc.gridx = 4;
+        gbc.gridy = 4;
+        gbc.gridwidth = 3;
+        gbc.anchor = GridBagConstraints.WEST;
+        gbc.insets = new Insets(5, 5, 10, 0);
+        areaPanel.add(vAlignCB, gbc);
+        this.getContentPane().add(areaPanel, BorderLayout.CENTER);
 
-		okB.setMaximumSize(new Dimension(100, 26));
-		okB.setMinimumSize(new Dimension(100, 26));
-		okB.setPreferredSize(new Dimension(100, 26));
-		okB.setText(Local.getString("Ok"));
-		okB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				okB_actionPerformed(e);
-			}
-		});
-		this.getRootPane().setDefaultButton(okB);
-		cancelB.setMaximumSize(new Dimension(100, 26));
-		cancelB.setMinimumSize(new Dimension(100, 26));
-		cancelB.setPreferredSize(new Dimension(100, 26));
-		cancelB.setText(Local.getString("Cancel"));
-		cancelB.addActionListener(new java.awt.event.ActionListener() {
-			public void actionPerformed(ActionEvent e) {
-				cancelB_actionPerformed(e);
-			}
-		});
-		buttonsPanel.add(okB);
-		buttonsPanel.add(cancelB);
-		this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
-	}
+        okB.setMaximumSize(new Dimension(100, 26));
+        okB.setMinimumSize(new Dimension(100, 26));
+        okB.setPreferredSize(new Dimension(100, 26));
+        okB.setText(Local.getString("Ok"));
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okB);
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setMinimumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        buttonsPanel.add(okB);
+        buttonsPanel.add(cancelB);
+        this.getContentPane().add(buttonsPanel, BorderLayout.SOUTH);
+    }
 
-	void okB_actionPerformed(ActionEvent e) {
-		this.dispose();
-	}
+    void okB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
 
-	void cancelB_actionPerformed(ActionEvent e) {
-		CANCELLED = true;
-		this.dispose();
-	}
+    void cancelB_actionPerformed(ActionEvent e) {
+        CANCELLED = true;
+        this.dispose();
+    }
 
-	void bgColorB_actionPerformed(ActionEvent e) {
-		// Fix until Sun's JVM supports more locales...
-		UIManager.put(
-			"ColorChooser.swatchesNameText",
-			Local.getString("Swatches"));
-		UIManager.put("ColorChooser.hsbNameText", Local.getString("HSB"));
-		UIManager.put("ColorChooser.rgbNameText", Local.getString("RGB"));
-		UIManager.put(
-			"ColorChooser.swatchesRecentText",
-			Local.getString("Recent:"));
-		UIManager.put("ColorChooser.previewText", Local.getString("Preview"));
-		UIManager.put(
-			"ColorChooser.sampleText",
-			Local.getString("Sample Text")
-				+ " "
-				+ Local.getString("Sample Text"));
-		UIManager.put("ColorChooser.okText", Local.getString("OK"));
-		UIManager.put("ColorChooser.cancelText", Local.getString("Cancel"));
-		UIManager.put("ColorChooser.resetText", Local.getString("Reset"));
-		UIManager.put("ColorChooser.hsbHueText", Local.getString("H"));
-		UIManager.put("ColorChooser.hsbSaturationText", Local.getString("S"));
-		UIManager.put("ColorChooser.hsbBrightnessText", Local.getString("B"));
-		UIManager.put("ColorChooser.hsbRedText", Local.getString("R"));
-		UIManager.put("ColorChooser.hsbGreenText", Local.getString("G"));
-		UIManager.put("ColorChooser.hsbBlueText", Local.getString("B2"));
-		UIManager.put("ColorChooser.rgbRedText", Local.getString("Red"));
-		UIManager.put("ColorChooser.rgbGreenText", Local.getString("Green"));
-		UIManager.put("ColorChooser.rgbBlueText", Local.getString("Blue"));
+    void bgColorB_actionPerformed(ActionEvent e) {
+        // Fix until Sun's JVM supports more locales...
+        UIManager.put(
+                "ColorChooser.swatchesNameText",
+                Local.getString("Swatches"));
+        UIManager.put("ColorChooser.hsbNameText", Local.getString("HSB"));
+        UIManager.put("ColorChooser.rgbNameText", Local.getString("RGB"));
+        UIManager.put(
+                "ColorChooser.swatchesRecentText",
+                Local.getString("Recent:"));
+        UIManager.put("ColorChooser.previewText", Local.getString("Preview"));
+        UIManager.put(
+                "ColorChooser.sampleText",
+                Local.getString("Sample Text")
+                        + " "
+                        + Local.getString("Sample Text"));
+        UIManager.put("ColorChooser.okText", Local.getString("OK"));
+        UIManager.put("ColorChooser.cancelText", Local.getString("Cancel"));
+        UIManager.put("ColorChooser.resetText", Local.getString("Reset"));
+        UIManager.put("ColorChooser.hsbHueText", Local.getString("H"));
+        UIManager.put("ColorChooser.hsbSaturationText", Local.getString("S"));
+        UIManager.put("ColorChooser.hsbBrightnessText", Local.getString("B"));
+        UIManager.put("ColorChooser.hsbRedText", Local.getString("R"));
+        UIManager.put("ColorChooser.hsbGreenText", Local.getString("G"));
+        UIManager.put("ColorChooser.hsbBlueText", Local.getString("B2"));
+        UIManager.put("ColorChooser.rgbRedText", Local.getString("Red"));
+        UIManager.put("ColorChooser.rgbGreenText", Local.getString("Green"));
+        UIManager.put("ColorChooser.rgbBlueText", Local.getString("Blue"));
 
-		Color initColor = Util.decodeColor(bgcolorField.getText());
+        Color initColor = Util.decodeColor(bgcolorField.getText());
 
-		Color c =
-			JColorChooser.showDialog(
-				this,
-				Local.getString("Table background color"),
-				initColor);
-		if (c == null)
-			return;
+        Color c =
+                JColorChooser.showDialog(
+                        this,
+                        Local.getString("Table background color"),
+                        initColor);
+        if (c == null) {
+            return;
+        }
 
-		bgcolorField.setText(
-			"#" + Integer.toHexString(c.getRGB()).substring(2).toUpperCase());
-		Util.setBgcolorField(bgcolorField);
-	}
+        bgcolorField.setText(
+                "#" + Integer.toHexString(c.getRGB()).substring(2).toUpperCase());
+        Util.setBgcolorField(bgcolorField);
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/TdDialog.java b/src/net/sf/memoranda/ui/htmleditor/TdDialog.java
index 5affc30..65dcd68 100755
--- a/src/net/sf/memoranda/ui/htmleditor/TdDialog.java
+++ b/src/net/sf/memoranda/ui/htmleditor/TdDialog.java
@@ -1,474 +1,461 @@
 package net.sf.memoranda.ui.htmleditor;
-import java.awt.BorderLayout;
-import java.awt.Color;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.FlowLayout;
-import java.awt.Frame;
-import java.awt.GridLayout;
-import java.awt.event.ActionEvent;
-
-import javax.swing.BorderFactory;
-import javax.swing.Box;
-import javax.swing.ImageIcon;
-import javax.swing.JButton;
-import javax.swing.JCheckBox;
-import javax.swing.JColorChooser;
-import javax.swing.JComboBox;
-import javax.swing.JDialog;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JSpinner;
-import javax.swing.JTabbedPane;
-import javax.swing.JTextField;
-import javax.swing.SpinnerNumberModel;
-import javax.swing.border.Border;
 
 import net.sf.memoranda.ui.htmleditor.util.Local;
 
+import javax.swing.*;
+import javax.swing.border.Border;
+import java.awt.*;
+import java.awt.event.ActionEvent;
+
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 public class TdDialog extends JDialog {
-  JPanel panel1 = new JPanel();
-  BorderLayout borderLayout1 = new BorderLayout();
-  JPanel buttonsPanel = new JPanel();
-  JButton cancelB = new JButton();
-  JButton okB = new JButton();
-  FlowLayout flowLayout1 = new FlowLayout();
-  Border border1;
+    JPanel panel1 = new JPanel();
+    BorderLayout borderLayout1 = new BorderLayout();
+    JPanel buttonsPanel = new JPanel();
+    JButton cancelB = new JButton();
+    JButton okB = new JButton();
+    FlowLayout flowLayout1 = new FlowLayout();
+    Border border1;
 
-  String[] aligns = {"", "left", "center", "right"};
-  String[] valigns = {"", "top", "center", "bottom"};
-  String[] tdvaligns = {"", "top", "middle", "bottom", "baseline"};
-  Border border2;
-  JPanel headerPanel = new JPanel();
-  JLabel header = new JLabel();
-  FlowLayout flowLayout7 = new FlowLayout();
+    String[] aligns = {"", "left", "center", "right"};
+    String[] valigns = {"", "top", "center", "bottom"};
+    String[] tdvaligns = {"", "top", "middle", "bottom", "baseline"};
+    Border border2;
+    JPanel headerPanel = new JPanel();
+    JLabel header = new JLabel();
+    FlowLayout flowLayout7 = new FlowLayout();
 
-  public boolean CANCELLED = false;
-  Border border3;
-  Border border4;
-  JTabbedPane jTabbedPane1 = new JTabbedPane();
-  JLabel jLabel4 = new JLabel();
-  FlowLayout flowLayout5 = new FlowLayout();
-  JTextField tdHeightField = new JTextField();
-  FlowLayout flowLayout2 = new FlowLayout();
-  JLabel jLabel7 = new JLabel();
-  FlowLayout flowLayout6 = new FlowLayout();
-  Component component1;
-  JPanel jPanel7 = new JPanel();
-  JPanel tdPanel = new JPanel();
-  JTextField tdWidthField = new JTextField();
-  Component component2;
-  JPanel jPanel6 = new JPanel();
-  JComboBox tdAlignCB = new JComboBox(aligns);
-  JLabel jLabel6 = new JLabel();
-  GridLayout gridLayout2 = new GridLayout();
-  JPanel jPanel5 = new JPanel();
-  JLabel jLabel9 = new JLabel();
-  JLabel jLabel5 = new JLabel();
-  JPanel trPanel = new JPanel();
-  GridLayout gridLayout4 = new GridLayout();
-  JLabel jLabel20 = new JLabel();
-  JComboBox tdValignCB = new JComboBox(tdvaligns);
-  FlowLayout flowLayout12 = new FlowLayout();
-  JTextField tdBgcolorField = new JTextField();
-  JPanel jPanel14 = new JPanel();
-  JLabel jLabel21 = new JLabel();
-  JButton tdBgcolorB = new JButton();
-  Component component11;
-  JCheckBox tdNowrapChB = new JCheckBox();
-  JComboBox trAlignCB = new JComboBox(aligns);
-  JComboBox trValignCB = new JComboBox(tdvaligns);
-  Component component12;
-  JLabel jLabel22 = new JLabel();
-  Component component7;
-  FlowLayout flowLayout10 = new FlowLayout();
-  JLabel jLabel16 = new JLabel();
-  JPanel jPanel11 = new JPanel();
-  JTextField trBgcolorField = new JTextField();
-  JLabel jLabel23 = new JLabel();
-  JPanel jPanel15 = new JPanel();
-  FlowLayout flowLayout13 = new FlowLayout();
-  JButton trBgcolorB = new JButton();
-  JSpinner tdColspan = new JSpinner(new SpinnerNumberModel(0,0,999,1));
-  JSpinner tdRowspan = new JSpinner(new SpinnerNumberModel(0,0,999,1));
-  JLabel jLabel8 = new JLabel();
-  JLabel jLabel12 = new JLabel();
-  JSpinner cellpadding = new JSpinner(new SpinnerNumberModel(0,0,999,1));
-  FlowLayout flowLayout8 = new FlowLayout();
-  FlowLayout flowLayout4 = new FlowLayout();
-  Component component3;
-  JLabel jLabel24 = new JLabel();
-  JPanel tablePanel = new JPanel();
-  GridLayout gridLayout3 = new GridLayout();
-  JSpinner border = new JSpinner(new SpinnerNumberModel(1,0,999,1));
-  JPanel jPanel10 = new JPanel();
-  JPanel jPanel12 = new JPanel();
-  JComboBox vAlignCB = new JComboBox(valigns);
-  JTextField bgcolorField = new JTextField();
-  JTextField heightField = new JTextField();
-  JLabel jLabel13 = new JLabel();
-  JSpinner cellspacing = new JSpinner(new SpinnerNumberModel(0,0,999,1));
-  JLabel jLabel17 = new JLabel();
-  JLabel jLabel25 = new JLabel();
-  JButton bgColorB = new JButton();
-  Component component5;
-  JTextField widthField = new JTextField();
-  FlowLayout flowLayout11 = new FlowLayout();
-  JPanel jPanel13 = new JPanel();
-  JComboBox alignCB = new JComboBox(aligns);
-  JLabel jLabel14 = new JLabel();
-  Component component6;
-  JPanel jPanel9 = new JPanel();
-  FlowLayout flowLayout9 = new FlowLayout();
-  JLabel jLabel15 = new JLabel();
-  Border border5;
+    public boolean CANCELLED = false;
+    Border border3;
+    Border border4;
+    JTabbedPane jTabbedPane1 = new JTabbedPane();
+    JLabel jLabel4 = new JLabel();
+    FlowLayout flowLayout5 = new FlowLayout();
+    JTextField tdHeightField = new JTextField();
+    FlowLayout flowLayout2 = new FlowLayout();
+    JLabel jLabel7 = new JLabel();
+    FlowLayout flowLayout6 = new FlowLayout();
+    Component component1;
+    JPanel jPanel7 = new JPanel();
+    JPanel tdPanel = new JPanel();
+    JTextField tdWidthField = new JTextField();
+    Component component2;
+    JPanel jPanel6 = new JPanel();
+    JComboBox tdAlignCB = new JComboBox(aligns);
+    JLabel jLabel6 = new JLabel();
+    GridLayout gridLayout2 = new GridLayout();
+    JPanel jPanel5 = new JPanel();
+    JLabel jLabel9 = new JLabel();
+    JLabel jLabel5 = new JLabel();
+    JPanel trPanel = new JPanel();
+    GridLayout gridLayout4 = new GridLayout();
+    JLabel jLabel20 = new JLabel();
+    JComboBox tdValignCB = new JComboBox(tdvaligns);
+    FlowLayout flowLayout12 = new FlowLayout();
+    JTextField tdBgcolorField = new JTextField();
+    JPanel jPanel14 = new JPanel();
+    JLabel jLabel21 = new JLabel();
+    JButton tdBgcolorB = new JButton();
+    Component component11;
+    JCheckBox tdNowrapChB = new JCheckBox();
+    JComboBox trAlignCB = new JComboBox(aligns);
+    JComboBox trValignCB = new JComboBox(tdvaligns);
+    Component component12;
+    JLabel jLabel22 = new JLabel();
+    Component component7;
+    FlowLayout flowLayout10 = new FlowLayout();
+    JLabel jLabel16 = new JLabel();
+    JPanel jPanel11 = new JPanel();
+    JTextField trBgcolorField = new JTextField();
+    JLabel jLabel23 = new JLabel();
+    JPanel jPanel15 = new JPanel();
+    FlowLayout flowLayout13 = new FlowLayout();
+    JButton trBgcolorB = new JButton();
+    JSpinner tdColspan = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
+    JSpinner tdRowspan = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
+    JLabel jLabel8 = new JLabel();
+    JLabel jLabel12 = new JLabel();
+    JSpinner cellpadding = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
+    FlowLayout flowLayout8 = new FlowLayout();
+    FlowLayout flowLayout4 = new FlowLayout();
+    Component component3;
+    JLabel jLabel24 = new JLabel();
+    JPanel tablePanel = new JPanel();
+    GridLayout gridLayout3 = new GridLayout();
+    JSpinner border = new JSpinner(new SpinnerNumberModel(1, 0, 999, 1));
+    JPanel jPanel10 = new JPanel();
+    JPanel jPanel12 = new JPanel();
+    JComboBox vAlignCB = new JComboBox(valigns);
+    JTextField bgcolorField = new JTextField();
+    JTextField heightField = new JTextField();
+    JLabel jLabel13 = new JLabel();
+    JSpinner cellspacing = new JSpinner(new SpinnerNumberModel(0, 0, 999, 1));
+    JLabel jLabel17 = new JLabel();
+    JLabel jLabel25 = new JLabel();
+    JButton bgColorB = new JButton();
+    Component component5;
+    JTextField widthField = new JTextField();
+    FlowLayout flowLayout11 = new FlowLayout();
+    JPanel jPanel13 = new JPanel();
+    JComboBox alignCB = new JComboBox(aligns);
+    JLabel jLabel14 = new JLabel();
+    Component component6;
+    JPanel jPanel9 = new JPanel();
+    FlowLayout flowLayout9 = new FlowLayout();
+    JLabel jLabel15 = new JLabel();
+    Border border5;
 
-  public TdDialog(Frame frame) {
-    super(frame, Local.getString("Table properties"), true);
-    try {
-      jbInit();
-      pack();
-    }
-    catch(Exception ex) {
-      ex.printStackTrace();
+    public TdDialog(Frame frame) {
+        super(frame, Local.getString("Table properties"), true);
+        try {
+            jbInit();
+            pack();
+        } catch (Exception ex) {
+            ex.printStackTrace();
+        }
     }
-  }
 
-  public TdDialog() {
-    this(null);
-  }
+    public TdDialog() {
+        this(null);
+    }
 
 
-  void jbInit() throws Exception {
-    border1 = BorderFactory.createEmptyBorder(5,5,5,5);
-    border2 = BorderFactory.createEtchedBorder(Color.white,new Color(142, 142, 142));
-    border3 = BorderFactory.createEmptyBorder(0,0,10,0);
-    border4 = BorderFactory.createEmptyBorder(0,5,0,5);
-    component1 = Box.createHorizontalStrut(8);
-    component2 = Box.createHorizontalStrut(8);
-    component11 = Box.createHorizontalStrut(8);
-    component12 = Box.createHorizontalStrut(8);
-    component7 = Box.createHorizontalStrut(8);
-    component3 = Box.createHorizontalStrut(8);
-    component5 = Box.createHorizontalStrut(8);
-    component6 = Box.createHorizontalStrut(8);
-    border5 = BorderFactory.createEmptyBorder();
-    panel1.setLayout(borderLayout1);
-    cancelB.setMaximumSize(new Dimension(100, 26));
-    cancelB.setMinimumSize(new Dimension(100, 26));
-    cancelB.setPreferredSize(new Dimension(100, 26));
-    cancelB.setText(Local.getString("Cancel"));
-    cancelB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        cancelB_actionPerformed(e);
-      }
-    });
-    okB.setMaximumSize(new Dimension(100, 26));
-    okB.setMinimumSize(new Dimension(100, 26));
-    okB.setPreferredSize(new Dimension(100, 26));
-    okB.setText("Ok");
-    okB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        okB_actionPerformed(e);
-      }
-    });
-    this.getRootPane().setDefaultButton(okB);
-    buttonsPanel.setLayout(flowLayout1);
-    flowLayout1.setAlignment(FlowLayout.RIGHT);
-    panel1.setBorder(border1);
-    headerPanel.setBackground(Color.WHITE);
-    headerPanel.setBorder(border4);
-    headerPanel.setMinimumSize(new Dimension(159, 52));
-    headerPanel.setPreferredSize(new Dimension(159, 52));
-    headerPanel.setLayout(flowLayout7);
-    header.setFont(new java.awt.Font("Dialog", 0, 20));
-    header.setForeground(new Color(0, 0, 124));
-    header.setText(Local.getString("Table properties"));
-    header.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/tablebig.png")));
-    flowLayout7.setAlignment(FlowLayout.LEFT);
-    flowLayout7.setHgap(2);
-    flowLayout7.setVgap(2);
-    jLabel4.setMaximumSize(new Dimension(70, 16));
-    jLabel4.setMinimumSize(new Dimension(50, 16));
-    jLabel4.setPreferredSize(new Dimension(70, 16));
-    jLabel4.setText(Local.getString("Width"));
-    flowLayout5.setAlignment(FlowLayout.LEFT);
-    tdHeightField.setMinimumSize(new Dimension(30, 25));
-    tdHeightField.setPreferredSize(new Dimension(50, 25));
-    flowLayout2.setAlignment(FlowLayout.LEFT);
-    jLabel7.setMaximumSize(new Dimension(70, 16));
-    jLabel7.setMinimumSize(new Dimension(40, 16));
-    jLabel7.setPreferredSize(new Dimension(70, 16));
-    jLabel7.setText(Local.getString("Row span"));
-    flowLayout6.setAlignment(FlowLayout.LEFT);
-    jPanel7.setLayout(flowLayout6);
-    tdPanel.setLayout(gridLayout2);
-    tdPanel.setBorder(border2);
-    tdWidthField.setPreferredSize(new Dimension(50, 25));
-    tdWidthField.setMinimumSize(new Dimension(30, 25));
-    jPanel6.setLayout(flowLayout5);
-    tdAlignCB.setBackground(new Color(230, 230, 230));
-    tdAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-    tdAlignCB.setPreferredSize(new Dimension(63, 25));
-    jLabel6.setText(Local.getString("Col span"));
-    jLabel6.setPreferredSize(new Dimension(70, 16));
-    jLabel6.setMinimumSize(new Dimension(50, 16));
-    jLabel6.setMaximumSize(new Dimension(70, 16));
-    gridLayout2.setColumns(1);
-    gridLayout2.setRows(4);
-    jPanel5.setLayout(flowLayout2);
-    jLabel9.setMaximumSize(new Dimension(70, 16));
-    jLabel9.setMinimumSize(new Dimension(40, 16));
-    jLabel9.setPreferredSize(new Dimension(70, 16));
-    jLabel9.setText(Local.getString("Vert. align"));
-    jLabel5.setMaximumSize(new Dimension(70, 16));
-    jLabel5.setMinimumSize(new Dimension(40, 16));
-    jLabel5.setPreferredSize(new Dimension(70, 16));
-    jLabel5.setText(Local.getString("Height"));
-    trPanel.setLayout(gridLayout4);
-    trPanel.setBorder(border2);
-    gridLayout4.setColumns(1);
-    gridLayout4.setRows(2);
-    jLabel20.setText(Local.getString("Align"));
-    jLabel20.setPreferredSize(new Dimension(70, 16));
-    jLabel20.setMinimumSize(new Dimension(50, 16));
-    jLabel20.setMaximumSize(new Dimension(70, 16));
-    tdValignCB.setPreferredSize(new Dimension(63, 25));
-    tdValignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-    tdValignCB.setBackground(new Color(230, 230, 230));
-    flowLayout12.setAlignment(FlowLayout.LEFT);
-    tdBgcolorField.setPreferredSize(new Dimension(70, 25));
-    tdBgcolorField.setMinimumSize(new Dimension(60, 25));
-    jPanel14.setLayout(flowLayout12);
-    jLabel21.setText(Local.getString("Fill color"));
-    jLabel21.setPreferredSize(new Dimension(70, 16));
-    jLabel21.setMinimumSize(new Dimension(50, 16));
-    jLabel21.setMaximumSize(new Dimension(70, 16));
-    tdBgcolorB.setMinimumSize(new Dimension(25, 25));
-    tdBgcolorB.setPreferredSize(new Dimension(25, 25));
-    tdBgcolorB.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/color.png")));
-    tdBgcolorB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        tdBgcolorB_actionPerformed(e);
-      }
-    });
-    tdNowrapChB.setText(Local.getString("No text wrapping"));
-    trAlignCB.setPreferredSize(new Dimension(100, 25));
-    trAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-    trAlignCB.setBackground(new Color(230, 230, 230));
-    trValignCB.setBackground(new Color(230, 230, 230));
-    trValignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-    trValignCB.setPreferredSize(new Dimension(100, 25));
-    jLabel22.setMaximumSize(new Dimension(50, 16));
-    jLabel22.setMinimumSize(new Dimension(50, 16));
-    jLabel22.setPreferredSize(new Dimension(50, 16));
-    jLabel22.setText(Local.getString("Align"));
-    flowLayout10.setAlignment(FlowLayout.LEFT);
-    jLabel16.setText(Local.getString("Vert. align"));
-    jLabel16.setPreferredSize(new Dimension(80, 16));
-    jLabel16.setMinimumSize(new Dimension(40, 16));
-    jLabel16.setMaximumSize(new Dimension(80, 16));
-    jPanel11.setLayout(flowLayout10);
-    trBgcolorField.setMinimumSize(new Dimension(60, 25));
-    trBgcolorField.setPreferredSize(new Dimension(70, 25));
-    jLabel23.setMaximumSize(new Dimension(70, 16));
-    jLabel23.setMinimumSize(new Dimension(50, 16));
-    jLabel23.setPreferredSize(new Dimension(50, 16));
-    jLabel23.setText(Local.getString("Fill color"));
-    jPanel15.setLayout(flowLayout13);
-    flowLayout13.setAlignment(FlowLayout.LEFT);
-    trBgcolorB.setMinimumSize(new Dimension(25, 25));
-    trBgcolorB.setPreferredSize(new Dimension(25, 25));
-    trBgcolorB.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/color.png")));
-    trBgcolorB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        trBgcolorB_actionPerformed(e);
-      }
-    });
-    tdColspan.setBorder(border5);
-    tdColspan.setPreferredSize(new Dimension(50, 24));
-    tdRowspan.setBorder(border5);
-    tdRowspan.setPreferredSize(new Dimension(50, 24));
-    jLabel8.setText(Local.getString("Width"));
-    jLabel8.setPreferredSize(new Dimension(70, 16));
-    jLabel8.setMinimumSize(new Dimension(60, 16));
-    jLabel8.setMaximumSize(new Dimension(70, 16));
-    jLabel12.setText(Local.getString("Border"));
-    jLabel12.setPreferredSize(new Dimension(70, 16));
-    jLabel12.setMinimumSize(new Dimension(60, 16));
-    jLabel12.setMaximumSize(new Dimension(70, 16));
-    cellpadding.setBorder(border5);
-    cellpadding.setPreferredSize(new Dimension(50, 24));
-    flowLayout8.setAlignment(FlowLayout.LEFT);
-    flowLayout4.setAlignment(FlowLayout.LEFT);
-    jLabel24.setMaximumSize(new Dimension(70, 16));
-    jLabel24.setMinimumSize(new Dimension(60, 16));
-    jLabel24.setPreferredSize(new Dimension(70, 16));
-    jLabel24.setText(Local.getString("Align"));
-    tablePanel.setBorder(border2);
-    tablePanel.setLayout(gridLayout3);
-    gridLayout3.setColumns(1);
-    gridLayout3.setRows(4);
-    border.setBorder(border5);
-    border.setPreferredSize(new Dimension(50, 24));
-    jPanel10.setLayout(flowLayout4);
-    jPanel12.setLayout(flowLayout11);
-    vAlignCB.setPreferredSize(new Dimension(63, 25));
-    vAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-    vAlignCB.setBackground(new Color(230, 230, 230));
-    bgcolorField.setPreferredSize(new Dimension(70, 25));
-    bgcolorField.setMinimumSize(new Dimension(60, 25));
-    heightField.setMinimumSize(new Dimension(30, 25));
-    heightField.setPreferredSize(new Dimension(50, 25));
-    jLabel13.setMaximumSize(new Dimension(70, 16));
-    jLabel13.setMinimumSize(new Dimension(40, 16));
-    jLabel13.setPreferredSize(new Dimension(70, 16));
-    jLabel13.setText(Local.getString("Cell spacing"));
-    cellspacing.setBorder(border5);
-    cellspacing.setPreferredSize(new Dimension(50, 24));
-    jLabel17.setMaximumSize(new Dimension(70, 16));
-    jLabel17.setMinimumSize(new Dimension(40, 16));
-    jLabel17.setPreferredSize(new Dimension(70, 16));
-    jLabel17.setText(Local.getString("Vert. align"));
-    jLabel25.setMaximumSize(new Dimension(70, 16));
-    jLabel25.setMinimumSize(new Dimension(70, 16));
-    jLabel25.setPreferredSize(new Dimension(70, 16));
-    jLabel25.setText(Local.getString("Fill color"));
-    bgColorB.addActionListener(new java.awt.event.ActionListener() {
-      public void actionPerformed(ActionEvent e) {
-        bgColorB_actionPerformed(e);
-      }
-    });
-    bgColorB.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/color.png")));
-    bgColorB.setPreferredSize(new Dimension(25, 25));
-    bgColorB.setMinimumSize(new Dimension(25, 25));
-    widthField.setPreferredSize(new Dimension(50, 25));
-    widthField.setMinimumSize(new Dimension(30, 25));
-    flowLayout11.setAlignment(FlowLayout.LEFT);
-    jPanel13.setLayout(flowLayout8);
-    alignCB.setBackground(new Color(230, 230, 230));
-    alignCB.setFont(new java.awt.Font("Dialog", 1, 10));
-    alignCB.setPreferredSize(new Dimension(63, 25));
-    jLabel14.setText(Local.getString("Cell padding"));
-    jLabel14.setPreferredSize(new Dimension(70, 16));
-    jLabel14.setMinimumSize(new Dimension(60, 16));
-    jLabel14.setMaximumSize(new Dimension(70, 16));
-    jPanel9.setLayout(flowLayout9);
-    flowLayout9.setAlignment(FlowLayout.LEFT);
-    jLabel15.setMaximumSize(new Dimension(70, 16));
-    jLabel15.setMinimumSize(new Dimension(40, 16));
-    jLabel15.setPreferredSize(new Dimension(70, 16));
-    jLabel15.setText(Local.getString("Height"));
-    jPanel14.add(jLabel21, null);
-    jPanel14.add(tdBgcolorField, null);
-    jPanel14.add(tdBgcolorB, null);
-    jPanel14.add(component11, null);
-    jPanel14.add(tdNowrapChB, null);
-    getContentPane().add(panel1);
-    panel1.add(buttonsPanel,  BorderLayout.SOUTH);
-    buttonsPanel.add(okB, null);
-    buttonsPanel.add(cancelB, null);
-    panel1.add(jTabbedPane1, BorderLayout.NORTH);
-    this.getContentPane().add(headerPanel, BorderLayout.NORTH);
-    headerPanel.add(header, null);
+    void jbInit() throws Exception {
+        border1 = BorderFactory.createEmptyBorder(5, 5, 5, 5);
+        border2 = BorderFactory.createEtchedBorder(Color.white, new Color(142, 142, 142));
+        border3 = BorderFactory.createEmptyBorder(0, 0, 10, 0);
+        border4 = BorderFactory.createEmptyBorder(0, 5, 0, 5);
+        component1 = Box.createHorizontalStrut(8);
+        component2 = Box.createHorizontalStrut(8);
+        component11 = Box.createHorizontalStrut(8);
+        component12 = Box.createHorizontalStrut(8);
+        component7 = Box.createHorizontalStrut(8);
+        component3 = Box.createHorizontalStrut(8);
+        component5 = Box.createHorizontalStrut(8);
+        component6 = Box.createHorizontalStrut(8);
+        border5 = BorderFactory.createEmptyBorder();
+        panel1.setLayout(borderLayout1);
+        cancelB.setMaximumSize(new Dimension(100, 26));
+        cancelB.setMinimumSize(new Dimension(100, 26));
+        cancelB.setPreferredSize(new Dimension(100, 26));
+        cancelB.setText(Local.getString("Cancel"));
+        cancelB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                cancelB_actionPerformed(e);
+            }
+        });
+        okB.setMaximumSize(new Dimension(100, 26));
+        okB.setMinimumSize(new Dimension(100, 26));
+        okB.setPreferredSize(new Dimension(100, 26));
+        okB.setText("Ok");
+        okB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                okB_actionPerformed(e);
+            }
+        });
+        this.getRootPane().setDefaultButton(okB);
+        buttonsPanel.setLayout(flowLayout1);
+        flowLayout1.setAlignment(FlowLayout.RIGHT);
+        panel1.setBorder(border1);
+        headerPanel.setBackground(Color.WHITE);
+        headerPanel.setBorder(border4);
+        headerPanel.setMinimumSize(new Dimension(159, 52));
+        headerPanel.setPreferredSize(new Dimension(159, 52));
+        headerPanel.setLayout(flowLayout7);
+        header.setFont(new java.awt.Font("Dialog", 0, 20));
+        header.setForeground(new Color(0, 0, 124));
+        header.setText(Local.getString("Table properties"));
+        header.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/tablebig.png")));
+        flowLayout7.setAlignment(FlowLayout.LEFT);
+        flowLayout7.setHgap(2);
+        flowLayout7.setVgap(2);
+        jLabel4.setMaximumSize(new Dimension(70, 16));
+        jLabel4.setMinimumSize(new Dimension(50, 16));
+        jLabel4.setPreferredSize(new Dimension(70, 16));
+        jLabel4.setText(Local.getString("Width"));
+        flowLayout5.setAlignment(FlowLayout.LEFT);
+        tdHeightField.setMinimumSize(new Dimension(30, 25));
+        tdHeightField.setPreferredSize(new Dimension(50, 25));
+        flowLayout2.setAlignment(FlowLayout.LEFT);
+        jLabel7.setMaximumSize(new Dimension(70, 16));
+        jLabel7.setMinimumSize(new Dimension(40, 16));
+        jLabel7.setPreferredSize(new Dimension(70, 16));
+        jLabel7.setText(Local.getString("Row span"));
+        flowLayout6.setAlignment(FlowLayout.LEFT);
+        jPanel7.setLayout(flowLayout6);
+        tdPanel.setLayout(gridLayout2);
+        tdPanel.setBorder(border2);
+        tdWidthField.setPreferredSize(new Dimension(50, 25));
+        tdWidthField.setMinimumSize(new Dimension(30, 25));
+        jPanel6.setLayout(flowLayout5);
+        tdAlignCB.setBackground(new Color(230, 230, 230));
+        tdAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        tdAlignCB.setPreferredSize(new Dimension(63, 25));
+        jLabel6.setText(Local.getString("Col span"));
+        jLabel6.setPreferredSize(new Dimension(70, 16));
+        jLabel6.setMinimumSize(new Dimension(50, 16));
+        jLabel6.setMaximumSize(new Dimension(70, 16));
+        gridLayout2.setColumns(1);
+        gridLayout2.setRows(4);
+        jPanel5.setLayout(flowLayout2);
+        jLabel9.setMaximumSize(new Dimension(70, 16));
+        jLabel9.setMinimumSize(new Dimension(40, 16));
+        jLabel9.setPreferredSize(new Dimension(70, 16));
+        jLabel9.setText(Local.getString("Vert. align"));
+        jLabel5.setMaximumSize(new Dimension(70, 16));
+        jLabel5.setMinimumSize(new Dimension(40, 16));
+        jLabel5.setPreferredSize(new Dimension(70, 16));
+        jLabel5.setText(Local.getString("Height"));
+        trPanel.setLayout(gridLayout4);
+        trPanel.setBorder(border2);
+        gridLayout4.setColumns(1);
+        gridLayout4.setRows(2);
+        jLabel20.setText(Local.getString("Align"));
+        jLabel20.setPreferredSize(new Dimension(70, 16));
+        jLabel20.setMinimumSize(new Dimension(50, 16));
+        jLabel20.setMaximumSize(new Dimension(70, 16));
+        tdValignCB.setPreferredSize(new Dimension(63, 25));
+        tdValignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        tdValignCB.setBackground(new Color(230, 230, 230));
+        flowLayout12.setAlignment(FlowLayout.LEFT);
+        tdBgcolorField.setPreferredSize(new Dimension(70, 25));
+        tdBgcolorField.setMinimumSize(new Dimension(60, 25));
+        jPanel14.setLayout(flowLayout12);
+        jLabel21.setText(Local.getString("Fill color"));
+        jLabel21.setPreferredSize(new Dimension(70, 16));
+        jLabel21.setMinimumSize(new Dimension(50, 16));
+        jLabel21.setMaximumSize(new Dimension(70, 16));
+        tdBgcolorB.setMinimumSize(new Dimension(25, 25));
+        tdBgcolorB.setPreferredSize(new Dimension(25, 25));
+        tdBgcolorB.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/color.png")));
+        tdBgcolorB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                tdBgcolorB_actionPerformed(e);
+            }
+        });
+        tdNowrapChB.setText(Local.getString("No text wrapping"));
+        trAlignCB.setPreferredSize(new Dimension(100, 25));
+        trAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        trAlignCB.setBackground(new Color(230, 230, 230));
+        trValignCB.setBackground(new Color(230, 230, 230));
+        trValignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        trValignCB.setPreferredSize(new Dimension(100, 25));
+        jLabel22.setMaximumSize(new Dimension(50, 16));
+        jLabel22.setMinimumSize(new Dimension(50, 16));
+        jLabel22.setPreferredSize(new Dimension(50, 16));
+        jLabel22.setText(Local.getString("Align"));
+        flowLayout10.setAlignment(FlowLayout.LEFT);
+        jLabel16.setText(Local.getString("Vert. align"));
+        jLabel16.setPreferredSize(new Dimension(80, 16));
+        jLabel16.setMinimumSize(new Dimension(40, 16));
+        jLabel16.setMaximumSize(new Dimension(80, 16));
+        jPanel11.setLayout(flowLayout10);
+        trBgcolorField.setMinimumSize(new Dimension(60, 25));
+        trBgcolorField.setPreferredSize(new Dimension(70, 25));
+        jLabel23.setMaximumSize(new Dimension(70, 16));
+        jLabel23.setMinimumSize(new Dimension(50, 16));
+        jLabel23.setPreferredSize(new Dimension(50, 16));
+        jLabel23.setText(Local.getString("Fill color"));
+        jPanel15.setLayout(flowLayout13);
+        flowLayout13.setAlignment(FlowLayout.LEFT);
+        trBgcolorB.setMinimumSize(new Dimension(25, 25));
+        trBgcolorB.setPreferredSize(new Dimension(25, 25));
+        trBgcolorB.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/color.png")));
+        trBgcolorB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                trBgcolorB_actionPerformed(e);
+            }
+        });
+        tdColspan.setBorder(border5);
+        tdColspan.setPreferredSize(new Dimension(50, 24));
+        tdRowspan.setBorder(border5);
+        tdRowspan.setPreferredSize(new Dimension(50, 24));
+        jLabel8.setText(Local.getString("Width"));
+        jLabel8.setPreferredSize(new Dimension(70, 16));
+        jLabel8.setMinimumSize(new Dimension(60, 16));
+        jLabel8.setMaximumSize(new Dimension(70, 16));
+        jLabel12.setText(Local.getString("Border"));
+        jLabel12.setPreferredSize(new Dimension(70, 16));
+        jLabel12.setMinimumSize(new Dimension(60, 16));
+        jLabel12.setMaximumSize(new Dimension(70, 16));
+        cellpadding.setBorder(border5);
+        cellpadding.setPreferredSize(new Dimension(50, 24));
+        flowLayout8.setAlignment(FlowLayout.LEFT);
+        flowLayout4.setAlignment(FlowLayout.LEFT);
+        jLabel24.setMaximumSize(new Dimension(70, 16));
+        jLabel24.setMinimumSize(new Dimension(60, 16));
+        jLabel24.setPreferredSize(new Dimension(70, 16));
+        jLabel24.setText(Local.getString("Align"));
+        tablePanel.setBorder(border2);
+        tablePanel.setLayout(gridLayout3);
+        gridLayout3.setColumns(1);
+        gridLayout3.setRows(4);
+        border.setBorder(border5);
+        border.setPreferredSize(new Dimension(50, 24));
+        jPanel10.setLayout(flowLayout4);
+        jPanel12.setLayout(flowLayout11);
+        vAlignCB.setPreferredSize(new Dimension(63, 25));
+        vAlignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        vAlignCB.setBackground(new Color(230, 230, 230));
+        bgcolorField.setPreferredSize(new Dimension(70, 25));
+        bgcolorField.setMinimumSize(new Dimension(60, 25));
+        heightField.setMinimumSize(new Dimension(30, 25));
+        heightField.setPreferredSize(new Dimension(50, 25));
+        jLabel13.setMaximumSize(new Dimension(70, 16));
+        jLabel13.setMinimumSize(new Dimension(40, 16));
+        jLabel13.setPreferredSize(new Dimension(70, 16));
+        jLabel13.setText(Local.getString("Cell spacing"));
+        cellspacing.setBorder(border5);
+        cellspacing.setPreferredSize(new Dimension(50, 24));
+        jLabel17.setMaximumSize(new Dimension(70, 16));
+        jLabel17.setMinimumSize(new Dimension(40, 16));
+        jLabel17.setPreferredSize(new Dimension(70, 16));
+        jLabel17.setText(Local.getString("Vert. align"));
+        jLabel25.setMaximumSize(new Dimension(70, 16));
+        jLabel25.setMinimumSize(new Dimension(70, 16));
+        jLabel25.setPreferredSize(new Dimension(70, 16));
+        jLabel25.setText(Local.getString("Fill color"));
+        bgColorB.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(ActionEvent e) {
+                bgColorB_actionPerformed(e);
+            }
+        });
+        bgColorB.setIcon(new ImageIcon(net.sf.memoranda.ui.htmleditor.ImageDialog.class.getResource("resources/icons/color.png")));
+        bgColorB.setPreferredSize(new Dimension(25, 25));
+        bgColorB.setMinimumSize(new Dimension(25, 25));
+        widthField.setPreferredSize(new Dimension(50, 25));
+        widthField.setMinimumSize(new Dimension(30, 25));
+        flowLayout11.setAlignment(FlowLayout.LEFT);
+        jPanel13.setLayout(flowLayout8);
+        alignCB.setBackground(new Color(230, 230, 230));
+        alignCB.setFont(new java.awt.Font("Dialog", 1, 10));
+        alignCB.setPreferredSize(new Dimension(63, 25));
+        jLabel14.setText(Local.getString("Cell padding"));
+        jLabel14.setPreferredSize(new Dimension(70, 16));
+        jLabel14.setMinimumSize(new Dimension(60, 16));
+        jLabel14.setMaximumSize(new Dimension(70, 16));
+        jPanel9.setLayout(flowLayout9);
+        flowLayout9.setAlignment(FlowLayout.LEFT);
+        jLabel15.setMaximumSize(new Dimension(70, 16));
+        jLabel15.setMinimumSize(new Dimension(40, 16));
+        jLabel15.setPreferredSize(new Dimension(70, 16));
+        jLabel15.setText(Local.getString("Height"));
+        jPanel14.add(jLabel21, null);
+        jPanel14.add(tdBgcolorField, null);
+        jPanel14.add(tdBgcolorB, null);
+        jPanel14.add(component11, null);
+        jPanel14.add(tdNowrapChB, null);
+        getContentPane().add(panel1);
+        panel1.add(buttonsPanel, BorderLayout.SOUTH);
+        buttonsPanel.add(okB, null);
+        buttonsPanel.add(cancelB, null);
+        panel1.add(jTabbedPane1, BorderLayout.NORTH);
+        this.getContentPane().add(headerPanel, BorderLayout.NORTH);
+        headerPanel.add(header, null);
 
-    jPanel5.add(jLabel4, null);
-    jPanel5.add(tdWidthField, null);
-    jPanel5.add(component1, null);
-    jPanel5.add(jLabel5, null);
-    jPanel5.add(tdHeightField, null);
-    tdPanel.add(jPanel5, null);
-    tdPanel.add(jPanel6, null);
-    tdPanel.add(jPanel7, null);
-    jPanel6.add(jLabel6, null);
-    jPanel6.add(tdColspan, null);
-    jPanel6.add(component2, null);
-    jPanel6.add(jLabel7, null);
-    jPanel7.add(jLabel20, null);
-    jPanel7.add(tdAlignCB, null);
-    jPanel7.add(jLabel9, null);
-    jPanel7.add(tdValignCB, null);
-    jTabbedPane1.add(tdPanel,  Local.getString("Table cell"));
-    jTabbedPane1.add(trPanel,  Local.getString("Table row"));
-    tdPanel.add(jPanel14, null);
-    jPanel11.add(jLabel22, null);
-    jPanel11.add(trAlignCB, null);
-    jPanel11.add(component12, null);
-    jPanel11.add(jLabel16, null);
-    jPanel11.add(trValignCB, null);
-    jPanel11.add(component7, null);
-    jPanel15.add(jLabel23, null);
-    jPanel15.add(trBgcolorField, null);
-    jPanel15.add(trBgcolorB, null);
-    trPanel.add(jPanel11, null);
-    trPanel.add(jPanel15, null);
-    jPanel6.add(tdRowspan, null);
-    Util.setBgcolorField(tdBgcolorField);
-    tablePanel.add(jPanel10, null);
-    jPanel10.add(jLabel8, null);
-    jPanel10.add(widthField, null);
-    jPanel10.add(component5, null);
-    jPanel10.add(jLabel15, null);
-    jPanel10.add(heightField, null);
-    tablePanel.add(jPanel13, null);
-    jPanel13.add(jLabel14, null);
-    jPanel13.add(cellpadding, null);
-    jPanel13.add(component3, null);
-    jPanel13.add(jLabel13, null);
-    jPanel13.add(cellspacing, null);
-    tablePanel.add(jPanel9, null);
-    jPanel9.add(jLabel12, null);
-    jPanel9.add(border, null);
-    jPanel9.add(component6, null);
-    jPanel9.add(jLabel25, null);
-    jPanel9.add(bgcolorField, null);
-    jPanel9.add(bgColorB, null);
-    tablePanel.add(jPanel12, null);
-    jPanel12.add(jLabel24, null);
-    jPanel12.add(alignCB, null);
-    jPanel12.add(jLabel17, null);
-    jPanel12.add(vAlignCB, null);
-    jTabbedPane1.add(tablePanel,  Local.getString("Table"));
-  }
+        jPanel5.add(jLabel4, null);
+        jPanel5.add(tdWidthField, null);
+        jPanel5.add(component1, null);
+        jPanel5.add(jLabel5, null);
+        jPanel5.add(tdHeightField, null);
+        tdPanel.add(jPanel5, null);
+        tdPanel.add(jPanel6, null);
+        tdPanel.add(jPanel7, null);
+        jPanel6.add(jLabel6, null);
+        jPanel6.add(tdColspan, null);
+        jPanel6.add(component2, null);
+        jPanel6.add(jLabel7, null);
+        jPanel7.add(jLabel20, null);
+        jPanel7.add(tdAlignCB, null);
+        jPanel7.add(jLabel9, null);
+        jPanel7.add(tdValignCB, null);
+        jTabbedPane1.add(tdPanel, Local.getString("Table cell"));
+        jTabbedPane1.add(trPanel, Local.getString("Table row"));
+        tdPanel.add(jPanel14, null);
+        jPanel11.add(jLabel22, null);
+        jPanel11.add(trAlignCB, null);
+        jPanel11.add(component12, null);
+        jPanel11.add(jLabel16, null);
+        jPanel11.add(trValignCB, null);
+        jPanel11.add(component7, null);
+        jPanel15.add(jLabel23, null);
+        jPanel15.add(trBgcolorField, null);
+        jPanel15.add(trBgcolorB, null);
+        trPanel.add(jPanel11, null);
+        trPanel.add(jPanel15, null);
+        jPanel6.add(tdRowspan, null);
+        Util.setBgcolorField(tdBgcolorField);
+        tablePanel.add(jPanel10, null);
+        jPanel10.add(jLabel8, null);
+        jPanel10.add(widthField, null);
+        jPanel10.add(component5, null);
+        jPanel10.add(jLabel15, null);
+        jPanel10.add(heightField, null);
+        tablePanel.add(jPanel13, null);
+        jPanel13.add(jLabel14, null);
+        jPanel13.add(cellpadding, null);
+        jPanel13.add(component3, null);
+        jPanel13.add(jLabel13, null);
+        jPanel13.add(cellspacing, null);
+        tablePanel.add(jPanel9, null);
+        jPanel9.add(jLabel12, null);
+        jPanel9.add(border, null);
+        jPanel9.add(component6, null);
+        jPanel9.add(jLabel25, null);
+        jPanel9.add(bgcolorField, null);
+        jPanel9.add(bgColorB, null);
+        tablePanel.add(jPanel12, null);
+        jPanel12.add(jLabel24, null);
+        jPanel12.add(alignCB, null);
+        jPanel12.add(jLabel17, null);
+        jPanel12.add(vAlignCB, null);
+        jTabbedPane1.add(tablePanel, Local.getString("Table"));
+    }
 
-  void okB_actionPerformed(ActionEvent e) {
-    this.dispose();
-  }
+    void okB_actionPerformed(ActionEvent e) {
+        this.dispose();
+    }
 
-  void cancelB_actionPerformed(ActionEvent e) {
-    CANCELLED = true;
-    this.dispose();
-  }
+    void cancelB_actionPerformed(ActionEvent e) {
+        CANCELLED = true;
+        this.dispose();
+    }
 
 
-  void tdBgcolorB_actionPerformed(ActionEvent e) {
-     Color c = JColorChooser.showDialog(this, Local.getString("Table cell background color"), Util.decodeColor(tdBgcolorField.getText()));
-     if (c == null) return;
-     tdBgcolorField.setText(Util.encodeColor(c));
-     Util.setBgcolorField(tdBgcolorField);
-  }
+    void tdBgcolorB_actionPerformed(ActionEvent e) {
+        Color c = JColorChooser.showDialog(this, Local.getString("Table cell background color"), Util.decodeColor(tdBgcolorField.getText()));
+        if (c == null) {
+            return;
+        }
+        tdBgcolorField.setText(Util.encodeColor(c));
+        Util.setBgcolorField(tdBgcolorField);
+    }
 
-  void trBgcolorB_actionPerformed(ActionEvent e) {
-     Color c = JColorChooser.showDialog(this, Local.getString("Table row background color"), Util.decodeColor(trBgcolorField.getText()));
-     if (c == null) return;
-     trBgcolorField.setText(Util.encodeColor(c));
-     Util.setBgcolorField(trBgcolorField);
-  }
+    void trBgcolorB_actionPerformed(ActionEvent e) {
+        Color c = JColorChooser.showDialog(this, Local.getString("Table row background color"), Util.decodeColor(trBgcolorField.getText()));
+        if (c == null) {
+            return;
+        }
+        trBgcolorField.setText(Util.encodeColor(c));
+        Util.setBgcolorField(trBgcolorField);
+    }
 
-  void bgColorB_actionPerformed(ActionEvent e) {
-    Color c = JColorChooser.showDialog(this, Local.getString("Table background color"), Util.decodeColor(bgcolorField.getText()));
-     if (c == null) return;
-     bgcolorField.setText(Util.encodeColor(c));
-     Util.setBgcolorField(bgcolorField);
-  }
+    void bgColorB_actionPerformed(ActionEvent e) {
+        Color c = JColorChooser.showDialog(this, Local.getString("Table background color"), Util.decodeColor(bgcolorField.getText()));
+        if (c == null) {
+            return;
+        }
+        bgcolorField.setText(Util.encodeColor(c));
+        Util.setBgcolorField(bgcolorField);
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/htmleditor/Util.java b/src/net/sf/memoranda/ui/htmleditor/Util.java
index 4f76933..ff04320 100755
--- a/src/net/sf/memoranda/ui/htmleditor/Util.java
+++ b/src/net/sf/memoranda/ui/htmleditor/Util.java
@@ -1,22 +1,23 @@
 package net.sf.memoranda.ui.htmleditor;
 
-import java.awt.Color;
+import javax.swing.*;
+import java.awt.*;
 import java.util.Hashtable;
 
-import javax.swing.JTextField;
-
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 public class Util {
-    
+
     public static Hashtable HTMLColors;
+
     static {
         HTMLColors = new Hashtable();
         HTMLColors.put("red", Color.red);
@@ -33,12 +34,12 @@ public class Util {
         HTMLColors.put("orange", Color.orange);
         HTMLColors.put("pink", Color.pink);
     }
-        
-        
-        
+
+
     public static Color getColorForName(String name, Color defaultColor) {
-        if (HTMLColors.contains(name.toLowerCase()))
-            return (Color)HTMLColors.get(name.toLowerCase());
+        if (HTMLColors.contains(name.toLowerCase())) {
+            return (Color) HTMLColors.get(name.toLowerCase());
+        }
         return defaultColor;
     }
 
@@ -46,22 +47,23 @@ public class Util {
         String colorVal = "";
         if (color.length() > 0) {
             colorVal = color.trim();
-            if (colorVal.startsWith("#"))
-                colorVal = colorVal.substring(1);            
+            if (colorVal.startsWith("#")) {
+                colorVal = colorVal.substring(1);
+            }
             try {
                 colorVal = new Integer(Integer.parseInt(colorVal, 16)).toString();
                 return Color.decode(colorVal.toLowerCase());
+            } catch (Exception ex) {
+                ex.printStackTrace();
             }
-            catch (Exception ex) {
-		    ex.printStackTrace();
-	    }
+        } else {
+            return defaultColor;
         }
-        else return defaultColor;
         return getColorForName(color, defaultColor);
     }
-    
-    public static String encodeColor(Color color) {        
-        return "#"+Integer.toHexString(color.getRGB()-0xFF000000).toUpperCase();  
+
+    public static String encodeColor(Color color) {
+        return "#" + Integer.toHexString(color.getRGB() - 0xFF000000).toUpperCase();
     }
 
     public static Color decodeColor(String color) {
diff --git a/src/net/sf/memoranda/ui/htmleditor/filechooser/ImageFilter.java b/src/net/sf/memoranda/ui/htmleditor/filechooser/ImageFilter.java
index d287a61..bea1ddb 100755
--- a/src/net/sf/memoranda/ui/htmleditor/filechooser/ImageFilter.java
+++ b/src/net/sf/memoranda/ui/htmleditor/filechooser/ImageFilter.java
@@ -1,8 +1,7 @@
 package net.sf.memoranda.ui.htmleditor.filechooser;
 
-import java.io.File;
-
 import javax.swing.filechooser.FileFilter;
+import java.io.File;
 
 public class ImageFilter extends FileFilter {
 
@@ -13,16 +12,16 @@ public class ImageFilter extends FileFilter {
         }
 
         String extension = Utils.getExtension(f);
-	if (extension != null) {
+        if (extension != null) {
             if (extension.equals(Utils.png) ||
-                extension.equals(Utils.gif) ||
-                extension.equals(Utils.jpeg) ||
-                extension.equals(Utils.jpg)) {
-                    return true;
+                    extension.equals(Utils.gif) ||
+                    extension.equals(Utils.jpeg) ||
+                    extension.equals(Utils.jpg)) {
+                return true;
             } else {
                 return false;
             }
-    	}
+        }
 
         return false;
     }
diff --git a/src/net/sf/memoranda/ui/htmleditor/filechooser/ImagePreview.java b/src/net/sf/memoranda/ui/htmleditor/filechooser/ImagePreview.java
index 851f4be..108b7d8 100755
--- a/src/net/sf/memoranda/ui/htmleditor/filechooser/ImagePreview.java
+++ b/src/net/sf/memoranda/ui/htmleditor/filechooser/ImagePreview.java
@@ -1,29 +1,23 @@
 package net.sf.memoranda.ui.htmleditor.filechooser;
 
-import java.awt.Dimension;
-import java.awt.Graphics;
-import java.awt.Image;
+import net.sf.memoranda.ui.htmleditor.util.Local;
+
+import javax.swing.*;
+import javax.swing.border.TitledBorder;
+import java.awt.*;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 import java.io.File;
 
-import javax.swing.BorderFactory;
-import javax.swing.ImageIcon;
-import javax.swing.JComponent;
-import javax.swing.JFileChooser;
-import javax.swing.border.TitledBorder;
-
-import net.sf.memoranda.ui.htmleditor.util.Local;
-
 public class ImagePreview extends JComponent
-                          implements PropertyChangeListener {
+        implements PropertyChangeListener {
     ImageIcon thumbnail = null;
     File file = null;
 
     public ImagePreview(JFileChooser fc) {
         setPreferredSize(new Dimension(100, 50));
-        setBorder(new TitledBorder(BorderFactory.createEtchedBorder(), 
-        Local.getString("Preview"), TitledBorder.CENTER, TitledBorder.ABOVE_TOP));
+        setBorder(new TitledBorder(BorderFactory.createEtchedBorder(),
+                Local.getString("Preview"), TitledBorder.CENTER, TitledBorder.ABOVE_TOP));
         fc.addPropertyChangeListener(this);
     }
 
@@ -35,8 +29,8 @@ public class ImagePreview extends JComponent
         ImageIcon tmpIcon = new ImageIcon(file.getPath());
         if (tmpIcon.getIconWidth() > 90) {
             thumbnail = new ImageIcon(tmpIcon.getImage().
-                                 getScaledInstance(90, -1,
-                                                   Image.SCALE_DEFAULT));
+                    getScaledInstance(90, -1,
+                            Image.SCALE_DEFAULT));
         } else {
             thumbnail = tmpIcon;
         }
@@ -58,8 +52,8 @@ public class ImagePreview extends JComponent
             loadImage();
         }
         if (thumbnail != null) {
-            int x = getWidth()/2 - thumbnail.getIconWidth()/2;
-            int y = getHeight()/2 - thumbnail.getIconHeight()/2;
+            int x = getWidth() / 2 - thumbnail.getIconWidth() / 2;
+            int y = getHeight() / 2 - thumbnail.getIconHeight() / 2;
 
             if (y < 0) {
                 y = 0;
diff --git a/src/net/sf/memoranda/ui/htmleditor/filechooser/Utils.java b/src/net/sf/memoranda/ui/htmleditor/filechooser/Utils.java
index b3011be..b992521 100755
--- a/src/net/sf/memoranda/ui/htmleditor/filechooser/Utils.java
+++ b/src/net/sf/memoranda/ui/htmleditor/filechooser/Utils.java
@@ -17,8 +17,8 @@ public class Utils {
         String s = f.getName();
         int i = s.lastIndexOf('.');
 
-        if (i > 0 &&  i < s.length() - 1) {
-            ext = s.substring(i+1).toLowerCase();
+        if (i > 0 && i < s.length() - 1) {
+            ext = s.substring(i + 1).toLowerCase();
         }
         return ext;
     }
diff --git a/src/net/sf/memoranda/ui/htmleditor/util/Local.java b/src/net/sf/memoranda/ui/htmleditor/util/Local.java
index 0a8af02..90e64b7 100755
--- a/src/net/sf/memoranda/ui/htmleditor/util/Local.java
+++ b/src/net/sf/memoranda/ui/htmleditor/util/Local.java
@@ -2,35 +2,35 @@
  * Local.java
  * Created on 05.09.2003, 16:43:39 Alex
  * Package: org.openmechanics.htmleditor
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 OpenMechanics.org
  */
 package net.sf.memoranda.ui.htmleditor.util;
+
 import java.util.Hashtable;
 
 /**
- * 
+ *
  */
 public class Local {
 
-   static Hashtable messages = null;
-   
-   public static void setMessages(Hashtable msgs) {
+    static Hashtable messages = null;
+
+    public static void setMessages(Hashtable msgs) {
         messages = msgs;
-   }  
-   
-   public static String getString(String key) {
-        if (messages == null){
+    }
+
+    public static String getString(String key) {
+        if (messages == null) {
             return key;
         }
         String msg = (String) messages.get(key.trim().toUpperCase());
-        if ((msg != null) && (msg.length() > 0)){
+        if ((msg != null) && (msg.length() > 0)) {
             return msg;
-        }
-        else {
+        } else {
             return key;
         }
-   }
+    }
 
 }
diff --git a/src/net/sf/memoranda/ui/table/TableMap.java b/src/net/sf/memoranda/ui/table/TableMap.java
index b615249..65c9d89 100755
--- a/src/net/sf/memoranda/ui/table/TableMap.java
+++ b/src/net/sf/memoranda/ui/table/TableMap.java
@@ -1,16 +1,17 @@
 package net.sf.memoranda.ui.table;
 
-/** 
+/**
  * In a chain of data manipulators some behaviour is common. TableMap
  * provides most of this behavour and can be subclassed by filters
- * that only need to override a handful of specific methods. TableMap 
+ * that only need to override a handful of specific methods. TableMap
  * implements TableModel by routing all requests to its model, and
- * TableModelListener by routing all events to its listeners. Inserting 
- * a TableMap which has not been subclassed into a chain of table filters 
+ * TableModelListener by routing all events to its listeners. Inserting
+ * a TableMap which has not been subclassed into a chain of table filters
  * should have no effect.
  *
  * @version 1.4 12/17/97
- * @author Philip Milne */
+ * @author Philip Milne
+ */
 
 import javax.swing.event.TableModelEvent;
 import javax.swing.event.TableModelListener;
@@ -18,53 +19,54 @@ import javax.swing.table.AbstractTableModel;
 import javax.swing.table.TableModel;
 
 /*$Id: TableMap.java,v 1.3 2004/01/30 12:17:42 alexeya Exp $*/
-public class TableMap extends AbstractTableModel 
-                      implements TableModelListener {
-    protected TableModel model; 
+public class TableMap extends AbstractTableModel
+        implements TableModelListener {
+    protected TableModel model;
 
     public TableModel getModel() {
         return model;
     }
 
     public void setModel(TableModel model) {
-        this.model = model; 
-        model.addTableModelListener(this); 
+        this.model = model;
+        model.addTableModelListener(this);
     }
 
     // By default, implement TableModel by forwarding all messages 
     // to the model. 
 
     public Object getValueAt(int aRow, int aColumn) {
-        return model.getValueAt(aRow, aColumn); 
+        return model.getValueAt(aRow, aColumn);
     }
-        
+
     public void setValueAt(Object aValue, int aRow, int aColumn) {
-        model.setValueAt(aValue, aRow, aColumn); 
+        model.setValueAt(aValue, aRow, aColumn);
     }
 
     public int getRowCount() {
-        return (model == null) ? 0 : model.getRowCount(); 
+        return (model == null) ? 0 : model.getRowCount();
     }
 
     public int getColumnCount() {
-        return (model == null) ? 0 : model.getColumnCount(); 
+        return (model == null) ? 0 : model.getColumnCount();
     }
-        
+
     public String getColumnName(int aColumn) {
-        return model.getColumnName(aColumn); 
+        return model.getColumnName(aColumn);
     }
 
-    
-public Class getColumnClass(int aColumn) {
-        return model.getColumnClass(aColumn); 
+
+    public Class getColumnClass(int aColumn) {
+        return model.getColumnClass(aColumn);
     }
-        
-    public boolean isCellEditable(int row, int column) { 
-         return model.isCellEditable(row, column); 
+
+    public boolean isCellEditable(int row, int column) {
+        return model.isCellEditable(row, column);
     }
-//
-// Implementation of the TableModelListener interface, 
-//
+
+    //
+    // Implementation of the TableModelListener interface,
+    //
     // By default forward all events to all the listeners. 
     public void tableChanged(TableModelEvent e) {
         fireTableChanged(e);
diff --git a/src/net/sf/memoranda/ui/table/TableSorter.java b/src/net/sf/memoranda/ui/table/TableSorter.java
index e2a90cb..c028a80 100755
--- a/src/net/sf/memoranda/ui/table/TableSorter.java
+++ b/src/net/sf/memoranda/ui/table/TableSorter.java
@@ -1,41 +1,41 @@
 package net.sf.memoranda.ui.table;
 
 /**
- * A sorter for TableModels. The sorter has a model (conforming to TableModel) 
- * and itself implements TableModel. TableSorter does not store or copy 
- * the data in the TableModel, instead it maintains an array of 
- * integers which it keeps the same size as the number of rows in its 
- * model. When the model changes it notifies the sorter that something 
- * has changed eg. "rowsAdded" so that its internal array of integers 
- * can be reallocated. As requests are made of the sorter (like 
- * getValueAt(row, col) it redirects them to its model via the mapping 
- * array. That way the TableSorter appears to hold another copy of the table 
- * with the rows in a different order. The sorting algorthm used is stable 
- * which means that it does not move around rows when its comparison 
- * function returns 0 to denote that they are equivalent. 
+ * A sorter for TableModels. The sorter has a model (conforming to TableModel)
+ * and itself implements TableModel. TableSorter does not store or copy
+ * the data in the TableModel, instead it maintains an array of
+ * integers which it keeps the same size as the number of rows in its
+ * model. When the model changes it notifies the sorter that something
+ * has changed eg. "rowsAdded" so that its internal array of integers
+ * can be reallocated. As requests are made of the sorter (like
+ * getValueAt(row, col) it redirects them to its model via the mapping
+ * array. That way the TableSorter appears to hold another copy of the table
+ * with the rows in a different order. The sorting algorthm used is stable
+ * which means that it does not move around rows when its comparison
+ * function returns 0 to denote that they are equivalent.
  *
  * @version 1.5 12/17/97
  * @author Philip Milne
  */
 
-import java.awt.event.MouseAdapter;
-import java.awt.event.MouseEvent;
-import java.util.Date;
-import java.util.Vector;
-import java.util.Hashtable;
+import net.sf.memoranda.util.Local;
 
-import javax.swing.JTable;
+import javax.swing.*;
 import javax.swing.event.TableModelEvent;
 import javax.swing.table.JTableHeader;
 import javax.swing.table.TableColumnModel;
 import javax.swing.table.TableModel;
-import net.sf.memoranda.util.Local;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.util.Date;
+import java.util.Hashtable;
+import java.util.Vector;
 
 /*$Id: TableSorter.java,v 1.7 2004/10/07 08:52:32 ivanrise Exp $*/
 public class TableSorter extends TableMap {
-    int             indexes[];
-    Vector          sortingColumns = new Vector();
-    boolean         ascending = true;
+    int indexes[];
+    Vector sortingColumns = new Vector();
+    boolean ascending = true;
     int compares;
     int sortBy = 0;
 
@@ -48,8 +48,8 @@ public class TableSorter extends TableMap {
     }
 
     public void setModel(TableModel model) {
-        super.setModel(model); 
-        reallocateIndexes(); 
+        super.setModel(model);
+        reallocateIndexes();
     }
 
     public int compareRowsByColumn(int row1, int row2, int column) {
@@ -59,15 +59,15 @@ public class TableSorter extends TableMap {
         // Check for nulls.
 
         Object o1 = data.getValueAt(row1, column);
-        Object o2 = data.getValueAt(row2, column); 
+        Object o2 = data.getValueAt(row2, column);
 
         // If both values are null, return 0.
         if (o1 == null && o2 == null) {
-            return 0; 
+            return 0;
         } else if (o1 == null) { // Define null less than everything. 
-            return -1; 
-        } else if (o2 == null) { 
-            return 1; 
+            return -1;
+        } else if (o2 == null) {
+            return 1;
         }
 
         /*
@@ -78,11 +78,11 @@ public class TableSorter extends TableMap {
          * Number might want to do this to save space and avoid
          * unnecessary heap allocation.
          */
-         
-         if (type.getSuperclass() == java.lang.Integer.class) {
-            Integer n1 = (Integer)data.getValueAt(row1, column);
+
+        if (type.getSuperclass() == java.lang.Integer.class) {
+            Integer n1 = (Integer) data.getValueAt(row1, column);
             int i1 = n1.intValue();
-            Integer n2 = (Integer)data.getValueAt(row2, column);
+            Integer n2 = (Integer) data.getValueAt(row2, column);
             int i2 = n2.intValue();
 
             if (i1 < i2) {
@@ -92,12 +92,10 @@ public class TableSorter extends TableMap {
             } else {
                 return 0;
             }
-         }
-
-        else if (type.getSuperclass() == java.lang.Number.class) {
-            Number n1 = (Number)data.getValueAt(row1, column);
+        } else if (type.getSuperclass() == java.lang.Number.class) {
+            Number n1 = (Number) data.getValueAt(row1, column);
             double d1 = n1.doubleValue();
-            Number n2 = (Number)data.getValueAt(row2, column);
+            Number n2 = (Number) data.getValueAt(row2, column);
             double d2 = n2.doubleValue();
 
             if (d1 < d2) {
@@ -108,9 +106,9 @@ public class TableSorter extends TableMap {
                 return 0;
             }
         } else if (type == java.util.Date.class) {
-            Date d1 = (Date)data.getValueAt(row1, column);
+            Date d1 = (Date) data.getValueAt(row1, column);
             long n1 = d1.getTime();
-            Date d2 = (Date)data.getValueAt(row2, column);
+            Date d2 = (Date) data.getValueAt(row2, column);
             long n2 = d2.getTime();
 
             if (n1 < n2) {
@@ -121,51 +119,53 @@ public class TableSorter extends TableMap {
                 return 0;
             }
         } else if (type == String.class) {
-	    int result;
-	    if(data.getColumnName(column).equals(Local.getString("Priority"))) {
-		    Hashtable priority = new Hashtable();
-		    priority.put(Local.getString("Lowest"), new Integer(1));
-		    priority.put(Local.getString("Low"), new Integer(2));
-		    priority.put(Local.getString("Normal"), new Integer(3));
-		    priority.put(Local.getString("High"), new Integer(4));
-		    priority.put(Local.getString("Highest"), new Integer(5));
-	
-		    Integer s1 = (Integer)priority.get((String)data.getValueAt(row1, column));
-		    Integer s2 = (Integer)priority.get((String)data.getValueAt(row2, column));
-		    if (s1==null || s2==null) return 0;
-		    result = s1.compareTo(s2);
-	    }
-	    else if(data.getColumnName(column).equals(Local.getString("Status"))) {
-		    Hashtable priority = new Hashtable();
-		    priority.put(Local.getString("Completed"), new Integer(1));
-		    priority.put(Local.getString("Failed"), new Integer(2));
-		    priority.put(Local.getString("Scheduled"), new Integer(3));
-		    priority.put(Local.getString("Active"), new Integer(4));
-		    priority.put(Local.getString("Deadline"), new Integer(5));
-	
-		    Integer s1 = (Integer)priority.get((String)data.getValueAt(row1, column));
-		    Integer s2 = (Integer)priority.get((String)data.getValueAt(row2, column));
-		    if (s1==null || s2==null) return 0;
-		    result = s1.compareTo(s2);
-	    }		
-	    else {
-		    String s1 = (String)data.getValueAt(row1, column);
-		    String s2    = (String)data.getValueAt(row2, column);
-		    result = s1.compareTo(s2);
-	    }
+            int result;
+            if (data.getColumnName(column).equals(Local.getString("Priority"))) {
+                Hashtable priority = new Hashtable();
+                priority.put(Local.getString("Lowest"), new Integer(1));
+                priority.put(Local.getString("Low"), new Integer(2));
+                priority.put(Local.getString("Normal"), new Integer(3));
+                priority.put(Local.getString("High"), new Integer(4));
+                priority.put(Local.getString("Highest"), new Integer(5));
+
+                Integer s1 = (Integer) priority.get((String) data.getValueAt(row1, column));
+                Integer s2 = (Integer) priority.get((String) data.getValueAt(row2, column));
+                if (s1 == null || s2 == null) {
+                    return 0;
+                }
+                result = s1.compareTo(s2);
+            } else if (data.getColumnName(column).equals(Local.getString("Status"))) {
+                Hashtable priority = new Hashtable();
+                priority.put(Local.getString("Completed"), new Integer(1));
+                priority.put(Local.getString("Failed"), new Integer(2));
+                priority.put(Local.getString("Scheduled"), new Integer(3));
+                priority.put(Local.getString("Active"), new Integer(4));
+                priority.put(Local.getString("Deadline"), new Integer(5));
+
+                Integer s1 = (Integer) priority.get((String) data.getValueAt(row1, column));
+                Integer s2 = (Integer) priority.get((String) data.getValueAt(row2, column));
+                if (s1 == null || s2 == null) {
+                    return 0;
+                }
+                result = s1.compareTo(s2);
+            } else {
+                String s1 = (String) data.getValueAt(row1, column);
+                String s2 = (String) data.getValueAt(row2, column);
+                result = s1.compareTo(s2);
+            }
 
 
             if (result < 0) {
-              return -1;
+                return -1;
             } else if (result > 0) {
                 return 1;
             } else {
                 return 0;
             }
         } else if (type == Boolean.class) {
-            Boolean bool1 = (Boolean)data.getValueAt(row1, column);
+            Boolean bool1 = (Boolean) data.getValueAt(row1, column);
             boolean b1 = bool1.booleanValue();
-            Boolean bool2 = (Boolean)data.getValueAt(row2, column);
+            Boolean bool2 = (Boolean) data.getValueAt(row2, column);
             boolean b2 = bool2.booleanValue();
 
             if (b1 == b2) {
@@ -187,7 +187,7 @@ public class TableSorter extends TableMap {
             } else if (result > 0) {
                 return 1;
             } else {
-        	return 0;
+                return 0;
             }
         }
     }
@@ -195,7 +195,7 @@ public class TableSorter extends TableMap {
     public int compare(int row1, int row2) {
         compares++;
         for (int level = 0; level < sortingColumns.size(); level++) {
-            Integer column = (Integer)sortingColumns.elementAt(level);
+            Integer column = (Integer) sortingColumns.elementAt(level);
             int result = compareRowsByColumn(row1, row2, column.intValue());
             if (result != 0) {
                 return ascending ? result : -result;
@@ -237,13 +237,13 @@ public class TableSorter extends TableMap {
         compares = 0;
         // n2sort();
         // qsort(0, indexes.length-1);
-        shuttlesort((int[])indexes.clone(), indexes, 0, indexes.length);
+        shuttlesort((int[]) indexes.clone(), indexes, 0, indexes.length);
         //System.out.println("Compares: "+compares);
     }
 
     public void n2sort() {
         for (int i = 0; i < getRowCount(); i++) {
-            for (int j = i+1; j < getRowCount(); j++) {
+            for (int j = i + 1; j < getRowCount(); j++) {
                 if (compare(indexes[i], indexes[j]) == -1) {
                     swap(i, j);
                 }
@@ -262,7 +262,7 @@ public class TableSorter extends TableMap {
         if (high - low < 2) {
             return;
         }
-        int middle = (low + high)/2;
+        int middle = (low + high) / 2;
         shuttlesort(to, from, low, middle);
         shuttlesort(to, from, middle, high);
 
@@ -284,7 +284,7 @@ public class TableSorter extends TableMap {
         find out how the performance drops to Nlog(N) as the initial
         order diminishes - it may drop very quickly.  */
 
-        if (high - low >= 4 && compare(from[middle-1], from[middle]) <= 0) {
+        if (high - low >= 4 && compare(from[middle - 1], from[middle]) <= 0) {
             for (int i = low; i < high; i++) {
                 to[i] = from[i];
             }
@@ -296,8 +296,7 @@ public class TableSorter extends TableMap {
         for (int i = low; i < high; i++) {
             if (q >= high || (p < middle && compare(from[p], from[q]) <= 0)) {
                 to[i] = from[p++];
-            }
-            else {
+            } else {
                 to[i] = from[q++];
             }
         }
@@ -323,8 +322,8 @@ public class TableSorter extends TableMap {
     }
 
     public void sortByColumn(int column) {
-       //sortByColumn(column, true);       
-       sortByColumn(column, ascending);
+        //sortByColumn(column, true);
+        sortByColumn(column, ascending);
     }
 
     public void sortByColumn(int column, boolean ascending) {
@@ -333,13 +332,13 @@ public class TableSorter extends TableMap {
         sortingColumns.removeAllElements();
         sortingColumns.addElement(new Integer(column));
         sort(this);
-        super.tableChanged(new TableModelEvent(this)); 
+        super.tableChanged(new TableModelEvent(this));
     }
-    
+
     public int getSortedBy() {
         return sortBy;
     }
-    
+
     public boolean isAscending() {
         return ascending;
     }
@@ -347,30 +346,32 @@ public class TableSorter extends TableMap {
     // There is no-where else to put this. 
     // Add a mouse listener to the Table to trigger a table sort 
     // when a column heading is clicked in the JTable. 
-    public void addMouseListenerToHeaderInTable(JTable table) { 
-        final TableSorter sorter = this; 
-        final JTable tableView = table; 
-        tableView.setColumnSelectionAllowed(false); 
+    public void addMouseListenerToHeaderInTable(JTable table) {
+        final TableSorter sorter = this;
+        final JTable tableView = table;
+        tableView.setColumnSelectionAllowed(false);
         MouseAdapter listMouseListener = new MouseAdapter() {
             boolean ascending = false;
+
             public void mouseClicked(MouseEvent e) {
                 TableColumnModel columnModel = tableView.getColumnModel();
-                int viewColumn = columnModel.getColumnIndexAtX(e.getX()); 
-                int column = tableView.convertColumnIndexToModel(viewColumn); 
+                int viewColumn = columnModel.getColumnIndexAtX(e.getX());
+                int column = tableView.convertColumnIndexToModel(viewColumn);
                 if (e.getClickCount() == 1 && column != -1) {
                     //System.out.println("Sorting ..."); 
                     //int shiftPressed = e.getModifiers()&InputEvent.SHIFT_MASK; 
                     //boolean ascending = (shiftPressed == 0);
-                    if (column == sortBy)                    
+                    if (column == sortBy) {
                         ascending = !ascending;
-                    else
-                        ascending = true; 
-                    sorter.sortByColumn(column, ascending);   
-                    tableView.getTableHeader().updateUI();                  
+                    } else {
+                        ascending = true;
+                    }
+                    sorter.sortByColumn(column, ascending);
+                    tableView.getTableHeader().updateUI();
                 }
             }
         };
-        JTableHeader th = tableView.getTableHeader(); 
-        th.addMouseListener(listMouseListener); 
+        JTableHeader th = tableView.getTableHeader();
+        th.addMouseListener(listMouseListener);
     }
 }
diff --git a/src/net/sf/memoranda/ui/treetable/AbstractCellEditor.java b/src/net/sf/memoranda/ui/treetable/AbstractCellEditor.java
index 9ad1069..bf1b788 100755
--- a/src/net/sf/memoranda/ui/treetable/AbstractCellEditor.java
+++ b/src/net/sf/memoranda/ui/treetable/AbstractCellEditor.java
@@ -1,29 +1,40 @@
 package net.sf.memoranda.ui.treetable;
 
-import java.awt.Component;
-import java.awt.event.*;
-import java.awt.AWTEvent;
 import javax.swing.*;
-import javax.swing.event.*;
+import javax.swing.event.CellEditorListener;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.EventListenerList;
 import java.util.EventObject;
-import java.io.Serializable;
 
 public class AbstractCellEditor implements CellEditor {
 
     protected EventListenerList listenerList = new EventListenerList();
 
-    public Object getCellEditorValue() { return null; }
-    public boolean isCellEditable(EventObject e) { return true; }
-    public boolean shouldSelectCell(EventObject anEvent) { return false; }
-    public boolean stopCellEditing() { return true; }
-    public void cancelCellEditing() {}
+    public Object getCellEditorValue() {
+        return null;
+    }
+
+    public boolean isCellEditable(EventObject e) {
+        return true;
+    }
+
+    public boolean shouldSelectCell(EventObject anEvent) {
+        return false;
+    }
+
+    public boolean stopCellEditing() {
+        return true;
+    }
+
+    public void cancelCellEditing() {
+    }
 
     public void addCellEditorListener(CellEditorListener l) {
-	listenerList.add(CellEditorListener.class, l);
+        listenerList.add(CellEditorListener.class, l);
     }
 
     public void removeCellEditorListener(CellEditorListener l) {
-	listenerList.remove(CellEditorListener.class, l);
+        listenerList.remove(CellEditorListener.class, l);
     }
 
     /*
@@ -32,15 +43,15 @@ public class AbstractCellEditor implements CellEditor {
      * @see EventListenerList
      */
     protected void fireEditingStopped() {
-	// Guaranteed to return a non-null array
-	Object[] listeners = listenerList.getListenerList();
-	// Process the listeners last to first, notifying
-	// those that are interested in this event
-	for (int i = listeners.length-2; i>=0; i-=2) {
-	    if (listeners[i]==CellEditorListener.class) {
-		((CellEditorListener)listeners[i+1]).editingStopped(new ChangeEvent(this));
-	    }	       
-	}
+        // Guaranteed to return a non-null array
+        Object[] listeners = listenerList.getListenerList();
+        // Process the listeners last to first, notifying
+        // those that are interested in this event
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == CellEditorListener.class) {
+                ((CellEditorListener) listeners[i + 1]).editingStopped(new ChangeEvent(this));
+            }
+        }
     }
 
     /*
@@ -49,14 +60,14 @@ public class AbstractCellEditor implements CellEditor {
      * @see EventListenerList
      */
     protected void fireEditingCanceled() {
-	// Guaranteed to return a non-null array
-	Object[] listeners = listenerList.getListenerList();
-	// Process the listeners last to first, notifying
-	// those that are interested in this event
-	for (int i = listeners.length-2; i>=0; i-=2) {
-	    if (listeners[i]==CellEditorListener.class) {
-		((CellEditorListener)listeners[i+1]).editingCanceled(new ChangeEvent(this));
-	    }	       
-	}
+        // Guaranteed to return a non-null array
+        Object[] listeners = listenerList.getListenerList();
+        // Process the listeners last to first, notifying
+        // those that are interested in this event
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == CellEditorListener.class) {
+                ((CellEditorListener) listeners[i + 1]).editingCanceled(new ChangeEvent(this));
+            }
+        }
     }
 }
diff --git a/src/net/sf/memoranda/ui/treetable/AbstractTreeTableModel.java b/src/net/sf/memoranda/ui/treetable/AbstractTreeTableModel.java
index 9049498..c6e5cda 100755
--- a/src/net/sf/memoranda/ui/treetable/AbstractTreeTableModel.java
+++ b/src/net/sf/memoranda/ui/treetable/AbstractTreeTableModel.java
@@ -13,22 +13,24 @@ package net.sf.memoranda.ui.treetable;
  * you entered into with Sun.
  */
 
-import javax.swing.tree.*;
-import javax.swing.event.*;
- 
+import javax.swing.event.EventListenerList;
+import javax.swing.event.TreeModelEvent;
+import javax.swing.event.TreeModelListener;
+import javax.swing.tree.TreePath;
+
 /**
- * @version 1.2 10/27/98
- * An abstract implementation of the TreeTableModel interface, handling the list 
- * of listeners. 
  * @author Philip Milne
+ * @version 1.2 10/27/98
+ *          An abstract implementation of the TreeTableModel interface, handling the list
+ *          of listeners.
  */
 
 public abstract class AbstractTreeTableModel implements TreeTableModel {
-    protected Object root;     
+    protected Object root;
     protected EventListenerList listenerList = new EventListenerList();
-  
+
     public AbstractTreeTableModel(Object root) {
-        this.root = root; 
+        this.root = root;
     }
 
     //
@@ -40,19 +42,20 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
     }
 
     public boolean isLeaf(Object node) {
-        return getChildCount(node) == 0; 
+        return getChildCount(node) == 0;
     }
 
-    public void valueForPathChanged(TreePath path, Object newValue) {}
+    public void valueForPathChanged(TreePath path, Object newValue) {
+    }
 
     // This is not called in the JTree's default mode: use a naive implementation. 
     public int getIndexOfChild(Object parent, Object child) {
         for (int i = 0; i < getChildCount(parent); i++) {
-	    if (getChild(parent, i).equals(child)) { 
-	        return i; 
-	    }
+            if (getChild(parent, i).equals(child)) {
+                return i;
+            }
         }
-	return -1; 
+        return -1;
     }
 
     public void addTreeModelListener(TreeModelListener l) {
@@ -70,22 +73,23 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
      * the fire method.
      * @see EventListenerList
      */
-    protected void fireTreeNodesChanged(Object source, Object[] path, 
-                                        int[] childIndices, 
+    protected void fireTreeNodesChanged(Object source, Object[] path,
+                                        int[] childIndices,
                                         Object[] children) {
         // Guaranteed to return a non-null array
         Object[] listeners = listenerList.getListenerList();
         TreeModelEvent e = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
-        for (int i = listeners.length-2; i>=0; i-=2) {
-            if (listeners[i]==TreeModelListener.class) {
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null)
-                    e = new TreeModelEvent(source, path, 
-                                           childIndices, children);
-                ((TreeModelListener)listeners[i+1]).treeNodesChanged(e);
-            }          
+                if (e == null) {
+                    e = new TreeModelEvent(source, path,
+                            childIndices, children);
+                }
+                ((TreeModelListener) listeners[i + 1]).treeNodesChanged(e);
+            }
         }
     }
 
@@ -96,22 +100,23 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
      * the fire method.
      * @see EventListenerList
      */
-    protected void fireTreeNodesInserted(Object source, Object[] path, 
-                                        int[] childIndices, 
-                                        Object[] children) {
+    protected void fireTreeNodesInserted(Object source, Object[] path,
+                                         int[] childIndices,
+                                         Object[] children) {
         // Guaranteed to return a non-null array
         Object[] listeners = listenerList.getListenerList();
         TreeModelEvent e = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
-        for (int i = listeners.length-2; i>=0; i-=2) {
-            if (listeners[i]==TreeModelListener.class) {
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null)
-                    e = new TreeModelEvent(source, path, 
-                                           childIndices, children);
-                ((TreeModelListener)listeners[i+1]).treeNodesInserted(e);
-            }          
+                if (e == null) {
+                    e = new TreeModelEvent(source, path,
+                            childIndices, children);
+                }
+                ((TreeModelListener) listeners[i + 1]).treeNodesInserted(e);
+            }
         }
     }
 
@@ -122,22 +127,23 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
      * the fire method.
      * @see EventListenerList
      */
-    protected void fireTreeNodesRemoved(Object source, Object[] path, 
-                                        int[] childIndices, 
+    protected void fireTreeNodesRemoved(Object source, Object[] path,
+                                        int[] childIndices,
                                         Object[] children) {
         // Guaranteed to return a non-null array
         Object[] listeners = listenerList.getListenerList();
         TreeModelEvent e = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
-        for (int i = listeners.length-2; i>=0; i-=2) {
-            if (listeners[i]==TreeModelListener.class) {
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null)
-                    e = new TreeModelEvent(source, path, 
-                                           childIndices, children);
-                ((TreeModelListener)listeners[i+1]).treeNodesRemoved(e);
-            }          
+                if (e == null) {
+                    e = new TreeModelEvent(source, path,
+                            childIndices, children);
+                }
+                ((TreeModelListener) listeners[i + 1]).treeNodesRemoved(e);
+            }
         }
     }
 
@@ -148,22 +154,23 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
      * the fire method.
      * @see EventListenerList
      */
-    protected void fireTreeStructureChanged(Object source, Object[] path, 
-                                        int[] childIndices, 
-                                        Object[] children) {
+    protected void fireTreeStructureChanged(Object source, Object[] path,
+                                            int[] childIndices,
+                                            Object[] children) {
         // Guaranteed to return a non-null array
         Object[] listeners = listenerList.getListenerList();
         TreeModelEvent e = null;
         // Process the listeners last to first, notifying
         // those that are interested in this event
-        for (int i = listeners.length-2; i>=0; i-=2) {
-            if (listeners[i]==TreeModelListener.class) {
+        for (int i = listeners.length - 2; i >= 0; i -= 2) {
+            if (listeners[i] == TreeModelListener.class) {
                 // Lazily create the event:
-                if (e == null)
-                    e = new TreeModelEvent(source, path, 
-                                           childIndices, children);
-                ((TreeModelListener)listeners[i+1]).treeStructureChanged(e);
-            }          
+                if (e == null) {
+                    e = new TreeModelEvent(source, path,
+                            childIndices, children);
+                }
+                ((TreeModelListener) listeners[i + 1]).treeStructureChanged(e);
+            }
         }
     }
 
@@ -171,17 +178,21 @@ public abstract class AbstractTreeTableModel implements TreeTableModel {
     // Default impelmentations for methods in the TreeTableModel interface. 
     //
 
-    public Class getColumnClass(int column) { return Object.class; }
+    public Class getColumnClass(int column) {
+        return Object.class;
+    }
 
-   /** By default, make the column with the Tree in it the only editable one. 
-    *  Making this column editable causes the JTable to forward mouse 
-    *  and keyboard events in the Tree column to the underlying JTree. 
-    */ 
-    public boolean isCellEditable(Object node, int column) { 
-         return getColumnClass(column) == TreeTableModel.class; 
+    /**
+     * By default, make the column with the Tree in it the only editable one.
+     * Making this column editable causes the JTable to forward mouse
+     * and keyboard events in the Tree column to the underlying JTree.
+     */
+    public boolean isCellEditable(Object node, int column) {
+        return getColumnClass(column) == TreeTableModel.class;
     }
 
-    public void setValueAt(Object aValue, Object node, int column) {}
+    public void setValueAt(Object aValue, Object node, int column) {
+    }
 
 
     // Left to be implemented in the subclass:
diff --git a/src/net/sf/memoranda/ui/treetable/JTreeTable.java b/src/net/sf/memoranda/ui/treetable/JTreeTable.java
index b182e16..629f754 100755
--- a/src/net/sf/memoranda/ui/treetable/JTreeTable.java
+++ b/src/net/sf/memoranda/ui/treetable/JTreeTable.java
@@ -14,349 +14,350 @@ package net.sf.memoranda.ui.treetable;
  * you entered into with Sun.
  */
 
-import javax.swing.*;
-import javax.swing.event.*;
-import javax.swing.tree.*;
-import javax.swing.table.*;
-
 import net.sf.memoranda.Task;
 
-import java.awt.Color;
-import java.awt.Dimension;
-import java.awt.Component;
-import java.awt.Graphics;
-import java.awt.Rectangle;
-
+import javax.swing.*;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import javax.swing.table.TableCellEditor;
+import javax.swing.table.TableCellRenderer;
+import javax.swing.tree.*;
+import java.awt.*;
 import java.awt.event.MouseEvent;
-
 import java.util.EventObject;
 
 /**
  * This example shows how to create a simple JTreeTable component, by using a
  * JTree as a renderer (and editor) for the cells in a particular column in the
  * JTable.
- * 
- * @version 1.2 10/27/98
- * 
+ *
  * @author Philip Milne
  * @author Scott Violet
+ * @version 1.2 10/27/98
  */
 public class JTreeTable extends JTable {
-	/** A subclass of JTree. */
-	protected TreeTableCellRenderer tree;
-	protected TreeTableModel model;
-
-	public JTreeTable() {
-		super();
-	}
-	
-	public JTreeTable(TreeTableModel treeTableModel) {
-		super();
-		model = treeTableModel;
-		// Create the tree. It will be used as a renderer and editor.
-		tree = new TreeTableCellRenderer(treeTableModel);
-
-		// Install a tableModel representing the visible rows in the tree.
-		super.setModel(new TreeTableModelAdapter(treeTableModel, tree));
-
-		// Force the JTable and JTree to share their row selection models.
-		ListToTreeSelectionModelWrapper selectionWrapper = new ListToTreeSelectionModelWrapper();
-		tree.setSelectionModel(selectionWrapper);
-		setSelectionModel(selectionWrapper.getListSelectionModel());
-
-		// Install the tree editor renderer and editor.
-		setDefaultRenderer(TreeTableModel.class, tree);
-		setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
-
-		// No grid.
-		setShowGrid(false);
-
-		// No intercell spacing
-		setIntercellSpacing(new Dimension(0, 0));
-
-		// And update the height of the trees row to match that of
-		// the table.
-		if (tree.getRowHeight() < 1) {
-			// Metal looks better like this.
-			setRowHeight(18);
-		}
-	}
-
-	/**
-	 * Overridden to message super and forward the method to the tree. Since the
-	 * tree is not actually in the component hieachy it will never receive this
-	 * unless we forward it in this manner.
-	 */
-	public void updateUI() {
-		super.updateUI();
-		if (tree != null) {
-			tree.updateUI();
-		}
-		// Use the tree's default foreground and background colors in the
-		// table.
-		LookAndFeel.installColorsAndFont(this, "Tree.background",
-				"Tree.foreground", "Tree.font");
-	}
-
-	/*
-	 * Workaround for BasicTableUI anomaly. Make sure the UI never tries to
-	 * paint the editor. The UI currently uses different techniques to paint the
-	 * renderers and editors and overriding setBounds() below is not the right
-	 * thing to do for an editor. Returning -1 for the editing row in this case,
-	 * ensures the editor is never painted.
-	 */
-	public int getEditingRow() {
-		return (getColumnClass(editingColumn) == TreeTableModel.class) ? -1
-				: editingRow;
-	}
-
-	/**
-	 * Overridden to pass the new rowHeight to the tree.
-	 */
-	public void setRowHeight(int rowHeight) {
-		super.setRowHeight(rowHeight);
-		if (tree != null && tree.getRowHeight() != rowHeight) {
-			tree.setRowHeight(getRowHeight());
-		}
-	}
-
-	/**
-	 * Returns the tree that is being shared between the model.
-	 */
-	public JTree getTree() {
-		return tree;
-	}
-
-	/**
-	 * A TreeCellRenderer that displays a JTree.
-	 */
-	public class TreeTableCellRenderer extends JTree implements
-			TableCellRenderer {
-		/** Last table/tree row asked to renderer. */
-		protected int visibleRow;
-
-		public TreeTableCellRenderer(TreeModel model) {
-			super(model);
-			this.setRootVisible(false);
-			this.setShowsRootHandles(true);
-			((DefaultTreeCellRenderer)this.getCellRenderer()).setLeafIcon(null);
-			((DefaultTreeCellRenderer)this.getCellRenderer()).setOpenIcon(null);
-			((DefaultTreeCellRenderer)this.getCellRenderer()).setClosedIcon(null);
-		}
-
-		/**
-		 * updateUI is overridden to set the colors of the Tree's renderer to
-		 * match that of the table.
-		 */
-		public void updateUI() {
-			super.updateUI();
-			// Make the tree's cell renderer use the table's cell selection
-			// colors.
-			TreeCellRenderer tcr = getCellRenderer();
-			if (tcr instanceof DefaultTreeCellRenderer) {
-				DefaultTreeCellRenderer dtcr = ((DefaultTreeCellRenderer) tcr);
-				// For 1.1 uncomment this, 1.2 has a bug that will cause an
-				// exception to be thrown if the border selection color is
-				// null.
-				// dtcr.setBorderSelectionColor(null);
-				dtcr.setTextSelectionColor(UIManager
-						.getColor("Table.selectionForeground"));
-				dtcr.setBackgroundSelectionColor(UIManager
-						.getColor("Table.selectionBackground"));
-				((DefaultTreeCellRenderer)this.getCellRenderer()).setLeafIcon(null);
-				((DefaultTreeCellRenderer)this.getCellRenderer()).setOpenIcon(null);
-				((DefaultTreeCellRenderer)this.getCellRenderer()).setClosedIcon(null);
-			}
-		}
-
-		/**
-		 * Sets the row height of the tree, and forwards the row height to the
-		 * table.
-		 */
-		public void setRowHeight(int rowHeight) {
-			if (rowHeight > 0) {
-				super.setRowHeight(rowHeight);
-				if (JTreeTable.this != null
-						&& JTreeTable.this.getRowHeight() != rowHeight) {
-					JTreeTable.this.setRowHeight(getRowHeight());
-				}
-			}
-		}
-
-		/**
-		 * This is overridden to set the height to match that of the JTable.
-		 */
-		public void setBounds(int x, int y, int w, int h) {
-			super.setBounds(x, 0, w, JTreeTable.this.getHeight());
-		}
-
-		/**
-		 * Sublcassed to translate the graphics such that the last visible row
-		 * will be drawn at 0,0.
-		 */
-		public void paint(Graphics g) {
-			g.translate(0, -visibleRow * getRowHeight());
-			super.paint(g);
-		}
-
-		/**
-		 * TreeCellRenderer method. Overridden to update the visible row.
-		 */
-		public Component getTableCellRendererComponent(JTable table,
-				Object value, boolean isSelected, boolean hasFocus, int row,
-				int column) {
-			if (isSelected)
-				setBackground(table.getSelectionBackground());
-			else
-				setBackground(table.getBackground());
-			if (value instanceof Task) {
-				
-			}
-			visibleRow = row;
-			return this;
-		}
-	}
-
-	/**
-	 * TreeTableCellEditor implementation. Component returned is the JTree.
-	 */
-	public class TreeTableCellEditor extends AbstractCellEditor implements
-			TableCellEditor {
-		public Component getTableCellEditorComponent(JTable table,
-				Object value, boolean isSelected, int r, int c) {
-			return tree;
-		}
-
-		/**
-		 * Overridden to return false, and if the event is a mouse event it is
-		 * forwarded to the tree.
-		 * <p>
-		 * The behavior for this is debatable, and should really be offered as a
-		 * property. By returning false, all keyboard actions are implemented in
-		 * terms of the table. By returning true, the tree would get a chance to
-		 * do something with the keyboard events. For the most part this is ok.
-		 * But for certain keys, such as left/right, the tree will
-		 * expand/collapse where as the table focus should really move to a
-		 * different column. Page up/down should also be implemented in terms of
-		 * the table. By returning false this also has the added benefit that
-		 * clicking outside of the bounds of the tree node, but still in the
-		 * tree column will select the row, whereas if this returned true that
-		 * wouldn't be the case.
-		 * <p>
-		 * By returning false we are also enforcing the policy that the tree
-		 * will never be editable (at least by a key sequence).
-		 */
-		public boolean isCellEditable(EventObject e) {
-			if (e instanceof MouseEvent) {
-				for (int counter = getColumnCount() - 1; counter >= 0; counter--) {
-					if (getColumnClass(counter) == TreeTableModel.class) {
-						MouseEvent me = (MouseEvent) e;
-						MouseEvent newME = new MouseEvent(tree, me.getID(), me
-								.getWhen(), me.getModifiers(), me.getX()
-								- getCellRect(0, counter, true).x, me.getY(),
-								me.getClickCount(), me.isPopupTrigger());
-						tree.dispatchEvent(newME);
-						break;
-					}
-				}
-			}
-			return false;
-		}
-	}
-
-	/**
-	 * ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel to
-	 * listen for changes in the ListSelectionModel it maintains. Once a change
-	 * in the ListSelectionModel happens, the paths are updated in the
-	 * DefaultTreeSelectionModel.
-	 */
-	public class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel {
-		/** Set to true when we are updating the ListSelectionModel. */
-		protected boolean updatingListSelectionModel;
-
-		public ListToTreeSelectionModelWrapper() {
-			super();
-			getListSelectionModel().addListSelectionListener(
-					createListSelectionListener());
-		}
-
-		/**
-		 * Returns the list selection model. ListToTreeSelectionModelWrapper
-		 * listens for changes to this model and updates the selected paths
-		 * accordingly.
-		 */
-		public ListSelectionModel getListSelectionModel() {
-			return listSelectionModel;
-		}
-
-		/**
-		 * This is overridden to set <code>updatingListSelectionModel</code>
-		 * and message super. This is the only place DefaultTreeSelectionModel
-		 * alters the ListSelectionModel.
-		 */
-		public void resetRowSelection() {
-			if (!updatingListSelectionModel) {
-				updatingListSelectionModel = true;
-				try {
-					super.resetRowSelection();
-				} finally {
-					updatingListSelectionModel = false;
-				}
-			}
-			// Notice how we don't message super if
-			// updatingListSelectionModel is true. If
-			// updatingListSelectionModel is true, it implies the
-			// ListSelectionModel has already been updated and the
-			// paths are the only thing that needs to be updated.
-		}
-
-		/**
-		 * Creates and returns an instance of ListSelectionHandler.
-		 */
-		protected ListSelectionListener createListSelectionListener() {
-			return new ListSelectionHandler();
-		}
-
-		/**
-		 * If <code>updatingListSelectionModel</code> is false, this will
-		 * reset the selected paths from the selected rows in the list selection
-		 * model.
-		 */
-		protected void updateSelectedPathsFromSelectedRows() {
-			if (!updatingListSelectionModel) {
-				updatingListSelectionModel = true;
-				try {
-					// This is way expensive, ListSelectionModel needs an
-					// enumerator for iterating.
-					int min = listSelectionModel.getMinSelectionIndex();
-					int max = listSelectionModel.getMaxSelectionIndex();
-
-					clearSelection();
-					if (min != -1 && max != -1) {
-						for (int counter = min; counter <= max; counter++) {
-							if (listSelectionModel.isSelectedIndex(counter)) {
-								TreePath selPath = tree.getPathForRow(counter);
-
-								if (selPath != null) {
-									addSelectionPath(selPath);
-								}
-							}
-						}
-					}
-				} finally {
-					updatingListSelectionModel = false;
-				}
-			}
-		}
-
-		/**
-		 * Class responsible for calling updateSelectedPathsFromSelectedRows
-		 * when the selection of the list changse.
-		 */
-		class ListSelectionHandler implements ListSelectionListener {
-			public void valueChanged(ListSelectionEvent e) {
-				updateSelectedPathsFromSelectedRows();
-			}
-		}
-	}
+    /**
+     * A subclass of JTree.
+     */
+    protected TreeTableCellRenderer tree;
+    protected TreeTableModel model;
+
+    public JTreeTable() {
+        super();
+    }
+
+    public JTreeTable(TreeTableModel treeTableModel) {
+        super();
+        model = treeTableModel;
+        // Create the tree. It will be used as a renderer and editor.
+        tree = new TreeTableCellRenderer(treeTableModel);
+
+        // Install a tableModel representing the visible rows in the tree.
+        super.setModel(new TreeTableModelAdapter(treeTableModel, tree));
+
+        // Force the JTable and JTree to share their row selection models.
+        ListToTreeSelectionModelWrapper selectionWrapper = new ListToTreeSelectionModelWrapper();
+        tree.setSelectionModel(selectionWrapper);
+        setSelectionModel(selectionWrapper.getListSelectionModel());
+
+        // Install the tree editor renderer and editor.
+        setDefaultRenderer(TreeTableModel.class, tree);
+        setDefaultEditor(TreeTableModel.class, new TreeTableCellEditor());
+
+        // No grid.
+        setShowGrid(false);
+
+        // No intercell spacing
+        setIntercellSpacing(new Dimension(0, 0));
+
+        // And update the height of the trees row to match that of
+        // the table.
+        if (tree.getRowHeight() < 1) {
+            // Metal looks better like this.
+            setRowHeight(18);
+        }
+    }
+
+    /**
+     * Overridden to message super and forward the method to the tree. Since the
+     * tree is not actually in the component hieachy it will never receive this
+     * unless we forward it in this manner.
+     */
+    public void updateUI() {
+        super.updateUI();
+        if (tree != null) {
+            tree.updateUI();
+        }
+        // Use the tree's default foreground and background colors in the
+        // table.
+        LookAndFeel.installColorsAndFont(this, "Tree.background",
+                "Tree.foreground", "Tree.font");
+    }
+
+    /*
+     * Workaround for BasicTableUI anomaly. Make sure the UI never tries to
+     * paint the editor. The UI currently uses different techniques to paint the
+     * renderers and editors and overriding setBounds() below is not the right
+     * thing to do for an editor. Returning -1 for the editing row in this case,
+     * ensures the editor is never painted.
+     */
+    public int getEditingRow() {
+        return (getColumnClass(editingColumn) == TreeTableModel.class) ? -1
+                : editingRow;
+    }
+
+    /**
+     * Overridden to pass the new rowHeight to the tree.
+     */
+    public void setRowHeight(int rowHeight) {
+        super.setRowHeight(rowHeight);
+        if (tree != null && tree.getRowHeight() != rowHeight) {
+            tree.setRowHeight(getRowHeight());
+        }
+    }
+
+    /**
+     * Returns the tree that is being shared between the model.
+     */
+    public JTree getTree() {
+        return tree;
+    }
+
+    /**
+     * A TreeCellRenderer that displays a JTree.
+     */
+    public class TreeTableCellRenderer extends JTree implements
+            TableCellRenderer {
+        /**
+         * Last table/tree row asked to renderer.
+         */
+        protected int visibleRow;
+
+        public TreeTableCellRenderer(TreeModel model) {
+            super(model);
+            this.setRootVisible(false);
+            this.setShowsRootHandles(true);
+            ((DefaultTreeCellRenderer) this.getCellRenderer()).setLeafIcon(null);
+            ((DefaultTreeCellRenderer) this.getCellRenderer()).setOpenIcon(null);
+            ((DefaultTreeCellRenderer) this.getCellRenderer()).setClosedIcon(null);
+        }
+
+        /**
+         * updateUI is overridden to set the colors of the Tree's renderer to
+         * match that of the table.
+         */
+        public void updateUI() {
+            super.updateUI();
+            // Make the tree's cell renderer use the table's cell selection
+            // colors.
+            TreeCellRenderer tcr = getCellRenderer();
+            if (tcr instanceof DefaultTreeCellRenderer) {
+                DefaultTreeCellRenderer dtcr = ((DefaultTreeCellRenderer) tcr);
+                // For 1.1 uncomment this, 1.2 has a bug that will cause an
+                // exception to be thrown if the border selection color is
+                // null.
+                // dtcr.setBorderSelectionColor(null);
+                dtcr.setTextSelectionColor(UIManager
+                        .getColor("Table.selectionForeground"));
+                dtcr.setBackgroundSelectionColor(UIManager
+                        .getColor("Table.selectionBackground"));
+                ((DefaultTreeCellRenderer) this.getCellRenderer()).setLeafIcon(null);
+                ((DefaultTreeCellRenderer) this.getCellRenderer()).setOpenIcon(null);
+                ((DefaultTreeCellRenderer) this.getCellRenderer()).setClosedIcon(null);
+            }
+        }
+
+        /**
+         * Sets the row height of the tree, and forwards the row height to the
+         * table.
+         */
+        public void setRowHeight(int rowHeight) {
+            if (rowHeight > 0) {
+                super.setRowHeight(rowHeight);
+                if (JTreeTable.this != null
+                        && JTreeTable.this.getRowHeight() != rowHeight) {
+                    JTreeTable.this.setRowHeight(getRowHeight());
+                }
+            }
+        }
+
+        /**
+         * This is overridden to set the height to match that of the JTable.
+         */
+        public void setBounds(int x, int y, int w, int h) {
+            super.setBounds(x, 0, w, JTreeTable.this.getHeight());
+        }
+
+        /**
+         * Sublcassed to translate the graphics such that the last visible row
+         * will be drawn at 0,0.
+         */
+        public void paint(Graphics g) {
+            g.translate(0, -visibleRow * getRowHeight());
+            super.paint(g);
+        }
+
+        /**
+         * TreeCellRenderer method. Overridden to update the visible row.
+         */
+        public Component getTableCellRendererComponent(JTable table,
+                                                       Object value, boolean isSelected, boolean hasFocus, int row,
+                                                       int column) {
+            if (isSelected) {
+                setBackground(table.getSelectionBackground());
+            } else {
+                setBackground(table.getBackground());
+            }
+            if (value instanceof Task) {
+
+            }
+            visibleRow = row;
+            return this;
+        }
+    }
+
+    /**
+     * TreeTableCellEditor implementation. Component returned is the JTree.
+     */
+    public class TreeTableCellEditor extends AbstractCellEditor implements
+            TableCellEditor {
+        public Component getTableCellEditorComponent(JTable table,
+                                                     Object value, boolean isSelected, int r, int c) {
+            return tree;
+        }
+
+        /**
+         * Overridden to return false, and if the event is a mouse event it is
+         * forwarded to the tree.
+         * <p>
+         * The behavior for this is debatable, and should really be offered as a
+         * property. By returning false, all keyboard actions are implemented in
+         * terms of the table. By returning true, the tree would get a chance to
+         * do something with the keyboard events. For the most part this is ok.
+         * But for certain keys, such as left/right, the tree will
+         * expand/collapse where as the table focus should really move to a
+         * different column. Page up/down should also be implemented in terms of
+         * the table. By returning false this also has the added benefit that
+         * clicking outside of the bounds of the tree node, but still in the
+         * tree column will select the row, whereas if this returned true that
+         * wouldn't be the case.
+         * <p>
+         * By returning false we are also enforcing the policy that the tree
+         * will never be editable (at least by a key sequence).
+         */
+        public boolean isCellEditable(EventObject e) {
+            if (e instanceof MouseEvent) {
+                for (int counter = getColumnCount() - 1; counter >= 0; counter--) {
+                    if (getColumnClass(counter) == TreeTableModel.class) {
+                        MouseEvent me = (MouseEvent) e;
+                        MouseEvent newME = new MouseEvent(tree, me.getID(), me
+                                .getWhen(), me.getModifiers(), me.getX()
+                                - getCellRect(0, counter, true).x, me.getY(),
+                                me.getClickCount(), me.isPopupTrigger());
+                        tree.dispatchEvent(newME);
+                        break;
+                    }
+                }
+            }
+            return false;
+        }
+    }
+
+    /**
+     * ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel to
+     * listen for changes in the ListSelectionModel it maintains. Once a change
+     * in the ListSelectionModel happens, the paths are updated in the
+     * DefaultTreeSelectionModel.
+     */
+    public class ListToTreeSelectionModelWrapper extends DefaultTreeSelectionModel {
+        /**
+         * Set to true when we are updating the ListSelectionModel.
+         */
+        protected boolean updatingListSelectionModel;
+
+        public ListToTreeSelectionModelWrapper() {
+            super();
+            getListSelectionModel().addListSelectionListener(
+                    createListSelectionListener());
+        }
+
+        /**
+         * Returns the list selection model. ListToTreeSelectionModelWrapper
+         * listens for changes to this model and updates the selected paths
+         * accordingly.
+         */
+        public ListSelectionModel getListSelectionModel() {
+            return listSelectionModel;
+        }
+
+        /**
+         * This is overridden to set <code>updatingListSelectionModel</code>
+         * and message super. This is the only place DefaultTreeSelectionModel
+         * alters the ListSelectionModel.
+         */
+        public void resetRowSelection() {
+            if (!updatingListSelectionModel) {
+                updatingListSelectionModel = true;
+                try {
+                    super.resetRowSelection();
+                } finally {
+                    updatingListSelectionModel = false;
+                }
+            }
+            // Notice how we don't message super if
+            // updatingListSelectionModel is true. If
+            // updatingListSelectionModel is true, it implies the
+            // ListSelectionModel has already been updated and the
+            // paths are the only thing that needs to be updated.
+        }
+
+        /**
+         * Creates and returns an instance of ListSelectionHandler.
+         */
+        protected ListSelectionListener createListSelectionListener() {
+            return new ListSelectionHandler();
+        }
+
+        /**
+         * If <code>updatingListSelectionModel</code> is false, this will
+         * reset the selected paths from the selected rows in the list selection
+         * model.
+         */
+        protected void updateSelectedPathsFromSelectedRows() {
+            if (!updatingListSelectionModel) {
+                updatingListSelectionModel = true;
+                try {
+                    // This is way expensive, ListSelectionModel needs an
+                    // enumerator for iterating.
+                    int min = listSelectionModel.getMinSelectionIndex();
+                    int max = listSelectionModel.getMaxSelectionIndex();
+
+                    clearSelection();
+                    if (min != -1 && max != -1) {
+                        for (int counter = min; counter <= max; counter++) {
+                            if (listSelectionModel.isSelectedIndex(counter)) {
+                                TreePath selPath = tree.getPathForRow(counter);
+
+                                if (selPath != null) {
+                                    addSelectionPath(selPath);
+                                }
+                            }
+                        }
+                    }
+                } finally {
+                    updatingListSelectionModel = false;
+                }
+            }
+        }
+
+        /**
+         * Class responsible for calling updateSelectedPathsFromSelectedRows
+         * when the selection of the list changse.
+         */
+        class ListSelectionHandler implements ListSelectionListener {
+            public void valueChanged(ListSelectionEvent e) {
+                updateSelectedPathsFromSelectedRows();
+            }
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/ui/treetable/MergeSort.java b/src/net/sf/memoranda/ui/treetable/MergeSort.java
index 2cd7a97..bdfb558 100755
--- a/src/net/sf/memoranda/ui/treetable/MergeSort.java
+++ b/src/net/sf/memoranda/ui/treetable/MergeSort.java
@@ -26,60 +26,58 @@ package net.sf.memoranda.ui.treetable;
  * @author Scott Violet
  */
 public abstract class MergeSort extends Object {
-    protected Object           toSort[];
-    protected Object           swapSpace[];
+    protected Object toSort[];
+    protected Object swapSpace[];
 
     public void sort(Object array[]) {
-	if(array != null && array.length > 1)
-	{
-	    int             maxLength;
-  
-	    maxLength = array.length;
-	    swapSpace = new Object[maxLength];
-	    toSort = array;
-	    this.mergeSort(0, maxLength - 1);
-	    swapSpace = null;
-	    toSort = null;
-	}
+        if (array != null && array.length > 1) {
+            int maxLength;
+
+            maxLength = array.length;
+            swapSpace = new Object[maxLength];
+            toSort = array;
+            this.mergeSort(0, maxLength - 1);
+            swapSpace = null;
+            toSort = null;
+        }
     }
 
     public abstract int compareElementsAt(int beginLoc, int endLoc);
 
     protected void mergeSort(int begin, int end) {
-	if(begin != end)
-	{
-	    int           mid;
+        if (begin != end) {
+            int mid;
 
-	    mid = (begin + end) / 2;
-	    this.mergeSort(begin, mid);
-	    this.mergeSort(mid + 1, end);
-	    this.merge(begin, mid, end);
-	}
+            mid = (begin + end) / 2;
+            this.mergeSort(begin, mid);
+            this.mergeSort(mid + 1, end);
+            this.merge(begin, mid, end);
+        }
     }
 
     protected void merge(int begin, int middle, int end) {
-	int           firstHalf, secondHalf, count;
+        int firstHalf, secondHalf, count;
 
-	firstHalf = count = begin;
-	secondHalf = middle + 1;
-	while((firstHalf <= middle) && (secondHalf <= end))
-	{
-	    if(this.compareElementsAt(secondHalf, firstHalf) < 0)
-		swapSpace[count++] = toSort[secondHalf++];
-	    else
-		swapSpace[count++] = toSort[firstHalf++];
-	}
-	if(firstHalf <= middle)
-	{
-	    while(firstHalf <= middle)
-		swapSpace[count++] = toSort[firstHalf++];
-	}
-	else
-	{
-	    while(secondHalf <= end)
-		swapSpace[count++] = toSort[secondHalf++];
-	}
-	for(count = begin;count <= end;count++)
-	    toSort[count] = swapSpace[count];
+        firstHalf = count = begin;
+        secondHalf = middle + 1;
+        while ((firstHalf <= middle) && (secondHalf <= end)) {
+            if (this.compareElementsAt(secondHalf, firstHalf) < 0) {
+                swapSpace[count++] = toSort[secondHalf++];
+            } else {
+                swapSpace[count++] = toSort[firstHalf++];
+            }
+        }
+        if (firstHalf <= middle) {
+            while (firstHalf <= middle) {
+                swapSpace[count++] = toSort[firstHalf++];
+            }
+        } else {
+            while (secondHalf <= end) {
+                swapSpace[count++] = toSort[secondHalf++];
+            }
+        }
+        for (count = begin; count <= end; count++) {
+            toSort[count] = swapSpace[count];
+        }
     }
 }
diff --git a/src/net/sf/memoranda/ui/treetable/TreeTableModel.java b/src/net/sf/memoranda/ui/treetable/TreeTableModel.java
index a3e249a..c9d1f38 100755
--- a/src/net/sf/memoranda/ui/treetable/TreeTableModel.java
+++ b/src/net/sf/memoranda/ui/treetable/TreeTableModel.java
@@ -23,17 +23,16 @@ import javax.swing.tree.TreeModel;
 
 /**
  * TreeTableModel is the model used by a JTreeTable. It extends TreeModel
- * to add methods for getting inforamtion about the set of columns each 
- * node in the TreeTableModel may have. Each column, like a column in 
- * a TableModel, has a name and a type associated with it. Each node in 
- * the TreeTableModel can return a value for each of the columns and 
- * set that value if isCellEditable() returns true. 
+ * to add methods for getting inforamtion about the set of columns each
+ * node in the TreeTableModel may have. Each column, like a column in
+ * a TableModel, has a name and a type associated with it. Each node in
+ * the TreeTableModel can return a value for each of the columns and
+ * set that value if isCellEditable() returns true.
  *
- * @author Philip Milne 
+ * @author Philip Milne
  * @author Scott Violet
  */
-public interface TreeTableModel extends TreeModel
-{
+public interface TreeTableModel extends TreeModel {
     /**
      * Returns the number ofs availible column.
      */
@@ -50,19 +49,19 @@ public interface TreeTableModel extends TreeModel
     public Class getColumnClass(int column);
 
     /**
-     * Returns the value to be displayed for node <code>node</code>, 
+     * Returns the value to be displayed for node <code>node</code>,
      * at column number <code>column</code>.
      */
     public Object getValueAt(Object node, int column);
 
     /**
-     * Indicates whether the the value for node <code>node</code>, 
+     * Indicates whether the the value for node <code>node</code>,
      * at column number <code>column</code> is editable.
      */
     public boolean isCellEditable(Object node, int column);
 
     /**
-     * Sets the value for node <code>node</code>, 
+     * Sets the value for node <code>node</code>,
      * at column number <code>column</code>.
      */
     public void setValueAt(Object aValue, Object node, int column);
diff --git a/src/net/sf/memoranda/ui/treetable/TreeTableModelAdapter.java b/src/net/sf/memoranda/ui/treetable/TreeTableModelAdapter.java
index 304b873..c9cc941 100755
--- a/src/net/sf/memoranda/ui/treetable/TreeTableModelAdapter.java
+++ b/src/net/sf/memoranda/ui/treetable/TreeTableModelAdapter.java
@@ -13,28 +13,25 @@ package net.sf.memoranda.ui.treetable;
  * you entered into with Sun.
  */
 
-import javax.swing.JTree;
-import javax.swing.SwingUtilities;
-import javax.swing.table.AbstractTableModel;
-import javax.swing.tree.TreePath;
+import javax.swing.*;
 import javax.swing.event.TreeExpansionEvent;
 import javax.swing.event.TreeExpansionListener;
 import javax.swing.event.TreeModelEvent;
 import javax.swing.event.TreeModelListener;
+import javax.swing.table.AbstractTableModel;
+import javax.swing.tree.TreePath;
 
 /**
- * This is a wrapper class takes a TreeTableModel and implements 
- * the table model interface. The implementation is trivial, with 
- * all of the event dispatching support provided by the superclass: 
- * the AbstractTableModel. 
- *
- * @version 1.2 10/27/98
+ * This is a wrapper class takes a TreeTableModel and implements
+ * the table model interface. The implementation is trivial, with
+ * all of the event dispatching support provided by the superclass:
+ * the AbstractTableModel.
  *
  * @author Philip Milne
  * @author Scott Violet
+ * @version 1.2 10/27/98
  */
-public class TreeTableModelAdapter extends AbstractTableModel
-{
+public class TreeTableModelAdapter extends AbstractTableModel {
     JTree tree;
     TreeTableModel treeTableModel;
 
@@ -42,73 +39,74 @@ public class TreeTableModelAdapter extends AbstractTableModel
         this.tree = tree;
         this.treeTableModel = treeTableModel;
 
-	tree.addTreeExpansionListener(new TreeExpansionListener() {
-	    // Don't use fireTableRowsInserted() here; the selection model
-	    // would get updated twice. 
-	    public void treeExpanded(TreeExpansionEvent event) {  
-	      fireTableDataChanged(); 
-	    }
-            public void treeCollapsed(TreeExpansionEvent event) {  
-	      fireTableDataChanged(); 
-	    }
-	});
-
-	// Install a TreeModelListener that can update the table when
-	// tree changes. We use delayedFireTableDataChanged as we can
-	// not be guaranteed the tree will have finished processing
-	// the event before us.
-	treeTableModel.addTreeModelListener(new TreeModelListener() {
-	    public void treeNodesChanged(TreeModelEvent e) {
-		delayedFireTableDataChanged();
-	    }
-
-	    public void treeNodesInserted(TreeModelEvent e) {
-		delayedFireTableDataChanged();
-	    }
-
-	    public void treeNodesRemoved(TreeModelEvent e) {
-		delayedFireTableDataChanged();
-	    }
-
-	    public void treeStructureChanged(TreeModelEvent e) {
-		delayedFireTableDataChanged();
-	    }
-	});
+        tree.addTreeExpansionListener(new TreeExpansionListener() {
+            // Don't use fireTableRowsInserted() here; the selection model
+            // would get updated twice.
+            public void treeExpanded(TreeExpansionEvent event) {
+                fireTableDataChanged();
+            }
+
+            public void treeCollapsed(TreeExpansionEvent event) {
+                fireTableDataChanged();
+            }
+        });
+
+        // Install a TreeModelListener that can update the table when
+        // tree changes. We use delayedFireTableDataChanged as we can
+        // not be guaranteed the tree will have finished processing
+        // the event before us.
+        treeTableModel.addTreeModelListener(new TreeModelListener() {
+            public void treeNodesChanged(TreeModelEvent e) {
+                delayedFireTableDataChanged();
+            }
+
+            public void treeNodesInserted(TreeModelEvent e) {
+                delayedFireTableDataChanged();
+            }
+
+            public void treeNodesRemoved(TreeModelEvent e) {
+                delayedFireTableDataChanged();
+            }
+
+            public void treeStructureChanged(TreeModelEvent e) {
+                delayedFireTableDataChanged();
+            }
+        });
     }
 
     // Wrappers, implementing TableModel interface. 
 
     public int getColumnCount() {
-	return treeTableModel.getColumnCount();
+        return treeTableModel.getColumnCount();
     }
 
     public String getColumnName(int column) {
-	return treeTableModel.getColumnName(column);
+        return treeTableModel.getColumnName(column);
     }
 
     public Class getColumnClass(int column) {
-	return treeTableModel.getColumnClass(column);
+        return treeTableModel.getColumnClass(column);
     }
 
     public int getRowCount() {
-	return tree.getRowCount();
+        return tree.getRowCount();
     }
 
     protected Object nodeForRow(int row) {
-	TreePath treePath = tree.getPathForRow(row);
-	return treePath.getLastPathComponent();         
+        TreePath treePath = tree.getPathForRow(row);
+        return treePath.getLastPathComponent();
     }
 
     public Object getValueAt(int row, int column) {
-	return treeTableModel.getValueAt(nodeForRow(row), column);
+        return treeTableModel.getValueAt(nodeForRow(row), column);
     }
 
     public boolean isCellEditable(int row, int column) {
-         return treeTableModel.isCellEditable(nodeForRow(row), column); 
+        return treeTableModel.isCellEditable(nodeForRow(row), column);
     }
 
     public void setValueAt(Object value, int row, int column) {
-	treeTableModel.setValueAt(value, nodeForRow(row), column);
+        treeTableModel.setValueAt(value, nodeForRow(row), column);
     }
 
     /**
@@ -116,11 +114,11 @@ public class TreeTableModelAdapter extends AbstractTableModel
      * processed. SwingUtilities.invokeLater is used to handle this.
      */
     protected void delayedFireTableDataChanged() {
-	SwingUtilities.invokeLater(new Runnable() {
-	    public void run() {
-		fireTableDataChanged();
-	    }
-	});
+        SwingUtilities.invokeLater(new Runnable() {
+            public void run() {
+                fireTableDataChanged();
+            }
+        });
     }
 }
 
diff --git a/src/net/sf/memoranda/util/AgendaGenerator.java b/src/net/sf/memoranda/util/AgendaGenerator.java
index 8a82575..a621438 100755
--- a/src/net/sf/memoranda/util/AgendaGenerator.java
+++ b/src/net/sf/memoranda/util/AgendaGenerator.java
@@ -4,482 +4,466 @@
  */
 package net.sf.memoranda.util;
 
-import java.util.Calendar;
-import java.util.Collection;
-import java.util.Date;
-import java.util.Enumeration;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Vector;
-import java.util.Collections;
-
-import net.sf.memoranda.CurrentProject;
-import net.sf.memoranda.Event;
-import net.sf.memoranda.EventsManager;
-import net.sf.memoranda.EventsScheduler;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectManager;
-import net.sf.memoranda.Task;
-import net.sf.memoranda.TaskList;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import nu.xom.Element;
 
+import java.util.*;
+
 
 /*$Id: AgendaGenerator.java,v 1.12 2005/06/13 21:25:27 velhonoja Exp $*/
 
 public class AgendaGenerator {
 
-	 static int fontsize(){
-		 if(Configuration.get("BASE_FONT_SIZE") == ""){
-			 Configuration.put("BASE_FONT_SIZE", "16");
-			 return Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString());
-		 }
-		 else {
-			 return Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString());
-		 }
-	 }
-	static String HEADER(){
-		String ret ="";
-	
-			ret += "<html>" 
-					+ "<head>"
-					+ "<title></title>\n"
-					+ "<style>\n"
-					+ "    body, td {font: "
-						+ fontsize() +
-						"pt sans-serif}\n"
-					+ "    h1 {font:"
-					+ (int)(fontsize() + 4) 
-					+ "pt sans-serif; background-color:#E0E0E0; margin-top:0}\n"
-					+ "    h2 {font:"
-					+ (int)(fontsize() + 2) +"pt sans-serif; margin-bottom:0}\n"
-					+ "    li {margin-bottom:5px}\n"
-					+ " a {color:black; text-decoration:none}\n"             
-					+ "</style></head>\n"
-					+ "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css.css\">"
-					+ "<body><table width=\"100%\" height=\"100%\" border=\"0\" cellpadding=\"4\" cellspacing=\"4\">\n"
-					+ "<tr>\n";
-			return ret;
-	}
-
-	static String FOOTER = "</td></tr></table></body></html>";
-
-	static String generateTasksInfo(Project p, CalendarDate date, Collection expandedTasks) {    	    	
-		TaskList tl;
-		if (p.getID().equals(CurrentProject.get().getID())) {
-			tl = CurrentProject.getTaskList();        	
-		}
-		else {
-			tl = CurrentStorage.get().openTaskList(p);        	
-		}
-		String s = "";
-		int k = getProgress(tl);
-		if (k > -1) {
-			s += "<br>" + Local.getString("Total progress") + ": " + k + "%";        	
-		}
-		s += "</td></tr></table>\n";
-
-		@SuppressWarnings("rawtypes")
-		Vector tasks = (Vector) tl.getActiveSubTasks(null,date);        
-		if (tasks.size() == 0) {
-			s += "<p>" + Local.getString("No actual tasks") + ".</p>\n";        	
-		}
-		else {
-			s += Local.getString("Actual tasks") + ":<br>\n<ul>\n";            
-
-			//            TaskSorter.sort(tasks, date, TaskSorter.BY_IMP_RATE); // TODO: configurable method
-			Collections.sort(tasks);
-			for (Iterator i = tasks.iterator(); i.hasNext();) {
-				Task t = (Task) i.next();
-				// Always show active tasks only on agenda page from now on.
-				// If it's not active, then it's probably "not on the agenda" isn't it?
-				//        		if(Context.get("SHOW_ACTIVE_TASKS_ONLY").equals(new Boolean(true))) {
-				//                    if (!((t.getStatus() == Task.ACTIVE) || (t.getStatus() == Task.DEADLINE) || (t.getStatus() == Task.FAILED))) {
-				//                    	continue;
-				//                	}	
-				//        		}
-				// ignore if it's a sub-task, iterate over ROOT tasks here only
-				if (tl.hasParentTask(t.getId())) {
-					continue;
-				}
-
-				s = s + renderTask(p, date, tl, t, 0,expandedTasks);
-				if(expandedTasks!=null && expandedTasks.contains(t.getId())) {
-					s = s + expandRecursively(p,date,tl,t,expandedTasks,1);
-				}        		
-			}
-			s += "\n</ul>\n";
-		}
-		
-		        //Util.debug("html for project " + p.getTitle() + " is\n" + s);
-		        //Util.debug("HEADER is " + HEADER); 
-		return s;
-	}
-
-	/**
-	 * @param t
-	 * @param expandedTasks
-	 */
-	private static String expandRecursively(Project p,CalendarDate date, TaskList tl,Task t, Collection expandedTasks, int level) {
-		Util.debug("Expanding task " + t.getText() + " level " + level);
-
-		Collection st = tl.getActiveSubTasks(t.getId(),date);
-
-		Util.debug("number of subtasks " + st.size());
-
-		String s = "\n<ul>\n";
-
-		for (Iterator iter = st.iterator(); iter.hasNext();) {
-			Task subTask = (Task) iter.next();
-			//			if(Context.get("SHOW_ACTIVE_TASKS_ONLY").equals(new Boolean(true))) {
-			//                if (!((subTask.getStatus() == Task.ACTIVE) || (subTask.getStatus() == Task.DEADLINE) || (subTask.getStatus() == Task.FAILED))) {
-			//                	continue;
-			//            	}	
-			//			}
-			s = s + renderTask(p,date,tl,subTask,level,expandedTasks);
-			if (expandedTasks.contains(subTask.getId())) {
-				s = s + expandRecursively(p,date,tl,subTask,expandedTasks,level + 1);
-			}
-		}
-		s += "\n</ul>\n";
-
-		return s;
-	}
-
-	/**
-	 * @param p
-	 * @param date
-	 * @param s
-	 * @param t
-	 * @return
-	 */
-	private static String renderTask(Project p, CalendarDate date, TaskList tl, Task t, int level, Collection expandedTasks) {
-		String s = "";
-
-		int pg = t.getProgress();
-		String progress = "";
-		if (pg == 100)
-			progress = "<font color=\"green\">"+Local.getString("Completed")+"</font>";
-		else
-			progress = pg + Local.getString("% done");
-
-		//		String nbsp = "&nbsp;&nbsp;";
-		//		String spacing = "";
-		//		for(int i = 0; i < level; i ++) {
-		//			spacing = spacing + nbsp;
-		//		}
-		//		Util.debug("Spacing for task " + t.getText() + " is " + spacing);
-
-		String subTaskOperation = "";
-		if (tl.hasSubTasks(t.getId())) {
-			//			Util.debug("Task " + t.getID() + " has subtasks");
-			if (expandedTasks.contains(t.getId())) {
-				//				Util.debug("Task " + t.getID() + " is in list of expanded tasks");
-				subTaskOperation = "<a href=\"memoranda:closesubtasks#" 
-									+ t.getId()+ "\">(-)</a>";				
-			}
-			else {
-				//	Util.debug("Task " + t.getID() + " is not in list of expanded tasks");
-				subTaskOperation = "<a href=\"memoranda:expandsubtasks#" 
-				+ t.getId()+ "\">(+)</a>";
-			}
-		}
-
-		s += "<a name=\"" + t.getId() 
-				+ "\"><li><p>" + subTaskOperation 
-				+ "<a href=\"memoranda:tasks#"
-				+ p.getID()
-				+ "\"><b>"
-				+ t.getText()
-				+ "</b></a> : " 
-				+ progress                 
-				+ "</p>"
-				+ "<p>"
-				+ Local.getString("Priority")
-				+ ": "
-				+ getPriorityString(t.getPriority())
-				+ "</p>";
-		/*<<<<<<< AgendaGenerator.java
-		if (!(t.getStartDate().getDate()).after(t.getEndDate().getDate())) {
-		    if (t.getEndDate().equals(date))
-		        s += "<p><font color=\"#FF9900\"><b>"
-		            + Local.getString("Should be done today")
-		            + ".</b></font></p>";
-		    else {
-		        Calendar endDateCal = t.getEndDate().getCalendar();
-		        Calendar dateCal = date.getCalendar();
-		        int numOfDays = (endDateCal.get(Calendar.YEAR)*365 + endDateCal.get(Calendar.DAY_OF_YEAR)) - 
-		                (dateCal.get(Calendar.YEAR)*365 + dateCal.get(Calendar.DAY_OF_YEAR));
-		        String days = "";
-		        if (numOfDays > 1)
-		            days = Local.getString("in")+" "+numOfDays+" "+Local.getString("day(s)");
-		        else
-		            days = Local.getString("tomorrow");
-		        s += "<p>"
-		            + Local.getString("Deadline")
-		            + ": <i>"
-		            + t.getEndDate().getMediumDateString()
-		            + "</i> ("+days+")</p>";
-		    }                    
-		}
-=======*/
-		if (t.getEndDate().before(t.getStartDate()))
-		{
-			s += "<p><font color=\"#006600\"><b>"
-					+ Local.getString("No Deadline")
-					+ ".</b></font></p>";
-		}
-		else if (t.getEndDate().equals(date))
-			s += "<p><font color=\"#FF9900\"><b>"
-					+ Local.getString("Should be done today")
-					+ ".</b></font></p>";
-		else {
-			Calendar endDateCal = t.getEndDate().getCalendar();
-			Calendar dateCal = date.getCalendar();
-			int numOfDays = (endDateCal.get(Calendar.YEAR)*365 
-					+ endDateCal.get(Calendar.DAY_OF_YEAR))
-					- (dateCal.get(Calendar.YEAR)*365 
-				    + dateCal.get(Calendar.DAY_OF_YEAR));
-			String days = "";
-			if(numOfDays > 0) {
-				if (numOfDays > 1) {
-					days = Local.getString("in")
-							+ " " +numOfDays
-							+ " " +Local.getString("day(s)");		        
-				}
-				else {
-					days = Local.getString("tomorrow");		        
-				}
-			
-				s += "<p>"
-						+ Local.getString("Deadline")
-						+ ": <i>"
-						+ t.getEndDate().getMediumDateString()
-						+ "</i> ("+days+")</p>";		        
-			}
-			else if ((numOfDays < 0) && (numOfDays > -10000)) {
-				String overdueDays = String.valueOf(-1 * numOfDays);
-				s += "<p><font color=\"#FF9900\"><b>"
-						+ overdueDays + " "
-						+ Local.getString("days overdue")
-						+ ".</b></font></p>";
-			}
-			else {
-				// tasks that have no deadline
-				s += "<p>"
-						+ Local.getString("No Deadline")
-						+ "</p>";		        
-			}
-		}                     
-		//>>>>>>> 1.4
-		s += "</li>\n";
-		return s;
-	}
-
-	static int getProgress(TaskList tl) {
-		Vector v = (Vector) tl.getAllSubTasks(null);
-		if (v.size() == 0)
-			return -1;
-		int p = 0;
-		for (Enumeration en = v.elements(); en.hasMoreElements();) {
-			Task t = (Task) en.nextElement();
-			p += t.getProgress();
-		}
-		return (p * 100) / (v.size() * 100);
-	}
-
-	static String getPriorityString(int p) {
-		switch (p) {
-		case Task.PRIORITY_NORMAL :
-			return 	"<font color=\"green\">" +
-					Local.getString("Normal") +
-					"</font>";
-		case Task.PRIORITY_LOW :
-			return 	"<font color=\"#3333CC\">" +
-					Local.getString("Low") +
-					"</font>";
-		case Task.PRIORITY_LOWEST :
-			return "<font color=\"#666699\">"+Local.getString("Lowest")+"</font>";
-		case Task.PRIORITY_HIGH :
-			return "<font color=\"#FF9900\">"+Local.getString("High")+"</font>";
-		case Task.PRIORITY_HIGHEST :
-			return "<font color=\"red\">"+Local.getString("Highest")+"</font>";
-		}
-		return "";
-	}
-
-	static String generateProjectInfo(Project p, CalendarDate date, Collection expandedTasks) {
-		String s = "<h2><a href=\"memoranda:project#"
-				+ p.getID()
-				+ "\">"
-				+ p.getTitle()
-				+ "</a></h2>\n"
-				+ "<table border=\"0\" width=\"100%\" cellpadding=\"2\" bgcolor=\"#EFEFEF\"><tr><td>" 
-				+ Local.getString("Start date")+": <i>"+p.getStartDate().getMediumDateString()+"</i>\n";
-		if (p.getEndDate() != null)
-			s += "<br>" + Local.getString("End date")+": <i>"+p.getEndDate().getMediumDateString()
-			+"</i>\n";        
-		return s + generateTasksInfo(p, date,expandedTasks);        
-	}
-
-	static String generateAllProjectsInfo(CalendarDate date, Collection expandedTasks) {
-		String s =
-				"<td width=\"66%\" valign=\"top\">"
-						+ "<h1>"
-						+ Local.getString("Projects and tasks")
-						+ "</h1>\n";
-		/* commenting out for now shows how to create new html buttons (as ugly as they are)
-		 *  Applications Specific URLs are created in AgendaPanel.hyperlinkUpdate();
-		 *  s += "<table><tr><td><a href=\"memoranda:newtask\"><b>"+Local.getString("New Task")+"</a></td></tr></table>";
-		 */
-		s += generateProjectInfo(CurrentProject.get(), date, expandedTasks);        
-		for (Iterator i = ProjectManager.getActiveProjects().iterator();
-				i.hasNext();
-				) {
-			Project p = (Project) i.next();
-			if (!p.getID().equals(CurrentProject.get().getID()))
-				s += generateProjectInfo(p, date, expandedTasks);
-		}
-		return s + "</td>";
-	}
-
-	static String generateEventsInfo(CalendarDate date) {
-		String s =
-				"<td width=\"34%\" valign=\"top\">"
-						+ "<a href=\"memoranda:events\"><h1>"
-						+ Local.getString("Events")
-						+ "</h1></a>\n"
-						+ "<table width=\"100%\" valign=\"top\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#FFFFF6\">\n";
-		Vector v = (Vector) EventsManager.getEventsForDate(date);
-		int n = 0;
-		for (Iterator i = v.iterator(); i.hasNext();) {
-			Event e = (Event) i.next();
-			String txt = e.getText();
-			String iurl =
-					net
-					.sf
-					.memoranda
-					.ui
-					.AppFrame
-					.class
-					.getResource("resources/agenda/spacer.gif")
-					.toExternalForm();
-			if (date.equals(CalendarDate.today())) {
-				if (e.getTime().after(new Date()))
-					txt = "<b>" + txt + "</b>";
-				if ((EventsScheduler.isEventScheduled())
-						&& (EventsScheduler
-								.getFirstScheduledEvent()
-								.getTime()
-								.equals(e.getTime()))) {
-					iurl =
-							net
-							.sf
-							.memoranda
-							.ui
-							.AppFrame
-							.class
-							.getResource("resources/agenda/arrow.gif")
-							.toExternalForm();
-				}
-			}
-			String icon =
-					"<img align=\"right\" width=\"16\" height=\"16\" src=\""
-							+ iurl
-							+ "\" border=\"0\"  hspace=\"0\" vspace=\"0\" alt=\"\">";
-
-			s += "<tr>\n<td>"
-					+ icon
-					+ "</td>"
-					+ "<td nowrap class=\"eventtime\">"
-					+ e.getTimeString()
-					+ "</td>"
-					+ "<td width=\"100%\" class=\"eventtext\">&nbsp;&nbsp;"
-					+ txt
-					+ "</td>\n"
-					+ "</tr>";
-
-		}
-		return s + "</table>";
-	}
-
-	static String generateStickers(CalendarDate date) {
-		String iurl =
-				net
-				.sf
-				.memoranda
-				.ui
-				.AppFrame
-				.class
-				.getResource("resources/agenda/addsticker.gif")
-				.toExternalForm();
-		String iurl2 =
-				net
-				.sf
-				.memoranda
-				.ui
-				.AppFrame
-				.class
-				.getResource("resources/agenda/removesticker.gif")
-				.toExternalForm();
-		 String s = "<hr><hr><table border=\"0\" cellpadding=\"0\" width=\"100%\"><tr><td><a href=\"memoranda:importstickers\"><b>"+Local.getString("Import Notes")+"</b></a></td><td><a href=\"memoranda:exportstickerst\"><b>"+Local.getString("Export notes to .txt")+"</b></a><td><a href=\"memoranda:exportstickersh\"><b>"+Local.getString("Export notes to .html")+"</b></a></td></tr></table>"
-				 +   "<table border=\"0\" cellpadding=\"0\" width=\"100%\"><tr><td><a href=\"memoranda:addsticker\"><img align=\"left\" width=\"22\" height=\"22\" src=\""				
-				 + iurl
-				+ "\" border=\"0\"  hspace=\"0\" vspace=\"0\" alt=\"New sticker\"></a></td><td width=\"100%\"><a href=\"memoranda:addsticker\"><b>&nbsp;"
-				+Local.getString("Add sticker")+"</b></a></td></tr></table>";
-		PriorityQueue pQ = sortStickers();
-		while(!pQ.Vacia()){
-		Element el = pQ.extraer();
-		String id = el.getAttributeValue("id");
-		String txt = el.getValue();
-            s += "\n<table border=\"0\" cellpadding=\"0\" width=\"100%\"><table width=\"100%\"><tr bgcolor=\"#E0E0E0\"><td><a href=\"memoranda:editsticker#"+id+"\">"+Local.getString("EDIT")+"</a></td><td width=\"70%\"><a href=\"memoranda:expandsticker#"+id+"\">"+Local.getString("OPEN IN A NEW WINDOW")+"</></td><td align=\"right\">" +
+    static int fontsize() {
+        if (Configuration.get("BASE_FONT_SIZE") == "") {
+            Configuration.put("BASE_FONT_SIZE", "16");
+            return Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString());
+        } else {
+            return Integer.parseInt(Configuration.get("BASE_FONT_SIZE").toString());
+        }
+    }
+
+    static String HEADER() {
+        String ret = "";
+
+        ret += "<html>"
+                + "<head>"
+                + "<title></title>\n"
+                + "<style>\n"
+                + "    body, td {font: "
+                + fontsize() +
+                "pt sans-serif}\n"
+                + "    h1 {font:"
+                + (int) (fontsize() + 4)
+                + "pt sans-serif; background-color:#E0E0E0; margin-top:0}\n"
+                + "    h2 {font:"
+                + (int) (fontsize() + 2) + "pt sans-serif; margin-bottom:0}\n"
+                + "    li {margin-bottom:5px}\n"
+                + " a {color:black; text-decoration:none}\n"
+                + "</style></head>\n"
+                + "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css.css\">"
+                + "<body><table width=\"100%\" height=\"100%\" border=\"0\" cellpadding=\"4\" cellspacing=\"4\">\n"
+                + "<tr>\n";
+        return ret;
+    }
+
+    static String FOOTER = "</td></tr></table></body></html>";
+
+    static String generateTasksInfo(Project p, CalendarDate date, Collection expandedTasks) {
+        TaskList tl;
+        if (p.getID().equals(CurrentProject.get().getID())) {
+            tl = CurrentProject.getTaskList();
+        } else {
+            tl = CurrentStorage.get().openTaskList(p);
+        }
+        String s = "";
+        int k = getProgress(tl);
+        if (k > -1) {
+            s += "<br>" + Local.getString("Total progress") + ": " + k + "%";
+        }
+        s += "</td></tr></table>\n";
+
+        @SuppressWarnings("rawtypes")
+        Vector tasks = (Vector) tl.getActiveSubTasks(null, date);
+        if (tasks.size() == 0) {
+            s += "<p>" + Local.getString("No actual tasks") + ".</p>\n";
+        } else {
+            s += Local.getString("Actual tasks") + ":<br>\n<ul>\n";
+
+            // TaskSorter.sort(tasks, date, TaskSorter.BY_IMP_RATE); // TODO: configurable method
+            Collections.sort(tasks);
+            for (Iterator i = tasks.iterator(); i.hasNext(); ) {
+                Task t = (Task) i.next();
+                // Always show active tasks only on agenda page from now on.
+                // If it's not active, then it's probably "not on the agenda" isn't it?
+                //                if(Context.get("SHOW_ACTIVE_TASKS_ONLY").equals(new Boolean(true))) {
+                //                    if (!((t.getStatus() == Task.ACTIVE) || (t.getStatus() == Task.DEADLINE) || (t.getStatus() == Task.FAILED))) {
+                //                        continue;
+                //                    }
+                //                }
+                // ignore if it's a sub-task, iterate over ROOT tasks here only
+                if (tl.hasParentTask(t.getId())) {
+                    continue;
+                }
+
+                s = s + renderTask(p, date, tl, t, 0, expandedTasks);
+                if (expandedTasks != null && expandedTasks.contains(t.getId())) {
+                    s = s + expandRecursively(p, date, tl, t, expandedTasks, 1);
+                }
+            }
+            s += "\n</ul>\n";
+        }
+
+        //Util.debug("html for project " + p.getTitle() + " is\n" + s);
+        //Util.debug("HEADER is " + HEADER);
+        return s;
+    }
+
+    /**
+     * @param t
+     * @param expandedTasks
+     */
+    private static String expandRecursively(Project p, CalendarDate date, TaskList tl, Task t, Collection expandedTasks, int level) {
+        Util.debug("Expanding task " + t.getText() + " level " + level);
+
+        Collection st = tl.getActiveSubTasks(t.getId(), date);
+
+        Util.debug("number of subtasks " + st.size());
+
+        String s = "\n<ul>\n";
+
+        for (Iterator iter = st.iterator(); iter.hasNext(); ) {
+            Task subTask = (Task) iter.next();
+            //            if(Context.get("SHOW_ACTIVE_TASKS_ONLY").equals(new Boolean(true))) {
+            //                if (!((subTask.getStatus() == Task.ACTIVE) || (subTask.getStatus() == Task.DEADLINE) || (subTask.getStatus() == Task.FAILED))) {
+            //                    continue;
+            //                }
+            //            }
+            s = s + renderTask(p, date, tl, subTask, level, expandedTasks);
+            if (expandedTasks.contains(subTask.getId())) {
+                s = s + expandRecursively(p, date, tl, subTask, expandedTasks, level + 1);
+            }
+        }
+        s += "\n</ul>\n";
+
+        return s;
+    }
+
+    /**
+     * @param p
+     * @param date
+     * @param s
+     * @param t
+     * @return
+     */
+    private static String renderTask(Project p, CalendarDate date, TaskList tl, Task t, int level, Collection expandedTasks) {
+        String s = "";
+
+        int pg = t.getProgress();
+        String progress = "";
+        if (pg == 100) {
+            progress = "<font color=\"green\">" + Local.getString("Completed") + "</font>";
+        } else {
+            progress = pg + Local.getString("% done");
+        }
+
+        /*
+        String nbsp = "&nbsp;&nbsp;";
+        String spacing = "";
+        for (int i = 0; i < level; i++) {
+            spacing = spacing + nbsp;
+        }
+        Util.debug("Spacing for task " + t.getText() + " is " + spacing);
+        */
+
+        String subTaskOperation = "";
+        if (tl.hasSubTasks(t.getId())) {
+            //            Util.debug("Task " + t.getID() + " has subtasks");
+            if (expandedTasks.contains(t.getId())) {
+                //                Util.debug("Task " + t.getID() + " is in list of expanded tasks");
+                subTaskOperation = "<a href=\"memoranda:closesubtasks#"
+                        + t.getId() + "\">(-)</a>";
+            } else {
+                //    Util.debug("Task " + t.getID() + " is not in list of expanded tasks");
+                subTaskOperation = "<a href=\"memoranda:expandsubtasks#"
+                        + t.getId() + "\">(+)</a>";
+            }
+        }
+
+        s += "<a name=\"" + t.getId()
+                + "\"><li><p>" + subTaskOperation
+                + "<a href=\"memoranda:tasks#"
+                + p.getID()
+                + "\"><b>"
+                + t.getText()
+                + "</b></a> : "
+                + progress
+                + "</p>"
+                + "<p>"
+                + Local.getString("Priority")
+                + ": "
+                + getPriorityString(t.getPriority())
+                + "</p>";
+        /*<<<<<<< AgendaGenerator.java
+        if (!(t.getStartDate().getDate()).after(t.getEndDate().getDate())) {
+            if (t.getEndDate().equals(date))
+                s += "<p><font color=\"#FF9900\"><b>"
+                        + Local.getString("Should be done today")
+                        + ".</b></font></p>";
+            else {
+                Calendar endDateCal = t.getEndDate().getCalendar();
+                Calendar dateCal = date.getCalendar();
+                int numOfDays = (endDateCal.get(Calendar.YEAR) * 365 + endDateCal.get(Calendar.DAY_OF_YEAR)) -
+                        (dateCal.get(Calendar.YEAR) * 365 + dateCal.get(Calendar.DAY_OF_YEAR));
+                String days = "";
+                if (numOfDays > 1)
+                    days = Local.getString("in") + " " + numOfDays + " " + Local.getString("day(s)");
+                else
+                    days = Local.getString("tomorrow");
+                s += "<p>"
+                        + Local.getString("Deadline")
+                        + ": <i>"
+                        + t.getEndDate().getMediumDateString()
+                        + "</i> (" + days + ")</p>";
+            }
+        }
+        =======*/
+        if (t.getEndDate().before(t.getStartDate())) {
+            s += "<p><font color=\"#006600\"><b>"
+                    + Local.getString("No Deadline")
+                    + ".</b></font></p>";
+        } else if (t.getEndDate().equals(date)) {
+            s += "<p><font color=\"#FF9900\"><b>"
+                    + Local.getString("Should be done today")
+                    + ".</b></font></p>";
+        } else {
+            Calendar endDateCal = t.getEndDate().getCalendar();
+            Calendar dateCal = date.getCalendar();
+            int numOfDays = (endDateCal.get(Calendar.YEAR) * 365
+                    + endDateCal.get(Calendar.DAY_OF_YEAR))
+                    - (dateCal.get(Calendar.YEAR) * 365
+                    + dateCal.get(Calendar.DAY_OF_YEAR));
+            String days = "";
+            if (numOfDays > 0) {
+                if (numOfDays > 1) {
+                    days = Local.getString("in")
+                            + " " + numOfDays
+                            + " " + Local.getString("day(s)");
+                } else {
+                    days = Local.getString("tomorrow");
+                }
+
+                s += "<p>"
+                        + Local.getString("Deadline")
+                        + ": <i>"
+                        + t.getEndDate().getMediumDateString()
+                        + "</i> (" + days + ")</p>";
+            } else if ((numOfDays < 0) && (numOfDays > -10000)) {
+                String overdueDays = String.valueOf(-1 * numOfDays);
+                s += "<p><font color=\"#FF9900\"><b>"
+                        + overdueDays + " "
+                        + Local.getString("days overdue")
+                        + ".</b></font></p>";
+            } else {
+                // tasks that have no deadline
+                s += "<p>"
+                        + Local.getString("No Deadline")
+                        + "</p>";
+            }
+        }
+        //>>>>>>> 1.4
+        s += "</li>\n";
+        return s;
+    }
+
+    static int getProgress(TaskList tl) {
+        Vector v = (Vector) tl.getAllSubTasks(null);
+        if (v.size() == 0) {
+            return -1;
+        }
+        int p = 0;
+        for (Enumeration en = v.elements(); en.hasMoreElements(); ) {
+            Task t = (Task) en.nextElement();
+            p += t.getProgress();
+        }
+        return (p * 100) / (v.size() * 100);
+    }
+
+    static String getPriorityString(int p) {
+        switch (p) {
+            case Task.PRIORITY_NORMAL:
+                return "<font color=\"green\">" +
+                        Local.getString("Normal") +
+                        "</font>";
+            case Task.PRIORITY_LOW:
+                return "<font color=\"#3333CC\">" +
+                        Local.getString("Low") +
+                        "</font>";
+            case Task.PRIORITY_LOWEST:
+                return "<font color=\"#666699\">" + Local.getString("Lowest") + "</font>";
+            case Task.PRIORITY_HIGH:
+                return "<font color=\"#FF9900\">" + Local.getString("High") + "</font>";
+            case Task.PRIORITY_HIGHEST:
+                return "<font color=\"red\">" + Local.getString("Highest") + "</font>";
+        }
+        return "";
+    }
+
+    static String generateProjectInfo(Project p, CalendarDate date, Collection expandedTasks) {
+        String s = "<h2><a href=\"memoranda:project#"
+                + p.getID()
+                + "\">"
+                + p.getTitle()
+                + "</a></h2>\n"
+                + "<table border=\"0\" width=\"100%\" cellpadding=\"2\" bgcolor=\"#EFEFEF\"><tr><td>"
+                + Local.getString("Start date") + ": <i>" + p.getStartDate().getMediumDateString() + "</i>\n";
+        if (p.getEndDate() != null) {
+            s += "<br>" + Local.getString("End date") + ": <i>" + p.getEndDate().getMediumDateString()
+                    + "</i>\n";
+        }
+        return s + generateTasksInfo(p, date, expandedTasks);
+    }
+
+    static String generateAllProjectsInfo(CalendarDate date, Collection expandedTasks) {
+        String s =
+                "<td width=\"66%\" valign=\"top\">"
+                        + "<h1>"
+                        + Local.getString("Projects and tasks")
+                        + "</h1>\n";
+        /* commenting out for now shows how to create new html buttons (as ugly as they are)
+         *  Applications Specific URLs are created in AgendaPanel.hyperlinkUpdate();
+         *  s += "<table><tr><td><a href=\"memoranda:newtask\"><b>"+Local.getString("New Task")+"</a></td></tr></table>";
+         */
+        s += generateProjectInfo(CurrentProject.get(), date, expandedTasks);
+        for (Iterator i = ProjectManager.getActiveProjects().iterator(); i.hasNext(); ) {
+            Project p = (Project) i.next();
+            if (!p.getID().equals(CurrentProject.get().getID())) {
+                s += generateProjectInfo(p, date, expandedTasks);
+            }
+        }
+        return s + "</td>";
+    }
+
+    static String generateEventsInfo(CalendarDate date) {
+        String s =
+                "<td width=\"34%\" valign=\"top\">"
+                        + "<a href=\"memoranda:events\"><h1>"
+                        + Local.getString("Events")
+                        + "</h1></a>\n"
+                        + "<table width=\"100%\" valign=\"top\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#FFFFF6\">\n";
+        Vector v = (Vector) EventsManager.getEventsForDate(date);
+        int n = 0;
+        for (Iterator i = v.iterator(); i.hasNext(); ) {
+            Event e = (Event) i.next();
+            String txt = e.getText();
+            String iurl =
+                    net
+                            .sf
+                            .memoranda
+                            .ui
+                            .AppFrame
+                            .class
+                            .getResource("resources/agenda/spacer.gif")
+                            .toExternalForm();
+            if (date.equals(CalendarDate.today())) {
+                if (e.getTime().after(new Date())) {
+                    txt = "<b>" + txt + "</b>";
+                }
+                if ((EventsScheduler.isEventScheduled())
+                        && (EventsScheduler
+                        .getFirstScheduledEvent()
+                        .getTime()
+                        .equals(e.getTime()))) {
+                    iurl =
+                            net
+                                    .sf
+                                    .memoranda
+                                    .ui
+                                    .AppFrame
+                                    .class
+                                    .getResource("resources/agenda/arrow.gif")
+                                    .toExternalForm();
+                }
+            }
+            String icon =
+                    "<img align=\"right\" width=\"16\" height=\"16\" src=\""
+                            + iurl
+                            + "\" border=\"0\"  hspace=\"0\" vspace=\"0\" alt=\"\">";
+
+            s += "<tr>\n<td>"
+                    + icon
+                    + "</td>"
+                    + "<td nowrap class=\"eventtime\">"
+                    + e.getTimeString()
+                    + "</td>"
+                    + "<td width=\"100%\" class=\"eventtext\">&nbsp;&nbsp;"
+                    + txt
+                    + "</td>\n"
+                    + "</tr>";
+
+        }
+        return s + "</table>";
+    }
+
+    static String generateStickers(CalendarDate date) {
+        String iurl =
+                net
+                        .sf
+                        .memoranda
+                        .ui
+                        .AppFrame
+                        .class
+                        .getResource("resources/agenda/addsticker.gif")
+                        .toExternalForm();
+        String iurl2 =
+                net
+                        .sf
+                        .memoranda
+                        .ui
+                        .AppFrame
+                        .class
+                        .getResource("resources/agenda/removesticker.gif")
+                        .toExternalForm();
+        String s = "<hr><hr><table border=\"0\" cellpadding=\"0\" width=\"100%\"><tr><td><a href=\"memoranda:importstickers\"><b>" + Local.getString("Import Notes") + "</b></a></td><td><a href=\"memoranda:exportstickerst\"><b>" + Local.getString("Export notes to .txt") + "</b></a><td><a href=\"memoranda:exportstickersh\"><b>" + Local.getString("Export notes to .html") + "</b></a></td></tr></table>"
+                + "<table border=\"0\" cellpadding=\"0\" width=\"100%\"><tr><td><a href=\"memoranda:addsticker\"><img align=\"left\" width=\"22\" height=\"22\" src=\""
+                + iurl
+                + "\" border=\"0\"  hspace=\"0\" vspace=\"0\" alt=\"New sticker\"></a></td><td width=\"100%\"><a href=\"memoranda:addsticker\"><b>&nbsp;"
+                + Local.getString("Add sticker") + "</b></a></td></tr></table>";
+        PriorityQueue pQ = sortStickers();
+        while (!pQ.Vacia()) {
+            Element el = pQ.extraer();
+            String id = el.getAttributeValue("id");
+            String txt = el.getValue();
+            s += "\n<table border=\"0\" cellpadding=\"0\" width=\"100%\"><table width=\"100%\"><tr bgcolor=\"#E0E0E0\"><td><a href=\"memoranda:editsticker#" + id + "\">" + Local.getString("EDIT") + "</a></td><td width=\"70%\"><a href=\"memoranda:expandsticker#" + id + "\">" + Local.getString("OPEN IN A NEW WINDOW") + "</></td><td align=\"right\">" +
                     "&nbsp;" + // without this removesticker link takes klicks from whole cell
-                      "<a href=\"memoranda:removesticker#"+id+"\"><img align=\"left\" width=\"14\" height=\"14\" src=\""
+                    "<a href=\"memoranda:removesticker#" + id + "\"><img align=\"left\" width=\"14\" height=\"14\" src=\""
                     + iurl2
-                    + "\" border=\"0\"  hspace=\"0\" vspace=\"0\" alt=\"Remove sticker\"></a></td></table></tr><tr><td>"+txt+"</td></tr></table>";
+                    + "\" border=\"0\"  hspace=\"0\" vspace=\"0\" alt=\"Remove sticker\"></a></td></table></tr><tr><td>" + txt + "</td></tr></table>";
         }
         s += "<hr>";
-		return s;
-	}
+        return s;
+    }
 
-    private static PriorityQueue sortStickers(){
+    private static PriorityQueue sortStickers() {
         Map stickers = EventsManager.getStickers();
         PriorityQueue pQ = new PriorityQueue(stickers.size());
-    	for (Iterator i = stickers.keySet().iterator(); i.hasNext();) {
-        	String id = (String)i.next();
-        	Element el = (Element)stickers.get(id);
-        	int j=2;
-        	j=Integer.parseInt(el.getAttributeValue("priority"));
-        	pQ.insertar(new Pair(el,j));
-    	}
-    	return pQ;
+        for (Iterator i = stickers.keySet().iterator(); i.hasNext(); ) {
+            String id = (String) i.next();
+            Element el = (Element) stickers.get(id);
+            int j = 2;
+            j = Integer.parseInt(el.getAttributeValue("priority"));
+            pQ.insertar(new Pair(el, j));
+        }
+        return pQ;
+    }
+
+    private static String addExpandHyperLink(final String txt, final String id) {
+        String ret = "";
+        int first = txt.indexOf(">");
+        int last = txt.lastIndexOf("<");
+        ret = txt.substring(0, first + 1) + "<a href=\"memoranda:expandsticker#" + id + "\">" + txt.substring(first + 1, last)
+                + "</a>" + txt.substring(last);
+        return ret;
+    }
+
+    private static String addEditHyperLink(String txt, String id) {
+        String ret = "";
+        int first = txt.indexOf(">");
+        int last = txt.lastIndexOf("<");
+        ret = txt.substring(0, first + 1) + "<a href=\"memoranda:editsticker#" + id + "\">" + txt.substring(first + 1, last) + "</a>" + txt.substring(last);
+        return ret;
+    }
+
+    public static String getAgenda(CalendarDate date, Collection expandedTasks) {
+        String s = HEADER();
+        s += generateAllProjectsInfo(date, expandedTasks);
+        s += generateEventsInfo(date);
+        s += generateStickers(date);
+        //        /*DEBUG*/System.out.println(s+FOOTER);
+        return s + FOOTER;
     }
-    
-	private static String addExpandHyperLink(final String txt, final String id) {
-		String ret="";
-		int first=txt.indexOf(">");
-		int last=txt.lastIndexOf("<");
-		ret=txt.substring(0, first+1)+"<a href=\"memoranda:expandsticker#"+id+"\">"+txt.substring(first+1, last)
-				+"</a>"+txt.substring(last);
-		return ret;
-	}
-	private static String addEditHyperLink(String txt, String id) {
-		String ret="";
-		int first=txt.indexOf(">");
-		int last=txt.lastIndexOf("<");
-		ret=txt.substring(0, first+1)+"<a href=\"memoranda:editsticker#"+id+"\">"+txt.substring(first+1, last)+"</a>"+txt.substring(last);
-		 return ret;
-		 }
-	
-	public static String getAgenda(CalendarDate date, Collection expandedTasks) {
-		String s = HEADER();
-		s += generateAllProjectsInfo(date, expandedTasks);
-		s += generateEventsInfo(date);
-		s += generateStickers(date);
-		//        /*DEBUG*/System.out.println(s+FOOTER);
-		return s + FOOTER;
-	}
-	/*    
+    /*
     we do not need this. Tasks are sorted using the Comparable interface
     public static class TaskSorter {
 
@@ -494,12 +478,12 @@ public class AgendaGenerator {
 
         public static long calcTaskRate(Task t, CalendarDate d) {
             /*
-	 * A "Task rate" is an informal index of importance of the task
-	 * considering priority, number of days to deadline and current
-	 * progress.
-	 * 
-	 * rate = (100-progress) / (numOfDays+1) * (priority+1)
-	 * /
+     * A "Task rate" is an informal index of importance of the task
+     * considering priority, number of days to deadline and current
+     * progress.
+     * 
+     * rate = (100-progress) / (numOfDays+1) * (priority+1)
+     * /
             Calendar endDateCal = t.getEndDate().getCalendar();
             Calendar dateCal = d.getCalendar();
             int numOfDays = (endDateCal.get(Calendar.YEAR)*365 + endDateCal.get(Calendar.DAY_OF_YEAR)) - 
@@ -554,5 +538,5 @@ public class AgendaGenerator {
         }
 
     }
-	 */
+     */
 }
diff --git a/src/net/sf/memoranda/util/AppList.java b/src/net/sf/memoranda/util/AppList.java
index 0ea58ba..d178d62 100755
--- a/src/net/sf/memoranda/util/AppList.java
+++ b/src/net/sf/memoranda/util/AppList.java
@@ -7,10 +7,13 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.util.StringTokenizer;
+
 import nu.xom.Attribute;
 import nu.xom.Element;
 import nu.xom.Elements;
+
+import java.util.StringTokenizer;
+
 /**
  *
  */
@@ -25,14 +28,16 @@ public class AppList {
 
     public static String getPlafCode(String osName) {
         osName = osName.toLowerCase();
-        if (osName.indexOf(OS_WINDOWS) > -1)
+        if (osName.indexOf(OS_WINDOWS) > -1) {
             return OS_WINDOWS;
-        else if (osName.indexOf(OS_LINUX) > -1)
+        } else if (osName.indexOf(OS_LINUX) > -1) {
             return OS_LINUX;
-        else if (osName.indexOf(OS_SOLARIS) > -1)
+        } else if (osName.indexOf(OS_SOLARIS) > -1) {
             return OS_SOLARIS;
+        }
         return "unknown";
     }
+
     /**
      * Constructor for AppList.
      */
@@ -42,94 +47,110 @@ public class AppList {
 
     public String getCommandLine(String appId, String fPath) {
         Elements apps = _root.getChildElements("app");
-        fPath = fPath.replaceAll("\\\\", "\\\\\\\\");        
-        for (int i = 0; i < apps.size(); i++)
+        fPath = fPath.replaceAll("\\\\", "\\\\\\\\");
+        for (int i = 0; i < apps.size(); i++) {
             if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
                 Element app = apps.get(i);
                 String pt = app.getAttribute("command").getValue();
-                if (fPath.indexOf(' ') >= 0)
-                   fPath = '"' + fPath + '"'; 
+                if (fPath.indexOf(' ') >= 0) {
+                    fPath = '"' + fPath + '"';
+                }
                 pt = pt.replaceAll("\\$1", fPath);
-                return app.getAttribute("findPath").getValue() + "/" + app.getAttribute("exec").getValue()+" "+pt;
+                return app.getAttribute("findPath").getValue() + "/" + app.getAttribute("exec").getValue() + " " + pt;
             }
+        }
         return null;
     }
-    
+
     public String[] getCommand(String appId, String fPath) {
         Elements apps = _root.getChildElements("app");
         //fPath = fPath.replaceAll("\\\\", "\\\\\\\\");        
-        for (int i = 0; i < apps.size(); i++)
+        for (int i = 0; i < apps.size(); i++) {
             if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
                 Element app = apps.get(i);
                 String command = app.getAttribute("command").getValue();
                 String exec = app.getAttribute("findPath").getValue() + "/" + app.getAttribute("exec").getValue();
                 StringTokenizer st = new StringTokenizer(command);
-                String[] cmdarray = new String[st.countTokens()+1];
+                String[] cmdarray = new String[st.countTokens() + 1];
                 cmdarray[0] = exec;
                 for (int j = 1; st.hasMoreTokens(); j++) {
                     String tk = st.nextToken();
-                    if (tk.equals("$1"))
+                    if (tk.equals("$1")) {
                         cmdarray[j] = fPath;
-                    else
+                    } else {
                         cmdarray[j] = tk;
+                    }
                 }
                 return cmdarray;
             }
+        }
         return null;
     }
 
     public String getFindPath(String appId) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
-            if (apps.get(i).getAttribute("id").getValue().equals(appId))
+        for (int i = 0; i < apps.size(); i++) {
+            if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
                 return apps.get(i).getAttribute("findPath").getValue();
+            }
+        }
         return null;
     }
 
     public void setFindPath(String appId, String p) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
+        for (int i = 0; i < apps.size(); i++) {
             if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
-              if (apps.get(i).getAttribute("findPath") == null)
-                apps.get(i).addAttribute(new Attribute("findPath", p));
-              else
-                apps.get(i).getAttribute("findPath").setValue(p);
+                if (apps.get(i).getAttribute("findPath") == null) {
+                    apps.get(i).addAttribute(new Attribute("findPath", p));
+                } else {
+                    apps.get(i).getAttribute("findPath").setValue(p);
+                }
             }
+        }
 
     }
 
     public String getExec(String appId) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
-            if (apps.get(i).getAttribute("id").getValue().equals(appId))
+        for (int i = 0; i < apps.size(); i++) {
+            if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
                 return apps.get(i).getAttribute("exec").getValue();
+            }
+        }
         return null;
     }
 
     public void setExec(String appId, String e) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
-            if (apps.get(i).getAttribute("id").getValue().equals(appId)){
-              if (apps.get(i).getAttribute("exec") == null)
-                apps.get(i).addAttribute(new Attribute("exec", e));
-              else
-                apps.get(i).getAttribute("exec").setValue(e);
+        for (int i = 0; i < apps.size(); i++) {
+            if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
+                if (apps.get(i).getAttribute("exec") == null) {
+                    apps.get(i).addAttribute(new Attribute("exec", e));
+                } else {
+                    apps.get(i).getAttribute("exec").setValue(e);
+                }
             }
+        }
     }
 
     public String getCommandLinePattern(String appId) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
-            if (apps.get(i).getAttribute("id").getValue().equals(appId))
+        for (int i = 0; i < apps.size(); i++) {
+            if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
                 return apps.get(i).getAttribute("command").getValue();
+            }
+        }
         return null;
     }
 
     public void setCommandLinePattern(String appId, String clp) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
-            if (apps.get(i).getAttribute("id").getValue().equals(appId))
+        for (int i = 0; i < apps.size(); i++) {
+            if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
                 apps.get(i).addAttribute(new Attribute("command", clp));
+            }
+        }
     }
 
     public void addApp(String appId, String fp, String exec, String clp) {
@@ -143,44 +164,51 @@ public class AppList {
 
     public void addOrReplaceApp(String appId, String fp, String exec, String clp) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
+        for (int i = 0; i < apps.size(); i++) {
             if (apps.get(i).getAttribute("id").getValue().equals(appId)) {
-                 if (apps.get(i).getAttribute("findPath") == null)
-                  apps.get(i).addAttribute(new Attribute("findPath", fp));
-                 else
-                  apps.get(i).getAttribute("findPath").setValue(fp);
-                 if (apps.get(i).getAttribute("exec") == null)
-                  apps.get(i).addAttribute(new Attribute("exec", exec));
-                 else
-                  apps.get(i).getAttribute("exec").setValue(exec);
-                if (apps.get(i).getAttribute("command") == null)
-                  apps.get(i).addAttribute(new Attribute("command", clp));
-                else
-                  apps.get(i).getAttribute("command").setValue(clp);
+                if (apps.get(i).getAttribute("findPath") == null) {
+                    apps.get(i).addAttribute(new Attribute("findPath", fp));
+                } else {
+                    apps.get(i).getAttribute("findPath").setValue(fp);
+                }
+                if (apps.get(i).getAttribute("exec") == null) {
+                    apps.get(i).addAttribute(new Attribute("exec", exec));
+                } else {
+                    apps.get(i).getAttribute("exec").setValue(exec);
+                }
+                if (apps.get(i).getAttribute("command") == null) {
+                    apps.get(i).addAttribute(new Attribute("command", clp));
+                } else {
+                    apps.get(i).getAttribute("command").setValue(clp);
+                }
                 return;
             }
+        }
         addApp(appId, fp, exec, clp);
     }
-    
+
     public String getBrowserExec() {
-        Elements els = _root.getChildElements("browser");        
-        if (els.size() < 1) return null;
+        Elements els = _root.getChildElements("browser");
+        if (els.size() < 1) {
+            return null;
+        }
         Element el = els.get(0);
         return (el.getAttribute("path").getValue());
     }
-    
+
     public void setBrowserExec(String path) {
         Element el = null;
-        Elements els = _root.getChildElements("browser");    
+        Elements els = _root.getChildElements("browser");
         if (els.size() < 1) {
             el = new Element("browser");
             _root.appendChild(el);
-        }
-        else
+        } else {
             el = els.get(0);
-        if (el.getAttribute("path") != null)
+        }
+        if (el.getAttribute("path") != null) {
             el.getAttribute("path").setValue(path);
-        else 
+        } else {
             el.addAttribute(new Attribute("path", path));
+        }
     }
 }
diff --git a/src/net/sf/memoranda/util/Configuration.java b/src/net/sf/memoranda/util/Configuration.java
index 29f81d7..c4e8978 100755
--- a/src/net/sf/memoranda/util/Configuration.java
+++ b/src/net/sf/memoranda/util/Configuration.java
@@ -7,75 +7,77 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
+
+import net.sf.memoranda.ui.ExceptionDialog;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 
-import net.sf.memoranda.ui.ExceptionDialog;
 /**
  *
  */
 /*$Id: Configuration.java,v 1.5 2004/10/11 08:48:21 alexeya Exp $*/
 public class Configuration {
 
-    static LoadableProperties config  = new LoadableProperties();
+    static LoadableProperties config = new LoadableProperties();
     static String configPath = getConfigPath();
 
     static {
-    try {
-     config.load(new FileInputStream(configPath));
-     System.out.println("Loaded from " + configPath);
-    }
-    catch (Exception e) {      
-      File f = new File(configPath);
-      new File(f.getParent()).mkdirs();      
-      /*DEBUG*/System.out.println("New configuration created: "+configPath);
-      try {
-        config.load(Configuration.class.getResourceAsStream("resources/memoranda.default.properties"));
-        saveConfig();      
-      }
-      catch (Exception e2) {
-        new ExceptionDialog(e2, "Failed to load default configuration from resources.", "");
-        config = null;
-      }
+        try {
+            config.load(new FileInputStream(configPath));
+            System.out.println("Loaded from " + configPath);
+        } catch (Exception e) {
+            File f = new File(configPath);
+            new File(f.getParent()).mkdirs();
+            /*DEBUG*/
+            System.out.println("New configuration created: " + configPath);
+            try {
+                config.load(Configuration.class.getResourceAsStream("resources/memoranda.default.properties"));
+                saveConfig();
+            } catch (Exception e2) {
+                new ExceptionDialog(e2, "Failed to load default configuration from resources.", "");
+                config = null;
+            }
+        }
     }
-  }
-  
-  static String getConfigPath() {
-    String p = Util.getEnvDir()+"memoranda.properties";
-    if (new File(p).exists()) 
-        return p;
-    String p1 = Util.getEnvDir()+"jnotes2.properties";
-    if (new File(p1).exists()) {
-        /*DEBUG*/System.out.println(p + " not found.\n"+p1+" used instead.");
-        return p1;
-    }    
-    return p;
-  }
 
-  public static void saveConfig() {
-    try {
-    config.save(new FileOutputStream(configPath));
+    static String getConfigPath() {
+        String p = Util.getEnvDir() + "memoranda.properties";
+        if (new File(p).exists()) {
+            return p;
+        }
+        String p1 = Util.getEnvDir() + "jnotes2.properties";
+        if (new File(p1).exists()) {
+            /*DEBUG*/
+            System.out.println(p + " not found.\n" + p1 + " used instead.");
+            return p1;
+        }
+        return p;
     }
-    catch (Exception e) {
-     new ExceptionDialog(e, "Failed to save a configuration file:<br>"+configPath, "");
+
+    public static void saveConfig() {
+        try {
+            config.save(new FileOutputStream(configPath));
+        } catch (Exception e) {
+            new ExceptionDialog(e, "Failed to save a configuration file:<br>" + configPath, "");
+        }
     }
-  }
 
-  public static Object get(String key) {
-    if ((config.get(key)) == null) {
+    public static Object get(String key) {
+        if ((config.get(key)) == null) {
         /*DEBUG*///
-    	System.out.println("Configuration: Key '"+key+"' not found.");
-        return "";
+            System.out.println("Configuration: Key '" + key + "' not found.");
+            return "";
+        }
+        if (key.equals("BASE_FONT_SIZE") && config.get(key).toString().equals("")) {
+            config.put("BASE_FONT_SIZE", "16");
+        }
+        return config.get(key);
     }
-    if(key.equals("BASE_FONT_SIZE") && config.get(key).toString().equals("")){
-    	config.put("BASE_FONT_SIZE", "16");
-    }
-    return config.get(key);
-  }
 
-  @SuppressWarnings("unchecked")
-public static void put(String key, Object value) {
-    config.put(key, value);
-  }
+    @SuppressWarnings("unchecked")
+    public static void put(String key, Object value) {
+        config.put(key, value);
+    }
 }
diff --git a/src/net/sf/memoranda/util/Context.java b/src/net/sf/memoranda/util/Context.java
index cb6c804..511e05c 100755
--- a/src/net/sf/memoranda/util/Context.java
+++ b/src/net/sf/memoranda/util/Context.java
@@ -1,37 +1,40 @@
 package net.sf.memoranda.util;
+
+import net.sf.memoranda.ui.AppFrame;
+
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 
-import net.sf.memoranda.ui.AppFrame;
 /**
  * <p>Title: </p>
  * <p>Description: </p>
  * <p>Copyright: Copyright (c) 2002</p>
  * <p>Company: </p>
+ *
  * @author unascribed
  * @version 1.0
  */
 
 /*$Id: Context.java,v 1.3 2004/01/30 12:17:42 alexeya Exp $*/
 public class Context {
-    
-  public static LoadableProperties context = new LoadableProperties();
-  
-  static {
-    CurrentStorage.get().restoreContext();
-    AppFrame.addExitListener(new ActionListener() {
+
+    public static LoadableProperties context = new LoadableProperties();
+
+    static {
+        CurrentStorage.get().restoreContext();
+        AppFrame.addExitListener(new ActionListener() {
             public void actionPerformed(ActionEvent e) {
                 CurrentStorage.get().storeContext();
             }
         });
-  }
-  
-  public static Object get(Object key) {
-    return context.get(key);
-  }
-
-  public static void put(Object key, Object value) {
-    context.put(key, value);
-  }
+    }
+
+    public static Object get(Object key) {
+        return context.get(key);
+    }
+
+    public static void put(Object key, Object value) {
+        context.put(key, value);
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/util/CurrentStorage.java b/src/net/sf/memoranda/util/CurrentStorage.java
index a2174da..3991c49 100755
--- a/src/net/sf/memoranda/util/CurrentStorage.java
+++ b/src/net/sf/memoranda/util/CurrentStorage.java
@@ -2,38 +2,39 @@
  * CurrentStorage.java
  * Created on 13.02.2003, 18:30:59 Alex
  * Package: net.sf.memoranda.util
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
+
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.util.Collection;
 import java.util.Vector;
 
 /**
- * 
+ *
  */
 /*$Id: CurrentStorage.java,v 1.3 2004/01/30 12:17:42 alexeya Exp $*/
 public class CurrentStorage {
-    
+
     /**
      * @todo: implement storage congiguration
      */
     private static Storage _storage = new FileStorage();
-    
+
     private static Vector actionListeners = new Vector();
-    
+
     public static Storage get() {
         return _storage;
     }
-    
+
     public static void set(Storage storage) {
         _storage = storage;
         storageChanged();
     }
-    
+
     public static void addChangeListener(ActionListener al) {
         actionListeners.add(al);
     }
@@ -41,10 +42,11 @@ public class CurrentStorage {
     public static Collection getChangeListeners() {
         return actionListeners;
     }
-    
+
     private static void storageChanged() {
-        for (int i = 0; i < actionListeners.size(); i++)
-            ((ActionListener)actionListeners.get(i)).actionPerformed(new ActionEvent(null,0,"Current storage changed"));
+        for (int i = 0; i < actionListeners.size(); i++) {
+            ((ActionListener) actionListeners.get(i)).actionPerformed(new ActionEvent(null, 0, "Current storage changed"));
+        }
     }
-   
+
 }
diff --git a/src/net/sf/memoranda/util/FileStorage.java b/src/net/sf/memoranda/util/FileStorage.java
index fcc72dd..91f6397 100755
--- a/src/net/sf/memoranda/util/FileStorage.java
+++ b/src/net/sf/memoranda/util/FileStorage.java
@@ -7,35 +7,19 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.net.URL;
-
-import javax.swing.text.html.HTMLDocument;
-import javax.swing.text.html.HTMLEditorKit;
 
-import net.sf.memoranda.EventsManager;
-import net.sf.memoranda.Note;
-import net.sf.memoranda.NoteList;
-import net.sf.memoranda.NoteListImpl;
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectManager;
-import net.sf.memoranda.ResourcesList;
-import net.sf.memoranda.ResourcesListImpl;
-import net.sf.memoranda.TaskList;
-import net.sf.memoranda.TaskListImpl;
+import net.sf.memoranda.*;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.ui.ExceptionDialog;
 import net.sf.memoranda.ui.htmleditor.AltHTMLWriter;
 import nu.xom.Builder;
-import nu.xom.DocType;
 import nu.xom.Document;
 
+import javax.swing.text.html.HTMLDocument;
+import javax.swing.text.html.HTMLEditorKit;
+import java.io.*;
+import java.net.URL;
+
 
 /**
  *
@@ -55,8 +39,8 @@ public class FileStorage implements Storage {
         if (mHome.length() > 0) {
             JN_DOCPATH = mHome;
             /*DEBUG*/
-        	System.out.println("[DEBUG]***Memoranda storage path has set to: " +
-        	 JN_DOCPATH);
+            System.out.println("[DEBUG]***Memoranda storage path has set to: " +
+                    JN_DOCPATH);
         }
     }
 
@@ -69,16 +53,15 @@ public class FileStorage implements Storage {
             //Serializer serializer = new Serializer(new FileOutputStream(filePath), "UTF-8");
             //serializer.write(doc);
             OutputStreamWriter fw =
-                new OutputStreamWriter(new FileOutputStream(filePath), "UTF-8");
+                    new OutputStreamWriter(new FileOutputStream(filePath), "UTF-8");
             fw.write(doc.toXML());
             fw.flush();
             fw.close();
-        }
-        catch (IOException ex) {
+        } catch (IOException ex) {
             new ExceptionDialog(
-                ex,
-                "Failed to write a document to " + filePath,
-                "");
+                    ex,
+                    "Failed to write a document to " + filePath,
+                    "");
         }
     }
 
@@ -90,12 +73,11 @@ public class FileStorage implements Storage {
     public static Document openDocument(String filePath) {
         try {
             return openDocument(new FileInputStream(filePath));
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(
-                ex,
-                "Failed to read a document from " + filePath,
-                "");
+                    ex,
+                    "Failed to read a document from " + filePath,
+                    "");
         }
         return null;
     }
@@ -109,30 +91,30 @@ public class FileStorage implements Storage {
      */
     public void storeNote(Note note, javax.swing.text.Document doc) {
         String filename =
-            JN_DOCPATH + note.getProject().getID() + File.separator;
+                JN_DOCPATH + note.getProject().getID() + File.separator;
         doc.putProperty(
-            javax.swing.text.Document.TitleProperty,
-            note.getTitle());        
+                javax.swing.text.Document.TitleProperty,
+                note.getTitle());
         CalendarDate d = note.getDate();
 
         filename += note.getId();//d.getDay() + "-" + d.getMonth() + "-" + d.getYear();
-        /*DEBUG*/System.out.println("[DEBUG] Save note: "+ filename);
+        /*DEBUG*/
+        System.out.println("[DEBUG] Save note: " + filename);
 
         try {
             OutputStreamWriter fw =
-                new OutputStreamWriter(new FileOutputStream(filename), "UTF-8");
+                    new OutputStreamWriter(new FileOutputStream(filename), "UTF-8");
             AltHTMLWriter writer = new AltHTMLWriter(fw, (HTMLDocument) doc);
             writer.write();
             fw.flush();
             fw.close();
             //editorKit.write(new FileOutputStream(filename), doc, 0, doc.getLength());
             //editorKit.write(fw, doc, 0, doc.getLength());
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(
-                ex,
-                "Failed to write a document to " + filename,
-                "");
+                    ex,
+                    "Failed to write a document to " + filename,
+                    "");
         }
         /*String filename = JN_DOCPATH + note.getProject().getID() + "/";
         doc.putProperty(javax.swing.text.Document.TitleProperty, note.getTitle());
@@ -156,14 +138,16 @@ public class FileStorage implements Storage {
             }*/
 
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#openNote(net.sf.memoranda.Note)
      */
     public javax.swing.text.Document openNote(Note note) {
 
         HTMLDocument doc = (HTMLDocument) editorKit.createDefaultDocument();
-        if (note == null)
+        if (note == null) {
             return doc;
+        }
         /*
                 String filename = JN_DOCPATH + note.getProject().getID() + File.separator;
                 CalendarDate d = note.getDate();
@@ -173,19 +157,18 @@ public class FileStorage implements Storage {
         try {
             /*DEBUG*/
 
-//            Util.debug("Open note: " + filename);
-//        	Util.debug("Note Title: " + note.getTitle());
-        	doc.setBase(new URL(getNoteURL(note)));
-        	editorKit.read(
-                new InputStreamReader(new FileInputStream(filename), "UTF-8"),
-                doc,
-                0);
-        }
-        catch (Exception ex) {
+            //            Util.debug("Open note: " + filename);
+            //        	Util.debug("Note Title: " + note.getTitle());
+            doc.setBase(new URL(getNoteURL(note)));
+            editorKit.read(
+                    new InputStreamReader(new FileInputStream(filename), "UTF-8"),
+                    doc,
+                    0);
+        } catch (Exception ex) {
             //ex.printStackTrace();
             // Do nothing - we've got a new empty document!
         }
-        
+
         return doc;
         /*HTMLDocument doc = (HTMLDocument)editorKit.createDefaultDocument();
         if (note == null) return doc;
@@ -208,16 +191,16 @@ public class FileStorage implements Storage {
         return doc;*/
     }
 
-    public String getNoteURL(Note note) {        
+    public String getNoteURL(Note note) {
         return "file:" + JN_DOCPATH + note.getProject().getID() + "/" + note.getId();
     }
 
-   public String getNotePath(Note note) {
+    public String getNotePath(Note note) {
         String filename = JN_DOCPATH + note.getProject().getID() + File.separator;
-//        CalendarDate d = note.getDate();
+        //        CalendarDate d = note.getDate();
         filename += note.getId();//d.getDay() + "-" + d.getMonth() + "-" + d.getYear();
-	return filename;
-   }
+        return filename;
+    }
 
 
     public void removeNote(Note note) {
@@ -237,18 +220,20 @@ public class FileStorage implements Storage {
         }
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Open project manager: " + JN_DOCPATH + ".projects");
+                "[DEBUG] Open project manager: " + JN_DOCPATH + ".projects");
         ProjectManager._doc = openDocument(JN_DOCPATH + ".projects");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#storeProjectManager(nu.xom.Document)
      */
     public void storeProjectManager() {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Save project manager: " + JN_DOCPATH + ".projects");
+                "[DEBUG] Save project manager: " + JN_DOCPATH + ".projects");
         saveDocument(ProjectManager._doc, JN_DOCPATH + ".projects");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#removeProject(net.sf.memoranda.Project)
      */
@@ -256,8 +241,9 @@ public class FileStorage implements Storage {
         String id = prj.getID();
         File f = new File(JN_DOCPATH + id);
         File[] files = f.listFiles();
-        for (int i = 0; i < files.length; i++)
+        for (int i = 0; i < files.length; i++) {
             files[i].delete();
+        }
         f.delete();
     }
 
@@ -267,12 +253,12 @@ public class FileStorage implements Storage {
         if (documentExists(fn)) {
             /*DEBUG*/
             System.out.println(
-                "[DEBUG] Open task list: "
-                    + JN_DOCPATH
-                    + prj.getID()
-                    + File.separator
-                    + ".tasklist");
-            
+                    "[DEBUG] Open task list: "
+                            + JN_DOCPATH
+                            + prj.getID()
+                            + File.separator
+                            + ".tasklist");
+
             Document tasklistDoc = openDocument(fn);
             /*DocType tasklistDoctype = tasklistDoc.getDocType();
             String publicId = null;
@@ -284,9 +270,8 @@ public class FileStorage implements Storage {
                 // reload from new file
                 tasklistDoc = openDocument(fn);
             }*/
-            return new TaskListImpl(tasklistDoc, prj);   
-        }
-        else {
+            return new TaskListImpl(tasklistDoc, prj);
+        } else {
             /*DEBUG*/
             System.out.println("[DEBUG] New task list created for prj");
             return new TaskListImpl(prj);
@@ -296,25 +281,27 @@ public class FileStorage implements Storage {
     public void storeTaskList(TaskList tasklist, Project prj) {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Save task list: "
-                + JN_DOCPATH
-                + prj.getID()
-                + File.separator
-                + ".tasklist");
+                "[DEBUG] Save task list: "
+                        + JN_DOCPATH
+                        + prj.getID()
+                        + File.separator
+                        + ".tasklist");
         Document tasklistDoc = tasklist.getXmlContent();
         //tasklistDoc.setDocType(TaskListVersioning.getCurrentDocType());
-        saveDocument(tasklistDoc,JN_DOCPATH + prj.getID() + File.separator + ".tasklist");
+        saveDocument(tasklistDoc, JN_DOCPATH + prj.getID() + File.separator + ".tasklist");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#createProjectStorage(net.sf.memoranda.Project)
      */
     public void createProjectStorage(Project prj) {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Create project dir: " + JN_DOCPATH + prj.getID());
+                "[DEBUG] Create project dir: " + JN_DOCPATH + prj.getID());
         File dir = new File(JN_DOCPATH + prj.getID());
         dir.mkdirs();
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#openNoteList(net.sf.memoranda.Project)
      */
@@ -323,34 +310,35 @@ public class FileStorage implements Storage {
         if (documentExists(fn)) {
             /*DEBUG*/
             System.out.println(
-                "[DEBUG] Open note list: "
-                    + JN_DOCPATH
-                    + prj.getID()
-                    + File.separator
-                    + ".notes");
+                    "[DEBUG] Open note list: "
+                            + JN_DOCPATH
+                            + prj.getID()
+                            + File.separator
+                            + ".notes");
             return new NoteListImpl(openDocument(fn), prj);
-        }
-        else {
+        } else {
             /*DEBUG*/
             System.out.println("[DEBUG] New note list created");
             return new NoteListImpl(prj);
         }
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#storeNoteList(net.sf.memoranda.NoteList, net.sf.memoranda.Project)
      */
     public void storeNoteList(NoteList nl, Project prj) {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Save note list: "
-                + JN_DOCPATH
-                + prj.getID()
-                + File.separator
-                + ".notes");
+                "[DEBUG] Save note list: "
+                        + JN_DOCPATH
+                        + prj.getID()
+                        + File.separator
+                        + ".notes");
         saveDocument(
-            nl.getXMLContent(),
-            JN_DOCPATH + prj.getID() + File.separator + ".notes");
+                nl.getXMLContent(),
+                JN_DOCPATH + prj.getID() + File.separator + ".notes");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#openEventsList()
      */
@@ -361,18 +349,20 @@ public class FileStorage implements Storage {
         }
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Open events manager: " + JN_DOCPATH + ".events");
+                "[DEBUG] Open events manager: " + JN_DOCPATH + ".events");
         EventsManager._doc = openDocument(JN_DOCPATH + ".events");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#storeEventsList()
      */
     public void storeEventsManager() {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Save events manager: " + JN_DOCPATH + ".events");
+                "[DEBUG] Save events manager: " + JN_DOCPATH + ".events");
         saveDocument(EventsManager._doc, JN_DOCPATH + ".events");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#openMimeTypesList()
      */
@@ -380,32 +370,33 @@ public class FileStorage implements Storage {
         if (!new File(JN_DOCPATH + ".mimetypes").exists()) {
             try {
                 MimeTypesList._doc =
-                    openDocument(
-                        FileStorage.class.getResourceAsStream(
-                            "resources/default.mimetypes"));
-            }
-            catch (Exception e) {
+                        openDocument(
+                                FileStorage.class.getResourceAsStream(
+                                        "resources/default.mimetypes"));
+            } catch (Exception e) {
                 new ExceptionDialog(
-                    e,
-                    "Failed to read default mimetypes config from resources",
-                    "");
+                        e,
+                        "Failed to read default mimetypes config from resources",
+                        "");
             }
             return;
         }
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Open mimetypes list: " + JN_DOCPATH + ".mimetypes");
+                "[DEBUG] Open mimetypes list: " + JN_DOCPATH + ".mimetypes");
         MimeTypesList._doc = openDocument(JN_DOCPATH + ".mimetypes");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#storeMimeTypesList()
      */
     public void storeMimeTypesList() {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Save mimetypes list: " + JN_DOCPATH + ".mimetypes");
+                "[DEBUG] Save mimetypes list: " + JN_DOCPATH + ".mimetypes");
         saveDocument(MimeTypesList._doc, JN_DOCPATH + ".mimetypes");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#openResourcesList(net.sf.memoranda.Project)
      */
@@ -415,28 +406,29 @@ public class FileStorage implements Storage {
             /*DEBUG*/
             System.out.println("[DEBUG] Open resources list: " + fn);
             return new ResourcesListImpl(openDocument(fn), prj);
-        }
-        else {
+        } else {
             /*DEBUG*/
             System.out.println("[DEBUG] New note list created");
             return new ResourcesListImpl(prj);
         }
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#storeResourcesList(net.sf.memoranda.ResourcesList, net.sf.memoranda.Project)
      */
     public void storeResourcesList(ResourcesList rl, Project prj) {
         /*DEBUG*/
         System.out.println(
-            "[DEBUG] Save resources list: "
-                + JN_DOCPATH
-                + prj.getID()
-                + File.separator
-                + ".resources");
+                "[DEBUG] Save resources list: "
+                        + JN_DOCPATH
+                        + prj.getID()
+                        + File.separator
+                        + ".resources");
         saveDocument(
-            rl.getXMLContent(),
-            JN_DOCPATH + prj.getID() + File.separator + ".resources");
+                rl.getXMLContent(),
+                JN_DOCPATH + prj.getID() + File.separator + ".resources");
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#restoreContext()
      */
@@ -444,14 +436,14 @@ public class FileStorage implements Storage {
         try {
             /*DEBUG*/
             System.out.println(
-                "[DEBUG] Open context: " + JN_DOCPATH + ".context");
+                    "[DEBUG] Open context: " + JN_DOCPATH + ".context");
             Context.context.load(new FileInputStream(JN_DOCPATH + ".context"));
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             /*DEBUG*/
             System.out.println("Context created.");
         }
     }
+
     /**
      * @see net.sf.memoranda.util.Storage#storeContext()
      */
@@ -459,14 +451,13 @@ public class FileStorage implements Storage {
         try {
             /*DEBUG*/
             System.out.println(
-                "[DEBUG] Save context: " + JN_DOCPATH + ".context");
+                    "[DEBUG] Save context: " + JN_DOCPATH + ".context");
             Context.context.save(new FileOutputStream(JN_DOCPATH + ".context"));
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(
-                ex,
-                "Failed to store context to " + JN_DOCPATH + ".context",
-                "");
+                    ex,
+                    "Failed to store context to " + JN_DOCPATH + ".context",
+                    "");
         }
     }
 
diff --git a/src/net/sf/memoranda/util/HTMLFileExport.java b/src/net/sf/memoranda/util/HTMLFileExport.java
index 04c278a..b693619 100755
--- a/src/net/sf/memoranda/util/HTMLFileExport.java
+++ b/src/net/sf/memoranda/util/HTMLFileExport.java
@@ -2,34 +2,33 @@
  * HTMLFileExport.java
  * Created on 25.02.2003, 17:59:14 Alex
  * Package: net.sf.memoranda.util
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.io.*;
-import java.util.Date;
-import java.util.regex.Pattern;
-
-import javax.swing.text.Document;
-import javax.swing.text.html.HTMLDocument;
 
 import net.sf.memoranda.Note;
 import net.sf.memoranda.ui.ExceptionDialog;
 import net.sf.memoranda.ui.htmleditor.AltHTMLWriter;
-
-
 import org.apache.xml.serialize.Method;
 import org.apache.xml.serialize.OutputFormat;
 import org.apache.xml.serialize.XMLSerializer;
 import org.cyberneko.html.parsers.SAXParser;
 import org.xml.sax.InputSource;
+
+import javax.swing.text.Document;
+import javax.swing.text.html.HTMLDocument;
+import java.io.*;
+import java.util.Date;
+import java.util.regex.Pattern;
+
 /**
- * 
+ *
  */
 /*$Id: HTMLFileExport.java,v 1.7 2005/07/05 08:17:28 alexeya Exp $*/
 public class HTMLFileExport {
-    
+
     String charset = "";
     File f = null;
     HTMLDocument doc;
@@ -37,12 +36,13 @@ public class HTMLFileExport {
     boolean xhtml = false;
     boolean num = false;
     String templFile = null;
+
     /**
      * Constructor for HTMLFileExport.
      */
     public HTMLFileExport(File f, Document doc, Note note, String charset, boolean num, String templFile, boolean xhtml) {
         this.f = f;
-        this.doc = (HTMLDocument)doc;
+        this.doc = (HTMLDocument) doc;
         this.note = note;
         this.charset = charset;
         this.num = num;
@@ -50,89 +50,91 @@ public class HTMLFileExport {
         this.xhtml = xhtml;
         doExport();
     }
-    
+
     private void doExport() {
         try {
-                    //FileWriter fw = new FileWriter(f);
-                    Writer fw;
-                    
-					//Added to fix the file if there was no extention given
-					//jcscoobyrs 17-Nov-2003 at 09:08:55
-					//------------------------------------------------------
-					if(f.getName().indexOf(".htm") == -1)
-					{
-						String dir = f.getPath();
-						String ext = ".html";
-						//String ps = System.getProperty("file.separator");
-						String nfile = dir + ext;
-			
-						f = new File(nfile);                    	
-					}
-					//------------------------------------------------------
-					//End appendage
-                    
-                    if (charset != null)    
-                        fw = new OutputStreamWriter(new FileOutputStream(f), charset);
-                    else
-                        fw = new FileWriter(f);
-                    fw.write(applyTemplate());
-                    fw.flush();
-                    fw.close();                    
-                }
-                catch (Exception ex) {
-                    new ExceptionDialog(ex, "Cannot export file "+f.getPath(), null);
+            //FileWriter fw = new FileWriter(f);
+            Writer fw;
+
+            //Added to fix the file if there was no extention given
+            //jcscoobyrs 17-Nov-2003 at 09:08:55
+            //------------------------------------------------------
+            if (f.getName().indexOf(".htm") == -1) {
+                String dir = f.getPath();
+                String ext = ".html";
+                //String ps = System.getProperty("file.separator");
+                String nfile = dir + ext;
+
+                f = new File(nfile);
+            }
+            //------------------------------------------------------
+            //End appendage
+
+            if (charset != null) {
+                fw = new OutputStreamWriter(new FileOutputStream(f), charset);
+            } else {
+                fw = new FileWriter(f);
+            }
+            fw.write(applyTemplate());
+            fw.flush();
+            fw.close();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex, "Cannot export file " + f.getPath(), null);
+        }
+    }
+
+
+    private String getTemplateString(String templF) {
+        if ((templF != null) && (templF.length() > 0)) {
+            File f = new File(templF);
+            String text = "";
+            try {
+                BufferedReader fr = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
+                String s = fr.readLine();
+                while (s != null) {
+                    text = text + s;
+                    s = fr.readLine();
                 }
+                fr.close();
+            } catch (Exception ex) {
+                new ExceptionDialog(ex, "Cannot read template file from " + templF, null);
+            }
+            if (text.length() > 0) {
+                return text;
+            }
+        }
+        String t = (String) Configuration.get("DEFAULT_EXPORT_TEMPLATE");
+        if ((t != null) && (t.length() > 0)) {
+            return t;
         }
-	 
-     
-	 private String getTemplateString(String templF) {		
-	    if ((templF != null) && (templF.length() >0)) {
-    		File f = new File(templF);			
-			String text = "";	
-			try {
-				BufferedReader fr = new BufferedReader(new InputStreamReader(new FileInputStream(f)));		
-				String s = fr.readLine();
-				while (s != null) {				
-					text = text + s;
-					s = fr.readLine();
-				}
-				fr.close();
-			}
-			catch (Exception ex) {
-				new ExceptionDialog(ex, "Cannot read template file from "+templF, null);
-			}	
-			if (text.length() > 0)
-				return text;
-		}
-	    String t = (String)Configuration.get("DEFAULT_EXPORT_TEMPLATE");
-	    if ((t != null) && (t.length() > 0))
-	        return t;
-		return "<html>\n<head>\n@METACHARSET@\n<title>@TITLE@ - @PROJECT@</title>\n</head>\n<body>\n@CONTENT@\n</body>\n</html>";
-	 }
-     
-	 private String applyTemplate() {
-        String body = getNoteBody();        
-		String title = note != null? note.getTitle() : "";
-		String id = note != null? note.getId() : "";
-		String project = note != null? note.getProject().getTitle() : "";
-		String date = note != null? note.getDate().getFullDateString() : "";
-		String now = new Date().toString();
-		String templ = getTemplateString(templFile);
-		templ = templ.replaceAll("@CONTENT@", body);
-		templ = templ.replaceAll("@TITLE@", title);
-		templ = templ.replaceAll("@ID@", id);
-		templ = templ.replaceAll("@PROJECT@", project);
-		templ = templ.replaceAll("@DATE@", date);
-		templ = templ.replaceAll("@NOW@", now);
-		if ((charset != null) && (charset.length() >0))
-		    templ = templ.replaceAll("@METACHARSET@", "<meta http-equiv=\"Content-Type\" content=\"text/html; charset="
-                        + charset + "\" >");
-		if (xhtml)
-		    templ = convertToXHTML(templ);
-		return templ;
-     }
-     
-     private String getNoteBody() {
+        return "<html>\n<head>\n@METACHARSET@\n<title>@TITLE@ - @PROJECT@</title>\n</head>\n<body>\n@CONTENT@\n</body>\n</html>";
+    }
+
+    private String applyTemplate() {
+        String body = getNoteBody();
+        String title = note != null ? note.getTitle() : "";
+        String id = note != null ? note.getId() : "";
+        String project = note != null ? note.getProject().getTitle() : "";
+        String date = note != null ? note.getDate().getFullDateString() : "";
+        String now = new Date().toString();
+        String templ = getTemplateString(templFile);
+        templ = templ.replaceAll("@CONTENT@", body);
+        templ = templ.replaceAll("@TITLE@", title);
+        templ = templ.replaceAll("@ID@", id);
+        templ = templ.replaceAll("@PROJECT@", project);
+        templ = templ.replaceAll("@DATE@", date);
+        templ = templ.replaceAll("@NOW@", now);
+        if ((charset != null) && (charset.length() > 0)) {
+            templ = templ.replaceAll("@METACHARSET@", "<meta http-equiv=\"Content-Type\" content=\"text/html; charset="
+                    + charset + "\" >");
+        }
+        if (xhtml) {
+            templ = convertToXHTML(templ);
+        }
+        return templ;
+    }
+
+    private String getNoteBody() {
         String text = "";
         StringWriter sw = new StringWriter();
         AltHTMLWriter writer = new AltHTMLWriter(sw, doc, charset, num);
@@ -140,8 +142,7 @@ public class HTMLFileExport {
             writer.write();
             sw.flush();
             sw.close();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
         text = sw.toString();
@@ -152,9 +153,9 @@ public class HTMLFileExport {
                 .compile("</body>", java.util.regex.Pattern.DOTALL
                         + java.util.regex.Pattern.CASE_INSENSITIVE).split(text)[0];
         return text;
-     }
-     
-     public static String convertToXHTML(String in) {       
+    }
+
+    public static String convertToXHTML(String in) {
         SAXParser parser = new SAXParser();
         InputSource source;
         OutputFormat outputFormat = new OutputFormat();
@@ -164,16 +165,15 @@ public class HTMLFileExport {
             outputFormat.setOmitDocumentType(true);
             outputFormat.setOmitXMLDeclaration(true);
             outputFormat.setMethod(Method.XHTML);
-            outputFormat.setIndenting(true);            
+            outputFormat.setIndenting(true);
             StringReader sr = new StringReader(in);
             StringWriter sw = new StringWriter();
             source = new InputSource(sr);
             parser.setContentHandler(new XMLSerializer(sw, outputFormat));
             parser.parse(source);
             return sw.toString();
-        }
-        catch (Exception ex) {
-           new ExceptionDialog(ex);
+        } catch (Exception ex) {
+            new ExceptionDialog(ex);
         }
         return null;
     }
diff --git a/src/net/sf/memoranda/util/HTMLFileImport.java b/src/net/sf/memoranda/util/HTMLFileImport.java
index 6bd1acd..69d4415 100755
--- a/src/net/sf/memoranda/util/HTMLFileImport.java
+++ b/src/net/sf/memoranda/util/HTMLFileImport.java
@@ -2,22 +2,23 @@
  * HTMLFileImport.java
  * Created on 16.03.2003, 14:34:48 Alex
  * Package: net.sf.memoranda.util
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
+
+import net.sf.memoranda.ui.ExceptionDialog;
+import net.sf.memoranda.ui.htmleditor.HTMLEditor;
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStreamReader;
 import java.util.regex.Pattern;
 
-import net.sf.memoranda.ui.ExceptionDialog;
-import net.sf.memoranda.ui.htmleditor.HTMLEditor;
-
 /**
- * 
+ *
  */
 /*$Id: HTMLFileImport.java,v 1.5 2005/07/05 08:17:28 alexeya Exp $*/
 public class HTMLFileImport {
@@ -36,19 +37,18 @@ public class HTMLFileImport {
                 text = text + line + "\n";
                 line = in.readLine();
             }
-            in.close();            
-        }
-        catch (Exception e) {
-            new ExceptionDialog(e, "Failed to import "+f.getPath(), "");
+            in.close();
+        } catch (Exception e) {
+            new ExceptionDialog(e, "Failed to import " + f.getPath(), "");
             return;
         }
         text = Pattern.compile("<body(.*?)>", java.util.regex.Pattern.DOTALL + java.util.regex.Pattern.CASE_INSENSITIVE)
-           .split(text)[1];
+                .split(text)[1];
         text = Pattern.compile("</body>", java.util.regex.Pattern.DOTALL + java.util.regex.Pattern.CASE_INSENSITIVE)
-            .split(text)[0];
+                .split(text)[0];
         //text = text.substring(p1, p2);
-        
-        editor.insertHTML(text, editor.editor.getCaretPosition());        
+
+        editor.insertHTML(text, editor.editor.getCaretPosition());
 
     }
 
diff --git a/src/net/sf/memoranda/util/LoadableProperties.java b/src/net/sf/memoranda/util/LoadableProperties.java
index 65732ad..cf5e047 100755
--- a/src/net/sf/memoranda/util/LoadableProperties.java
+++ b/src/net/sf/memoranda/util/LoadableProperties.java
@@ -1,15 +1,10 @@
 package net.sf.memoranda.util;
 
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.io.OutputStreamWriter;
+import java.io.*;
 import java.util.Enumeration;
 import java.util.Hashtable;
-import java.util.*;
+import java.util.Iterator;
+import java.util.TreeMap;
 
 /*$Id: LoadableProperties.java,v 1.4 2004/01/30 12:17:42 alexeya Exp $*/
 public class LoadableProperties extends Hashtable {
@@ -39,15 +34,15 @@ public class LoadableProperties extends Hashtable {
     }
 
     public void save(OutputStream outStream, boolean sorted) throws IOException {
-    	if (!sorted) {
-    		save(outStream);
-    		return;
-    	}
+        if (!sorted) {
+            save(outStream);
+            return;
+        }
         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, "UTF-8"));
         String aKey;
         Object aValue;
         TreeMap tm = new TreeMap(this);
-        for (Iterator i = tm.keySet().iterator(); i.hasNext();) {
+        for (Iterator i = tm.keySet().iterator(); i.hasNext(); ) {
             aKey = (String) i.next();
             aValue = get(aKey);
             out.write(aKey + " = " + aValue);
@@ -56,12 +51,12 @@ public class LoadableProperties extends Hashtable {
         out.flush();
         out.close();
     }
-    
+
     public void save(OutputStream outStream) throws IOException {
         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream, "UTF-8"));
         String aKey;
         Object aValue;
-        for (Enumeration e = keys(); e.hasMoreElements();) {
+        for (Enumeration e = keys(); e.hasMoreElements(); ) {
             aKey = (String) e.nextElement();
             aValue = get(aKey);
             out.write(aKey + " = " + aValue);
@@ -72,22 +67,21 @@ public class LoadableProperties extends Hashtable {
     }
 
     private boolean isValid(String str) {
-        if (str == null)
+        if (str == null) {
             return false;
+        }
         if (str.length() > 0) {
             if (str.startsWith("#") || str.startsWith("!")) {
                 return false;
             }
-        }
-        else {
+        } else {
             return false;
         }
 
         int index = str.indexOf("=");
         if (index > 0 && str.length() > index) {
             return true;
-        }
-        else {
+        } else {
             return false;
         }
     }
@@ -95,8 +89,7 @@ public class LoadableProperties extends Hashtable {
     private String getNextLine(BufferedReader br) {
         try {
             return br.readLine();
-        }
-        catch (Exception e) {
+        } catch (Exception e) {
             return null;
         }
 
diff --git a/src/net/sf/memoranda/util/Local.java b/src/net/sf/memoranda/util/Local.java
index 4eb14ba..5ce945c 100755
--- a/src/net/sf/memoranda/util/Local.java
+++ b/src/net/sf/memoranda/util/Local.java
@@ -1,17 +1,18 @@
 package net.sf.memoranda.util;
 
+import net.sf.memoranda.date.CalendarDate;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
 import java.text.DateFormat;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Hashtable;
 import java.util.Locale;
-import java.io.*;
-
-import net.sf.memoranda.date.CalendarDate;
 
 /**
  * Provides locale info
- *
  */
 /*$Id: Local.java,v 1.6 2004/10/11 08:48:21 alexeya Exp $*/
 public class Local {
@@ -21,56 +22,53 @@ public class Local {
     static boolean disabled = false;
 
     static {
-    	if (!Configuration.get("DISABLE_L10N").equals("yes")) {
-	    	String fn = "messages_"
-	                    + currentLocale.getLanguage()
-	                    + ".properties";
-	        if (Configuration.get("LOCALES_DIR") != "") {
-	        	System.out.print("Look "+fn+" at: "+Configuration.get("LOCALES_DIR")+" ");
-	        	try {
-	        		messages.load(new FileInputStream(
-	        			Configuration.get("LOCALES_DIR")+File.separator+fn));
-	        		System.out.println(" - found");
-	        	}
-	        	catch (IOException ex) {
-	        		// Do nothing ...
-	        		System.out.println(" - not found");
-	        		ex.printStackTrace();
-	        	}
-	        }
-	        if (messages.size() == 0) {
-		        try {
-		            messages.load(
-		                Local.class.getResourceAsStream(
-		                    "localmessages/"+fn));            
-		        }
-		        catch (Exception e) {
-		            // Do nothing ...
-		        }
-	        }
-    	}
-    	else {
-    		currentLocale = new Locale("en", "US");
-    		/*DEBUG*/
-    		System.out.println("* DEBUG: Locales are disabled");
-    	}       
-    	if (messages.size() == 0) 
-    		messages = null;
-    		
+        if (!Configuration.get("DISABLE_L10N").equals("yes")) {
+            String fn = "messages_"
+                    + currentLocale.getLanguage()
+                    + ".properties";
+            if (Configuration.get("LOCALES_DIR") != "") {
+                System.out.print("Look " + fn + " at: " + Configuration.get("LOCALES_DIR") + " ");
+                try {
+                    messages.load(new FileInputStream(
+                            Configuration.get("LOCALES_DIR") + File.separator + fn));
+                    System.out.println(" - found");
+                } catch (IOException ex) {
+                    // Do nothing ...
+                    System.out.println(" - not found");
+                    ex.printStackTrace();
+                }
+            }
+            if (messages.size() == 0) {
+                try {
+                    messages.load(
+                            Local.class.getResourceAsStream(
+                                    "localmessages/" + fn));
+                } catch (Exception e) {
+                    // Do nothing ...
+                }
+            }
+        } else {
+            currentLocale = new Locale("en", "US");
+            /*DEBUG*/
+            System.out.println("* DEBUG: Locales are disabled");
+        }
+        if (messages.size() == 0) {
+            messages = null;
+        }
+
         /*** DEBUG PURPOSES ***/
         System.out.println("Default locale: " + currentLocale.getDisplayName());
         if (messages != null) {
             System.out.println(
-                "Use local messages: messages_"
-                    + currentLocale.getLanguage()
-                    + ".properties");
-        }
-        else {
+                    "Use local messages: messages_"
+                            + currentLocale.getLanguage()
+                            + ".properties");
+        } else {
             System.out.println(
-                "* DEBUG: Locales are disabled or not found: messages_"
-                    + currentLocale.getLanguage()
-                    + ".properties");
-        }        
+                    "* DEBUG: Locales are disabled or not found: messages_"
+                            + currentLocale.getLanguage()
+                            + ".properties");
+        }
         /**********************/
     }
 
@@ -82,8 +80,7 @@ public class Local {
         return currentLocale;
     }
 
-    static String monthnames[] =
-        {
+    static String monthnames[] = {
             "January",
             "February",
             "March",
@@ -95,10 +92,12 @@ public class Local {
             "September",
             "October",
             "November",
-            "December" };
+            "December"
+    };
 
-    static String weekdaynames[] =
-        { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
+    static String weekdaynames[] = {
+            "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
+    };
 
     public static String getString(String key) {
         if ((messages == null) || (disabled)) {
@@ -107,8 +106,7 @@ public class Local {
         String msg = (String) messages.get(key.trim().toUpperCase());
         if ((msg != null) && (msg.length() > 0)) {
             return msg;
-        }
-        else {
+        } else {
             return key;
         }
     }
@@ -125,16 +123,17 @@ public class Local {
         String[] localwdnames = new String[7];
         String[] localnames = weekdaynames;
 
-        if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon"))
-            localnames =
-                new String[] {
+        if (Configuration.get("FIRST_DAY_OF_WEEK").equals("mon")) {
+            localnames = new String[]{
                     "Mon",
                     "Tue",
                     "Wed",
                     "Thu",
                     "Fri",
                     "Sat",
-                    "Sun" };
+                    "Sun"
+            };
+        }
 
         for (int i = 0; i < 7; i++) {
             localwdnames[i] = getString(localnames[i]);
@@ -154,6 +153,7 @@ public class Local {
         DateFormat dateFormat = DateFormat.getDateInstance(f, currentLocale);
         return dateFormat.format(d);
     }
+
     public static String getDateString(Calendar cal, int f) {
         /*@todo: Get date string format from locale*/
         /*String s =
@@ -185,7 +185,7 @@ public class Local {
 
     public static String getTimeString(Date d) {
         DateFormat dateFormat =
-            DateFormat.getTimeInstance(DateFormat.SHORT, currentLocale);
+                DateFormat.getTimeInstance(DateFormat.SHORT, currentLocale);
         return dateFormat.format(d);
     }
 
@@ -225,12 +225,10 @@ public class Local {
         if (s.indexOf(":") > 0) {
             h = s.substring(0, s.indexOf(":"));
             m = s.substring(s.indexOf(":") + 1);
-        }
-        else if (s.indexOf(":") == 0) {
+        } else if (s.indexOf(":") == 0) {
             h = "0";
             m = s;
-        }
-        else {
+        } else {
             h = s;
             m = "0";
         }
@@ -240,8 +238,7 @@ public class Local {
             if ((time[0] < 0) || (time[0] > 23)) {
                 time[0] = 0;
             }
-        }
-        catch (NumberFormatException nfe) {
+        } catch (NumberFormatException nfe) {
             return null;
         }
         try {
@@ -249,8 +246,7 @@ public class Local {
             if ((time[1] < 0) || (time[1] > 59)) {
                 time[1] = 0;
             }
-        }
-        catch (NumberFormatException nfe) {
+        } catch (NumberFormatException nfe) {
             return null;
         }
         return time;
diff --git a/src/net/sf/memoranda/util/MimeType.java b/src/net/sf/memoranda/util/MimeType.java
index 8a87327..c38bcc8 100755
--- a/src/net/sf/memoranda/util/MimeType.java
+++ b/src/net/sf/memoranda/util/MimeType.java
@@ -7,13 +7,14 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.util.Vector;
-
-import javax.swing.ImageIcon;
 
 import nu.xom.Attribute;
 import nu.xom.Element;
 import nu.xom.Elements;
+
+import javax.swing.*;
+import java.util.Vector;
+
 /**
  *
  */
@@ -27,9 +28,9 @@ public class MimeType {
     }
 
     public MimeType() {
-      _root = new Element("default-type");
-      _root.addAttribute(new Attribute("id", "__UNKNOWN"));
-      _root.addAttribute(new Attribute("label", "Unknown"));
+        _root = new Element("default-type");
+        _root.addAttribute(new Attribute("id", "__UNKNOWN"));
+        _root.addAttribute(new Attribute("label", "Unknown"));
     }
 
     public String getMimeTypeId() {
@@ -38,8 +39,9 @@ public class MimeType {
 
     public String getExtension() {
         Elements exts = _root.getChildElements("ext");
-        if (exts.size() > 0)
+        if (exts.size() > 0) {
             return exts.get(0).getValue();
+        }
         return null;
     }
 
@@ -47,8 +49,9 @@ public class MimeType {
         Vector v = new Vector();
         String[] ss = {};
         Elements exts = _root.getChildElements("ext");
-        for (int i = 0; i < exts.size(); i++)
+        for (int i = 0; i < exts.size(); i++) {
             v.add(exts.get(i).getValue());
+        }
         return (String[]) v.toArray(ss);
     }
 
@@ -59,35 +62,40 @@ public class MimeType {
     }
 
     public String getLabel() {
-        if ((_root.getAttribute("label") != null) && (_root.getAttribute("label").getValue().length() >0))
-          return _root.getAttribute("label").getValue();
-        else
-           return _root.getAttribute("id").getValue();
+        if ((_root.getAttribute("label") != null) && (_root.getAttribute("label").getValue().length() > 0)) {
+            return _root.getAttribute("label").getValue();
+        } else {
+            return _root.getAttribute("id").getValue();
+        }
     }
 
     public void setLabel(String label) {
-        if (_root.getAttribute("label") != null)
-         _root.getAttribute("label").setValue(label);
-        else
-        _root.addAttribute(new Attribute("label", label));
+        if (_root.getAttribute("label") != null) {
+            _root.getAttribute("label").setValue(label);
+        } else {
+            _root.addAttribute(new Attribute("label", label));
+        }
     }
 
     public String getAppId(String plafCode) {
         Elements apps = _root.getChildElements("app");
-        for (int i = 0; i < apps.size(); i++)
-            if (apps.get(i).getAttribute("platform").getValue().toLowerCase().equals(plafCode.toLowerCase()))
+        for (int i = 0; i < apps.size(); i++) {
+            if (apps.get(i).getAttribute("platform").getValue().toLowerCase().equals(plafCode.toLowerCase())) {
                 return apps.get(i).getAttribute("appId").getValue();
+            }
+        }
         return null;
     }
 
     public void setApp(String plafCode, String appId) {
         if (getAppId(plafCode) != null) {
             Elements apps = _root.getChildElements("app");
-            for (int i = 0; i < apps.size(); i++)
-                if (apps.get(i).getAttribute("platform").getValue().toLowerCase().equals(plafCode.toLowerCase()))
+            for (int i = 0; i < apps.size(); i++) {
+                if (apps.get(i).getAttribute("platform").getValue().toLowerCase().equals(plafCode.toLowerCase())) {
                     apps.get(i).getAttribute("appId").setValue(appId);
-        }
-        else {
+                }
+            }
+        } else {
             Element app = new Element("app");
             app.addAttribute(new Attribute("appId", appId));
             app.addAttribute(new Attribute("platform", plafCode));
@@ -105,50 +113,48 @@ public class MimeType {
     }
 
     public String getIconPath() {
-        if (_root.getAttribute("icon") != null)
-          return _root.getAttribute("icon").getValue();
-        else
-          return "";
+        if (_root.getAttribute("icon") != null) {
+            return _root.getAttribute("icon").getValue();
+        } else {
+            return "";
+        }
     }
 
     public void setIconPath(String path) {
-         if (_root.getAttribute("icon") != null)
-          _root.getAttribute("icon").setValue(path);
-        else
-        _root.addAttribute(new Attribute("icon", path));
+        if (_root.getAttribute("icon") != null) {
+            _root.getAttribute("icon").setValue(path);
+        } else {
+            _root.addAttribute(new Attribute("icon", path));
+        }
     }
 
     public ImageIcon getIcon() {
-       String ip = getIconPath();
-       ImageIcon icon = null;
-       if (ip.equals("")) {
-        ip = "resources/icons/mimetypes/"+getMimeTypeId()+".png";
-        try {
-          icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource(ip));
-        }
-        catch (Exception ex) {
-          ip = "resources/icons/mimetypes/"+getMimeTypeId().split("/")[0]+"/default.png";
-          try {
-            icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource(ip));
-          }
-          catch (Exception ex2) {
-            icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/default.png"));
-          }
-        }
-      }
-      else
-        try {
-            icon = new ImageIcon(ip);
-          }
-          catch (Exception ex) {
-          ip = "resources/icons/mimetypes/"+getMimeTypeId().split("/")[0]+"/default.png";
-          try {
-            icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource(ip));
-          }
-          catch (Exception ex2) {
-            icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/default.png"));
-          }
+        String ip = getIconPath();
+        ImageIcon icon = null;
+        if (ip.equals("")) {
+            ip = "resources/icons/mimetypes/" + getMimeTypeId() + ".png";
+            try {
+                icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource(ip));
+            } catch (Exception ex) {
+                ip = "resources/icons/mimetypes/" + getMimeTypeId().split("/")[0] + "/default.png";
+                try {
+                    icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource(ip));
+                } catch (Exception ex2) {
+                    icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/default.png"));
+                }
+            }
+        } else {
+            try {
+                icon = new ImageIcon(ip);
+            } catch (Exception ex) {
+                ip = "resources/icons/mimetypes/" + getMimeTypeId().split("/")[0] + "/default.png";
+                try {
+                    icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource(ip));
+                } catch (Exception ex2) {
+                    icon = new ImageIcon(net.sf.memoranda.ui.AppFrame.class.getResource("resources/icons/mimetypes/default.png"));
+                }
+            }
         }
-      return icon;
+        return icon;
     }
 }
diff --git a/src/net/sf/memoranda/util/MimeTypesList.java b/src/net/sf/memoranda/util/MimeTypesList.java
index ac7b2ea..596d405 100755
--- a/src/net/sf/memoranda/util/MimeTypesList.java
+++ b/src/net/sf/memoranda/util/MimeTypesList.java
@@ -7,12 +7,14 @@
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.util.Vector;
 
 import nu.xom.Attribute;
 import nu.xom.Document;
 import nu.xom.Element;
 import nu.xom.Elements;
+
+import java.util.Vector;
+
 /**
  *
  */
@@ -29,8 +31,9 @@ public class MimeTypesList {
     public static Vector getAllMimeTypes() {
         Vector v = new Vector();
         Elements els = _root.getChildElements("mime-type");
-        for (int i = 0; i < els.size(); i++)
+        for (int i = 0; i < els.size(); i++) {
             v.add(new MimeType(els.get(i)));
+        }
         return v;
     }
 
@@ -40,9 +43,11 @@ public class MimeTypesList {
 
     public static MimeType getMimeType(String mimeId) {
         Elements els = _root.getChildElements("mime-type");
-        for (int i = 0; i < els.size(); i++)
-            if (els.get(i).getAttribute("id").getValue().equals(mimeId))
+        for (int i = 0; i < els.size(); i++) {
+            if (els.get(i).getAttribute("id").getValue().equals(mimeId)) {
                 return new MimeType(els.get(i));
+            }
+        }
         return new MimeType();
     }
 
@@ -51,9 +56,11 @@ public class MimeTypesList {
         for (int i = 0; i < els.size(); i++) {
             Element el = els.get(i);
             Elements exts = el.getChildElements("ext");
-            for (int j = 0; j < exts.size(); j++)
-                if (exts.get(j).getValue().toLowerCase().equals(ext.toLowerCase()))
+            for (int j = 0; j < exts.size(); j++) {
+                if (exts.get(j).getValue().toLowerCase().equals(ext.toLowerCase())) {
                     return new MimeType(el);
+                }
+            }
         }
         return new MimeType();
     }
@@ -67,11 +74,12 @@ public class MimeTypesList {
 
     public static void removeMimeType(String mimeId) {
         Elements els = _root.getChildElements("mime-type");
-        for (int i = 0; i < els.size(); i++)
+        for (int i = 0; i < els.size(); i++) {
             if (els.get(i).getAttribute("id").getValue().equals(mimeId)) {
                 _root.removeChild(els.get(i));
                 return;
             }
+        }
     }
 
     public static AppList getAppList() {
@@ -81,8 +89,8 @@ public class MimeTypesList {
     public static String getExtension(String s) {
         String ext = null;
         int i = s.lastIndexOf('.');
-        if (i > 0 &&  i < s.length() - 1) {
-            ext = s.substring(i+1).toLowerCase();
+        if (i > 0 && i < s.length() - 1) {
+            ext = s.substring(i + 1).toLowerCase();
         }
         return ext;
     }
diff --git a/src/net/sf/memoranda/util/Pair.java b/src/net/sf/memoranda/util/Pair.java
index b80faa6..deedd37 100755
--- a/src/net/sf/memoranda/util/Pair.java
+++ b/src/net/sf/memoranda/util/Pair.java
@@ -1,26 +1,30 @@
 package net.sf.memoranda.util;
- 
- import nu.xom.Element;
- 
- public class Pair {
-   private Element element;
-   private int priority;
-   
-   public Pair(Element value, int priority){
-     setElement(value);
-     setPriority(priority);
-   }
-   public Element getElement() {
-     return element;
-   }
-   public void setElement(Element value) {
-     this.element = value;
-   }
-   public int getPriority() {
-     return priority;
-   }
-   public void setPriority(int priority) {
-     this.priority = priority;
-   }
- 
- }
\ No newline at end of file
+
+import nu.xom.Element;
+
+public class Pair {
+    private Element element;
+    private int priority;
+
+    public Pair(Element value, int priority) {
+        setElement(value);
+        setPriority(priority);
+    }
+
+    public Element getElement() {
+        return element;
+    }
+
+    public void setElement(Element value) {
+        this.element = value;
+    }
+
+    public int getPriority() {
+        return priority;
+    }
+
+    public void setPriority(int priority) {
+        this.priority = priority;
+    }
+
+}
\ No newline at end of file
diff --git a/src/net/sf/memoranda/util/PriorityQueue.java b/src/net/sf/memoranda/util/PriorityQueue.java
index f85c30c..7b81a2f 100755
--- a/src/net/sf/memoranda/util/PriorityQueue.java
+++ b/src/net/sf/memoranda/util/PriorityQueue.java
@@ -3,55 +3,56 @@ package net.sf.memoranda.util;
 import nu.xom.Element;
 
 public class PriorityQueue {
-        
-        /* Cola de Prioridad implementada con Estructura de Datos Heap,
-         * para ordenar las anotaciones por prioridad 
-         */
-        
-        private Pair[] a;
-        private int n;
-        
-        public PriorityQueue(int size){
-                a = new Pair[size+2];
-                n = 0;
+
+    /* Cola de Prioridad implementada con Estructura de Datos Heap,
+    * para ordenar las anotaciones por prioridad
+    */
+
+    private Pair[] a;
+    private int n;
+
+    public PriorityQueue(int size) {
+        a = new Pair[size + 2];
+        n = 0;
+    }
+
+    public void insertar(Pair x) {
+        ++n;
+        a[n] = x;
+        for (int j = n; j > 1 && a[j].getPriority() < a[j / 2].getPriority(); j /= 2) {
+            Pair t = a[j];
+            a[j] = a[j / 2];
+            a[j / 2] = t;
         }
-        public void insertar(Pair x){
-                ++n;
-                a[n]=x;
-                for(int j=n; j>1 && a[j].getPriority() < a[j/2].getPriority(); j/=2)
-                {
-                        Pair t = a[j];
-                        a[j] = a[j/2];
-                        a[j/2] = t;
+    }
+
+    public Element extraer() {
+        if (!this.Vacia()) {
+            Element m = a[1].getElement();
+            a[1] = a[n];
+            --n;
+            int j = 1;
+            while (2 * j <= n) {
+                int k = 2 * j;
+                if (k + 1 <= n && a[k + 1].getPriority() < a[k].getPriority()) {
+                    k = k + 1;
                 }
-        }
-        
-        public Element extraer(){
-                if(!this.Vacia()){
-                        Element m = a[1].getElement();  
-                        a[1] = a[n];
-                        --n;
-                        int j = 1;
-                        while(2*j<=n)
-                        {
-                                int k=2*j;
-                                if(k+1<=n && a[k+1].getPriority() < a[k].getPriority())
-                                        k=k+1;  
-                                if(a[j].getPriority() < a[k].getPriority())
-                                        break;
-                                Pair t = a[j]; 
-                                a[j] = a[k];
-                                a[k] = t;  
-                                j = k;
-                        }
-                        return m;
+                if (a[j].getPriority() < a[k].getPriority()) {
+                    break;
                 }
-                else 
-                        return null;
-        }
-        
-        public boolean Vacia(){
-                return n==0;
+                Pair t = a[j];
+                a[j] = a[k];
+                a[k] = t;
+                j = k;
+            }
+            return m;
+        } else {
+            return null;
         }
+    }
+
+    public boolean Vacia() {
+        return n == 0;
+    }
 
 }
\ No newline at end of file
diff --git a/src/net/sf/memoranda/util/ProjectExporter.java b/src/net/sf/memoranda/util/ProjectExporter.java
index c3bf0c1..a819cdc 100755
--- a/src/net/sf/memoranda/util/ProjectExporter.java
+++ b/src/net/sf/memoranda/util/ProjectExporter.java
@@ -4,20 +4,24 @@
  */
 package net.sf.memoranda.util;
 
-import net.sf.memoranda.*;
+import net.sf.memoranda.Note;
+import net.sf.memoranda.NoteList;
+import net.sf.memoranda.Project;
 import net.sf.memoranda.date.CalendarDate;
-import net.sf.memoranda.ui.*;
+import net.sf.memoranda.ui.App;
+import net.sf.memoranda.ui.ExceptionDialog;
 import net.sf.memoranda.ui.htmleditor.AltHTMLWriter;
 
+import javax.swing.text.html.HTMLDocument;
 import java.io.*;
-import java.util.*;
-import java.util.regex.Pattern;
 import java.util.Collections;
-
-import javax.swing.text.html.HTMLDocument;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.Vector;
+import java.util.regex.Pattern;
 
 /**
- *  
+ *
  */
 /* $Id: ProjectExporter.java,v 1.7 2005/07/05 08:17:28 alexeya Exp $ */
 public class ProjectExporter {
@@ -30,12 +34,12 @@ public class ProjectExporter {
     static String _charset = null;
     static boolean _titlesAsHeaders = false;
     static boolean _navigation = false;
-    
+
     static String charsetString = "\n";
 
     public static void export(Project prj, File f, String charset,
-            boolean xhtml, boolean chunked, boolean navigation, boolean num,
-            boolean titlesAsHeaders, boolean copyImages) {
+                              boolean xhtml, boolean chunked, boolean navigation, boolean num,
+                              boolean titlesAsHeaders, boolean copyImages) {
 
         _num = num;
         _chunked = chunked;
@@ -44,10 +48,11 @@ public class ProjectExporter {
         _titlesAsHeaders = titlesAsHeaders;
         _copyImages = copyImages;
         _navigation = navigation;
-        if (f.isDirectory())
+        if (f.isDirectory()) {
             output = new File(f.getPath() + "/index.html");
-        else
+        } else {
             output = f;
+        }
         NoteList nl = CurrentStorage.get().openNoteList(prj);
         Vector notes = (Vector) nl.getAllNotes();
         //NotesVectorSorter.sort(notes);
@@ -62,18 +67,17 @@ public class ProjectExporter {
             String nfile = dir + ext;
 
             output = new File(nfile);
-        }        
+        }
         try {
             if (charset != null) {
                 fw = new OutputStreamWriter(new FileOutputStream(output),
                         charset);
                 charsetString = "<meta http-equiv=\"Content-Type\" content=\"text/html; charset="
                         + charset + "\" />";
-            }
-            else
+            } else {
                 fw = new FileWriter(output);
-        }
-        catch (Exception ex) {
+            }
+        } catch (Exception ex) {
             new ExceptionDialog(ex, "Failed to write to " + output, "");
             return;
         }
@@ -89,8 +93,7 @@ public class ProjectExporter {
         try {
             fw.flush();
             fw.close();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex, "Failed to write to " + output, "");
         }
     }
@@ -102,10 +105,11 @@ public class ProjectExporter {
             String link = "";
             CalendarDate d = note.getDate();
             String id = note.getId();
-            if (!_chunked)
+            if (!_chunked) {
                 link = "#" + id;
-            else
+            } else {
                 link = id + ".html";
+            }
             write(w, "<li><a href=\"" + link + "\">"
                     + note.getDate().getMediumDateString() + " "
                     + note.getTitle() + "</a></li>\n");
@@ -123,13 +127,13 @@ public class ProjectExporter {
             writer.write();
             sw.flush();
             sw.close();
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex);
         }
         text = sw.toString();
-        if (_xhtml)
+        if (_xhtml) {
             text = HTMLFileExport.convertToXHTML(text);
+        }
         text = Pattern
                 .compile("<body(.*?)>", java.util.regex.Pattern.DOTALL
                         + java.util.regex.Pattern.CASE_INSENSITIVE).split(text)[1];
@@ -145,35 +149,36 @@ public class ProjectExporter {
                  */
         text = "<div class=\"note\">" + text + "</div>";
 
-        if (_titlesAsHeaders)
-                        text = "\n\n<div class=\"date\">"
+        if (_titlesAsHeaders) {
+            text = "\n\n<div class=\"date\">"
                     + note.getDate().getFullDateString()
                     + ":</div>\n<h1 class=\"title\">" + note.getTitle()
                     + "</h1>\n" + text;
+        }
         return text;
     }
 
     private static String generateNav(Note prev, Note next) {
         String s = "<hr></hr><div class=\"navigation\"><table border=\"0\" width=\"100%\" cellpadding=\"2\"><tr><td width=\"33%\">";
-        if (prev != null)   
+        if (prev != null) {
             s += "<div class=\"navitem\"><a href=\"" + prev.getId() + ".html\">"
                     + Local.getString("Previous") + "</a><br></br>"
                     + prev.getDate().getMediumDateString() + " "
                     + prev.getTitle() + "</div>";
-        
-        else
+        } else {
             s += "&nbsp;";
-                s += "</td><td width=\"34%\" align=\"center\"><a href=\""
+        }
+        s += "</td><td width=\"34%\" align=\"center\"><a href=\""
                 + output.getName()
                 + "\">Up</a></td><td width=\"33%\" align=\"right\">";
-        if (next != null) 
+        if (next != null) {
             s += "<div class=\"navitem\"><a href=\"" + next.getId() + ".html\">"
                     + Local.getString("Next") + "</a><br></br>"
                     + next.getDate().getMediumDateString() + " "
                     + next.getTitle() + "</div>";
-        
-        else
+        } else {
             s += "&nbsp;";
+        }
         s += "</td></tr></table></div>\n";
         return s;
     }
@@ -189,41 +194,42 @@ public class ProjectExporter {
                         + ".html");
                 Writer fw = null;
                 try {
-                    if (_charset != null)
+                    if (_charset != null) {
                         fw = new OutputStreamWriter(new FileOutputStream(f),
                                 _charset);
-                    else
+                    } else {
                         fw = new FileWriter(f);
-                    String s = "<html>\n<head>\n"+charsetString+"<title>" + note.getTitle()
+                    }
+                    String s = "<html>\n<head>\n" + charsetString + "<title>" + note.getTitle()
                             + "</title>\n</head>\n<body>\n" + getNoteHTML(note);
                     if (_navigation) {
                         Note nprev = null;
-                        if (i > 0)
+                        if (i > 0) {
                             nprev = (Note) n[i - 1];
+                        }
                         Note nnext = null;
-                        if (i < n.length - 1)
+                        if (i < n.length - 1) {
                             nnext = (Note) n[i + 1];
+                        }
                         s += generateNav(nprev, nnext);
                     }
                     s += "\n</body>\n</html>";
                     fw.write(s);
                     fw.flush();
                     fw.close();
-                }
-                catch (Exception ex) {
+                } catch (Exception ex) {
                     new ExceptionDialog(ex, "Failed to write to " + output, "");
                 }
+            } else {
+                write(w, "<a name=\"" + note.getId() + "\">" + getNoteHTML(note) + "</a>\n");
             }
-            else
-                                write(w, "<a name=\"" + note.getId() + "\">" + getNoteHTML(note) + "</a>\n");
         }
     }
 
     private static void write(Writer w, String s) {
         try {
             w.write(s);
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex, "Failed to write to " + output, "");
         }
     }
diff --git a/src/net/sf/memoranda/util/ProjectPackager.java b/src/net/sf/memoranda/util/ProjectPackager.java
index 378738d..f55addb 100755
--- a/src/net/sf/memoranda/util/ProjectPackager.java
+++ b/src/net/sf/memoranda/util/ProjectPackager.java
@@ -2,32 +2,27 @@
  * ProjectPackager.java
  * Created on 16.03.2003, 18:41:29 Alex
  * Package: net.sf.memoranda.util
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.io.BufferedReader;
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.util.Enumeration;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-import java.util.zip.ZipOutputStream;
-
-import javax.swing.JOptionPane;
 
 import net.sf.memoranda.Project;
 import net.sf.memoranda.ProjectManager;
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.ui.App;
 import net.sf.memoranda.ui.ExceptionDialog;
+
+import javax.swing.*;
+import java.io.*;
+import java.util.Enumeration;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+import java.util.zip.ZipOutputStream;
+
 /**
- * 
+ *
  */
 /*$Id: ProjectPackager.java,v 1.10 2007/03/20 06:21:46 alexeya Exp $*/
 public class ProjectPackager {
@@ -37,33 +32,32 @@ public class ProjectPackager {
         //.memoranda so the pack feature would work.  (jcscoobyrs) on 17-Nov-2003
         //at 14:57:06 PM
     Changed to: */
-    private static String JN_DOCPATH = Util.getEnvDir(); 
+    private static String JN_DOCPATH = Util.getEnvDir();
     // for compatibility with previous installations (jnotes2) [alexeyA]
 
     public static void pack(Project prj, File zipfile) {
         ZipOutputStream zip = null;
-        
-        if(zipfile.getName().indexOf(".zip") == -1)
-        {
+
+        if (zipfile.getName().indexOf(".zip") == -1) {
             zipfile = new File(zipfile.getPath() + ".zip");
         }
-        
+
         try {
             zip = new ZipOutputStream(new FileOutputStream(zipfile));
             File prDir = new File(JN_DOCPATH + prj.getID());
-            
+
             PackDirectory(prDir.getPath(), prDir, zip);
             zip.putNextEntry(new ZipEntry("__PROJECT_INFO__"));
             String prInfo = prj.getID() + "\n" + prj.getTitle() + "\n" + prj.getStartDate().toString() + "\n";
-            if (prj.getEndDate() != null)
+            if (prj.getEndDate() != null) {
                 prInfo += prj.getEndDate().toString();
+            }
             zip.write(prInfo.getBytes("UTF-8"));
             zip.closeEntry();
-            
+
             zip.close();
-        }
-        catch (Exception ex) {
-            new ExceptionDialog(ex, "Failed to write to "+zipfile, "");
+        } catch (Exception ex) {
+            new ExceptionDialog(ex, "Failed to write to " + zipfile, "");
         }
     }
 
@@ -79,95 +73,91 @@ public class ProjectPackager {
             in.close();
             if (ProjectManager.getProject(pId) != null) {
                 int n =
-                    JOptionPane.showConfirmDialog(
-                        App.getFrame(),
-                        Local.getString("This project is already exists and will be replaced.\nContinue?"),
-                        Local.getString("Project is already exists"),
-                        JOptionPane.YES_NO_OPTION);
+                        JOptionPane.showConfirmDialog(
+                                App.getFrame(),
+                                Local.getString("This project is already exists and will be replaced.\nContinue?"),
+                                Local.getString("Project is already exists"),
+                                JOptionPane.YES_NO_OPTION);
                 if (n != JOptionPane.YES_OPTION) {
                     zip.close();
                     return;
-                }	
+                }
                 ProjectManager.removeProject(pId);
             }
             Project prj = ProjectManager.createProject(pId, pTitle, new CalendarDate(pStartD), null);
-            if (pEndD != null)
+            if (pEndD != null) {
                 prj.setEndDate(new CalendarDate(pEndD));
+            }
             //File prDir = new File(JN_DOCPATH + prj.getID());
-            Enumeration files;           
-            for (files = zip.entries(); files.hasMoreElements();){
-                ZipEntry ze = (ZipEntry)files.nextElement();
-                if ( ze.isDirectory() )
-                {
-                   File theDirectory = new File (JN_DOCPATH + prj.getID()+ "/" + ze.getName() );
-                   // create this directory (including any necessary parent directories)
-                   theDirectory.mkdirs();
-                   theDirectory = null;
+            Enumeration files;
+            for (files = zip.entries(); files.hasMoreElements(); ) {
+                ZipEntry ze = (ZipEntry) files.nextElement();
+                if (ze.isDirectory()) {
+                    File theDirectory = new File(JN_DOCPATH + prj.getID() + "/" + ze.getName());
+                    // create this directory (including any necessary parent directories)
+                    theDirectory.mkdirs();
+                    theDirectory = null;
                 }
                 if ((!ze.getName().equals("__PROJECT_INFO__")) && (!ze.isDirectory())) {
-                    FileOutputStream out = new FileOutputStream(JN_DOCPATH + prj.getID() +"/"+ ze.getName());
+                    FileOutputStream out = new FileOutputStream(JN_DOCPATH + prj.getID() + "/" + ze.getName());
                     InputStream inp = zip.getInputStream(ze);
-                    
+
                     byte[] buffer = new byte[1024];
                     int len;
 
-                    while((len = inp.read(buffer)) >= 0)
-                      out.write(buffer, 0, len);
+                    while ((len = inp.read(buffer)) >= 0) {
+                        out.write(buffer, 0, len);
+                    }
 
                     inp.close();
                     out.close();
-                    
+
                 }
             }
             zip.close();
-            CurrentStorage.get().storeProjectManager();             
-        }
-        catch (Exception ex) {
-            new ExceptionDialog(ex, "Failed to read from "+zipfile, "Make sure that this file is a Memoranda project archive.");
+            CurrentStorage.get().storeProjectManager();
+        } catch (Exception ex) {
+            new ExceptionDialog(ex, "Failed to read from " + zipfile, "Make sure that this file is a Memoranda project archive.");
         }
     }
-    
-    
+
+
     /**
      * Packs all files in the given directory into the given ZIP stream.
      * Also recurses down into subdirectories.
      */
-    public static void PackDirectory( String startingDirectory,
-                                    File theDirectory,
-                                    ZipOutputStream theZIPStream )
-    throws java.io.IOException
-    {
-       File[] theFiles = theDirectory.listFiles();
-       File stDirectory = new File(startingDirectory);
-       System.out.println("Path="+stDirectory.getPath()+";length="+stDirectory.getPath().length() + "==>"+theFiles[0]);
-       int j = stDirectory.getPath().length();
-       for ( int i=0 ; i<theFiles.length ; i++ )
-       {
-          String sRelPath = theFiles[i].getPath().substring(j);
-          if ( theFiles[i].isDirectory() )
-          {
-             // create a directory entry.
-             // directory entries must be terminated by a slash!
-             ZipEntry theEntry = new ZipEntry("."+sRelPath+"/" );
-             theZIPStream.putNextEntry(theEntry);
-             theZIPStream.closeEntry();
-
-             // recurse down
-             PackDirectory( startingDirectory, theFiles[i], theZIPStream );
-          }
-          else // regular file
-          { 
-            File f = theFiles[i];
-            ZipEntry ze = new ZipEntry("."+sRelPath);
-            FileInputStream in = new FileInputStream(f);
-            byte[] data = new byte[(int) f.length()];
-            in.read(data);
-            in.close();
-            theZIPStream.putNextEntry(ze);
-            theZIPStream.write(data);
-            theZIPStream.closeEntry();           
-          }
-       }
+    public static void PackDirectory(String startingDirectory,
+                                     File theDirectory,
+                                     ZipOutputStream theZIPStream)
+            throws java.io.IOException {
+        File[] theFiles = theDirectory.listFiles();
+        File stDirectory = new File(startingDirectory);
+        System.out.println("Path=" + stDirectory.getPath() + ";length=" + stDirectory.getPath().length() + "==>" + theFiles[0]);
+        int j = stDirectory.getPath().length();
+        for (int i = 0; i < theFiles.length; i++) {
+            String sRelPath = theFiles[i].getPath().substring(j);
+            if (theFiles[i].isDirectory()) {
+                // create a directory entry.
+                // directory entries must be terminated by a slash!
+                ZipEntry theEntry = new ZipEntry("." + sRelPath + "/");
+                theZIPStream.putNextEntry(theEntry);
+                theZIPStream.closeEntry();
+
+                // recurse down
+                PackDirectory(startingDirectory, theFiles[i], theZIPStream);
+
+            } else { // regular file
+                File f = theFiles[i];
+                ZipEntry ze = new ZipEntry("." + sRelPath);
+                FileInputStream in = new FileInputStream(f);
+                byte[] data = new byte[(int) f.length()];
+                in.read(data);
+                in.close();
+                theZIPStream.putNextEntry(ze);
+                theZIPStream.write(data);
+                theZIPStream.closeEntry();
+            }
+        }
     }
 
 }
diff --git a/src/net/sf/memoranda/util/RTFFileExport.java b/src/net/sf/memoranda/util/RTFFileExport.java
index 4ef6c21..c1a5c42 100755
--- a/src/net/sf/memoranda/util/RTFFileExport.java
+++ b/src/net/sf/memoranda/util/RTFFileExport.java
@@ -2,19 +2,20 @@
  * RTFFileExport.java
  * Created on 25.02.2003, 17:55:08 Alex
  * Package: net.sf.memoranda.ui
- * 
+ *
  * @author Alex V. Alishevskikh, alex@openmechanics.net
  * Copyright (c) 2003 Memoranda Team. http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.io.File;
-import java.io.FileOutputStream;
 
 import javax.swing.text.DefaultStyledDocument;
 import javax.swing.text.Document;
 import javax.swing.text.rtf.RTFEditorKit;
+import java.io.File;
+import java.io.FileOutputStream;
+
 /**
- * 
+ *
  */
 /*$Id: RTFFileExport.java,v 1.3 2004/01/30 12:17:42 alexeya Exp $*/
 public class RTFFileExport {
@@ -23,11 +24,10 @@ public class RTFFileExport {
      * Constructor for RTFFileExport.
      */
     public RTFFileExport(File f, Document doc) {
-        RTFEditorKit kit = new RTFEditorKit();        
-        try {            
-            kit.write(new FileOutputStream(f), (DefaultStyledDocument)doc, 0, doc.getLength());
-        }
-        catch (Exception ex) {
+        RTFEditorKit kit = new RTFEditorKit();
+        try {
+            kit.write(new FileOutputStream(f), (DefaultStyledDocument) doc, 0, doc.getLength());
+        } catch (Exception ex) {
             ex.printStackTrace();
         }
     }
diff --git a/src/net/sf/memoranda/util/TaskListVersioning.java b/src/net/sf/memoranda/util/TaskListVersioning.java
index c991307..f14d811 100755
--- a/src/net/sf/memoranda/util/TaskListVersioning.java
+++ b/src/net/sf/memoranda/util/TaskListVersioning.java
@@ -4,38 +4,34 @@
  */
 package net.sf.memoranda.util;
 
+import net.sf.memoranda.Project;
+import net.sf.memoranda.ProjectManager;
+import nu.xom.*;
+
 import java.io.File;
 import java.util.Iterator;
 import java.util.Vector;
 
-import net.sf.memoranda.Project;
-import net.sf.memoranda.ProjectManager;
-import nu.xom.Attribute;
-import nu.xom.DocType;
-import nu.xom.Document;
-import nu.xom.Element;
-import nu.xom.Elements;
-
 /**
  * @author ryanho
- *
- * Upgrades data files from older versions to new versions
+ *         <p>
+ *         Upgrades data files from older versions to new versions
  */
 public class TaskListVersioning {
-    
+
     public static final String[] VERSIONS = new String[]{
             "-//Memoranda//DTD Tasklist 1.0//EN",
             "-//Memoranda//DTD Tasklist 1.1d1//EN"
     };
 
     public static DocType getCurrentDocType() {
-        return new DocType("tasklist",TaskListVersioning.getCurrentVersionPublicId(),"tasklist.dtd");
+        return new DocType("tasklist", TaskListVersioning.getCurrentVersionPublicId(), "tasklist.dtd");
     }
-    
+
     public static String getCurrentVersionPublicId() {
         return VERSIONS[VERSIONS.length - 1];
     }
-        
+
     public static int getIndexOfVersion(String publicId) {
         if (publicId == null) {
             // earlier versions do not have public ID, it is version 1.0 which is the first entry
@@ -49,82 +45,80 @@ public class TaskListVersioning {
         Util.debug("Version " + publicId + " not found");
         return -1;
     }
-    
+
     public static boolean upgradeTaskList(String publicId) {
         int vid = getIndexOfVersion(publicId);
-        
+
         if (vid == (VERSIONS.length - 1)) {
             Util.debug("Version " + publicId + " is the latest version, skipping upgrade");
             return false;
-        }
-        else {
+        } else {
             // get all projects
             Vector projects = ProjectManager.getAllProjects();
             String[] projectIds = new String[projects.size()];
             int c = 0;
-            for (Iterator iter = projects.iterator(); iter.hasNext();) {
+            for (Iterator iter = projects.iterator(); iter.hasNext(); ) {
                 Project prj = (Project) iter.next();
                 projectIds[c++] = prj.getID();
             }
-            
+
             // keep upgrading until it's the current version
             while (vid < (VERSIONS.length - 1)) {
-                if(vid == 0) {
+                if (vid == 0) {
                     upgrade1_1d1(projectIds);
-                }            
+                }
                 vid++;
             }
             return true;
         }
     }
-    
+
     private static void upgrade1_1d1(String[] projectIds) {
         for (int i = 0; i < projectIds.length; i++) {
             Util.debug("Upgrading project " + projectIds[i] + " from version 1.0 to version 1.1d1");
-        
+
             String filePath = FileStorage.JN_DOCPATH + projectIds[i] + File.separator + ".tasklist";
             Document doc = FileStorage.openDocument(filePath);
-                        
+
             Element root = doc.getRootElement();
             Elements tasks = root.getChildElements("task");
-                        
-            for (int j = 0; j < tasks.size(); j++) {                                
-                Element task = tasks.get(j );
-
-//	Decided not to change the date format after all but I'm leaving this code here 
-//	in case we need it later. Ryan
-//                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
-//
-//                Attribute startDateAttr = task.getAttribute("startDate");
-//                Date startDate = (new CalendarDate(startDateAttr.getValue(),"/")).getDate();
-//                startDateAttr.setValue(sdf.format(startDate));
-//
-//                Attribute endDateAttr = task.getAttribute("endDate");
-//                if (endDateAttr != null) {
-//                    Date endDate = (new CalendarDate(endDateAttr.getValue(),"/")).getDate();
-//                    endDateAttr.setValue(sdf.format(endDate));                    
-//                }
-                
+
+            for (int j = 0; j < tasks.size(); j++) {
+                Element task = tasks.get(j);
+
+                //  Decided not to change the date format after all but I'm leaving this code here
+                //	in case we need it later. Ryan
+                //                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
+                //
+                //                Attribute startDateAttr = task.getAttribute("startDate");
+                //                Date startDate = (new CalendarDate(startDateAttr.getValue(),"/")).getDate();
+                //                startDateAttr.setValue(sdf.format(startDate));
+                //
+                //                Attribute endDateAttr = task.getAttribute("endDate");
+                //                if (endDateAttr != null) {
+                //                    Date endDate = (new CalendarDate(endDateAttr.getValue(),"/")).getDate();
+                //                    endDateAttr.setValue(sdf.format(endDate));
+                //                }
+
                 Attribute parentAttr = task.getAttribute("parent");
-            	if ((parentAttr == null) || (parentAttr.getValue() == "")) {
-            		// no parent, do nothing here
-            	}
-            	else {
-                	// put the task under the parent task
+                if ((parentAttr == null) || (parentAttr.getValue() == "")) {
+                    // no parent, do nothing here
+                } else {
+                    // put the task under the parent task
                     String parentId = parentAttr.getValue();
                     for (int k = 0; k < tasks.size(); k++) {
                         Element potentialParent = tasks.get(k);
-                        if(parentId.equals(potentialParent.getAttribute("id").getValue())) {
+                        if (parentId.equals(potentialParent.getAttribute("id").getValue())) {
                             // found parent, put self under it
                             task.removeAttribute(parentAttr);
                             task.detach();
-                            potentialParent.appendChild(task);                            
+                            potentialParent.appendChild(task);
                         }
                     }
-            	}            	
+                }
             }
             doc.setDocType(getCurrentDocType());
-            FileStorage.saveDocument(doc,filePath);
-        }        
+            FileStorage.saveDocument(doc, filePath);
+        }
     }
 }
diff --git a/src/net/sf/memoranda/util/Util.java b/src/net/sf/memoranda/util/Util.java
index 85772b8..0633ed7 100755
--- a/src/net/sf/memoranda/util/Util.java
+++ b/src/net/sf/memoranda/util/Util.java
@@ -7,22 +7,18 @@
  * Copyright (c) 2003 Memoranda team: http://memoranda.sf.net
  */
 package net.sf.memoranda.util;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.io.File;
-import java.io.IOException;
-import java.util.Calendar;
-import java.util.HashSet;
-import java.util.Set;
-import java.util.Iterator;
-
-import javax.swing.JFileChooser;
 
 import net.sf.memoranda.date.CalendarDate;
 import net.sf.memoranda.ui.App;
 import net.sf.memoranda.ui.AppFrame;
 import net.sf.memoranda.ui.ExceptionDialog;
-import java.util.Random;
+
+import javax.swing.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.io.File;
+import java.io.IOException;
+import java.util.*;
 
 /**
  *
@@ -30,27 +26,28 @@ import java.util.Random;
 /*$Id: Util.java,v 1.13 2007/03/20 08:22:41 alexeya Exp $*/
 public class Util {
 
-	static long seed = 0;
-	
+    static long seed = 0;
+
     public static String generateId() {
         long seed1 = System.currentTimeMillis();
-        while (seed1 == seed) 
-        	seed1 = System.currentTimeMillis(); // Make sure we'll don't get the same seed twice		  
-    	seed = seed1;        	
-    	Random r = new Random(seed); 
-    	return Integer.toString(r.nextInt(), 16) +
-				"-"+Integer.toString(r.nextInt(65535), 16) +
-				"-"+Integer.toString(r.nextInt(65535), 16) +
-				"-"+Integer.toString(r.nextInt(65535), 16);
-                    
+        while (seed1 == seed) {
+            seed1 = System.currentTimeMillis(); // Make sure we'll don't get the same seed twice
+        }
+        seed = seed1;
+        Random r = new Random(seed);
+        return Integer.toString(r.nextInt(), 16) +
+                "-" + Integer.toString(r.nextInt(65535), 16) +
+                "-" + Integer.toString(r.nextInt(65535), 16) +
+                "-" + Integer.toString(r.nextInt(65535), 16);
+
     }
 
     public static String getDateStamp(Calendar cal) {
         return cal.get(Calendar.DAY_OF_MONTH)
-            + "/"
-            + (cal.get(Calendar.MONTH))
-            + "/"
-            + new Integer(cal.get(Calendar.YEAR)).toString();
+                + "/"
+                + (cal.get(Calendar.MONTH))
+                + "/"
+                + new Integer(cal.get(Calendar.YEAR)).toString();
 
     }
 
@@ -80,41 +77,45 @@ public class Util {
     }
 
     public static String getEnvDir() {
-    	// Changed static building of getEnvDir
-    	// Now system-related path-separator is used
-		String p = System.getProperty("user.home") + File.separator 
-			+ ".jnotes2" + File.separator;
-        if (new File(p).isDirectory()) return p;
-        return System.getProperty("user.home") + File.separator 
-        	+ ".memoranda" + File.separator;
+        // Changed static building of getEnvDir
+        // Now system-related path-separator is used
+        String p = System.getProperty("user.home") + File.separator
+                + ".jnotes2" + File.separator;
+        if (new File(p).isDirectory()) {
+            return p;
+        }
+        return System.getProperty("user.home") + File.separator
+                + ".memoranda" + File.separator;
     }
 
     public static String getCDATA(String s) {
-      return "<![CDATA["+s+"]]>";
+        return "<![CDATA[" + s + "]]>";
     }
-    
+
     public static void runBrowser(String url) {
-        if (!checkBrowser())
+        if (!checkBrowser()) {
             return;
-        String commandLine = MimeTypesList.getAppList().getBrowserExec()+" "+url;
+        }
+        String commandLine = MimeTypesList.getAppList().getBrowserExec() + " " + url;
         System.out.println("Run: " + commandLine);
         try {
             /*DEBUG*/
             Runtime.getRuntime().exec(commandLine);
-        }
-        catch (Exception ex) {
+        } catch (Exception ex) {
             new ExceptionDialog(ex, "Failed to run an external web-browser application with commandline<br><code>"
-                    +commandLine+"</code>", "Check the application path and command line parameters " +
-                    		"(File-&gt;Preferences-&gt;Resource types).");
+                    + commandLine + "</code>", "Check the application path and command line parameters " +
+                    "(File-&gt;Preferences-&gt;Resource types).");
         }
     }
-    
+
     public static boolean checkBrowser() {
         AppList appList = MimeTypesList.getAppList();
         String bpath = appList.getBrowserExec();
-        if (bpath != null)
-            if (new File(bpath).isFile())
+        if (bpath != null) {
+            if (new File(bpath).isFile()) {
                 return true;
+            }
+        }
         JFileChooser chooser = new JFileChooser();
         chooser.setFileHidingEnabled(false);
         chooser.setDialogTitle(Local.getString("Select the web-browser executable"));
@@ -123,48 +124,50 @@ public class Util {
         /*java.io.File lastSel = (java.io.File) Context.get("LAST_SELECTED_RESOURCE_FILE");
         if (lastSel != null)
             chooser.setCurrentDirectory(lastSel);*/
-        if (chooser.showOpenDialog(App.getFrame()) != JFileChooser.APPROVE_OPTION)
+        if (chooser.showOpenDialog(App.getFrame()) != JFileChooser.APPROVE_OPTION) {
             return false;
+        }
         appList.setBrowserExec(chooser.getSelectedFile().getPath());
         CurrentStorage.get().storeMimeTypesList();
         return true;
     }
-    
+
     public static String getHoursFromMillis(long ms) {
-    	double numSeconds = (((double) ms) / 1000d);
-    	return String.valueOf(numSeconds / 3600);
+        double numSeconds = (((double) ms) / 1000d);
+        return String.valueOf(numSeconds / 3600);
     }
-    
+
     public static long getMillisFromHours(String hours) {
-    	try {
-        	double numHours = Double.parseDouble(hours);
-        	double millisDouble = (numHours * 3600 * 1000);
-        	return (long) millisDouble;
-    	}
-    	catch (NumberFormatException e) {
-    		return 0;
-    	}
+        try {
+            double numHours = Double.parseDouble(hours);
+            double millisDouble = (numHours * 3600 * 1000);
+            return (long) millisDouble;
+        } catch (NumberFormatException e) {
+            return 0;
+        }
     }
-    
+
     static Set tempFiles = new HashSet();
-    
+
     static {
-    	AppFrame.addExitListener(new ActionListener() {
+        AppFrame.addExitListener(new ActionListener() {
 
-			public void actionPerformed(ActionEvent arg0) {
-				for (Iterator i = tempFiles.iterator(); i.hasNext();) 
-					((File)i.next()).delete();				}
-			});
+            public void actionPerformed(ActionEvent arg0) {
+                for (Iterator i = tempFiles.iterator(); i.hasNext(); ) {
+                    ((File) i.next()).delete();
+                }
+            }
+        });
     }
-    
+
     public static File getTempFile() throws IOException {
-    	File f = File.createTempFile("tmp", ".html", null);
-    	tempFiles.add(f);
-    	return f;
+        File f = File.createTempFile("tmp", ".html", null);
+        tempFiles.add(f);
+        return f;
     }
-    
+
     public static void debug(String str) {
-    	System.out.println("[DEBUG] " + str);
+        System.out.println("[DEBUG] " + str);
     }
 
     /**
@@ -173,7 +176,7 @@ public class Util {
     public static void error(Exception e) {
         System.out.println("[ERROR] Exception: " + e.getClass().getName());
         System.out.println("[ERROR] Exception Message: " + e.getMessage());
-        
+
         String stackTrace = "";
         StackTraceElement[] ste = e.getStackTrace();
         for (int i = 0; i < ste.length; i++) {
